// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 104857600;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 16464;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__sub_I_tb_framework_cui_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,116,46,95,112,97,114,101,110,116,46,116,46,110,97,109,101,0,0,0,0,0,0,0,0,32,102,117,110,99,116,105,111,110,32,112,114,105,110,116,102,40,46,46,46,41,32,32,105,111,46,119,114,105,116,101,40,115,116,114,105,110,103,46,102,111,114,109,97,116,40,46,46,46,41,41,32,101,110,100,32,102,117,110,99,116,105,111,110,32,116,101,115,116,40,41,32,32,112,114,105,110,116,40,34,97,97,97,34,41,32,101,110,100,32,116,32,61,32,123,32,110,97,109,101,32,61,32,34,108,117,97,34,44,32,108,101,110,103,116,104,32,61,32,51,44,32,115,101,110,115,101,32,61,32,34,109,111,111,110,34,32,125,32,112,114,105,110,116,102,40,34,72,101,108,108,111,34,41,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,114,101,115,111,117,114,99,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,2,0,0,1,0,0,0,2,0,0,0,78,54,116,111,121,98,111,120,49,55,84,98,72,111,108,100,101,114,83,105,110,103,108,101,116,111,110,73,78,83,95,49,53,84,98,72,101,97,112,65,108,108,111,99,97,116,111,114,69,78,83,95,50,53,84,98,65,108,108,111,99,97,116,111,114,72,111,108,100,101,114,73,100,71,108,111,98,97,108,69,69,69,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,52,84,98,83,105,110,103,108,101,116,111,110,82,101,102,73,78,83,95,49,55,84,98,72,111,108,100,101,114,83,105,110,103,108,101,116,111,110,73,78,83,95,49,53,84,98,72,101,97,112,65,108,108,111,99,97,116,111,114,69,78,83,95,50,53,84,98,65,108,108,111,99,97,116,111,114,72,111,108,100,101,114,73,100,71,108,111,98,97,108,69,69,69,69,69,0,0,0,0,0,0,0,0,240,58,0,0,208,1,0,0,24,59,0,0,120,1,0,0,64,2,0,0,0,0,0,0,0,0,0,0,64,2,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,2,0,0,5,0,0,0,6,0,0,0,78,54,116,111,121,98,111,120,49,53,84,98,72,101,97,112,65,108,108,111,99,97,116,111,114,69,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,49,84,98,65,108,108,111,99,97,116,111,114,69,0,0,240,58,0,0,160,2,0,0,24,59,0,0,128,2,0,0,184,2,0,0,0,0,0,0,0,0,0,0,24,3,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,52,84,98,83,105,110,103,108,101,116,111,110,82,101,102,73,78,83,95,49,50,84,98,83,116,97,99,107,84,114,97,99,101,69,69,69,0,0,0,240,58,0,0,232,2,0,0,0,0,0,0,104,3,0,0,9,0,0,0,10,0,0,0,78,54,116,111,121,98,111,120,49,52,84,98,83,105,110,103,108,101,116,111,110,82,101,102,73,78,83,95,49,55,84,98,82,101,115,111,117,114,99,101,77,97,110,97,103,101,114,69,69,69,0,0,0,0,0,0,240,58,0,0,48,3,0,0,0,0,0,0,152,3,0,0,7,0,0,0,11,0,0,0,78,54,116,111,121,98,111,120,49,50,84,98,83,116,97,99,107,84,114,97,99,101,69,0,24,59,0,0,128,3,0,0,24,3,0,0,0,0,0,0,0,0,0,0,24,4,0,0,12,0,0,0,13,0,0,0,78,54,116,111,121,98,111,120,49,56,84,98,83,99,114,105,112,116,76,117,97,77,97,110,97,103,101,114,69,0,0,0,78,54,116,111,121,98,111,120,49,52,84,98,83,105,110,103,108,101,116,111,110,82,101,102,73,78,83,95,49,56,84,98,83,99,114,105,112,116,76,117,97,77,97,110,97,103,101,114,69,69,69,0,0,0,0,0,240,58,0,0,216,3,0,0,24,59,0,0,184,3,0,0,16,4,0,0,0,0,0,0,0,0,0,0,16,4,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,98,117,102,0,0,0,0,0,95,112,97,114,101,110,116,0,83,116,97,99,107,91,37,50,100,45,37,49,48,115,93,32,58,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,16,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,18,0,0,0,20,0,0,0,18,0,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,48,84,98,70,105,108,101,73,109,112,108,69,0,0,0,240,58,0,0,168,4,0,0,0,0,0,0,48,5,0,0,21,0,0,0,22,0,0,0,78,54,116,111,121,98,111,120,49,51,84,98,70,105,108,101,77,97,110,97,103,101,114,69,0,0,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,52,84,98,83,105,110,103,108,101,116,111,110,82,101,102,73,78,83,95,49,51,84,98,70,105,108,101,77,97,110,97,103,101,114,69,69,69,0,0,240,58,0,0,248,4,0,0,24,59,0,0,216,4,0,0,40,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,5,0,0,23,0,0,0,24,0,0,0,0,0,0,0,136,7,0,0,25,0,0,0,26,0,0,0,78,54,116,111,121,98,111,120,49,55,84,98,82,101,115,111,117,114,99,101,77,97,110,97,103,101,114,69,0,0,0,0,24,59,0,0,104,7,0,0,104,3,0,0,0,0,0,0,91,87,97,114,110,105,110,103,93,32,104,101,97,112,32,105,115,32,108,97,99,107,46,32,110,101,101,100,83,105,122,101,32,61,32,37,100,0,0,0,91,72,101,97,112,72,101,97,100,101,114,93,91,70,114,101,101,58,37,100,32,115,105,122,101,58,37,100,93,32,112,114,101,118,61,37,112,32,116,104,105,115,61,37,112,32,110,101,120,116,61,37,112,10,0,0,91,72,101,97,112,72,101,97,100,101,114,93,91,71,108,111,98,97,108,58,37,100,32,115,105,122,101,58,37,100,32,104,101,97,100,101,114,83,105,122,101,58,37,100,58,37,100,93,32,112,114,101,118,61,37,112,32,116,104,105,115,61,37,112,32,110,101,120,116,61,37,112,10,0,0,0,0,0,0,0,91,72,101,97,112,77,97,108,108,111,99,93,116,104,105,115,61,48,120,37,112,32,115,105,122,101,61,37,117,10,0,0,32,32,32,32,32,32,32,32,32,32,32,32,102,114,111,109,91,37,117,93,61,48,120,37,112,10,0,0,0,0,0,0,0,0,0,0,240,8,0,0,27,0,0,0,28,0,0,0,78,54,116,111,121,98,111,120,49,51,84,98,84,97,115,107,77,97,110,97,103,101,114,69,0,0,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,52,84,98,83,105,110,103,108,101,116,111,110,82,101,102,73,78,83,95,49,51,84,98,84,97,115,107,77,97,110,97,103,101,114,69,69,69,0,0,240,58,0,0,184,8,0,0,24,59,0,0,152,8,0,0,232,8,0,0,0,0,0,0,0,0,0,0,232,8,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,168,9,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,78,54,116,111,121,98,111,120,49,53,84,98,70,105,108,101,77,97,112,112,101,114,83,116,100,69,0,0,0,0,0,0,78,54,116,111,121,98,111,120,49,50,84,98,70,105,108,101,77,97,112,112,101,114,69,0,240,58,0,0,136,9,0,0,24,59,0,0,104,9,0,0,160,9,0,0,0,0,0,0,0,0,0,0,72,10,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,19,0,0,0,48,0,0,0,20,0,0,0,49,0,0,0,0,0,0,0,91,70,73,76,69,93,32,76,111,97,100,32,70,97,105,108,101,100,32,58,32,37,115,10,0,0,0,0,0,0,0,0,91,70,73,76,69,93,32,76,111,97,100,32,83,117,99,99,101,115,115,32,58,32,37,115,10,0,0,0,0,0,0,0,78,54,116,111,121,98,111,120,57,84,98,70,105,108,101,83,116,100,69,0,0,0,0,0,24,59,0,0,48,10,0,0,192,4,0,0,0,0,0,0,0,0,0,0,0,112,127,64,40,42,110,111,32,110,97,109,101,41,0,0,0,0,0,0,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0,0,0,0,0,0,0,0,10,9,46,46,46,0,0,0,83,108,110,116,0,0,0,0,10,9,37,115,58,0,0,0,37,100,58,0,0,0,0,0,32,105,110,32,0,0,0,0,10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0,0,0,99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0,0,0,83,108,0,0,0,0,0,0,37,115,58,37,100,58,32,0,37,115,58,32,37,115,0,0,95,95,110,97,109,101,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0,0,0,0,0,98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,61,115,116,100,105,110,0,0,64,37,115,0,0,0,0,0,114,98,0,0,0,0,0,0,114,101,111,112,101,110,0,0,111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,0,37,73,0,0,0,0,0,0,37,102,0,0,0,0,0,0,37,115,58,32,37,112,0,0,116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,99,111,114,101,32,97,110,100,32,108,105,98,114,97,114,121,32,104,97,118,101,32,105,110,99,111,109,112,97,116,105,98,108,101,32,110,117,109,101,114,105,99,32,116,121,112,101,115,0,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0,0,0,0,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0,0,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,0,0,0,0,0,0,239,187,191,0,0,0,0,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,0,0,0,0,0,0,0,110,117,109,98,101,114,32,104,97,115,32,110,111,32,105,110,116,101,103,101,114,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,0,0,0,0,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0,0,37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0,0,0,0,0,102,0,0,0,0,0,0,0,95,71,46,0,0,0,0,0,102,117,110,99,116,105,111,110,32,39,37,115,39,0,0,0,37,115,32,39,37,115,39,0,109,97,105,110,32,99,104,117,110,107,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,37,115,0,0,0,0,0,0,99,111,110,99,97,116,101,110,97,116,101,0,0,0,0,0,110,117,109,98,101,114,37,115,32,104,97,115,32,110,111,32,105,110,116,101,103,101,114,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,32,40,37,115,32,39,37,115,39,41,0,0,0,0,0,0,103,108,111,98,97,108,0,0,102,105,101,108,100,0,0,0,117,112,118,97,108,117,101,0,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,109,101,116,104,111,100,0,0,104,111,111,107,0,0,0,0,102,111,114,32,105,116,101,114,97,116,111,114,0,0,0,0,109,101,116,97,109,101,116,104,111,100,0,0,0,0,0,0,61,91,67,93,0,0,0,0,67,0,0,0,0,0,0,0,61,63,0,0,0,0,0,0,109,97,105,110,0,0,0,0,76,117,97,0,0,0,0,0,40,42,116,101,109,112,111,114,97,114,121,41,0,0,0,0,40,42,118,97,114,97,114,103,41,0,0,0,0,0,0,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,97,32,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,98,105,110,97,114,121,0,0,116,101,120,116,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0,0,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,110,111,32,109,101,115,115,97,103,101,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0,0,0,112,97,99,107,97,103,101,0,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,105,111,0,0,0,0,0,0,111,115,0,0,0,0,0,0,109,97,116,104,0,0,0,0,117,116,102,56,0,0,0,0,80,17,0,0,50,0,0,0,88,17,0,0,51,0,0,0,176,18,0,0,52,0,0,0,96,17,0,0,53,0,0,0,184,18,0,0,54,0,0,0,192,18,0,0,55,0,0,0,200,18,0,0,56,0,0,0,104,17,0,0,57,0,0,0,208,18,0,0,58,0,0,0,104,46,0,0,59,0,0,0,128,17,0,0,60,0,0,0,0,0,0,0,0,0,0,0,95,73,79,95,105,110,112,117,116,0,0,0,0,0,0,0,115,116,100,105,110,0,0,0,95,73,79,95,111,117,116,112,117,116,0,0,0,0,0,0,115,116,100,111,117,116,0,0,115,116,100,101,114,114,0,0,70,73,76,69,42,0,0,0,99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0,0,0,0,0,0,80,17,0,0,50,0,0,0,88,17,0,0,61,0,0,0,96,17,0,0,62,0,0,0,104,17,0,0,63,0,0,0,112,17,0,0,64,0,0,0,120,17,0,0,65,0,0,0,128,17,0,0,66,0,0,0,208,40,0,0,67,0,0,0,136,17,0,0,68,0,0,0,0,0,0,0,0,0,0,0,99,108,111,115,101,0,0,0,102,108,117,115,104,0,0,0,108,105,110,101,115,0,0,0,114,101,97,100,0,0,0,0,115,101,101,107,0,0,0,0,115,101,116,118,98,117,102,0,119,114,105,116,101,0,0,0,95,95,116,111,115,116,114,105,110,103,0,0,0,0,0,0,102,105,108,101,32,40,99,108,111,115,101,100,41,0,0,0,102,105,108,101,32,40,37,112,41,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,248,17,0,0,0,18,0,0,128,53,0,0,0,0,0,0,110,111,0,0,0,0,0,0,102,117,108,108,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,40,18,0,0,48,18,0,0,64,57,0,0,0,0,0,0,115,101,116,0,0,0,0,0,99,117,114,0,0,0,0,0,110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,0,0,112,80,0,0,0,0,0,0,101,69,0,0,0,0,0,0,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0,0,37,115,0,0,0,0,0,0,105,110,112,117,116,0,0,0,111,112,101,110,0,0,0,0,111,117,116,112,117,116,0,0,112,111,112,101,110,0,0,0,116,109,112,102,105,108,101,0,115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,0,0,0,0,0,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0,0,102,105,108,101,0,0,0,0,39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,119,0,0,0,0,0,0,0,99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,40,37,115,41,0,0,0,0,0,0,114,119,97,0,0,0,0,0,105,110,118,97,108,105,100,32,109,111,100,101,0,0,0,0,120,20,0,0,69,0,0,0,128,20,0,0,70,0,0,0,136,20,0,0,71,0,0,0,144,20,0,0,72,0,0,0,152,20,0,0,73,0,0,0,160,20,0,0,74,0,0,0,168,20,0,0,75,0,0,0,176,20,0,0,76,0,0,0,184,20,0,0,77,0,0,0,200,20,0,0,78,0,0,0,208,20,0,0,79,0,0,0,216,20,0,0,80,0,0,0,224,20,0,0,81,0,0,0,232,20,0,0,82,0,0,0,56,28,0,0,83,0,0,0,240,20,0,0,84,0,0,0,248,20,0,0,85,0,0,0,0,21,0,0,86,0,0,0,8,21,0,0,87,0,0,0,24,21,0,0,88,0,0,0,32,21,0,0,89,0,0,0,40,21,0,0,90,0,0,0,104,46,0,0,91,0,0,0,72,20,0,0,0,0,0,0,80,20,0,0,0,0,0,0,88,20,0,0,0,0,0,0,104,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,105,0,0,0,0,0,0,104,117,103,101,0,0,0,0,109,97,120,105,110,116,101,103,101,114,0,0,0,0,0,0,109,105,110,105,110,116,101,103,101,114,0,0,0,0,0,0,97,98,115,0,0,0,0,0,97,99,111,115,0,0,0,0,97,115,105,110,0,0,0,0,97,116,97,110,0,0,0,0,99,101,105,108,0,0,0,0,99,111,115,0,0,0,0,0,100,101,103,0,0,0,0,0,101,120,112,0,0,0,0,0,116,111,105,110,116,101,103,101,114,0,0,0,0,0,0,0,102,108,111,111,114,0,0,0,102,109,111,100,0,0,0,0,117,108,116,0,0,0,0,0,108,111,103,0,0,0,0,0,109,97,120,0,0,0,0,0,109,111,100,102,0,0,0,0,114,97,100,0,0,0,0,0,114,97,110,100,111,109,0,0,114,97,110,100,111,109,115,101,101,100,0,0,0,0,0,0,115,105,110,0,0,0,0,0,115,113,114,116,0,0,0,0,116,97,110,0,0,0,0,0,105,110,116,101,103,101,114,0,102,108,111,97,116,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,0,105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0,0,0,0,0,0,0,105,110,116,101,114,118,97,108,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,122,101,114,111,0,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0,0,0,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,88,25,0,0,92,0,0,0,96,25,0,0,93,0,0,0,152,23,0,0,0,0,0,0,240,22,0,0,0,0,0,0,48,22,0,0,0,0,0,0,184,23,0,0,0,0,0,0,128,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,97,116,104,0,0,0,0,76,85,65,95,80,65,84,72,95,53,95,51,0,0,0,0,76,85,65,95,80,65,84,72,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,51,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,51,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,51,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,51,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,59,46,47,63,47,105,110,105,116,46,108,117,97,0,0,99,112,97,116,104,0,0,0,76,85,65,95,67,80,65,84,72,95,53,95,51,0,0,0,76,85,65,95,67,80,65,84,72,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,51,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,51,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0,0,0,0,47,10,59,10,63,10,33,10,45,10,0,0,0,0,0,0,99,111,110,102,105,103,0,0,95,76,79,65,68,69,68,0,108,111,97,100,101,100,0,0,95,80,82,69,76,79,65,68,0,0,0,0,0,0,0,0,112,114,101,108,111,97,100,0,176,23,0,0,94,0,0,0,0,0,0,0,0,0,0,0,114,101,113,117,105,114,101,0,115,101,97,114,99,104,101,114,115,0,0,0,0,0,0,0,39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0,0,0,0,0,109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0,0,0,0,0,0,0,0,59,59,0,0,0,0,0,0,59,1,59,0,0,0,0,0,1,0,0,0,0,0,0,0,76,85,65,95,78,79,69,78,86,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0,0,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0,0,0,95,0,0,0,0,0,0,0,108,117,97,111,112,101,110,95,37,115,0,0,0,0,0,0,100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0,0,0,63,0,0,0,0,0,0,0,10,9,110,111,32,102,105,108,101,32,39,37,115,39,0,0,114,0,0,0,0,0,0,0,10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0,0,0,0,0,0,0,0,108,111,97,100,108,105,98,0,115,101,97,114,99,104,112,97,116,104,0,0,0,0,0,0,97,98,115,101,110,116,0,0,105,110,105,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,37,108,108,100,0,0,0,0,37,46,49,52,103,0,0,0,45,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,60,92,37,100,62,0,0,0,37,112,0,0,0,0,0,0,37,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0,0,0,0,0,0,91,115,116,114,105,110,103,32,34,0,0,0,0,0,0,0,34,93,0,0,0,0,0,0,110,78,0,0,0,0,0,0,96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,124,124,124,124,124,124,96,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23,0,168,27,0,0,95,0,0,0,176,27,0,0,96,0,0,0,184,27,0,0,97,0,0,0,200,27,0,0,98,0,0,0,208,27,0,0,99,0,0,0,216,27,0,0,100,0,0,0,200,38,0,0,101,0,0,0,224,27,0,0,102,0,0,0,232,27,0,0,103,0,0,0,248,27,0,0,104,0,0,0,0,28,0,0,105,0,0,0,0,0,0,0,0,0,0,0,99,108,111,99,107,0,0,0,100,97,116,101,0,0,0,0,100,105,102,102,116,105,109,101,0,0,0,0,0,0,0,0,101,120,101,99,117,116,101,0,101,120,105,116,0,0,0,0,103,101,116,101,110,118,0,0,114,101,110,97,109,101,0,0,115,101,116,108,111,99,97,108,101,0,0,0,0,0,0,0,116,105,109,101,0,0,0,0,116,109,112,110,97,109,101,0,117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0,0,0,0,115,101,99,0,0,0,0,0,109,105,110,0,0,0,0,0,104,111,117,114,0,0,0,0,100,97,121,0,0,0,0,0,109,111,110,116,104,0,0,0,121,101,97,114,0,0,0,0,105,115,100,115,116,0,0,0,102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,200,28,0,0,208,28,0,0,216,28,0,0,224,28,0,0,240,28,0,0,248,27,0,0,0,0,0,0,0,0,0,0,97,108,108,0,0,0,0,0,99,111,108,108,97,116,101,0,99,116,121,112,101,0,0,0,109,111,110,101,116,97,114,121,0,0,0,0,0,0,0,0,110,117,109,101,114,105,99,0,37,99,0,0,0,0,0,0,42,116,0,0,0,0,0,0,119,100,97,121,0,0,0,0,121,100,97,121,0,0,0,0,48,29,0,0,224,38,0,0,88,29,0,0,96,29,0,0,104,29,0,0,112,29,0,0,97,65,98,66,99,67,100,68,101,70,103,71,104,72,73,106,109,77,110,112,114,82,83,116,84,117,85,86,119,87,120,88,121,89,122,90,37,0,0,0,69,0,0,0,0,0,0,0,99,67,120,88,121,89,0,0,79,0,0,0,0,0,0,0,100,101,72,73,109,77,83,117,85,86,119,87,121,0,0,0,105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0,0,0,0,0,60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0,0,0,0,0,0,0,110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0,108,97,98,101,108,115,47,103,111,116,111,115,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,67,32,108,101,118,101,108,115,0,0,0,0,0,0,0,0,10,10,10,10,11,11,11,11,14,13,11,11,11,11,6,6,4,4,5,5,7,7,7,7,9,8,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,0,0,0,0,0,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,115,101,108,102,0,0,0,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,109,97,105,110,32,102,117,110,99,116,105,111,110,0,0,0,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,0,0,0,0,0,0,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0,0,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,0,0,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,40,102,111,114,32,115,116,97,116,101,41,0,0,0,0,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,0,0,40,102,111,114,32,105,110,100,101,120,41,0,0,0,0,0,40,102,111,114,32,108,105,109,105,116,41,0,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0,0,0,0,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,32,33,0,0,106,0,0,0,80,43,0,0,107,0,0,0,40,33,0,0,108,0,0,0,48,33,0,0,109,0,0,0,56,33,0,0,110,0,0,0,64,33,0,0,111,0,0,0,72,33,0,0,112,0,0,0,88,43,0,0,113,0,0,0,80,33,0,0,114,0,0,0,88,33,0,0,115,0,0,0,96,33,0,0,116,0,0,0,104,33,0,0,117,0,0,0,112,33,0,0,118,0,0,0,120,33,0,0,119,0,0,0,184,38,0,0,120,0,0,0,128,33,0,0,121,0,0,0,192,38,0,0,122,0,0,0,0,0,0,0,0,0,0,0,98,121,116,101,0,0,0,0,100,117,109,112,0,0,0,0,102,105,110,100,0,0,0,0,102,111,114,109,97,116,0,0,103,109,97,116,99,104,0,0,103,115,117,98,0,0,0,0,108,111,119,101,114,0,0,0,109,97,116,99,104,0,0,0,114,101,112,0,0,0,0,0,114,101,118,101,114,115,101,0,115,117,98,0,0,0,0,0,117,112,112,101,114,0,0,0,112,97,99,107,115,105,122,101,0,0,0,0,0,0,0,0,100,97,116,97,32,115,116,114,105,110,103,32,116,111,111,32,115,104,111,114,116,0,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,0,0,0,0,0,0,0,0,37,100,45,98,121,116,101,32,105,110,116,101,103,101,114,32,100,111,101,115,32,110,111,116,32,102,105,116,32,105,110,116,111,32,76,117,97,32,73,110,116,101,103,101,114,0,0,0,105,110,118,97,108,105,100,32,110,101,120,116,32,111,112,116,105,111,110,32,102,111,114,32,111,112,116,105,111,110,32,39,88,39,0,0,0,0,0,0,102,111,114,109,97,116,32,97,115,107,115,32,102,111,114,32,97,108,105,103,110,109,101,110,116,32,110,111,116,32,112,111,119,101,114,32,111,102,32,50,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,115,105,122,101,32,102,111,114,32,102,111,114,109,97,116,32,111,112,116,105,111,110,32,39,99,39,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,111,112,116,105,111,110,32,39,37,99,39,0,0,0,0,0,0,105,110,116,101,103,114,97,108,32,115,105,122,101,32,40,37,100,41,32,111,117,116,32,111,102,32,108,105,109,105,116,115,32,91,49,44,37,100,93,0,102,111,114,109,97,116,32,114,101,115,117,108,116,32,116,111,111,32,108,97,114,103,101,0,118,97,114,105,97,98,108,101,45,108,101,110,103,116,104,32,102,111,114,109,97,116,0,0,105,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,119,114,111,110,103,32,108,101,110,103,116,104,0,0,0,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,100,111,101,115,32,110,111,116,32,102,105,116,32,105,110,32,103,105,118,101,110,32,115,105,122,101,0,0,0,0,0,0,0,0,115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,122,101,114,111,115,0,0,0,114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0,0,0,0,0,0,112,97,116,116,101,114,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0,0,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0,94,36,42,43,63,46,40,91,37,45,0,0,0,0,0,0,115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0,0,0,0,0,0,0,92,37,100,0,0,0,0,0,92,37,48,51,100,0,0,0,45,43,32,35,48,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0,0,0,0,117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,0,0,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0,0,0,168,38,0,0,123,0,0,0,176,38,0,0,124,0,0,0,184,38,0,0,125,0,0,0,192,38,0,0,126,0,0,0,200,38,0,0,127,0,0,0,208,38,0,0,128,0,0,0,216,38,0,0,129,0,0,0,0,0,0,0,0,0,0,0,99,111,110,99,97,116,0,0,105,110,115,101,114,116,0,0,112,97,99,107,0,0,0,0,117,110,112,97,99,107,0,0,114,101,109,111,118,101,0,0,109,111,118,101,0,0,0,0,115,111,114,116,0,0,0,0,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,101,108,101,109,101,110,116,115,32,116,111,32,109,111,118,101,0,0,0,0,0,0,0,100,101,115,116,105,110,97,116,105,111,110,32,119,114,97,112,32,97,114,111,117,110,100,0,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0,0,0,0,0,0,110,0,0,0,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0,0,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0,0,0,0,110,111,32,118,97,108,117,101,0,0,0,0,0,0,0,0,98,111,111,108,101,97,110,0,117,115,101,114,100,97,116,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,110,117,109,98,101,114,0,0,116,97,98,108,101,0,0,0,116,104,114,101,97,100,0,0,112,114,111,116,111,0,0,0,232,39,0,0,136,57,0,0,248,39,0,0,0,40,0,0,16,40,0,0,168,56,0,0,24,40,0,0,88,57,0,0,0,40,0,0,32,40,0,0,40,40,0,0,0,0,0,0,80,48,0,0,192,40,0,0,208,40,0,0,88,53,0,0,216,40,0,0,224,40,0,0,232,40,0,0,240,40,0,0,248,40,0,0,0,41,0,0,8,41,0,0,16,41,0,0,24,41,0,0,32,41,0,0,40,41,0,0,48,41,0,0,56,41,0,0,64,41,0,0,72,41,0,0,80,41,0,0,88,41,0,0,96,41,0,0,104,41,0,0,120,41,0,0,95,95,110,101,119,105,110,100,101,120,0,0,0,0,0,0,95,95,103,99,0,0,0,0,95,95,108,101,110,0,0,0,95,95,101,113,0,0,0,0,95,95,97,100,100,0,0,0,95,95,115,117,98,0,0,0,95,95,109,117,108,0,0,0,95,95,109,111,100,0,0,0,95,95,112,111,119,0,0,0,95,95,100,105,118,0,0,0,95,95,105,100,105,118,0,0,95,95,98,97,110,100,0,0,95,95,98,111,114,0,0,0,95,95,98,120,111,114,0,0,95,95,115,104,108,0,0,0,95,95,115,104,114,0,0,0,95,95,117,110,109,0,0,0,95,95,98,110,111,116,0,0,95,95,108,116,0,0,0,0,95,95,108,101,0,0,0,0,95,95,99,111,110,99,97,116,0,0,0,0,0,0,0,0,95,95,99,97,108,108,0,0,112,101,114,102,111,114,109,32,98,105,116,119,105,115,101,32,111,112,101,114,97,116,105,111,110,32,111,110,0,0,0,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,0,0,27,76,117,97,0,0,0,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,0,0,116,114,117,110,99,97,116,101,100,0,0,0,0,0,0,0,37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,0,0,0,0,0,0,0,110,111,116,32,97,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,102,111,114,109,97,116,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,0,25,147,13,10,26,10,0,0,99,111,114,114,117,112,116,101,100,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,115,105,122,101,95,116,0,0,73,110,115,116,114,117,99,116,105,111,110,0,0,0,0,0,108,117,97,95,73,110,116,101,103,101,114,0,0,0,0,0,108,117,97,95,78,117,109,98,101,114,0,0,0,0,0,0,101,110,100,105,97,110,110,101,115,115,32,109,105,115,109,97,116,99,104,32,105,110,0,0,102,108,111,97,116,32,102,111,114,109,97,116,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,0,0,0,37,115,32,115,105,122,101,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,56,43,0,0,130,0,0,0,64,43,0,0,131,0,0,0,80,43,0,0,132,0,0,0,88,43,0,0,133,0,0,0,96,43,0,0,134,0,0,0,40,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,45,127,194,45,244,93,91,128,45,191,93,42,0,0,99,104,97,114,112,97,116,116,101,114,110,0,0,0,0,0,111,102,102,115,101,116,0,0,99,111,100,101,112,111,105,110,116,0,0,0,0,0,0,0,99,104,97,114,0,0,0,0,108,101,110,0,0,0,0,0,99,111,100,101,115,0,0,0,105,110,118,97,108,105,100,32,85,84,70,45,56,32,99,111,100,101,0,0,0,0,0,0,255,0,0,0,127,0,0,0,255,7,0,0,255,255,0,0,105,110,105,116,105,97,108,32,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,115,116,114,105,110,103,0,0,102,105,110,97,108,32,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,115,116,114,105,110,103,0,0,0,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,37,85,0,0,0,0,0,0,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0,0,0,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,105,110,105,116,105,97,108,32,112,111,115,105,116,105,111,110,32,105,115,32,97,32,99,111,110,116,105,110,117,97,116,105,111,110,32,98,121,116,101,0,105,110,100,101,120,0,0,0,103,101,116,116,97,98,108,101,32,99,104,97,105,110,32,116,111,111,32,108,111,110,103,59,32,112,111,115,115,105,98,108,101,32,108,111,111,112,0,0,115,101,116,116,97,98,108,101,32,99,104,97,105,110,32,116,111,111,32,108,111,110,103,59,32,112,111,115,115,105,98,108,101,32,108,111,111,112,0,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,0,0,97,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,112,101,114,102,111,114,109,32,39,110,37,37,48,39,0,0,0,0,0,0,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,112,46,0,0,135,0,0,0,120,46,0,0,136,0,0,0,136,46,0,0,137,0,0,0,144,46,0,0,138,0,0,0,112,52,0,0,139,0,0,0,152,46,0,0,140,0,0,0,160,46,0,0,141,0,0,0,176,46,0,0,142,0,0,0,184,46,0,0,143,0,0,0,192,46,0,0,144,0,0,0,200,46,0,0,145,0,0,0,208,46,0,0,146,0,0,0,216,46,0,0,147,0,0,0,232,46,0,0,148,0,0,0,240,46,0,0,149,0,0,0,248,46,0,0,150,0,0,0,0,47,0,0,151,0,0,0,216,52,0,0,152,0,0,0,8,47,0,0,153,0,0,0,24,47,0,0,154,0,0,0,40,47,0,0,155,0,0,0,104,46,0,0,0,0,0,0,72,46,0,0,0,0,0,0,88,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,71,0,0,0,0,0,0,76,117,97,32,53,46,51,0,95,86,69,82,83,73,79,78,0,0,0,0,0,0,0,0,116,121,112,101,0,0,0,0,97,115,115,101,114,116,0,0,99,111,108,108,101,99,116,103,97,114,98,97,103,101,0,0,100,111,102,105,108,101,0,0,101,114,114,111,114,0,0,0,105,112,97,105,114,115,0,0,108,111,97,100,102,105,108,101,0,0,0,0,0,0,0,0,108,111,97,100,0,0,0,0,110,101,120,116,0,0,0,0,112,97,105,114,115,0,0,0,112,99,97,108,108,0,0,0,112,114,105,110,116,0,0,0,114,97,119,101,113,117,97,108,0,0,0,0,0,0,0,0,114,97,119,108,101,110,0,0,114,97,119,103,101,116,0,0,114,97,119,115,101,116,0,0,115,101,108,101,99,116,0,0,116,111,110,117,109,98,101,114,0,0,0,0,0,0,0,0,116,111,115,116,114,105,110,103,0,0,0,0,0,0,0,0,120,112,99,97,108,108,0,0,98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,32,12,10,13,9,11,0,0,95,95,109,101,116,97,116,97,98,108,101,0,0,0,0,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0,0,0,0,0,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0,0,0,0,0,0,95,95,112,97,105,114,115,0,98,116,0,0,0,0,0,0,61,40,108,111,97,100,41,0,116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0,0,0,0,95,95,105,110,100,101,120,0,128,48,0,0,136,48,0,0,144,48,0,0,136,53,0,0,152,48,0,0,160,48,0,0,176,48,0,0,192,48,0,0,0,0,0,0,0,0,0,0,115,116,111,112,0,0,0,0,114,101,115,116,97,114,116,0,99,111,108,108,101,99,116,0,115,116,101,112,0,0,0,0,115,101,116,112,97,117,115,101,0,0,0,0,0,0,0,0,115,101,116,115,116,101,112,109,117,108,0,0,0,0,0,0,105,115,114,117,110,110,105,110,103,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,9,0,0,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,110,101,101,100,115,32,116,111,111,32,109,97,110,121,32,114,101,103,105,115,116,101,114,115,0,99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,0,0,0,0,111,112,99,111,100,101,115,0,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,200,49,0,0,156,0,0,0,208,49,0,0,157,0,0,0,216,49,0,0,158,0,0,0,224,49,0,0,159,0,0,0,232,49,0,0,160,0,0,0,240,49,0,0,161,0,0,0,248,49,0,0,162,0,0,0,0,0,0,0,0,0,0,0,99,114,101,97,116,101,0,0,114,101,115,117,109,101,0,0,114,117,110,110,105,110,103,0,115,116,97,116,117,115,0,0,119,114,97,112,0,0,0,0,121,105,101,108,100,0,0,0,105,115,121,105,101,108,100,97,98,108,101,0,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,0,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,0,0,115,117,115,112,101,110,100,101,100,0,0,0,0,0,0,0,110,111,114,109,97,108,0,0,100,101,97,100,0,0,0,0,116,104,114,101,97,100,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,52,0,0,163,0,0,0,48,52,0,0,164,0,0,0,64,52,0,0,165,0,0,0,72,52,0,0,166,0,0,0,80,52,0,0,167,0,0,0,96,52,0,0,168,0,0,0,112,52,0,0,169,0,0,0,128,52,0,0,170,0,0,0,144,52,0,0,171,0,0,0,160,52,0,0,172,0,0,0,176,52,0,0,173,0,0,0,192,52,0,0,174,0,0,0,200,52,0,0,175,0,0,0,216,52,0,0,176,0,0,0,232,52,0,0,177,0,0,0,248,52,0,0,178,0,0,0,0,0,0,0,0,0,0,0,100,101,98,117,103,0,0,0,103,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,103,101,116,104,111,111,107,0,103,101,116,105,110,102,111,0,103,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,103,101,116,114,101,103,105,115,116,114,121,0,0,0,0,0,103,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,103,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,117,112,118,97,108,117,101,106,111,105,110,0,0,0,0,0,117,112,118,97,108,117,101,105,100,0,0,0,0,0,0,0,115,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,115,101,116,104,111,111,107,0,115,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,115,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,115,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,116,114,97,99,101,98,97,99,107,0,0,0,0,0,0,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,0,108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,95,95,109,111,100,101,0,0,120,53,0,0,168,57,0,0,128,53,0,0,136,53,0,0,144,53,0,0,0,0,0,0,99,97,108,108,0,0,0,0,108,105,110,101,0,0,0,0,99,111,117,110,116,0,0,0,116,97,105,108,32,99,97,108,108,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0,0,0,76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,102,108,110,83,116,117,0,0,62,37,115,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,0,115,111,117,114,99,101,0,0,115,104,111,114,116,95,115,114,99,0,0,0,0,0,0,0,108,105,110,101,100,101,102,105,110,101,100,0,0,0,0,0,108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0,119,104,97,116,0,0,0,0,99,117,114,114,101,110,116,108,105,110,101,0,0,0,0,0,110,117,112,115,0,0,0,0,110,112,97,114,97,109,115,0,105,115,118,97,114,97,114,103,0,0,0,0,0,0,0,0,110,97,109,101,0,0,0,0,110,97,109,101,119,104,97,116,0,0,0,0,0,0,0,0,105,115,116,97,105,108,99,97,108,108,0,0,0,0,0,0,97,99,116,105,118,101,108,105,110,101,115,0,0,0,0,0,102,117,110,99,0,0,0,0,101,120,116,101,114,110,97,108,32,104,111,111,107,0,0,0,108,117,97,95,100,101,98,117,103,62,32,0,0,0,0,0,99,111,110,116,10,0,0,0,61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,95,69,78,86,0,0,0,0,24,57,0,0,32,57,0,0,40,57,0,0,48,57,0,0,56,57,0,0,64,57,0,0,72,57,0,0,80,57,0,0,88,57,0,0,104,57,0,0,112,57,0,0,120,57,0,0,128,57,0,0,136,57,0,0,144,57,0,0,152,57,0,0,160,57,0,0,168,57,0,0,176,57,0,0,184,57,0,0,192,57,0,0,200,57,0,0,208,57,0,0,216,57,0,0,224,57,0,0,232,57,0,0,240,57,0,0,248,57,0,0,0,58,0,0,8,58,0,0,16,58,0,0,24,58,0,0,32,58,0,0,40,58,0,0,56,58,0,0,72,58,0,0,80,58,0,0,0,0,0,0,39,37,99,39,0,0,0,0,39,37,115,39,0,0,0,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,0,0,69,101,0,0,0,0,0,0,80,112,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0,100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,39,123,39,0,0,0,0,0,85,84,70,45,56,32,118,97,108,117,101,32,116,111,111,32,108,97,114,103,101,0,0,0,109,105,115,115,105,110,103,32,39,125,39,0,0,0,0,0,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,115,116,114,105,110,103,0,0,99,111,109,109,101,110,116,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,37,115,32,40,115,116,97,114,116,105,110,103,32,97,116,32,108,105,110,101,32,37,100,41,0,0,0,0,0,0,0,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,0,0,0,0,0,0,0,37,115,32,110,101,97,114,32,37,115,0,0,0,0,0,0,97,110,100,0,0,0,0,0,98,114,101,97,107,0,0,0,100,111,0,0,0,0,0,0,101,108,115,101,0,0,0,0,101,108,115,101,105,102,0,0,101,110,100,0,0,0,0,0,102,97,108,115,101,0,0,0,102,111,114,0,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,103,111,116,111,0,0,0,0,105,102,0,0,0,0,0,0,105,110,0,0,0,0,0,0,108,111,99,97,108,0,0,0,110,105,108,0,0,0,0,0,110,111,116,0,0,0,0,0,111,114,0,0,0,0,0,0,114,101,112,101,97,116,0,0,114,101,116,117,114,110,0,0,116,104,101,110,0,0,0,0,116,114,117,101,0,0,0,0,117,110,116,105,108,0,0,0,119,104,105,108,101,0,0,0,47,47,0,0,0,0,0,0,46,46,0,0,0,0,0,0,46,46,46,0,0,0,0,0,61,61,0,0,0,0,0,0,62,61,0,0,0,0,0,0,60,61,0,0,0,0,0,0,126,61,0,0,0,0,0,0,60,60,0,0,0,0,0,0,62,62,0,0,0,0,0,0,58,58,0,0,0,0,0,0,60,101,111,102,62,0,0,0,60,110,117,109,98,101,114,62,0,0,0,0,0,0,0,0,60,105,110,116,101,103,101,114,62,0,0,0,0,0,0,0,60,110,97,109,101,62,0,0,60,115,116,114,105,110,103,62,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,240,58,0,0,96,58,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,59,0,0,120,58,0,0,112,58,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,59,0,0,176,58,0,0,160,58,0,0,0,0,0,0,0,0,0,0,216,58,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,0,0,0,0,96,59,0,0,179,0,0,0,187,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,24,59,0,0,56,59,0,0,216,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

   
  Module["_i64Add"] = _i64Add;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};function _setlocale(category, locale) {
      if (LOCALE.check(locale)) {
        if (!_setlocale.ret) _setlocale.ret = allocate(intArrayFromString('C'), 'i8', ALLOC_NORMAL);
        return _setlocale.ret;
      }
      return 0;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _log=Math_log;

  var _emscripten_postinvoke=true;


  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  var _emscripten_prep_setjmp=true;

  var _BDtoIHigh=true;

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  var _ceil=Math_ceil;


  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
      // These are defaults from the "C" locale
        me.ret = allocate([
          allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL),0,0,0, // decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // int_curr_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // currency_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // positive_sign
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0 // negative_sign
        ], 'i8*', ALLOC_NORMAL); // Allocate strings in lconv, still don't allocate chars
      }
      return me.ret;
    }

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (!_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  var _emscripten_cleanup_setjmp=true;

  var _SItoD=true;

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

  var _DtoIHigh=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  var _tan=Math_tan;

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  var _asin=Math_asin;

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  var _sqrt=Math_sqrt;

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _emscripten_get_longjmp_result=true;

  var _sin=Math_sin;


  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }


  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  var _floor=Math_floor;

  var _atan2=Math_atan2;

  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _acos=Math_acos;

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_exp": _exp, "_fread": _fread, "___cxa_guard_acquire": ___cxa_guard_acquire, "_longjmp": _longjmp, "_clock_gettime": _clock_gettime, "_ftell": _ftell, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_clock": _clock, "_cos": _cos, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "___cxa_atexit": ___cxa_atexit, "_gmtime_r": _gmtime_r, "_tmpnam": _tmpnam, "_tmpfile": _tmpfile, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_send": _send, "_setvbuf": _setvbuf, "_atan2": _atan2, "_setlocale": _setlocale, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_unlink": _unlink, "_mktime": _mktime, "_gmtime": _gmtime, "_localeconv": _localeconv, "_printf": _printf, "_fopen": _fopen, "_emscripten_get_now": _emscripten_get_now, "_read": _read, "__addDays": __addDays, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_exit": _exit, "_freopen": _freopen, "_llvm_pow_f64": _llvm_pow_f64, "_lseek": _lseek, "_rename": _rename, "_rmdir": _rmdir, "_asin": _asin, "_floor": _floor, "_pwrite": _pwrite, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_remove": _remove, "_strftime": _strftime, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "_recv": _recv, "_tan": _tan, "_clearerr": _clearerr, "_abort": _abort, "_ceil": _ceil, "_localtime": _localtime, "___cxa_pure_virtual": ___cxa_pure_virtual, "_sin": _sin, "_acos": _acos, "___buildEnvironment": ___buildEnvironment, "_difftime": _difftime, "_ungetc": _ungetc, "_system": _system, "_fflush": _fflush, "__reallyNegative": __reallyNegative, "_fileno": _fileno, "__exit": __exit, "__arraySum": __arraySum, "_fgets": _fgets, "_pread": _pread, "_mkport": _mkport, "_getc": _getc, "_feof": _feof, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_fgetc": _fgetc, "_fputc": _fputc, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_atexit": _atexit, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _fread=env._fread;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _longjmp=env._longjmp;
  var _clock_gettime=env._clock_gettime;
  var _ftell=env._ftell;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _ferror=env._ferror;
  var _clock=env._clock;
  var _cos=env._cos;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _fsync=env._fsync;
  var ___cxa_atexit=env.___cxa_atexit;
  var _gmtime_r=env._gmtime_r;
  var _tmpnam=env._tmpnam;
  var _tmpfile=env._tmpfile;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _send=env._send;
  var _setvbuf=env._setvbuf;
  var _atan2=env._atan2;
  var _setlocale=env._setlocale;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _unlink=env._unlink;
  var _mktime=env._mktime;
  var _gmtime=env._gmtime;
  var _localeconv=env._localeconv;
  var _printf=env._printf;
  var _fopen=env._fopen;
  var _emscripten_get_now=env._emscripten_get_now;
  var _read=env._read;
  var __addDays=env.__addDays;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _exit=env._exit;
  var _freopen=env._freopen;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _lseek=env._lseek;
  var _rename=env._rename;
  var _rmdir=env._rmdir;
  var _asin=env._asin;
  var _floor=env._floor;
  var _pwrite=env._pwrite;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _remove=env._remove;
  var _strftime=env._strftime;
  var _fseek=env._fseek;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var _recv=env._recv;
  var _tan=env._tan;
  var _clearerr=env._clearerr;
  var _abort=env._abort;
  var _ceil=env._ceil;
  var _localtime=env._localtime;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _sin=env._sin;
  var _acos=env._acos;
  var ___buildEnvironment=env.___buildEnvironment;
  var _difftime=env._difftime;
  var _ungetc=env._ungetc;
  var _system=env._system;
  var _fflush=env._fflush;
  var __reallyNegative=env.__reallyNegative;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var _fgets=env._fgets;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _getc=env._getc;
  var _feof=env._feof;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN6toybox14TbFrameworkCui12OnEntryPointEPPKcm($argList,$argCount) {
 $argList = $argList|0;
 $argCount = $argCount|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZN6toybox14TbFrameworkCui10InitializeEv()|0);
 $0 = (__Znwj(24)|0);
 __ZN6toybox18TbScriptLuaManagerC2Em($0,1);
 $1 = (__ZN6toybox18TbScriptLuaManager8CreateVMEll($0,1,10)|0);
 $2 = (__ZN6toybox13TbScriptLuaVM7GetNodeEl($1,0)|0);
 HEAP32[8>>2] = $2;
 (__ZN6toybox15TbScriptLuaNode8DoBufferEPKvm($2,40,155)|0);
 (__ZN6toybox14TbFrameworkCui13StartMainLoopEPFvvES2_S2_(0,192,0)|0);
 return;
}
function __ZN12_GLOBAL__N_18mainLoopEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0;
 (__ZN6toybox15TbScriptLuaNode14GoToAbsolutelyEPKc($0,16)|0);
 $1 = HEAP32[8>>2]|0;
 __ZN6toybox15TbScriptLuaNode14PrintDebugInfoEv($1);
 return;
}
function __ZN6toybox14TbFrameworkCui11OnExitPointEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZN6toybox14TbFrameworkCui8FinalizeEv()|0);
 return;
}
function __ZN6toybox14TbFrameworkCui10InitializeEv() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $initParam = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $initParam = sp;
 $0 = HEAP32[328>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$initParam>>2] = 0;
 $2 = (($initParam) + 4|0);
 HEAP32[$2>>2] = 62914560;
 $3 = (($initParam) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($initParam) + 12|0);
 HEAP32[$4>>2] = 312;
 $5 = (__ZN6toybox14TbFrameworkCui10InitializeERKNS_23TbFrameworkCuiInitParamE($initParam)|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function __ZN6toybox14TbFrameworkCui10InitializeERKNS_23TbFrameworkCuiInitParamE($param) {
 $param = $param|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $heapBuf$01 = 0, $resourceInitParam = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $resourceInitParam = sp;
 $0 = HEAP32[328>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (__ZN6toybox9TbConsole6CreateEv()|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$param>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = (($param) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = (_malloc($7)|0);
  HEAP32[336>>2] = $8;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $heapBuf$01 = $8;
  }
 } else {
  $heapBuf$01 = $4;
 }
 (__ZN6toybox6TbHeap10InitializeEPvmm(((240 + 8|0)),$heapBuf$01,$7,64)|0);
 HEAP32[$resourceInitParam>>2] = 1;
 $10 = (($resourceInitParam) + 4|0);
 HEAP32[$10>>2] = 10;
 $11 = (__Znwj(17688)|0);
 $12 = (($param) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = 0;
 $14 = (($11) + 4|0);
 __ZN6toybox13TbTaskManagerC2Em($14,$13);
 $15 = (($11) + 168|0);
 __ZN6toybox13TbFileManagerC2Ev($15);
 $16 = (($11) + 17660|0);
 HEAP32[$16>>2] = 0;
 $17 = (($11) + 17664|0);
 HEAP32[$17>>2] = 0;
 $18 = (($11) + 17668|0);
 HEAP32[$18>>2] = 0;
 $19 = (($11) + 17672|0);
 HEAP32[$19>>2] = ((720 + 8|0));
 $20 = HEAP32[736>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  HEAP32[736>>2] = $19;
 }
 HEAP32[$19>>2] = ((880 + 8|0));
 $22 = (($11) + 17676|0);
 __ZN6toybox17TbResourceManagerC2ERKNS0_9InitParamE($22,$resourceInitParam);
 HEAP32[328>>2] = $11;
 $23 = HEAP32[352>>2]|0;
 $24 = (($param) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 (__ZN6toybox13TbFileManager11SetRootPathEyPKc($23,3,0,$25)|0);
 $26 = HEAP32[344>>2]|0;
 (__ZN6toybox17TbResourceManager11SetFilePathEmy($26,0,3,0)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN6toybox14TbFrameworkCui13StartMainLoopEPFvvES2_S2_($begin,$main,$end) {
 $begin = $begin|0;
 $main = $main|0;
 $end = $end|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[328>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 | 1;
 HEAP32[$0>>2] = $3;
 $4 = (($0) + 17660|0);
 HEAP32[$4>>2] = $begin;
 $5 = (($0) + 17664|0);
 HEAP32[$5>>2] = $main;
 $6 = (($0) + 17668|0);
 HEAP32[$6>>2] = $end;
 $$0 = 0;
 return ($$0|0);
}
function __ZN6toybox14TbFrameworkCui8FinalizeEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[328>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return 0;
 }
 $2 = (($0) + 17676|0);
 __ZN6toybox17TbResourceManagerD2Ev($2);
 $3 = (($0) + 17672|0);
 HEAP32[$3>>2] = ((720 + 8|0));
 HEAP32[736>>2] = 0;
 $4 = (($0) + 168|0);
 __ZN6toybox13TbFileManagerD2Ev($4);
 $5 = (($0) + 4|0);
 __ZN6toybox13TbTaskManagerD2Ev($5);
 __ZdlPv($0);
 HEAP32[328>>2] = 0;
 return 0;
}
function __Z8mainLoopv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[328>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 __ZN6toybox6TbTick6UpdateEv();
 $4 = (($0) + 4|0);
 $5 = (($0) + 17660|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  FUNCTION_TABLE_v[$6 & 255]();
 }
 __ZN6toybox13TbTaskManager11ExecuteTaskEm($4,-1879048448);
 $8 = (($0) + 17676|0);
 __ZN6toybox17TbResourceManager6UpdateEv($8);
 $9 = (($0) + 17664|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  FUNCTION_TABLE_v[$10 & 255]();
 }
 __ZN6toybox13TbTaskManager11ExecuteTaskEm($4,-1879048447);
 __ZN6toybox13TbTaskManager6UpdateEv($4);
 $12 = (($0) + 17668|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 FUNCTION_TABLE_v[$13 & 255]();
 return;
}
function _main() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $argv = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 dest=$argv+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZN6toybox14TbFrameworkCui12OnEntryPointEPPKcm($argv,0);
 $0 = HEAP32[328>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _emscripten_set_main_loop((193|0),60,1);
 }
 __ZN6toybox14TbFrameworkCui11OnExitPointEv();
 $2 = HEAP32[328>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 $4 = (($2) + 17676|0);
 __ZN6toybox17TbResourceManagerD2Ev($4);
 $5 = (($2) + 17672|0);
 HEAP32[$5>>2] = ((720 + 8|0));
 HEAP32[736>>2] = 0;
 $6 = (($2) + 168|0);
 __ZN6toybox13TbFileManagerD2Ev($6);
 $7 = (($2) + 4|0);
 __ZN6toybox13TbTaskManagerD2Ev($7);
 __ZdlPv($2);
 HEAP32[328>>2] = 0;
 STACKTOP = sp;return 0;
}
function __GLOBAL__sub_I_tb_framework_cui_cpp() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[240>>2] = ((600 + 8|0));
 $0 = HEAP32[616>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[616>>2] = 240;
 }
 HEAP32[240>>2] = ((360 + 8|0));
 HEAP32[((240 + 4|0))>>2] = ((624 + 8|0));
 __ZN6toybox6TbHeapC2Ev(((240 + 8|0)));
 (___cxa_atexit((1|0),(240|0),(___dso_handle|0))|0);
 return;
}
function __ZN6toybox17TbResourceManagerC2ERKNS0_9InitParamE($this,$param) {
 $this = $this|0;
 $param = $param|0;
 var $$012$i$i = 0, $$03$i$i = 0, $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $$pre = 0, $$pre$i = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((800 + 8|0));
 $0 = HEAP32[344>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[344>>2] = $this;
 }
 HEAP32[$this>>2] = ((1880 + 8|0));
 $2 = (($this) + 4|0);
 $3 = HEAP32[$param>>2]|0;
 HEAP32[$2>>2] = $3;
 $4 = (($this) + 8|0);
 HEAP32[$4>>2] = 0;
 $$arith = $3<<5;
 $$overflow = ($3>>>0)>(134217727);
 $$arith2 = (($$arith) + 8)|0;
 $$overflow3 = ($$arith>>>0)>(4294967287);
 $5 = $$overflow | $$overflow3;
 $6 = $5 ? -1 : $$arith2;
 $7 = (__Znaj($6)|0);
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 8|0);
 $10 = ($3|0)==(0);
 if ($10) {
  HEAP32[$4>>2] = $9;
  return;
 }
 $11 = (($9) + ($3<<5)|0);
 $12 = $9;
 while(1) {
  ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
  $13 = (($12) + 24|0);
  $14 = $13;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = 0;
  $18 = (($12) + 32|0);
  $19 = ($18|0)==($11|0);
  if ($19) {
   break;
  } else {
   $12 = $18;
  }
 }
 $$pre = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = $9;
 $20 = ($$pre|0)==(0);
 if ($20) {
  return;
 }
 $21 = (($param) + 4|0);
 $24 = $9;$62 = $$pre;$i$01 = 0;
 while(1) {
  $22 = HEAP32[$21>>2]|0;
  $23 = (($24) + ($i$01<<5)|0);
  $25 = HEAP32[$23>>2]|0;
  $26 = ($25|0)<($22|0);
  if ($26) {
   $27 = HEAP32[616>>2]|0;
   $28 = (($27) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = $22 << 3;
   $32 = (FUNCTION_TABLE_iii[$30 & 255]($28,$31)|0);
   $33 = ((($24) + ($i$01<<5)|0) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if (!($35)) {
    $36 = ((($24) + ($i$01<<5)|0) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($34) + ($37<<3)|0);
    $39 = ($37|0)==(0);
    if ($39) {
     $58 = $34;
    } else {
     $$012$i$i = $32;$$03$i$i = $34;
     while(1) {
      $40 = $$03$i$i;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $46 = $$012$i$i;
      $47 = $46;
      HEAP32[$47>>2] = $42;
      $48 = (($46) + 4)|0;
      $49 = $48;
      HEAP32[$49>>2] = $45;
      $50 = (($$012$i$i) + 8|0);
      $51 = (($$03$i$i) + 8|0);
      $52 = ($51|0)==($38|0);
      if ($52) {
       break;
      } else {
       $$012$i$i = $50;$$03$i$i = $51;
      }
     }
     $$pre$i = HEAP32[$33>>2]|0;
     $58 = $$pre$i;
    }
    $53 = HEAP32[616>>2]|0;
    $54 = (($53) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    FUNCTION_TABLE_vii[$57 & 255]($54,$58);
   }
   HEAP32[$33>>2] = $32;
   HEAP32[$23>>2] = $22;
   $$pre3 = HEAP32[$2>>2]|0;
   $61 = $$pre3;
  } else {
   $61 = $62;
  }
  $59 = (($i$01) + 1)|0;
  $60 = ($59>>>0)<($61>>>0);
  if (!($60)) {
   break;
  }
  $$pre2 = HEAP32[$4>>2]|0;
  $24 = $$pre2;$62 = $61;$i$01 = $59;
 }
 return;
}
function __ZN6toybox17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((360 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = ((624 + 8|0));
 $1 = (($this) + 8|0);
 __ZN6toybox6TbHeapD2Ev($1);
 HEAP32[$this>>2] = ((600 + 8|0));
 HEAP32[616>>2] = 0;
 return;
}
function __ZN6toybox17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((360 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = ((624 + 8|0));
 $1 = (($this) + 8|0);
 __ZN6toybox6TbHeapD2Ev($1);
 HEAP32[$this>>2] = ((600 + 8|0));
 HEAP32[616>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox14TbSingletonRefINS_17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((600 + 8|0));
 HEAP32[616>>2] = 0;
 return;
}
function __ZN6toybox14TbSingletonRefINS_17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((600 + 8|0));
 HEAP32[616>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox15TbHeapAllocator8AllocateEm($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN6toybox6TbHeap8AllocateEmmNS0_9AllocTypeE($0,$size,$2,0)|0);
 return ($3|0);
}
function __ZN6toybox15TbHeapAllocator10DeallocateEPv($this,$ptr) {
 $this = $this|0;
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZN6toybox6TbHeap10DeallocateEPv($0,$ptr);
 return;
}
function __ZN6toybox14TbSingletonRefINS_12TbStackTraceEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((720 + 8|0));
 HEAP32[736>>2] = 0;
 return;
}
function __ZN6toybox14TbSingletonRefINS_12TbStackTraceEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((720 + 8|0));
 HEAP32[736>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox14TbSingletonRefINS_17TbResourceManagerEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((800 + 8|0));
 HEAP32[344>>2] = 0;
 return;
}
function __ZN6toybox14TbSingletonRefINS_17TbResourceManagerEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((800 + 8|0));
 HEAP32[344>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox12TbStackTraceD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((720 + 8|0));
 HEAP32[736>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox18TbScriptLuaManagerC2Em($this,$max) {
 $this = $this|0;
 $max = $max|0;
 var $$idx$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1064 + 8|0));
 $0 = HEAP32[1080>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[1080>>2] = $this;
 }
 HEAP32[$this>>2] = ((936 + 8|0));
 $2 = (($this) + 4|0);
 $3 = (($this) + 8|0);
 $4 = (($this) + 16|0);
 $5 = ($max|0)>(0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 if (!($5)) {
  return;
 }
 $6 = HEAP32[616>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $max << 2;
 $11 = (FUNCTION_TABLE_iii[$9 & 255]($7,$10)|0);
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$3>>2]|0;
  $$idx$i$i = $14 << 2;
  _memmove(($11|0),($12|0),($$idx$i$i|0))|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = HEAP32[616>>2]|0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$20 & 255]($17,$15);
 }
 HEAP32[$4>>2] = $11;
 HEAP32[$2>>2] = $max;
 return;
}
function __ZN6toybox18TbScriptLuaManagerD2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$lcssa3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((936 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 $3 = (($this) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $6 = $4;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $15 = $6;
   } else {
    __ZN6toybox13TbScriptLuaVMD2Ev($7);
    __ZdlPv($7);
    $$pre = HEAP32[$3>>2]|0;
    $15 = $$pre;
   }
   $9 = (($i$01) + 1)|0;
   $exitcond = ($9|0)==($1|0);
   if ($exitcond) {
    $$lcssa3 = $15;
    break;
   } else {
    $6 = $15;$i$01 = $9;
   }
  }
  $$lcssa = $$lcssa3;
 } else {
  $$lcssa = $4;
 }
 $10 = HEAP32[616>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$14 & 255]($11,$$lcssa);
 HEAP32[$this>>2] = ((1064 + 8|0));
 HEAP32[1080>>2] = 0;
 return;
}
function __ZN6toybox18TbScriptLuaManagerD0Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$lcssa$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0;
 var $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((936 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 $3 = (($this) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $6 = $4;$i$01$i = 0;
  while(1) {
   $5 = (($6) + ($i$01$i<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $15 = $6;
   } else {
    __ZN6toybox13TbScriptLuaVMD2Ev($7);
    __ZdlPv($7);
    $$pre$i = HEAP32[$3>>2]|0;
    $15 = $$pre$i;
   }
   $9 = (($i$01$i) + 1)|0;
   $exitcond$i = ($9|0)==($1|0);
   if ($exitcond$i) {
    $$lcssa = $15;
    break;
   } else {
    $6 = $15;$i$01$i = $9;
   }
  }
  $$lcssa$i = $$lcssa;
 } else {
  $$lcssa$i = $4;
 }
 $10 = HEAP32[616>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$14 & 255]($11,$$lcssa$i);
 HEAP32[$this>>2] = ((1064 + 8|0));
 HEAP32[1080>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox18TbScriptLuaManager8CreateVMEll($this,$threadMax,$topStackSize) {
 $this = $this|0;
 $threadMax = $threadMax|0;
 $topStackSize = $topStackSize|0;
 var $$0 = 0, $$idx$i$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (__Znwj(28)|0);
 $6 = (($3) + -1)|0;
 __ZN6toybox13TbScriptLuaVMC2Elll($5,$6,$threadMax,$topStackSize);
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $$phi$trans$insert$i = (($this) + 16|0);
  $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $31 = $$pre1$i;$32 = $7;
 } else {
  $10 = (($this) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = $5;
   return ($$0|0);
  }
  $13 = (($8) + 1)|0;
  $14 = HEAP32[616>>2]|0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $13 << 2;
  $19 = (FUNCTION_TABLE_iii[$17 & 255]($15,$18)|0);
  $20 = (($this) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $23 = HEAP32[$2>>2]|0;
   $$idx$i$i = $23 << 2;
   _memmove(($19|0),($21|0),($$idx$i$i|0))|0;
   $24 = HEAP32[$20>>2]|0;
   $25 = HEAP32[616>>2]|0;
   $26 = (($25) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vii[$29 & 255]($26,$24);
  }
  HEAP32[$20>>2] = $19;
  HEAP32[$0>>2] = $13;
  $$pre$i = HEAP32[$2>>2]|0;
  $31 = $19;$32 = $$pre$i;
 }
 $30 = (($31) + ($32<<2)|0);
 HEAP32[$30>>2] = $5;
 $33 = (($32) + 1)|0;
 HEAP32[$2>>2] = $33;
 $$0 = $5;
 return ($$0|0);
}
function __ZN6toybox14TbSingletonRefINS_18TbScriptLuaManagerEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1064 + 8|0));
 HEAP32[1080>>2] = 0;
 return;
}
function __ZN6toybox14TbSingletonRefINS_18TbScriptLuaManagerEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1064 + 8|0));
 HEAP32[1080>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox15TbScriptLuaNodeC2Ell($this,$index,$topStackSize) {
 $this = $this|0;
 $index = $index|0;
 $topStackSize = $topStackSize|0;
 var $$idx$i$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $index;
 $1 = (($this) + 8|0);
 $2 = (_luaL_newstate()|0);
 HEAP32[$1>>2] = $2;
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $5 = (($this) + 20|0);
 $6 = (($this) + 28|0);
 $7 = ($topStackSize|0)>(0);
 ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 if (!($7)) {
  $23 = $2;
  _luaL_openlibs($23);
  return;
 }
 $8 = HEAP32[616>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $topStackSize << 2;
 $13 = (FUNCTION_TABLE_iii[$11 & 255]($9,$12)|0);
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = HEAP32[$5>>2]|0;
  $$idx$i$i = $16 << 2;
  _memmove(($13|0),($14|0),($$idx$i$i|0))|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[616>>2]|0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vii[$22 & 255]($19,$17);
 }
 HEAP32[$6>>2] = $13;
 HEAP32[$4>>2] = $topStackSize;
 $$pre = HEAP32[$1>>2]|0;
 $23 = $$pre;
 _luaL_openlibs($23);
 return;
}
function __ZN6toybox15TbScriptLuaNodeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = $0 & 1;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  _lua_close($4);
 }
 $5 = (($this) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[616>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 255]($8,$6);
 return;
}
function __ZN6toybox15TbScriptLuaNode8DoBufferEPKvm($this,$buf,$size) {
 $this = $this|0;
 $buf = $buf|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retParam = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $retParam = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaL_loadbufferx($1,$buf,$size,1088,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  (_lua_tolstring($4,-1,0)|0);
  $5 = HEAP32[$0>>2]|0;
  _lua_settop($5,-2);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($retParam) + 4|0);
 $7 = (($retParam) + 128|0);
 HEAP32[$7>>2] = 0;
 $8 = (($retParam) + 124|0);
 HEAP32[$8>>2] = $6;
 HEAP32[$retParam>>2] = -1;
 $9 = HEAP32[$0>>2]|0;
 $10 = (_lua_type($9,-1)|0);
 $11 = ($10|0)==(6);
 if (!($11)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__ZN6toybox15TbScriptLuaNode4callElRNS_22TbScriptLuaReturnParamE($this,0,$retParam)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function __ZN6toybox15TbScriptLuaNode14GoToRelativelyEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $$0 = 0, $$0$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0, $isArray$06 = 0, $isArray$1 = 0, $str = 0, $token$05 = 0, $token$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp;
 $0 = ($name|0)==(0|0);
 if (!($0)) {
  (_strncpy(($str|0),($name|0),512)|0);
 }
 $1 = (_strlen(($str|0))|0);
 $2 = (($1) + 1)|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($this) + 8|0);
 $5 = (($this) + 12|0);
 $i$07 = 0;$isArray$06 = 0;$token$05 = $str;
 L7: while(1) {
  $6 = ($isArray$06|0)==(0);
  $7 = (($str) + ($i$07)|0);
  $8 = HEAP8[$7>>0]|0;
  do {
   if ($6) {
    if (!((($8<<24>>24) == 91) | (($8<<24>>24) == 46))) {
     $9 = ($i$07|0)==($1|0);
     if (!($9)) {
      $isArray$1 = 0;$token$1 = $token$05;
      break;
     }
    }
    $10 = ($8<<24>>24)==(91);
    $11 = $10&1;
    HEAP8[$7>>0] = 0;
    $12 = (_strlen(($token$05|0))|0);
    $13 = ($12|0)>(0);
    do {
     if ($13) {
      $14 = (_strcmp($token$05,1096)|0);
      $15 = ($14|0)==(0);
      if (!($15)) {
       $28 = (__ZN6toybox15TbScriptLuaNode9GoToChildEPKc($this,$token$05)|0);
       $29 = ($28|0)==(2);
       if ($29) {
        $$0$ph = 2;
        label = 22;
        break L7;
       } else {
        break;
       }
      }
      $16 = HEAP32[$4>>2]|0;
      $17 = (_lua_type($16,-2)|0);
      $18 = ($17|0)==(5);
      if ($18) {
       $19 = HEAP32[$4>>2]|0;
       $20 = (_lua_gettop($19)|0);
       $21 = HEAP32[$5>>2]|0;
       $22 = ($20|0)>($21|0);
       if (!($22)) {
        label = 12;
       }
      } else {
       label = 12;
      }
      if ((label|0) == 12) {
       label = 0;
       $23 = HEAP32[$4>>2]|0;
       $24 = (_lua_gettop($23)|0);
       $25 = HEAP32[$5>>2]|0;
       $26 = (($25) + 1)|0;
       $27 = ($24|0)==($26|0);
       if (!($27)) {
        $$0$ph = 2;
        label = 22;
        break L7;
       }
      }
      $30 = HEAP32[$4>>2]|0;
      _lua_settop($30,-2);
     }
    } while(0);
    $31 = (($i$07) + 1)|0;
    $32 = (($str) + ($31)|0);
    $isArray$1 = $11;$token$1 = $32;
   } else {
    $33 = ($8<<24>>24)==(93);
    if ($33) {
     HEAP8[$7>>0] = 0;
     $34 = (__ZN6toybox17TbStringConverter11ParseSint32EPKc($token$05)|0);
     $35 = HEAP32[$4>>2]|0;
     $36 = (_lua_gettop($35)|0);
     $37 = HEAP32[$5>>2]|0;
     $38 = ($36|0)==($37|0);
     if ($38) {
      $$0$ph = 2;
      label = 22;
      break L7;
     }
     $39 = HEAP32[$4>>2]|0;
     $40 = (($34) + 1)|0;
     $41 = ($40|0)<(0);
     $42 = $41 << 31 >> 31;
     _lua_pushinteger($39,$40,$42);
     $43 = HEAP32[$4>>2]|0;
     (_lua_gettable($43,-2)|0);
     $44 = HEAP32[$4>>2]|0;
     $45 = (_lua_type($44,-1)|0);
     $46 = ($45|0)==(0);
     if ($46) {
      label = 19;
      break L7;
     }
     $48 = (($i$07) + 1)|0;
     $49 = (($str) + ($48)|0);
     $isArray$1 = 0;$token$1 = $49;
    } else {
     $isArray$1 = $isArray$06;$token$1 = $token$05;
    }
   }
  } while(0);
  $50 = (($i$07) + 1)|0;
  $51 = ($50|0)<($2|0);
  if ($51) {
   $i$07 = $50;$isArray$06 = $isArray$1;$token$05 = $token$1;
  } else {
   $$0$ph = 0;
   label = 22;
   break;
  }
 }
 if ((label|0) == 19) {
  $47 = HEAP32[$4>>2]|0;
  _lua_settop($47,-2);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN6toybox15TbScriptLuaNode9GoToChildEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_gettop($1)|0);
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  (_lua_getglobal($6,$name)|0);
 } else {
  $7 = (_lua_type($6,-1)|0);
  $8 = ($7|0)==(5);
  if ($8) {
   $9 = HEAP32[$0>>2]|0;
   (_lua_getfield($9,-1,$name)|0);
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (_lua_type($10,-1)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = HEAP32[$0>>2]|0;
 _lua_settop($13,-2);
 $$0 = 2;
 return ($$0|0);
}
function __ZN6toybox15TbScriptLuaNode14GoToAbsolutelyEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 _lua_settop($1,$3);
 $4 = (__ZN6toybox15TbScriptLuaNode14GoToRelativelyEPKc($this,$name)|0);
 return ($4|0);
}
function __ZN6toybox15TbScriptLuaNode14PrintDebugInfoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $i$01 = 0;
 var $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_gettop($1)|0);
 $3 = ($2|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $i$01 = $2;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (_lua_type($4,$i$01)|0);
  $6 = HEAP32[$0>>2]|0;
  $7 = (_lua_typename($6,$5)|0);
  HEAP32[$vararg_buffer>>2] = $i$01;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  __ZN6toybox8TbPrintfEPKcz(1104,$vararg_buffer);
  do {
   if ((($5|0) == 3)) {
    $8 = HEAP32[$0>>2]|0;
    $9 = (+_lua_tonumberx($8,$i$01,0));
    HEAPF64[tempDoublePtr>>3]=$9;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
    __ZN6toybox8TbPrintfEPKcz(3024,$vararg_buffer2);
   } else if ((($5|0) == 4)) {
    $13 = HEAP32[$0>>2]|0;
    $14 = (_lua_tolstring($13,$i$01,0)|0);
    HEAP32[$vararg_buffer9>>2] = $14;
    __ZN6toybox8TbPrintfEPKcz(4776,$vararg_buffer9);
   } else if ((($5|0) == 1)) {
    $10 = HEAP32[$0>>2]|0;
    $11 = (_lua_toboolean($10,$i$01)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     __ZN6toybox8TbPrintfEPKcz(14664,$vararg_buffer7);
     break;
    } else {
     __ZN6toybox8TbPrintfEPKcz(14776,$vararg_buffer5);
     break;
    }
   } else if (!((($5|0) == 0))) {
    $15 = HEAP32[$0>>2]|0;
    $16 = (_lua_typename($15,$5)|0);
    HEAP32[$vararg_buffer12>>2] = $16;
    __ZN6toybox8TbPrintfEPKcz(4776,$vararg_buffer12);
   }
  } while(0);
  __ZN6toybox8TbPrintfEPKcz(1128,$vararg_buffer15);
  $17 = (($i$01) + -1)|0;
  $18 = ($17|0)>(0);
  if ($18) {
   $i$01 = $17;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6toybox15TbScriptLuaNode4callElRNS_22TbScriptLuaReturnParamE($this,$argNum,$retParam) {
 $this = $this|0;
 $argNum = $argNum|0;
 $retParam = $retParam|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $var = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $argNum ^ -1;
 $3 = (_lua_type($1,$2)|0);
 $4 = ($3|0)==(6);
 if (!($4)) {
  $$1 = 3;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (_lua_gettop($5)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$retParam>>2]|0;
 $9 = (_lua_pcallk($7,$argNum,$8,0,0,0)|0);
 $10 = ($9|0)==(0);
 $11 = HEAP32[$0>>2]|0;
 if (!($10)) {
  $12 = (($6) + ($2))|0;
  _lua_settop($11,$12);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $13 = (_lua_gettop($11)|0);
 $14 = (($6) + ($2))|0;
 $15 = (($13) - ($14))|0;
 $16 = HEAP32[$retParam>>2]|0;
 $17 = ($16|0)==(-1);
 if ($17) {
  $18 = HEAP32[$0>>2]|0;
  _lua_settop($18,$14);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 __ZN6toybox19TbScriptLuaVariableC2Ev($var);
 $19 = ($15|0)>(0);
 do {
  if ($19) {
   $20 = (($retParam) + 128|0);
   $21 = (($var) + 16|0);
   $i$03 = 0;
   while(1) {
    $22 = (__ZN6toybox15TbScriptLuaNode10toVariableERNS_19TbScriptLuaVariableEi($this,$var,0)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     break;
    }
    $24 = HEAP32[$20>>2]|0;
    $25 = ($24>>>0)<(5);
    if ($25) {
     $26 = ($24*24)|0;
     $27 = ((($retParam) + ($26)|0) + 4|0);
     ;HEAP32[$27+0>>2]=HEAP32[$var+0>>2]|0;HEAP32[$27+4>>2]=HEAP32[$var+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$var+8>>2]|0;HEAP32[$27+12>>2]=HEAP32[$var+12>>2]|0;
     $$sum$i = (($26) + 16)|0;
     $28 = ((($retParam) + ($$sum$i)|0) + 4|0);
     $29 = HEAP32[$21>>2]|0;
     HEAP32[$28>>2] = $29;
     $30 = ($29|0)==(0|0);
     if (!($30)) {
      $31 = (($29) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$31>>2] = $33;
     }
     $34 = HEAP32[$20>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$20>>2] = $35;
    }
    $48 = (($i$03) + 1)|0;
    $49 = ($48|0)<($15|0);
    if ($49) {
     $i$03 = $48;
    } else {
     label = 22;
     break;
    }
   }
   if ((label|0) == 22) {
    $$pre$phiZ2D = $21;
    break;
   }
   $36 = HEAP32[$0>>2]|0;
   _lua_settop($36,$14);
   $37 = HEAP32[$21>>2]|0;
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    $39 = (($37) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$39>>2] = $41;
    $42 = ($40|0)<(2);
    if ($42) {
     $43 = HEAP32[$37>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $46 = $37;
     } else {
      __ZdaPv($43);
      $45 = HEAP32[$21>>2]|0;
      HEAP32[$45>>2] = 0;
      $46 = $45;
     }
     $47 = ($46|0)==(0|0);
     if (!($47)) {
      __ZdlPv($46);
      HEAP32[$21>>2] = 0;
     }
    }
   }
   HEAP32[$21>>2] = 0;
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  } else {
   $$pre = (($var) + 16|0);
   $$pre$phiZ2D = $$pre;
  }
 } while(0);
 $50 = HEAP32[$$pre$phiZ2D>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = (($50) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -1)|0;
  HEAP32[$52>>2] = $54;
  $55 = ($53|0)<(2);
  if ($55) {
   $56 = HEAP32[$50>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $59 = $50;
   } else {
    __ZdaPv($56);
    $58 = HEAP32[$$pre$phiZ2D>>2]|0;
    HEAP32[$58>>2] = 0;
    $59 = $58;
   }
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    __ZdlPv($59);
    HEAP32[$$pre$phiZ2D>>2] = 0;
   }
  }
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function __ZN6toybox15TbScriptLuaNode10toVariableERNS_19TbScriptLuaVariableEi($this,$var,$canPop) {
 $this = $this|0;
 $var = $var|0;
 $canPop = $canPop|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_type($1,-1)|0);
 if ((($2|0) == 3)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (+_lua_tonumberx($3,-1,0));
  __ZN6toybox19TbScriptLuaVariable3SetEd($var,$4);
  $$0 = 0;
  return ($$0|0);
 } else if ((($2|0) == 1)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (_lua_toboolean($7,-1)|0);
  __ZN6toybox19TbScriptLuaVariable3SetEi($var,$8);
  $$0 = 0;
  return ($$0|0);
 } else if ((($2|0) == 4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (_lua_tolstring($5,-1,0)|0);
  __ZN6toybox19TbScriptLuaVariable3SetEPKc($var,$6);
  $$0 = 0;
  return ($$0|0);
 } else {
  $$0 = 3;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN6toybox19TbScriptLuaVariableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 16|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN6toybox19TbScriptLuaVariable3SetEi($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 1;
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = $value;
 return;
}
function __ZN6toybox19TbScriptLuaVariable3SetEd($this,$value) {
 $this = $this|0;
 $value = +$value;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 7;
 $0 = (($this) + 8|0);
 HEAPF64[$0>>3] = $value;
 return;
}
function __ZN6toybox19TbScriptLuaVariable3SetEPKc($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($value|0)==(0|0);
 if ($0) {
  return;
 }
 HEAP32[$this>>2] = 8;
 $1 = (($this) + 16|0);
 (__ZN6toybox12TbStringBaseIcEaSEPKc($1,$value)|0);
 return;
}
function __ZN6toybox12TbStringBaseIcEaSEPKc($this,$string) {
 $this = $this|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($0) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[$2>>2] = $4;
  $5 = ($3|0)<(2);
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $9 = $0;
   } else {
    __ZdaPv($6);
    $8 = HEAP32[$this>>2]|0;
    HEAP32[$8>>2] = 0;
    $9 = $8;
   }
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    __ZdlPv($9);
    HEAP32[$this>>2] = 0;
   }
  }
 }
 HEAP32[$this>>2] = 0;
 $11 = ($string|0)==(0|0);
 if ($11) {
  return ($this|0);
 }
 $12 = (__Znwj(8)|0);
 HEAP32[$12>>2] = 0;
 $13 = (($12) + 4|0);
 HEAP32[$13>>2] = 1;
 HEAP32[$this>>2] = $12;
 $14 = (_strlen(($string|0))|0);
 $15 = (($14) + 1)|0;
 $16 = ($15|0)>(-1);
 $17 = $16 ? $15 : -1;
 $18 = (__Znaj($17)|0);
 HEAP32[$12>>2] = $18;
 $19 = (_strlen(($string|0))|0);
 $20 = (($19) + 1)|0;
 (_strncpy(($18|0),($string|0),($20|0))|0);
 return ($this|0);
}
function __ZN6toybox13TbScriptLuaVMC2Elll($this,$index,$threadMax,$topStackSize) {
 $this = $this|0;
 $index = $index|0;
 $threadMax = $threadMax|0;
 $topStackSize = $topStackSize|0;
 var $$idx$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $index;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $topStackSize;
 $1 = (($this) + 8|0);
 $2 = ($threadMax|0)<(0);
 $3 = $2 ? 1 : $threadMax;
 $4 = (($this) + 12|0);
 $5 = (($this) + 20|0);
 $6 = ($3|0)>(0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 if (!($6)) {
  (__ZN6toybox13TbScriptLuaVM12CreateThreadEv($this)|0);
  return;
 }
 $7 = HEAP32[616>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $3 << 2;
 $12 = (FUNCTION_TABLE_iii[$10 & 255]($8,$11)|0);
 $13 = HEAP32[$5>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$4>>2]|0;
  $$idx$i$i = $15 << 2;
  _memmove(($12|0),($13|0),($$idx$i$i|0))|0;
  $16 = HEAP32[$5>>2]|0;
  $17 = HEAP32[616>>2]|0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$21 & 255]($18,$16);
 }
 HEAP32[$5>>2] = $12;
 HEAP32[$1>>2] = $3;
 (__ZN6toybox13TbScriptLuaVM12CreateThreadEv($this)|0);
 return;
}
function __ZN6toybox13TbScriptLuaVM12CreateThreadEv($this) {
 $this = $this|0;
 var $$idx$i$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  return (0|0);
 }
 $5 = (__Znwj(36)|0);
 $6 = (($this) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN6toybox15TbScriptLuaNodeC2Ell($5,$3,$7);
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $$phi$trans$insert$i = (($this) + 20|0);
  $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $32 = $$pre1$i;$33 = $8;
 } else {
  $11 = (($this) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   return (0|0);
  }
  $14 = (($9) + 1)|0;
  $15 = HEAP32[616>>2]|0;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $14 << 2;
  $20 = (FUNCTION_TABLE_iii[$18 & 255]($16,$19)|0);
  $21 = (($this) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $24 = HEAP32[$2>>2]|0;
   $$idx$i$i = $24 << 2;
   _memmove(($20|0),($22|0),($$idx$i$i|0))|0;
   $25 = HEAP32[$21>>2]|0;
   $26 = HEAP32[616>>2]|0;
   $27 = (($26) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_vii[$30 & 255]($27,$25);
  }
  HEAP32[$21>>2] = $20;
  HEAP32[$0>>2] = $14;
  $$pre$i = HEAP32[$2>>2]|0;
  $32 = $20;$33 = $$pre$i;
 }
 $31 = (($32) + ($33<<2)|0);
 HEAP32[$31>>2] = $5;
 $34 = (($33) + 1)|0;
 HEAP32[$2>>2] = $34;
 return (0|0);
}
function __ZN6toybox13TbScriptLuaVMD2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $$lcssa3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $6 = $4;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $15 = $6;
   } else {
    __ZN6toybox15TbScriptLuaNodeD2Ev($7);
    __ZdlPv($7);
    $$pre = HEAP32[$3>>2]|0;
    $15 = $$pre;
   }
   $9 = (($i$01) + 1)|0;
   $exitcond = ($9|0)==($1|0);
   if ($exitcond) {
    $$lcssa3 = $15;
    break;
   } else {
    $6 = $15;$i$01 = $9;
   }
  }
  $$lcssa = $$lcssa3;
 } else {
  $$lcssa = $4;
 }
 $10 = HEAP32[616>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$14 & 255]($11,$$lcssa);
 return;
}
function __ZN6toybox13TbScriptLuaVM7GetNodeEl($this,$threadIndex) {
 $this = $this|0;
 $threadIndex = $threadIndex|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($threadIndex|0)>(-1);
 if (!($0)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>($threadIndex|0);
 if (!($3)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($threadIndex<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $result$0 = $7;
 return ($result$0|0);
}
function __ZN6toybox6TbFile7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[352>>2]|0;
 (__ZN6toybox13TbFileManager14DeleteFileImplEPNS_10TbFileImplE($3,$1)|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN6toybox6TbFile4OpenEPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($this,$path,$operateMode,$syncMode,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $operateMode = $operateMode|0;
 $syncMode = $syncMode|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[352>>2]|0;
  (__ZN6toybox13TbFileManager14DeleteFileImplEPNS_10TbFileImplE($5,$3)|0);
  HEAP32[$2>>2] = 0;
 }
 $6 = HEAP32[352>>2]|0;
 $7 = (__ZN6toybox13TbFileManager14CreateFileImplEPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($6,$path,$operateMode,$syncMode,$0,$1)|0);
 HEAP32[$2>>2] = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($7)|0);
 $$0 = $12;
 return ($$0|0);
}
function __ZN6toybox10TbFileImplC2EPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($this,$path,$operateMode,$syncMode,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $operateMode = $operateMode|0;
 $syncMode = $syncMode|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 HEAP32[$this>>2] = ((1136 + 8|0));
 $3 = (($this) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 8|0);
 HEAP32[$4>>2] = 1;
 $5 = (($this) + 12|0);
 $6 = (($this) + 524|0);
 $7 = (($this) + 532|0);
 $8 = (($this) + 588|0);
 _memset(($5|0),0,576)|0;
 HEAP32[$8>>2] = 0;
 HEAP32[$6>>2] = $operateMode;
 HEAP32[$7>>2] = $syncMode;
 $9 = ($path|0)==(0|0);
 if ($9) {
  HEAP32[$4>>2] = 0;
  STACKTOP = sp;return;
 } else {
  __ZN6toybox5inner17TbFileUtilPrivate11GetFullPathEPKcy($2,$path,$0,$1);
  (_strncpy(($5|0),($2|0),512)|0);
  STACKTOP = sp;return;
 }
}
function __ZN6toybox10TbFileImplD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1136 + 8|0));
 $0 = (($this) + 580|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdaPv($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = (($this) + 540|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (($this) + 548|0);
  FUNCTION_TABLE_vi[$4 & 255]($6);
 }
 $7 = (($this) + 536|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$3>>2] = 0;
 $8 = (($this) + 544|0);
 HEAP32[$8>>2] = 0;
 return;
}
function __ZN6toybox10TbFileImplD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1136 + 8|0));
 $0 = (($this) + 580|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdaPv($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = (($this) + 540|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZdlPv($this);
  return;
 }
 $6 = (($this) + 548|0);
 FUNCTION_TABLE_vi[$4 & 255]($6);
 __ZdlPv($this);
 return;
}
function __ZN6toybox10TbFileImpl13ReadAsyncImplEPvmlPmRKNS_18TbStaticFunction32IFvvEEE($this,$readBuffer,$readSize,$seekPos,$resultReadSize,$completedCallback) {
 $this = $this|0;
 $readBuffer = $readBuffer|0;
 $readSize = $readSize|0;
 $seekPos = $seekPos|0;
 $resultReadSize = $resultReadSize|0;
 $completedCallback = $completedCallback|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[352>>2]|0;
 $1 = (__ZN6toybox13TbFileManager16RequestReadAsyncEPNS_10TbFileImplEPvmlPmRKNS_18TbStaticFunction32IFvvEEE($0,$this,$readBuffer,$readSize,$seekPos,$resultReadSize,$completedCallback)|0);
 $2 = ($1|0)==(0);
 $$ = $2 ? 2 : 1;
 return ($$|0);
}
function __ZN6toybox10TbFileImpl14WriteAsyncImplEPKvmRKNS_18TbStaticFunction32IFvvEEE($this,$buffer,$size,$completedCallback) {
 $this = $this|0;
 $buffer = $buffer|0;
 $size = $size|0;
 $completedCallback = $completedCallback|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[352>>2]|0;
 $1 = (__ZN6toybox13TbFileManager17RequestWriteAsyncEPNS_10TbFileImplEPKvmRKNS_18TbStaticFunction32IFvvEEE($0,$this,$buffer,$size,$completedCallback)|0);
 $2 = ($1|0)==(0);
 $$ = $2 ? 2 : 1;
 return ($$|0);
}
function __ZN6toybox10TbFileImpl4readEmNS_15TbFileAllocModeEPvmlPmRKNS_18TbStaticFunction32IFvvEEE($this,$size,$allocMode,$userBuffer,$userBufferSize,$seekPos,$resultReadSize,$completedCallback) {
 $this = $this|0;
 $size = $size|0;
 $allocMode = $allocMode|0;
 $userBuffer = $userBuffer|0;
 $userBufferSize = $userBufferSize|0;
 $seekPos = $seekPos|0;
 $resultReadSize = $resultReadSize|0;
 $completedCallback = $completedCallback|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $readBuffer$0 = 0, $readSize$0 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 255]($this)|0);
 if ($0) {
  $readSize$0 = $4;
 } else {
  $5 = ($4>>>0)>($size>>>0);
  $6 = $5 ? $size : $4;
  $readSize$0 = $6;
 }
 if ((($allocMode|0) == 2)) {
  $18 = ($readSize$0>>>0)>($userBufferSize>>>0);
  if ($18) {
   $$0 = 1;
   return ($$0|0);
  } else {
   $readBuffer$0 = $userBuffer;
  }
 } else if ((($allocMode|0) == 1) | (($allocMode|0) == 0)) {
  $7 = (($this) + 524|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (($this) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    $13 = (($this) + 580|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     __ZdaPv($14);
     HEAP32[$13>>2] = 0;
    }
    $16 = (($this) + 584|0);
    HEAP32[$16>>2] = $readSize$0;
    $17 = (__Znaj($readSize$0)|0);
    HEAP32[$13>>2] = $17;
    $readBuffer$0 = $17;
   } else {
    $readBuffer$0 = 0;
   }
  } else {
   $readBuffer$0 = 0;
  }
 } else {
  $readBuffer$0 = 0;
 }
 $19 = (($this) + 588|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 $22 = (($this) + 532|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = HEAP32[$this>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiiiiii[$27 & 63]($this,$readBuffer$0,$readSize$0,$seekPos,$resultReadSize,$completedCallback)|0);
  $res$0 = $28;
 } else {
  $29 = HEAP32[$this>>2]|0;
  $30 = (($29) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (FUNCTION_TABLE_iiiiii[$31 & 63]($this,$readBuffer$0,$readSize$0,$seekPos,$resultReadSize)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = HEAP32[$completedCallback>>2]|0;
   $35 = ($34|0)==(0|0);
   if (!($35)) {
    $36 = (($completedCallback) + 12|0);
    FUNCTION_TABLE_vi[$34 & 255]($36);
   }
   $37 = (($this) + 536|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = (($this) + 548|0);
    FUNCTION_TABLE_vi[$38 & 255]($40);
   }
   $41 = (($this) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 1;
   $44 = ($43|0)==(0);
   if (!($44)) {
    $45 = HEAP32[$this>>2]|0;
    $46 = (($45) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    (FUNCTION_TABLE_ii[$47 & 255]($this)|0);
   }
   $48 = HEAP32[$19>>2]|0;
   $49 = (($48) + -1)|0;
   HEAP32[$19>>2] = $49;
   $$0 = 0;
   return ($$0|0);
  } else {
   $res$0 = $32;
  }
 }
 if ((($res$0|0) == 0) | (($res$0|0) == 2)) {
  $$0 = $res$0;
  return ($$0|0);
 }
 $50 = HEAP32[$19>>2]|0;
 $51 = (($50) + -1)|0;
 HEAP32[$19>>2] = $51;
 $$0 = $res$0;
 return ($$0|0);
}
function __ZN6toybox13TbFileManagerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1864 + 8|0));
 $0 = HEAP32[352>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[352>>2] = $this;
 }
 HEAP32[$this>>2] = ((1224 + 8|0));
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 16|0);
 HEAP32[$4>>2] = -1;
 $5 = (($this) + 20|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 24|0);
 HEAP32[$6>>2] = 10;
 $7 = (($this) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = (($this) + 32|0);
 HEAP32[$8>>2] = 0;
 __ZN6toybox6TbPoolINS_18TbStaticStringBaseIcLm512EEENS_22TbTemplateAllocatorStdIS2_EEE11SetCapacityEm($2,10);
 $9 = (($this) + 40|0);
 $10 = (($this) + 2092|0);
 HEAP32[$10>>2] = 0;
 $11 = (($this) + 2088|0);
 HEAP32[$11>>2] = $9;
 $12 = (($this) + 2096|0);
 $13 = (($this) + 2120|0);
 $14 = (($this) + 2124|0);
 HEAP32[$14>>2] = 0;
 $15 = (($this) + 2128|0);
 ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;
 HEAP32[$15>>2] = 2;
 HEAP32[$13>>2] = ((2360 + 8|0));
 $16 = (($this) + 2132|0);
 $17 = (($this) + 10324|0);
 $18 = $16;
 while(1) {
  dest=$18+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $19 = (($18) + 64|0);
  $20 = ($19|0)==($17|0);
  if ($20) {
   break;
  } else {
   $18 = $19;
  }
 }
 $21 = (($this) + 10324|0);
 $22 = (($this) + 17492|0);
 $23 = $21;
 while(1) {
  dest=$23+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $24 = (($23) + 56|0);
  $25 = ($24|0)==($22|0);
  if ($25) {
   break;
  } else {
   $23 = $24;
  }
 }
 __ZN6toybox13TbFileManager4initEv($this);
 return;
}
function __ZN6toybox13TbFileManager4initEv($this) {
 $this = $this|0;
 var $$$i$i$i = 0, $$$i$i$i$lcssa = 0, $$2$i$i$i = 0, $$idx$i = 0, $$idx$i$i$i = 0, $$idx$val$i$i$i = 0, $$lcssa$i$i$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$sum$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $phitmp$i$i$i = 0, $result$0$i$i$i = 0, $result$0$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 8|0;
 $2 = (($this) + 2092|0);
 (_strncpy(($1|0),(16336|0),512)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(4);
 if ($4) {
  $5 = $3 << 9;
  $6 = ((($this) + ($5)|0) + 40|0);
  (_strncpy(($6|0),($1|0),512)|0);
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$2>>2] = $8;
 }
 (_strncpy(($1|0),(16336|0),512)|0);
 $9 = HEAP32[$2>>2]|0;
 $10 = ($9>>>0)<(4);
 if ($10) {
  $55 = $9 << 9;
  $56 = ((($this) + ($55)|0) + 40|0);
  (_strncpy(($56|0),($1|0),512)|0);
  $57 = HEAP32[$2>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$2>>2] = $58;
 }
 (_strncpy(($1|0),(16336|0),512)|0);
 $59 = HEAP32[$2>>2]|0;
 $60 = ($59>>>0)<(4);
 if ($60) {
  $61 = $59 << 9;
  $62 = ((($this) + ($61)|0) + 40|0);
  (_strncpy(($62|0),($1|0),512)|0);
  $63 = HEAP32[$2>>2]|0;
  $64 = (($63) + 1)|0;
  HEAP32[$2>>2] = $64;
 }
 (_strncpy(($1|0),(16336|0),512)|0);
 $65 = HEAP32[$2>>2]|0;
 $66 = ($65>>>0)<(4);
 if ($66) {
  $67 = $65 << 9;
  $68 = ((($this) + ($67)|0) + 40|0);
  (_strncpy(($68|0),($1|0),512)|0);
  $69 = HEAP32[$2>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$2>>2] = $70;
 }
 $27 = (($this) + 2100|0);
 $71 = (($this) + 2108|0);
 HEAP32[$71>>2] = 1;
 $72 = HEAP32[$27>>2]|0;
 $73 = ($72|0)<(10);
 if ($73) {
  $11 = HEAP32[616>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$14 & 255]($12,40)|0);
  $16 = (($this) + 2112|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = (($this) + 2104|0);
   $20 = HEAP32[$19>>2]|0;
   $$idx$i = $20 << 2;
   _memmove(($15|0),($17|0),($$idx$i|0))|0;
   $21 = HEAP32[$16>>2]|0;
   $22 = HEAP32[616>>2]|0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_vii[$26 & 255]($23,$21);
  }
  HEAP32[$16>>2] = $15;
  HEAP32[$27>>2] = 10;
  $35 = $15;
 } else {
  $$phi$trans$insert = (($this) + 2112|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $35 = $$pre;
 }
 $28 = (($this) + 2120|0);
 HEAP32[$0>>2] = $28;
 $29 = (($this) + 2104|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($this) + 2124|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)>(0);
 if ($33) {
  $34 = (($35) + ($30<<2)|0);
  $36 = $34;$38 = $35;
  while(1) {
   $37 = ($36|0)==(0|0);
   $39 = ($38|0)==(0|0);
   $or$cond$i$i$i = $37 | $39;
   if ($or$cond$i$i$i) {
    $result$0$i$i$i$i = 0;
   } else {
    $40 = $36;
    $41 = $38;
    $42 = (($40) - ($41))|0;
    $43 = $42 >> 2;
    $phitmp$i$i$i = (($43|0) / 2)&-1;
    $result$0$i$i$i$i = $phitmp$i$i$i;
   }
   $44 = (($38) + ($result$0$i$i$i$i<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $$idx$i$i$i = (($45) + 4|0);
   $$idx$val$i$i$i = HEAP32[$$idx$i$i$i>>2]|0;
   $46 = ($$idx$val$i$i$i|0)>($32|0);
   $$sum$i$i$i = (($result$0$i$i$i$i) + 1)|0;
   $47 = (($38) + ($$sum$i$i$i<<2)|0);
   $$$i$i$i = $46 ? $47 : $38;
   $$2$i$i$i = $46 ? $36 : $44;
   $48 = ($$$i$i$i>>>0)<($$2$i$i$i>>>0);
   if ($48) {
    $36 = $$2$i$i$i;$38 = $$$i$i$i;
   } else {
    $$$i$i$i$lcssa = $$$i$i$i;
    break;
   }
  }
  $$lcssa$i$i$i = $$$i$i$i$lcssa;
 } else {
  $$lcssa$i$i$i = $35;
 }
 $49 = ($$lcssa$i$i$i|0)==(0|0);
 $50 = ($35|0)==(0|0);
 $or$cond$i$i = $49 | $50;
 if ($or$cond$i$i) {
  $result$0$i$i$i = 0;
  (__ZN6toybox7TbArrayIPNS_12TbFileMapperENS_22TbTemplateAllocatorStdIS2_EEE6InsertElRKS2_($27,$result$0$i$i$i,$0)|0);
  STACKTOP = sp;return;
 }
 $51 = $$lcssa$i$i$i;
 $52 = $35;
 $53 = (($51) - ($52))|0;
 $54 = $53 >> 2;
 $result$0$i$i$i = $54;
 (__ZN6toybox7TbArrayIPNS_12TbFileMapperENS_22TbTemplateAllocatorStdIS2_EEE6InsertElRKS2_($27,$result$0$i$i$i,$0)|0);
 STACKTOP = sp;return;
}
function __ZN6toybox13TbFileManagerD2Ev($this) {
 $this = $this|0;
 var $$lcssa$i$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $umax$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1224 + 8|0));
 $0 = (($this) + 10324|0);
 $1 = (($this) + 17492|0);
 $3 = $1;
 while(1) {
  $2 = (($3) + -56|0);
  $4 = (($3) + -40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (($3) + -32|0);
   FUNCTION_TABLE_vi[$5 & 255]($7);
  }
  $8 = (($3) + -44|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$4>>2] = 0;
  $9 = (($3) + -36|0);
  HEAP32[$9>>2] = 0;
  $10 = ($2|0)==($0|0);
  if ($10) {
   break;
  } else {
   $3 = $2;
  }
 }
 $11 = (($this) + 2132|0);
 $12 = (($this) + 10324|0);
 $14 = $12;
 while(1) {
  $13 = (($14) + -64|0);
  $15 = (($14) + -40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = (($14) + -32|0);
   FUNCTION_TABLE_vi[$16 & 255]($18);
  }
  $19 = (($14) + -44|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$15>>2] = 0;
  $20 = (($14) + -36|0);
  HEAP32[$20>>2] = 0;
  $21 = ($13|0)==($11|0);
  if ($21) {
   break;
  } else {
   $14 = $13;
  }
 }
 $22 = (($this) + 2112|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[616>>2]|0;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 FUNCTION_TABLE_vii[$28 & 255]($25,$23);
 $29 = (($this) + 28|0);
 HEAP32[$29>>2] = 0;
 $30 = (($this) + 16|0);
 HEAP32[$30>>2] = -1;
 $31 = (($this) + 20|0);
 HEAP32[$31>>2] = -1;
 $32 = (($this) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 $$phi$trans$insert$i = (($this) + 4|0);
 $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
 if ($34) {
  $41 = HEAP32[616>>2]|0;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 255]($42,$$pre$i);
  HEAP32[$this>>2] = ((1864 + 8|0));
  HEAP32[352>>2] = 0;
  return;
 }
 $35 = (($this) + 12|0);
 HEAP32[$35>>2] = $$pre$i;
 $36 = (($33) + -1)|0;
 $37 = ($36|0)==(0);
 if ($37) {
  $$lcssa$i$i = 0;
 } else {
  $38 = ($36>>>0)>(1);
  $39 = (($$pre$i) + 512|0);
  $umax$i$i = $38 ? $36 : 1;
  HEAP32[$39>>2] = $umax$i$i;
  $$lcssa$i$i = $36;
 }
 $40 = ((($$pre$i) + (($$lcssa$i$i*516)|0)|0) + 512|0);
 HEAP32[$40>>2] = -1;
 $41 = HEAP32[616>>2]|0;
 $42 = (($41) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vii[$45 & 255]($42,$$pre$i);
 HEAP32[$this>>2] = ((1864 + 8|0));
 HEAP32[352>>2] = 0;
 return;
}
function __ZN6toybox13TbFileManagerD0Ev($this) {
 $this = $this|0;
 var $$lcssa$i$i$i = 0, $$phi$trans$insert$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $umax$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1224 + 8|0));
 $0 = (($this) + 10324|0);
 $1 = (($this) + 17492|0);
 $3 = $1;
 while(1) {
  $2 = (($3) + -56|0);
  $4 = (($3) + -40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (($3) + -32|0);
   FUNCTION_TABLE_vi[$5 & 255]($7);
  }
  $8 = (($3) + -44|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$4>>2] = 0;
  $9 = (($3) + -36|0);
  HEAP32[$9>>2] = 0;
  $10 = ($2|0)==($0|0);
  if ($10) {
   break;
  } else {
   $3 = $2;
  }
 }
 $11 = (($this) + 2132|0);
 $12 = (($this) + 10324|0);
 $14 = $12;
 while(1) {
  $13 = (($14) + -64|0);
  $15 = (($14) + -40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = (($14) + -32|0);
   FUNCTION_TABLE_vi[$16 & 255]($18);
  }
  $19 = (($14) + -44|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$15>>2] = 0;
  $20 = (($14) + -36|0);
  HEAP32[$20>>2] = 0;
  $21 = ($13|0)==($11|0);
  if ($21) {
   break;
  } else {
   $14 = $13;
  }
 }
 $22 = (($this) + 2112|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[616>>2]|0;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 FUNCTION_TABLE_vii[$28 & 255]($25,$23);
 $29 = (($this) + 28|0);
 HEAP32[$29>>2] = 0;
 $30 = (($this) + 16|0);
 HEAP32[$30>>2] = -1;
 $31 = (($this) + 20|0);
 HEAP32[$31>>2] = -1;
 $32 = (($this) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 $$phi$trans$insert$i$i = (($this) + 4|0);
 $$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
 if ($34) {
  $41 = HEAP32[616>>2]|0;
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 255]($42,$$pre$i$i);
  HEAP32[$this>>2] = ((1864 + 8|0));
  HEAP32[352>>2] = 0;
  __ZdlPv($this);
  return;
 }
 $35 = (($this) + 12|0);
 HEAP32[$35>>2] = $$pre$i$i;
 $36 = (($33) + -1)|0;
 $37 = ($36|0)==(0);
 if ($37) {
  $$lcssa$i$i$i = 0;
 } else {
  $38 = ($36>>>0)>(1);
  $39 = (($$pre$i$i) + 512|0);
  $umax$i$i$i = $38 ? $36 : 1;
  HEAP32[$39>>2] = $umax$i$i$i;
  $$lcssa$i$i$i = $36;
 }
 $40 = ((($$pre$i$i) + (($$lcssa$i$i$i*516)|0)|0) + 512|0);
 HEAP32[$40>>2] = -1;
 $41 = HEAP32[616>>2]|0;
 $42 = (($41) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vii[$45 & 255]($42,$$pre$i$i);
 HEAP32[$this>>2] = ((1864 + 8|0));
 HEAP32[352>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox13TbFileManager14CreateFileImplEPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($this,$path,$operateMode,$syncMode,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $operateMode = $operateMode|0;
 $syncMode = $syncMode|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$lobit$i$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $result$2 = 0, $result$2$ph = 0, $result$2$ph11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($this) + 2112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 2104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5<<2)|0);
 $7 = ($5|0)==(0);
 if ($7) {
  $result$2 = 0;
  return ($result$2|0);
 }
 $cond = ($operateMode|0)==(1);
 if ($cond) {
  $9 = $3;
  while(1) {
   $8 = HEAP32[$9>>2]|0;
   $10 = HEAP32[$8>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = (FUNCTION_TABLE_iiii[$11 & 255]($8,$0,$1)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = (($8) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $$lobit$i$us = $15 & 2;
    $16 = ($$lobit$i$us|0)==(0);
    if (!($16)) {
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (FUNCTION_TABLE_iiiiiii[$19 & 63]($8,$path,1,$syncMode,$0,$1)|0);
     $21 = ($20|0)==(0|0);
     if (!($21)) {
      $result$2$ph = $20;
      break;
     }
    }
   }
   $22 = (($9) + 4|0);
   $23 = ($22|0)==($6|0);
   if ($23) {
    $result$2$ph = 0;
    break;
   } else {
    $9 = $22;
   }
  }
  $result$2 = $result$2$ph;
  return ($result$2|0);
 }
 $25 = $3;
 L15: while(1) {
  $24 = HEAP32[$25>>2]|0;
  $26 = HEAP32[$24>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiii[$27 & 255]($24,$0,$1)|0);
  $29 = ($28|0)==(0);
  do {
   if (!($29)) {
    $30 = (($24) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 & 1;
    $33 = ($32|0)==(0);
    if (!($33)) {
     $34 = HEAP32[$24>>2]|0;
     $35 = (($34) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (FUNCTION_TABLE_iiiii[$36 & 255]($24,$path,$0,$1)|0);
     $38 = ($37|0)==(0);
     if ($38) {
      break;
     }
    }
    $39 = HEAP32[$24>>2]|0;
    $40 = (($39) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiiiiii[$41 & 63]($24,$path,$operateMode,$syncMode,$0,$1)|0);
    $43 = ($42|0)==(0|0);
    if (!($43)) {
     $result$2$ph11 = $42;
     break L15;
    }
   }
  } while(0);
  $44 = (($25) + 4|0);
  $45 = ($44|0)==($6|0);
  if ($45) {
   $result$2$ph11 = 0;
   break;
  } else {
   $25 = $44;
  }
 }
 $result$2 = $result$2$ph11;
 return ($result$2|0);
}
function __ZN6toybox13TbFileManager14DeleteFileImplEPNS_10TbFileImplE($this,$file) {
 $this = $this|0;
 $file = $file|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($file|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = HEAP32[$file>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($file);
 $4 = (($this) + 2096|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $$0 = 0;
 return ($$0|0);
}
function __ZN6toybox13TbFileManager11SetRootPathEyPKc($this,$0,$1,$path) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $path = $path|0;
 var $$0 = 0, $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ($1>>>0)>(0);
 $6 = ($0>>>0)>(4294967295);
 $7 = ($1|0)==(0);
 $8 = $7 & $6;
 $9 = $5 | $8;
 if (!($9)) {
  $20 = (_i64Add(($0|0),($1|0),-1,0)|0);
  $21 = tempRet0;
  $22 = ($20>>>0)<(4);
  if (!($22)) {
   $$0 = 1;
   return ($$0|0);
  }
  $23 = $20 << 9;
  $24 = ((($this) + ($23)|0) + 40|0);
  $25 = ($path|0)==(0|0);
  if ($25) {
   _memset(($24|0),0,512)|0;
   $$0 = 0;
   return ($$0|0);
  } else {
   (_strncpy(($24|0),($path|0),512)|0);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $10 = (($this) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($0>>>0)<($11>>>0);
 if ($12) {
  $13 = (($this) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14) + (($0*516)|0)|0) + 512|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(-2);
  if ($17) {
   $18 = (($14) + (($0*516)|0)|0);
   $$0$i = $18;
  } else {
   $$0$i = 0;
  }
 } else {
  $$0$i = 0;
 }
 $19 = ($path|0)==(0|0);
 if ($19) {
  _memset(($$0$i|0),0,512)|0;
  $$0 = 0;
  return ($$0|0);
 } else {
  (_strncpy(($$0$i|0),($path|0),512)|0);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNK6toybox13TbFileManager11GetRootPathEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $5 = HEAP8[1856>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $$0 = 1344;
   return ($$0|0);
  }
  $7 = (___cxa_guard_acquire((1856|0))|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 1344;
   return ($$0|0);
  }
  HEAP8[1344>>0] = 0;
  ___cxa_guard_release((1856|0));
  $$0 = 1344;
  return ($$0|0);
 }
 $9 = ($1>>>0)>(0);
 $10 = ($0>>>0)>(4294967295);
 $11 = ($1|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 if ($13) {
  $14 = (($this) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($0>>>0)<($15>>>0);
  if (!($16)) {
   $$0 = 0;
   return ($$0|0);
  }
  $17 = (($this) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18) + (($0*516)|0)|0) + 512|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(-2);
  if (!($21)) {
   $$0 = 0;
   return ($$0|0);
  }
  $22 = (($18) + (($0*516)|0)|0);
  $$0 = $22;
  return ($$0|0);
 }
 $23 = (_i64Add(($0|0),($1|0),-1,0)|0);
 $24 = tempRet0;
 $25 = ($23>>>0)<(4);
 if ($25) {
  $26 = $23 << 9;
  $27 = ((($this) + ($26)|0) + 40|0);
  $$0 = $27;
  return ($$0|0);
 }
 $28 = HEAP8[1856>>0]|0;
 $29 = ($28<<24>>24)==(0);
 if (!($29)) {
  $$0 = 1344;
  return ($$0|0);
 }
 $30 = (___cxa_guard_acquire((1856|0))|0);
 $31 = ($30|0)==(0);
 if ($31) {
  $$0 = 1344;
  return ($$0|0);
 }
 HEAP8[1344>>0] = 0;
 ___cxa_guard_release((1856|0));
 $$0 = 1344;
 return ($$0|0);
}
function __ZN6toybox13TbFileManager16RequestReadAsyncEPNS_10TbFileImplEPvmlPmRKNS_18TbStaticFunction32IFvvEEE($this,$file,$readBuffer,$readSize,$seekPos,$resultReadSize,$finishedCallback) {
 $this = $this|0;
 $file = $file|0;
 $readBuffer = $readBuffer|0;
 $readSize = $readSize|0;
 $seekPos = $seekPos|0;
 $resultReadSize = $resultReadSize|0;
 $finishedCallback = $finishedCallback|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$04$lcssa = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while(1) {
  $2 = ((($this) + ($i$04<<6)|0) + 2132|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  $0 = (($i$04) + 1)|0;
  if ($4) {
   $$lcssa = $2;$i$04$lcssa = $i$04;
   break;
  }
  $1 = ($0>>>0)<(128);
  if ($1) {
   $i$04 = $0;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($this) + ($i$04$lcssa<<6)|0) + 2136|0);
 HEAP32[$5>>2] = $readBuffer;
 $6 = ((($this) + ($i$04$lcssa<<6)|0) + 2140|0);
 HEAP32[$6>>2] = $readSize;
 $7 = ((($this) + ($i$04$lcssa<<6)|0) + 2144|0);
 HEAP32[$7>>2] = $seekPos;
 $8 = ((($this) + ($i$04$lcssa<<6)|0) + 2148|0);
 HEAP32[$8>>2] = $resultReadSize;
 $9 = HEAP32[$finishedCallback>>2]|0;
 $10 = ((($this) + ($i$04$lcssa<<6)|0) + 2152|0);
 HEAP32[$10>>2] = $9;
 $11 = (($finishedCallback) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($this) + ($i$04$lcssa<<6)|0) + 2156|0);
 HEAP32[$13>>2] = $12;
 $14 = (($finishedCallback) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($this) + ($i$04$lcssa<<6)|0) + 2160|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)==(0|0);
 if ($17) {
  $20 = ((($this) + ($i$04$lcssa<<6)|0) + 2164|0);
  $21 = (($finishedCallback) + 12|0);
  dest=$20+0|0; src=$21+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 } else {
  $18 = ((($this) + ($i$04$lcssa<<6)|0) + 2164|0);
  $19 = (($finishedCallback) + 12|0);
  FUNCTION_TABLE_vii[$15 & 255]($18,$19);
 }
 HEAP32[$$lcssa>>2] = $file;
 $$0 = 0;
 return ($$0|0);
}
function __ZN6toybox13TbFileManager17RequestWriteAsyncEPNS_10TbFileImplEPKvmRKNS_18TbStaticFunction32IFvvEEE($this,$file,$readBuffer,$size,$finishedCallback) {
 $this = $this|0;
 $file = $file|0;
 $readBuffer = $readBuffer|0;
 $size = $size|0;
 $finishedCallback = $finishedCallback|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$04 = 0, $i$04$lcssa = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $i$04 = 0;
 while(1) {
  $2 = ((($this) + (($i$04*56)|0)|0) + 10324|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  $0 = (($i$04) + 1)|0;
  if ($4) {
   $$lcssa = $2;$i$04$lcssa = $i$04;
   break;
  }
  $1 = ($0>>>0)<(128);
  if ($1) {
   $i$04 = $0;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10328|0);
 HEAP32[$5>>2] = $readBuffer;
 $6 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10332|0);
 HEAP32[$6>>2] = $size;
 $7 = HEAP32[$finishedCallback>>2]|0;
 $8 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10336|0);
 HEAP32[$8>>2] = $7;
 $9 = (($finishedCallback) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10340|0);
 HEAP32[$11>>2] = $10;
 $12 = (($finishedCallback) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10344|0);
 HEAP32[$14>>2] = $13;
 $15 = ($13|0)==(0|0);
 if ($15) {
  $18 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10348|0);
  $19 = (($finishedCallback) + 12|0);
  dest=$18+0|0; src=$19+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 } else {
  $16 = ((($this) + (($i$04$lcssa*56)|0)|0) + 10348|0);
  $17 = (($finishedCallback) + 12|0);
  FUNCTION_TABLE_vii[$13 & 255]($16,$17);
 }
 HEAP32[$$lcssa>>2] = $file;
 $$0 = 0;
 return ($$0|0);
}
function __ZN6toybox6TbPoolINS_18TbStaticStringBaseIcLm512EEENS_22TbTemplateAllocatorStdIS2_EEE11SetCapacityEm($this,$capacity) {
 $this = $this|0;
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$04 = 0, $count$1 = 0, $count$1$lcssa = 0, $count$2 = 0, $exitcond = 0, $exitcond13 = 0, $i$06 = 0, $i2$03 = 0, $or$cond = 0, $or$cond1 = 0, $tmpNext$05 = 0, $tmpNext$1 = 0, $tmpNext$1$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = -1;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = -1;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ($capacity|0)!=(0);
 if ($3) {
  $4 = HEAP32[616>>2]|0;
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($capacity*516)|0;
  $9 = (FUNCTION_TABLE_iii[$7 & 255]($5,$8)|0);
  $22 = $9;
 } else {
  $22 = 0;
 }
 $10 = HEAP32[$this>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  if ($3) {
   HEAP32[$2>>2] = $22;
   $39 = (($capacity) + -1)|0;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $i2$03 = 0;
    while(1) {
     $41 = (($i2$03) + 1)|0;
     $42 = ((($22) + (($i2$03*516)|0)|0) + 512|0);
     HEAP32[$42>>2] = $41;
     $exitcond = ($41|0)==($39|0);
     if ($exitcond) {
      break;
     } else {
      $i2$03 = $41;
     }
    }
   }
   $43 = ((($22) + (($39*516)|0)|0) + 512|0);
   HEAP32[$43>>2] = -1;
   $count$2 = 0;
  } else {
   $count$2 = 0;
  }
 } else {
  $12 = ($capacity|0)==(0);
  if ($12) {
   $count$2 = 0;
  } else {
   $13 = (($this) + 20|0);
   $count$04 = 0;$i$06 = 0;$tmpNext$05 = 0;
   while(1) {
    $14 = HEAP32[$13>>2]|0;
    $15 = ($i$06>>>0)<($14>>>0);
    if ($15) {
     $16 = HEAP32[$this>>2]|0;
     $17 = ((($16) + (($i$06*516)|0)|0) + 512|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(-2);
     if ($19) {
      $20 = (($16) + (($i$06*516)|0)|0);
      $21 = (($22) + (($i$06*516)|0)|0);
      (_strncpy(($21|0),($20|0),512)|0);
      $23 = ((($22) + (($i$06*516)|0)|0) + 512|0);
      HEAP32[$23>>2] = -2;
      $24 = HEAP32[$0>>2]|0;
      $25 = ($24|0)==(-1);
      $26 = ($24>>>0)>($i$06>>>0);
      $or$cond = $25 | $26;
      if ($or$cond) {
       HEAP32[$0>>2] = $i$06;
      }
      $27 = HEAP32[$1>>2]|0;
      $28 = ($27|0)==(-1);
      $29 = ($27>>>0)<($i$06>>>0);
      $or$cond1 = $28 | $29;
      if ($or$cond1) {
       HEAP32[$1>>2] = $i$06;
      }
      $30 = (($count$04) + 1)|0;
      $count$1 = $30;$tmpNext$1 = $tmpNext$05;
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
    do {
     if ((label|0) == 13) {
      label = 0;
      $31 = HEAP32[$2>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       $33 = (($22) + (($i$06*516)|0)|0);
       HEAP32[$2>>2] = $33;
       $count$1 = $count$04;$tmpNext$1 = $33;
       break;
      } else {
       $34 = (($tmpNext$05) + 512|0);
       HEAP32[$34>>2] = $i$06;
       $35 = (($22) + (($i$06*516)|0)|0);
       $count$1 = $count$04;$tmpNext$1 = $35;
       break;
      }
     }
    } while(0);
    $36 = (($i$06) + 1)|0;
    $exitcond13 = ($36|0)==($capacity|0);
    if ($exitcond13) {
     $count$1$lcssa = $count$1;$tmpNext$1$lcssa = $tmpNext$1;
     break;
    } else {
     $count$04 = $count$1;$i$06 = $36;$tmpNext$05 = $tmpNext$1;
    }
   }
   $37 = ($tmpNext$1$lcssa|0)==(0|0);
   if ($37) {
    $count$2 = $count$1$lcssa;
   } else {
    $38 = (($tmpNext$1$lcssa) + 512|0);
    HEAP32[$38>>2] = -1;
    $count$2 = $count$1$lcssa;
   }
  }
 }
 HEAP32[$this>>2] = $22;
 $44 = (($this) + 20|0);
 HEAP32[$44>>2] = $capacity;
 $45 = (($this) + 24|0);
 HEAP32[$45>>2] = $count$2;
 return;
}
function __ZN6toybox7TbArrayIPNS_12TbFileMapperENS_22TbTemplateAllocatorStdIS2_EEE6InsertElRKS2_($this,$index,$element) {
 $this = $this|0;
 $index = $index|0;
 $element = $element|0;
 var $$0 = 0, $$idx$i = 0, $$idx$i$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in2 = 0, $i$0$in2$phi = 0, $i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($index|0);
 $3 = HEAP32[$this>>2]|0;
 $4 = ($1|0)<($3|0);
 if ($2) {
  if ($4) {
   $$phi$trans$insert$i = (($this) + 12|0);
   $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
   $26 = $$pre1$i;$27 = $index;
  } else {
   $5 = (($this) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = 0;
    return ($$0|0);
   }
   $8 = (($3) + 1)|0;
   $9 = HEAP32[616>>2]|0;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = $8 << 2;
   $14 = (FUNCTION_TABLE_iii[$12 & 255]($10,$13)|0);
   $15 = (($this) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    $18 = HEAP32[$0>>2]|0;
    $$idx$i$i = $18 << 2;
    _memmove(($14|0),($16|0),($$idx$i$i|0))|0;
    $19 = HEAP32[$15>>2]|0;
    $20 = HEAP32[616>>2]|0;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    FUNCTION_TABLE_vii[$24 & 255]($21,$19);
   }
   HEAP32[$15>>2] = $14;
   HEAP32[$this>>2] = $8;
   $$pre$i = HEAP32[$0>>2]|0;
   $26 = $14;$27 = $$pre$i;
  }
  $25 = (($26) + ($27<<2)|0);
  $28 = HEAP32[$element>>2]|0;
  HEAP32[$25>>2] = $28;
  $29 = (($27) + 1)|0;
  HEAP32[$0>>2] = $29;
  $$0 = 1;
  return ($$0|0);
 }
 if ($4) {
  $50 = $3;
 } else {
  $30 = (($this) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $$0 = 0;
   return ($$0|0);
  }
  $33 = (($3) + 1)|0;
  $34 = HEAP32[616>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = $33 << 2;
  $39 = (FUNCTION_TABLE_iii[$37 & 255]($35,$38)|0);
  $40 = (($this) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $$idx$i = $43 << 2;
   _memmove(($39|0),($41|0),($$idx$i|0))|0;
   $44 = HEAP32[$40>>2]|0;
   $45 = HEAP32[616>>2]|0;
   $46 = (($45) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   FUNCTION_TABLE_vii[$49 & 255]($46,$44);
  }
  HEAP32[$40>>2] = $39;
  HEAP32[$this>>2] = $33;
  $50 = $33;
 }
 $51 = ($50|0)>($index|0);
 if (!($51)) {
  $$0 = 0;
  return ($$0|0);
 }
 $52 = HEAP32[$0>>2]|0;
 $53 = (($this) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($52<<2)|0);
 $56 = (($52) + -1)|0;
 $57 = (($54) + ($56<<2)|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$55>>2] = $58;
 $59 = ($56|0)>($index|0);
 if ($59) {
  $i$0$in2 = $52;$i$03 = $56;
  while(1) {
   $60 = (($i$0$in2) + -2)|0;
   $61 = HEAP32[$53>>2]|0;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + ($i$03<<2)|0);
   HEAP32[$64>>2] = $63;
   $i$0 = (($i$03) + -1)|0;
   $65 = ($i$0|0)>($index|0);
   if ($65) {
    $i$0$in2$phi = $i$03;$i$03 = $i$0;$i$0$in2 = $i$0$in2$phi;
   } else {
    break;
   }
  }
 }
 $66 = HEAP32[$53>>2]|0;
 $67 = (($66) + ($index<<2)|0);
 $68 = HEAP32[$element>>2]|0;
 HEAP32[$67>>2] = $68;
 $69 = (($52) + 1)|0;
 HEAP32[$0>>2] = $69;
 $$0 = 1;
 return ($$0|0);
}
function __ZN6toybox14TbSingletonRefINS_13TbFileManagerEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1864 + 8|0));
 HEAP32[352>>2] = 0;
 return;
}
function __ZN6toybox14TbSingletonRefINS_13TbFileManagerEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1864 + 8|0));
 HEAP32[352>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox5inner17TbFileUtilPrivate11GetFullPathEPKcy($agg$result,$path,$0,$1) {
 $agg$result = $agg$result|0;
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($agg$result|0),0,512)|0;
 $2 = HEAP32[352>>2]|0;
 $3 = (__ZNK6toybox13TbFileManager11GetRootPathEy($2,$0,$1)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = (_strlen(($3|0))|0);
  $7 = (_strlen(($agg$result|0))|0);
  $8 = (512 - ($7))|0;
  $9 = (($8) + -1)|0;
  $10 = ($9>>>0)>($6>>>0);
  if ($10) {
   $11 = (($agg$result) + ($7)|0);
   (_strncpy(($11|0),($3|0),($9|0))|0);
   $12 = (($7) + ($6))|0;
   $13 = (($agg$result) + ($12)|0);
   HEAP8[$13>>0] = 0;
  }
  $14 = (_strlen(($agg$result|0))|0);
  $15 = (512 - ($14))|0;
  $16 = (($15) + -1)|0;
  $17 = ($16>>>0)>(1);
  if ($17) {
   $18 = (($agg$result) + ($14)|0);
   (_strncpy(($18|0),(6200|0),($16|0))|0);
   $19 = (($14) + 1)|0;
   $20 = (($agg$result) + ($19)|0);
   HEAP8[$20>>0] = 0;
  }
 }
 $21 = (_strlen(($path|0))|0);
 $22 = (_strlen(($agg$result|0))|0);
 $23 = (512 - ($22))|0;
 $24 = (($23) + -1)|0;
 $25 = ($24>>>0)>($21>>>0);
 if (!($25)) {
  return;
 }
 $26 = (($agg$result) + ($22)|0);
 (_strncpy(($26|0),($path|0),($24|0))|0);
 $27 = (($22) + ($21))|0;
 $28 = (($agg$result) + ($27)|0);
 HEAP8[$28>>0] = 0;
 return;
}
function __ZN6toybox8TbPrintfEPKcz($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 8|0;
 $buf = sp + 24|0;
 HEAP32[$ap>>2] = $varargs;
 (_vsnprintf($buf,1024,$fmt,$ap)|0);
 HEAP32[$vararg_buffer>>2] = $buf;
 (_printf((4776|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function __ZN6toybox17TbResourceManagerD2Ev($this) {
 $this = $this|0;
 var $$be = 0, $$lcssa = 0, $$lcssa4 = 0, $$pre = 0, $$pre11 = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1880 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $$lcssa4 = $4;
 } else {
  $47 = $1;$6 = $4;$i$05 = 0;
  while(1) {
   $5 = ((($6) + ($i$05<<5)|0) + 12|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($6) + ($i$05<<5)|0) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + ($9<<3)|0);
   $11 = ($9|0)==(0);
   if ($11) {
    $27 = $6;$30 = $47;
   } else {
    $13 = $7;
    while(1) {
     $12 = (($13) + 4|0);
     $14 = HEAP32[$12>>2]|0;
     $15 = (($14) + 4|0);
     $$promoted = HEAP32[$15>>2]|0;
     $16 = $$promoted;
     while(1) {
      $17 = ($16|0)==(0);
      if ($17) {
       $$be = 0;
      } else {
       $18 = (($16) + -1)|0;
       $19 = ($18|0)==(0);
       if ($19) {
        break;
       } else {
        $$be = $18;
       }
      }
      $16 = $$be;
     }
     HEAP32[$15>>2] = 0;
     $20 = ($14|0)==(0|0);
     if (!($20)) {
      $21 = HEAP32[$14>>2]|0;
      $22 = (($21) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      FUNCTION_TABLE_vi[$23 & 255]($14);
     }
     $24 = (($13) + 8|0);
     $25 = ($24|0)==($10|0);
     if ($25) {
      break;
     } else {
      $13 = $24;
     }
    }
    $$pre = HEAP32[$3>>2]|0;
    $$pre11 = HEAP32[$0>>2]|0;
    $27 = $$pre;$30 = $$pre11;
   }
   $26 = ((($27) + ($i$05<<5)|0) + 4|0);
   HEAP32[$26>>2] = 0;
   $28 = (($i$05) + 1)|0;
   $29 = ($28>>>0)<($30>>>0);
   if ($29) {
    $47 = $30;$6 = $27;$i$05 = $28;
   } else {
    $$lcssa = $27;
    break;
   }
  }
  $$lcssa4 = $$lcssa;
 }
 $31 = ($$lcssa4|0)==(0|0);
 if ($31) {
  HEAP32[$this>>2] = ((800 + 8|0));
  HEAP32[344>>2] = 0;
  return;
 }
 $32 = (($$lcssa4) + -8|0);
 $33 = (($32) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = (($$lcssa4) + ($34<<5)|0);
  $38 = $36;
  while(1) {
   $37 = (($38) + -32|0);
   $39 = (($38) + -20|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[616>>2]|0;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 255]($42,$40);
   $46 = ($37|0)==($$lcssa4|0);
   if ($46) {
    break;
   } else {
    $38 = $37;
   }
  }
 }
 __ZdaPv($32);
 HEAP32[$3>>2] = 0;
 HEAP32[$this>>2] = ((800 + 8|0));
 HEAP32[344>>2] = 0;
 return;
}
function __ZN6toybox17TbResourceManagerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6toybox17TbResourceManagerD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN6toybox17TbResourceManager11SetFilePathEmy($this,$listType,$0,$1) {
 $this = $this|0;
 $listType = $listType|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($listType>>>0);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6) + ($listType<<5)|0) + 24|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function __ZNK6toybox17TbResourceManager11GetFilePathEm($this,$listType) {
 $this = $this|0;
 $listType = $listType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($listType>>>0);
 if (!($2)) {
  $12 = 0;$13 = 0;
  tempRet0 = $12;
  return ($13|0);
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4) + ($listType<<5)|0) + 24|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;$13 = $8;
 tempRet0 = $12;
 return ($13|0);
}
function __ZN6toybox17TbResourceManager6UpdateEv($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = (($this) + 8|0);
 $19 = $1;$i$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + ($i$01<<5)|0) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($4) + ($i$01<<5)|0) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + ($8<<3)|0);
  $10 = ($8|0)==(0);
  if ($10) {
   $18 = $19;
  } else {
   $12 = $6;
   while(1) {
    $11 = (($12) + 4|0);
    $13 = HEAP32[$11>>2]|0;
    __ZN6toybox14TbResourceBase6updateEv($13);
    $14 = (($12) + 8|0);
    $15 = ($14|0)==($9|0);
    if ($15) {
     break;
    } else {
     $12 = $14;
    }
   }
   $$pre = HEAP32[$0>>2]|0;
   $18 = $$pre;
  }
  $16 = (($i$01) + 1)|0;
  $17 = ($16>>>0)<($18>>>0);
  if ($17) {
   $19 = $18;$i$01 = $16;
  } else {
   break;
  }
 }
 return;
}
function __ZN6toybox6TbHeapC2Ev($this) {
 $this = $this|0;
 var $0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 HEAP8[$this>>0] = 0;
 dest=$0+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN6toybox6TbHeapD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 __ZN6toybox6TbHeap14DumpMallocListEv($this);
 return;
}
function __ZN6toybox6TbHeap14DumpMallocListEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header$0 = 0, $header$02 = 0;
 var $header$03 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0;
 var $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 96|0;
 $vararg_buffer42 = sp + 88|0;
 $vararg_buffer38 = sp + 80|0;
 $vararg_buffer34 = sp + 72|0;
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer18 = sp + 32|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 40|0;
 $0 = (($this) + 44|0);
 $header$02 = HEAP32[$0>>2]|0;
 $1 = ($header$02|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $header$03 = $header$02;
 while(1) {
  $2 = (($header$03) + 68|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3 & 1;
  $5 = ($4<<16>>16)==(0);
  if (!($5)) {
   $6 = (($header$03) + 70|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7&65535;
   $9 = (($header$03) + ($8)|0);
   $10 = (($header$03) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $11;
   __ZN6toybox8TbPrintfEPKcz(2120,$vararg_buffer);
   $12 = (($header$03) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$vararg_buffer2>>2] = 0;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $13;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer2);
   $14 = (($header$03) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer6>>2] = 1;
   $vararg_ptr9 = (($vararg_buffer6) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $15;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer6);
   $16 = (($header$03) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$vararg_buffer10>>2] = 2;
   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $17;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer10);
   $18 = (($header$03) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer14>>2] = 3;
   $vararg_ptr17 = (($vararg_buffer14) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $19;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer14);
   $20 = (($header$03) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$vararg_buffer18>>2] = 4;
   $vararg_ptr21 = (($vararg_buffer18) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $21;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer18);
   $22 = (($header$03) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$vararg_buffer22>>2] = 5;
   $vararg_ptr25 = (($vararg_buffer22) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $23;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer22);
   $24 = (($header$03) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer26>>2] = 6;
   $vararg_ptr29 = (($vararg_buffer26) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $25;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer26);
   $26 = (($header$03) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer30>>2] = 7;
   $vararg_ptr33 = (($vararg_buffer30) + 4|0);
   HEAP32[$vararg_ptr33>>2] = $27;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer30);
   $28 = (($header$03) + 52|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer34>>2] = 8;
   $vararg_ptr37 = (($vararg_buffer34) + 4|0);
   HEAP32[$vararg_ptr37>>2] = $29;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer34);
   $30 = (($header$03) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer38>>2] = 9;
   $vararg_ptr41 = (($vararg_buffer38) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $31;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer38);
   $32 = (($header$03) + 60|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$vararg_buffer42>>2] = 10;
   $vararg_ptr45 = (($vararg_buffer42) + 4|0);
   HEAP32[$vararg_ptr45>>2] = $33;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer42);
   $34 = (($header$03) + 64|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer46>>2] = 11;
   $vararg_ptr49 = (($vararg_buffer46) + 4|0);
   HEAP32[$vararg_ptr49>>2] = $35;
   __ZN6toybox8TbPrintfEPKcz(2152,$vararg_buffer46);
  }
  $36 = (($header$03) + 8|0);
  $header$0 = HEAP32[$36>>2]|0;
  $37 = ($header$0|0)==(0|0);
  if ($37) {
   break;
  } else {
   $header$03 = $header$0;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6toybox6TbHeap10InitializeEPvmm($this,$address,$size,$align) {
 $this = $this|0;
 $address = $address|0;
 $size = $size|0;
 $align = $align|0;
 var $$0 = 0, $$align = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)!=(0);
 $4 = ($address|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (($this) + 20|0);
 $6 = ($align>>>0)<(72);
 $$align = $6 ? 72 : $align;
 HEAP32[$5>>2] = $$align;
 $7 = $address;
 $8 = (($7) + -1)|0;
 $9 = (($8) + ($$align))|0;
 $10 = (0 - ($$align))|0;
 $11 = $9 & $10;
 $12 = (($this) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = (($7) + ($size))|0;
 $14 = $13 & $10;
 $15 = (($this) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = (($14) - ($11))|0;
 $17 = (($this) + 24|0);
 HEAP32[$17>>2] = $16;
 $18 = (($this) + 28|0);
 HEAP32[$18>>2] = $16;
 $19 = $11;
 $20 = (($this) + 36|0);
 HEAP32[$20>>2] = $19;
 $21 = $11;
 dest=$21+0|0; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $22 = HEAP32[$17>>2]|0;
 $23 = HEAP32[$20>>2]|0;
 $24 = (($23) + 16|0);
 HEAP32[$24>>2] = $22;
 $25 = (($this) + 40|0);
 HEAP32[$25>>2] = $23;
 $26 = (($this) + 44|0);
 HEAP32[$26>>2] = $23;
 $27 = HEAP32[$0>>2]|0;
 $28 = $27 | 1;
 HEAP32[$0>>2] = $28;
 $$0 = 0;
 return ($$0|0);
}
function __ZN6toybox6TbHeap8AllocateEmmNS0_9AllocTypeE($this,$size,$align,$type) {
 $this = $this|0;
 $size = $size|0;
 $align = $align|0;
 $type = $type|0;
 var $$ = 0, $$$lcssa = 0, $$$lcssa115 = 0, $$$lcssa116 = 0, $$$lcssa17 = 0, $$$us = 0, $$$us$lcssa = 0, $$$us$lcssa93 = 0, $$0 = 0, $$in = 0, $$lcssa = 0, $$lcssa101 = 0, $$lcssa102 = 0, $$lcssa105 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa118 = 0, $$lcssa119 = 0;
 var $$lcssa122 = 0, $$lcssa124 = 0, $$lcssa125 = 0, $$lcssa128 = 0, $$lcssa14 = 0, $$lcssa15 = 0, $$lcssa16 = 0, $$lcssa18 = 0, $$lcssa19 = 0, $$lcssa21 = 0, $$lcssa22 = 0, $$lcssa23 = 0, $$lcssa24 = 0, $$lcssa87 = 0, $$lcssa88 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa95 = 0, $$lcssa96 = 0, $$lcssa99 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre79 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $header$0$i = 0, $header$0$lcssa10 = 0, $header$0$lcssa11 = 0, $header$01$i = 0, $header$025 = 0, $header$025$lcssa = 0, $header$025$lcssa107 = 0, $header$025$us = 0, $header$025$us$lcssa = 0, $header$025$us$lcssa85 = 0, $header$03$i = 0, $i$02$i = 0, $or$cond = 0, $or$cond81 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($type|0)==(0);
 $1 = (($this) + 36|0);
 $2 = (($this) + 40|0);
 $$in = $0 ? $1 : $2;
 $3 = HEAP32[$$in>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($align) + -1)|0;
 $6 = (($5) + ($size))|0;
 $7 = (0 - ($align))|0;
 $8 = $6 & $7;
 do {
  if ($0) {
   $header$025$us = $3;
   while(1) {
    $9 = $header$025$us;
    $10 = (($9) + 72)|0;
    $11 = $10 & $5;
    $12 = ($11|0)==(0);
    $13 = (($align) - ($11))|0;
    $$$us = $12 ? 0 : $13;
    $14 = (($$$us) + 72)|0;
    $15 = (($14) + ($8))|0;
    $16 = (($header$025$us) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15>>>0)>($17>>>0);
    $$pre = (($14) + ($15))|0;
    $19 = ($17>>>0)>($$pre>>>0);
    $or$cond = $18 | $19;
    if (!($or$cond)) {
     $$$us$lcssa = $$$us;$$lcssa101 = $16;$$lcssa87 = $9;$$lcssa90 = $10;$$lcssa95 = $14;$header$025$us$lcssa = $header$025$us;
     label = 9;
     break;
    }
    $20 = ($17>>>0)>($$pre>>>0);
    if ($20) {
     $$$us$lcssa93 = $$$us;$$lcssa102 = $16;$$lcssa105 = $17;$$lcssa88 = $9;$$lcssa91 = $10;$$lcssa96 = $14;$$lcssa99 = $15;$header$025$us$lcssa85 = $header$025$us;
     label = 21;
     break;
    }
    $21 = HEAP32[$header$025$us>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     label = 61;
     break;
    } else {
     $header$025$us = $21;
    }
   }
   if ((label|0) == 9) {
    $$$lcssa = $$$us$lcssa;$$lcssa = $$lcssa87;$$lcssa15 = $$lcssa90;$$lcssa18 = $$lcssa95;$$lcssa22 = $$lcssa101;$header$0$lcssa10 = $header$025$us$lcssa;
    label = 11;
    break;
   }
   else if ((label|0) == 21) {
    $$$lcssa17 = $$$us$lcssa93;$$lcssa14 = $$lcssa88;$$lcssa16 = $$lcssa91;$$lcssa19 = $$lcssa96;$$lcssa21 = $$lcssa99;$$lcssa23 = $$lcssa102;$$lcssa24 = $$lcssa105;$header$0$lcssa11 = $header$025$us$lcssa85;
    label = 23;
    break;
   }
   else if ((label|0) == 61) {
    label = 63;
    break;
   }
  } else {
   $header$025 = $3;
   while(1) {
    $23 = $header$025;
    $24 = (($23) + 72)|0;
    $25 = $24 & $5;
    $26 = ($25|0)==(0);
    $27 = (($align) - ($25))|0;
    $$ = $26 ? 0 : $27;
    $28 = (($$) + 72)|0;
    $29 = (($28) + ($8))|0;
    $30 = (($header$025) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29>>>0)>($31>>>0);
    $$pre79 = (($28) + ($29))|0;
    $33 = ($31>>>0)>($$pre79>>>0);
    $or$cond81 = $32 | $33;
    if (!($or$cond81)) {
     $$$lcssa115 = $$;$$lcssa109 = $23;$$lcssa112 = $24;$$lcssa118 = $28;$$lcssa124 = $30;$header$025$lcssa = $header$025;
     label = 10;
     break;
    }
    $67 = ($31>>>0)>($$pre79>>>0);
    if ($67) {
     $$$lcssa116 = $$;$$lcssa110 = $23;$$lcssa113 = $24;$$lcssa119 = $28;$$lcssa122 = $29;$$lcssa125 = $30;$$lcssa128 = $31;$header$025$lcssa107 = $header$025;
     label = 22;
     break;
    }
    $169 = (($header$025) + 4|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)==(0|0);
    if ($171) {
     label = 62;
     break;
    } else {
     $header$025 = $170;
    }
   }
   if ((label|0) == 10) {
    $$$lcssa = $$$lcssa115;$$lcssa = $$lcssa109;$$lcssa15 = $$lcssa112;$$lcssa18 = $$lcssa118;$$lcssa22 = $$lcssa124;$header$0$lcssa10 = $header$025$lcssa;
    label = 11;
    break;
   }
   else if ((label|0) == 22) {
    $$$lcssa17 = $$$lcssa116;$$lcssa14 = $$lcssa110;$$lcssa16 = $$lcssa113;$$lcssa19 = $$lcssa119;$$lcssa21 = $$lcssa122;$$lcssa23 = $$lcssa125;$$lcssa24 = $$lcssa128;$header$0$lcssa11 = $header$025$lcssa107;
    label = 23;
    break;
   }
   else if ((label|0) == 62) {
    label = 63;
    break;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $34 = HEAP32[$1>>2]|0;
  $35 = ($34|0)==($header$0$lcssa10|0);
  if ($35) {
   $36 = HEAP32[$header$0$lcssa10>>2]|0;
   HEAP32[$1>>2] = $36;
  }
  $37 = HEAP32[$2>>2]|0;
  $38 = ($37|0)==($header$0$lcssa10|0);
  $39 = (($header$0$lcssa10) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  if ($38) {
   HEAP32[$2>>2] = $40;
  }
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $42 = HEAP32[$header$0$lcssa10>>2]|0;
   HEAP32[$40>>2] = $42;
  }
  $43 = HEAP32[$header$0$lcssa10>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $45 = (($43) + 4|0);
   HEAP32[$45>>2] = $40;
  }
  HEAP32[$39>>2] = 0;
  HEAP32[$header$0$lcssa10>>2] = 0;
  $46 = (($header$0$lcssa10) + 68|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = $48 | 1;
  $50 = $49&65535;
  HEAP16[$46>>1] = $50;
  $51 = $$lcssa18&65535;
  $52 = (($header$0$lcssa10) + 70|0);
  HEAP16[$52>>1] = $51;
  $53 = (($$$lcssa) + ($$lcssa15))|0;
  $54 = $53;
  $55 = (($54) + -2|0);
  HEAP16[$55>>1] = $51;
  $56 = HEAP16[$52>>1]|0;
  $57 = $56&65535;
  $58 = (($57) + ($$lcssa))|0;
  $59 = $58;
  _memset(($59|0),-51,($8|0))|0;
  $60 = HEAP32[$$lcssa22>>2]|0;
  $61 = (($this) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) - ($60))|0;
  HEAP32[$61>>2] = $63;
  $64 = (($this) + 32|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 1)|0;
  HEAP32[$64>>2] = $66;
  $$0 = $59;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 23) {
  if ($0) {
   $68 = (($$lcssa21) + ($$lcssa14))|0;
   $69 = $68;
   $70 = $68;
   dest=$70+0|0; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $71 = HEAP32[$$lcssa23>>2]|0;
   $72 = (($71) - ($$lcssa21))|0;
   $73 = (($69) + 16|0);
   HEAP32[$73>>2] = $72;
   $74 = $$lcssa19&65535;
   $75 = (($header$0$lcssa11) + 70|0);
   HEAP16[$75>>1] = $74;
   $76 = (($$$lcssa17) + ($$lcssa16))|0;
   $77 = $76;
   $78 = (($77) + -2|0);
   HEAP16[$78>>1] = $74;
   HEAP32[$$lcssa23>>2] = $$lcssa21;
   $79 = (($header$0$lcssa11) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($69) + 8|0);
   HEAP32[$81>>2] = $80;
   $82 = HEAP32[$79>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = (($82) + 12|0);
    HEAP32[$84>>2] = $69;
   }
   HEAP32[$79>>2] = $69;
   $85 = (($69) + 12|0);
   HEAP32[$85>>2] = $header$0$lcssa11;
   $86 = HEAP32[$1>>2]|0;
   $87 = ($86>>>0)>($69>>>0);
   if ($87) {
    HEAP32[$1>>2] = $69;
    $95 = $69;
   } else {
    $95 = $86;
   }
   $88 = HEAP32[$2>>2]|0;
   $89 = ($88>>>0)<($69>>>0);
   if ($89) {
    HEAP32[$2>>2] = $69;
    $97 = $69;
   } else {
    $97 = $88;
   }
   $90 = HEAP32[$header$0$lcssa11>>2]|0;
   HEAP32[$69>>2] = $90;
   $91 = HEAP32[$header$0$lcssa11>>2]|0;
   $92 = ($91|0)==(0|0);
   if (!($92)) {
    $93 = (($91) + 4|0);
    HEAP32[$93>>2] = $69;
   }
   HEAP32[$header$0$lcssa11>>2] = $69;
   $94 = (($69) + 4|0);
   HEAP32[$94>>2] = $header$0$lcssa11;
   $96 = ($95|0)==($header$0$lcssa11|0);
   if ($96) {
    HEAP32[$1>>2] = $69;
   }
   $98 = ($97|0)==($header$0$lcssa11|0);
   $99 = (($header$0$lcssa11) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   if ($98) {
    HEAP32[$2>>2] = $100;
   }
   $101 = ($100|0)==(0|0);
   if ($101) {
    $102 = $69;
   } else {
    HEAP32[$100>>2] = $69;
    $$pre$i = HEAP32[$header$0$lcssa11>>2]|0;
    $102 = $$pre$i;
   }
   $103 = ($102|0)==(0|0);
   if (!($103)) {
    $104 = (($102) + 4|0);
    HEAP32[$104>>2] = $100;
   }
   HEAP32[$99>>2] = 0;
   HEAP32[$header$0$lcssa11>>2] = 0;
   $143 = $header$0$lcssa11;
  } else {
   $105 = (($$lcssa14) - ($$lcssa21))|0;
   $106 = (($$lcssa24) + ($105))|0;
   $107 = $106;
   $108 = $106;
   dest=$108+0|0; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $109 = (($107) + 16|0);
   HEAP32[$109>>2] = $$lcssa21;
   $110 = $$lcssa19&65535;
   $111 = (($107) + 70|0);
   HEAP16[$111>>1] = $110;
   $112 = (($106) + ($$lcssa19))|0;
   $113 = $112;
   $114 = (($113) + -2|0);
   HEAP16[$114>>1] = $110;
   $115 = HEAP32[$$lcssa23>>2]|0;
   $116 = (($115) - ($$lcssa21))|0;
   HEAP32[$$lcssa23>>2] = $116;
   $117 = (($header$0$lcssa11) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($107) + 8|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[$117>>2]|0;
   $121 = ($120|0)==(0|0);
   if (!($121)) {
    $122 = (($120) + 12|0);
    HEAP32[$122>>2] = $107;
   }
   HEAP32[$117>>2] = $107;
   $123 = (($107) + 12|0);
   HEAP32[$123>>2] = $header$0$lcssa11;
   $124 = HEAP32[$1>>2]|0;
   $125 = ($124>>>0)>($107>>>0);
   if ($125) {
    HEAP32[$1>>2] = $107;
    $133 = $107;
   } else {
    $133 = $124;
   }
   $126 = HEAP32[$2>>2]|0;
   $127 = ($126>>>0)<($107>>>0);
   if ($127) {
    HEAP32[$2>>2] = $107;
    $136 = $107;
   } else {
    $136 = $126;
   }
   $128 = HEAP32[$header$0$lcssa11>>2]|0;
   HEAP32[$107>>2] = $128;
   $129 = HEAP32[$header$0$lcssa11>>2]|0;
   $130 = ($129|0)==(0|0);
   if (!($130)) {
    $131 = (($129) + 4|0);
    HEAP32[$131>>2] = $107;
   }
   HEAP32[$header$0$lcssa11>>2] = $107;
   $132 = (($107) + 4|0);
   HEAP32[$132>>2] = $header$0$lcssa11;
   $134 = ($133|0)==($107|0);
   if ($134) {
    $135 = HEAP32[$107>>2]|0;
    HEAP32[$1>>2] = $135;
   }
   $137 = ($136|0)==($107|0);
   if ($137) {
    HEAP32[$2>>2] = $header$0$lcssa11;
   }
   $138 = HEAP32[$107>>2]|0;
   HEAP32[$header$0$lcssa11>>2] = $138;
   $139 = HEAP32[$107>>2]|0;
   $140 = ($139|0)==(0|0);
   if (!($140)) {
    $141 = (($139) + 4|0);
    HEAP32[$141>>2] = $header$0$lcssa11;
   }
   HEAP32[$132>>2] = 0;
   HEAP32[$107>>2] = 0;
   $143 = $107;
  }
  $142 = (($143) + 68|0);
  $144 = HEAP16[$142>>1]|0;
  $145 = $144&65535;
  $146 = $145 | 1;
  $147 = $146&65535;
  HEAP16[$142>>1] = $147;
  $148 = $143;
  $149 = (($143) + 70|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150&65535;
  $152 = (($151) + ($148))|0;
  $153 = $152;
  _memset(($153|0),-51,($8|0))|0;
  $154 = (($143) + 20|0);
  HEAP32[$154>>2] = 0;
  if ($0) {
   $155 = (($143) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 20|0);
   dest=$157+0|0; src=$154+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  } else {
   $158 = (($143) + 12|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($159) + 20|0);
   dest=$160+0|0; src=$154+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  }
  $161 = (($143) + 16|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($this) + 28|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) - ($162))|0;
  HEAP32[$163>>2] = $165;
  $166 = (($this) + 32|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 1)|0;
  HEAP32[$166>>2] = $168;
  $$0 = $153;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 63) {
  $172 = (($8) + 72)|0;
  HEAP32[$vararg_buffer>>2] = $172;
  __ZN6toybox8TbPrintfEPKcz(1944,$vararg_buffer);
  $header$01$i = HEAP32[$1>>2]|0;
  $173 = ($header$01$i|0)==(0|0);
  if ($173) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $header$03$i = $header$01$i;$i$02$i = 0;
  while(1) {
   $174 = (($header$03$i) + 16|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($header$03$i) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = HEAP32[$header$03$i>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $i$02$i;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $175;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $177;
   $vararg_ptr6 = (($vararg_buffer1) + 12|0);
   HEAP32[$vararg_ptr6>>2] = $header$03$i;
   $vararg_ptr7 = (($vararg_buffer1) + 16|0);
   HEAP32[$vararg_ptr7>>2] = $178;
   __ZN6toybox8TbPrintfEPKcz(1984,$vararg_buffer1);
   $179 = (($i$02$i) + 1)|0;
   $header$0$i = HEAP32[$header$03$i>>2]|0;
   $180 = ($header$0$i|0)==(0|0);
   if ($180) {
    break;
   } else {
    $header$03$i = $header$0$i;$i$02$i = $179;
   }
  }
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN6toybox6TbHeap10DeallocateEPv($this,$ptr) {
 $this = $this|0;
 $ptr = $ptr|0;
 var $$lcssa = 0, $$pre = 0, $$pre$i9 = 0, $$pre$phiZ2D = 0, $$pre25 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $forward$0 = 0, $forward$0$lcssa26 = 0, $forward$0$lcssa27 = 0, $forward$0$ph = 0, $header$0$i = 0, $header$0$i18 = 0, $header$01$i = 0, $header$01$i15 = 0, $header$03$i = 0, $header$03$i16 = 0, $i$02$i = 0, $i$02$i17 = 0, $offset$0$i = 0, $vararg_buffer = 0;
 var $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($ptr) + -2|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $ptr;
 $5 = (($4) - ($3))|0;
 $6 = $5;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($6) + 68|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 & 1;
 $14 = ($13<<16>>16)==(0);
 if ($14) {
  $15 = (($this) + 36|0);
  $header$01$i15 = HEAP32[$15>>2]|0;
  $16 = ($header$01$i15|0)==(0|0);
  if (!($16)) {
   $header$03$i16 = $header$01$i15;$i$02$i17 = 0;
   while(1) {
    $17 = (($header$03$i16) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($header$03$i16) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$header$03$i16>>2]|0;
    HEAP32[$vararg_buffer>>2] = $i$02$i17;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $18;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $20;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $header$03$i16;
    $vararg_ptr4 = (($vararg_buffer) + 16|0);
    HEAP32[$vararg_ptr4>>2] = $21;
    __ZN6toybox8TbPrintfEPKcz(1984,$vararg_buffer);
    $22 = (($i$02$i17) + 1)|0;
    $header$0$i18 = HEAP32[$header$03$i16>>2]|0;
    $23 = ($header$0$i18|0)==(0|0);
    if ($23) {
     break;
    } else {
     $header$03$i16 = $header$0$i18;$i$02$i17 = $22;
    }
   }
  }
  $24 = (($this) + 44|0);
  $header$01$i = HEAP32[$24>>2]|0;
  $25 = ($header$01$i|0)==(0|0);
  if ($25) {
   STACKTOP = sp;return;
  }
  $header$03$i = $header$01$i;$i$02$i = 0;
  while(1) {
   $26 = (($header$03$i) + 68|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 & 1;
   $29 = ($28<<16>>16)==(0);
   $30 = (($header$03$i) + 70|0);
   $31 = HEAP16[$30>>1]|0;
   if ($29) {
    $$pre25 = $31&65535;
    $$pre$phiZ2D = $$pre25;$offset$0$i = 0;
   } else {
    $32 = $31&65535;
    $$sum$i = (($32) + -2)|0;
    $33 = (($header$03$i) + ($$sum$i)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    $$pre$phiZ2D = $32;$offset$0$i = $35;
   }
   $36 = (($header$03$i) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($header$03$i) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($header$03$i) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $i$02$i;
   $vararg_ptr8 = (($vararg_buffer5) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $37;
   $vararg_ptr9 = (($vararg_buffer5) + 8|0);
   HEAP32[$vararg_ptr9>>2] = $$pre$phiZ2D;
   $vararg_ptr10 = (($vararg_buffer5) + 12|0);
   HEAP32[$vararg_ptr10>>2] = $offset$0$i;
   $vararg_ptr11 = (($vararg_buffer5) + 16|0);
   HEAP32[$vararg_ptr11>>2] = $39;
   $vararg_ptr12 = (($vararg_buffer5) + 20|0);
   HEAP32[$vararg_ptr12>>2] = $header$03$i;
   $vararg_ptr13 = (($vararg_buffer5) + 24|0);
   HEAP32[$vararg_ptr13>>2] = $41;
   __ZN6toybox8TbPrintfEPKcz(2040,$vararg_buffer5);
   $42 = (($i$02$i) + 1)|0;
   $header$0$i = HEAP32[$40>>2]|0;
   $43 = ($header$0$i|0)==(0|0);
   if ($43) {
    break;
   } else {
    $header$03$i = $header$0$i;$i$02$i = $42;
   }
  }
  STACKTOP = sp;return;
 }
 $44 = (($this) + 32|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -1)|0;
 HEAP32[$44>>2] = $46;
 $47 = ($8|0)==(0|0);
 if (!($47)) {
  $48 = (($8) + 68|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 & 1;
  $51 = ($50<<16>>16)==(0);
  if ($51) {
   $52 = (($6) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($this) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($53))|0;
   HEAP32[$54>>2] = $56;
   $57 = (($this) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58>>>0)>($6>>>0);
   if ($59) {
    HEAP32[$57>>2] = $6;
    $82 = $6;
   } else {
    $82 = $58;
   }
   $60 = (($this) + 40|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61>>>0)<($6>>>0);
   if ($62) {
    HEAP32[$60>>2] = $6;
    $85 = $6;
   } else {
    $85 = $61;
   }
   $63 = (($8) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($6) + 4|0);
   HEAP32[$65>>2] = $64;
   $66 = HEAP32[$63>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    HEAP32[$66>>2] = $6;
   }
   HEAP32[$63>>2] = $6;
   HEAP32[$6>>2] = $8;
   $68 = $12&65535;
   $69 = $68 & 65534;
   $70 = $69&65535;
   HEAP16[$11>>1] = $70;
   $71 = (($8) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($53) + ($72))|0;
   HEAP32[$52>>2] = $73;
   $74 = (($8) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(0|0);
   $$pre$i9 = (($8) + 8|0);
   if (!($76)) {
    $77 = HEAP32[$$pre$i9>>2]|0;
    $78 = (($75) + 8|0);
    HEAP32[$78>>2] = $77;
   }
   $79 = HEAP32[$$pre$i9>>2]|0;
   $80 = ($79|0)==(0|0);
   if (!($80)) {
    $81 = (($79) + 12|0);
    HEAP32[$81>>2] = $75;
   }
   HEAP32[$74>>2] = 0;
   HEAP32[$$pre$i9>>2] = 0;
   $83 = ($82|0)==($8|0);
   if ($83) {
    $84 = HEAP32[$8>>2]|0;
    HEAP32[$57>>2] = $84;
    $109 = $84;
   } else {
    $109 = $82;
   }
   $86 = ($85|0)==($8|0);
   if ($86) {
    HEAP32[$60>>2] = $6;
    $100 = $6;
   } else {
    $100 = $85;
   }
   $87 = ($4|0)==($3|0);
   if (!($87)) {
    $88 = HEAP32[$8>>2]|0;
    HEAP32[$6>>2] = $88;
   }
   $89 = HEAP32[$8>>2]|0;
   $90 = ($89|0)==(0|0);
   if (!($90)) {
    $91 = (($89) + 4|0);
    HEAP32[$91>>2] = $6;
   }
   HEAP32[$63>>2] = 0;
   HEAP32[$8>>2] = 0;
   $92 = ($10|0)==(0|0);
   if ($92) {
    STACKTOP = sp;return;
   }
   $93 = (($10) + 68|0);
   $94 = HEAP16[$93>>1]|0;
   $95 = $94 & 1;
   $96 = ($95<<16>>16)==(0);
   if (!($96)) {
    STACKTOP = sp;return;
   }
   $97 = (($10) + 16|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($73))|0;
   HEAP32[$97>>2] = $99;
   $101 = ($100|0)==($6|0);
   if ($101) {
    HEAP32[$60>>2] = $10;
    $112 = $10;
   } else {
    $112 = $100;
   }
   $102 = HEAP32[$9>>2]|0;
   $103 = ($102|0)==(0|0);
   if (!($103)) {
    $104 = HEAP32[$7>>2]|0;
    $105 = (($102) + 8|0);
    HEAP32[$105>>2] = $104;
   }
   $106 = HEAP32[$7>>2]|0;
   $107 = ($106|0)==(0|0);
   if (!($107)) {
    $108 = (($106) + 12|0);
    HEAP32[$108>>2] = $102;
   }
   HEAP32[$9>>2] = 0;
   HEAP32[$7>>2] = 0;
   $110 = ($109|0)==($6|0);
   if ($110) {
    $111 = HEAP32[$6>>2]|0;
    HEAP32[$57>>2] = $111;
   }
   $113 = ($112|0)==($6|0);
   $114 = HEAP32[$65>>2]|0;
   if ($113) {
    HEAP32[$60>>2] = $114;
   }
   $115 = ($114|0)==(0|0);
   if (!($115)) {
    $116 = HEAP32[$6>>2]|0;
    HEAP32[$114>>2] = $116;
   }
   $117 = HEAP32[$6>>2]|0;
   $118 = ($117|0)==(0|0);
   if (!($118)) {
    $119 = (($117) + 4|0);
    HEAP32[$119>>2] = $114;
   }
   HEAP32[$65>>2] = 0;
   HEAP32[$6>>2] = 0;
   $120 = $5;
   $121 = HEAP32[$52>>2]|0;
   _memset(($120|0),0,($121|0))|0;
   STACKTOP = sp;return;
  }
 }
 $122 = ($10|0)==(0|0);
 if (!($122)) {
  $123 = (($10) + 68|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124 & 1;
  $126 = ($125<<16>>16)==(0);
  if ($126) {
   $127 = (($6) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($this) + 28|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($128))|0;
   HEAP32[$129>>2] = $131;
   $132 = (($10) + 16|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + ($128))|0;
   HEAP32[$132>>2] = $134;
   $135 = (($10) + 8|0);
   HEAP32[$135>>2] = $8;
   $$pre = HEAP32[$7>>2]|0;
   $136 = ($$pre|0)==(0|0);
   if (!($136)) {
    $137 = (($$pre) + 12|0);
    HEAP32[$137>>2] = $10;
   }
   HEAP32[$9>>2] = 0;
   HEAP32[$7>>2] = 0;
   $138 = $5;
   $139 = HEAP32[$127>>2]|0;
   _memset(($138|0),0,($139|0))|0;
   STACKTOP = sp;return;
  }
 }
 $140 = $12&65535;
 $141 = $140 & 65534;
 $142 = $141&65535;
 HEAP16[$11>>1] = $142;
 $143 = (($this) + 36|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ($144|0)==(0|0);
 if ($145) {
  $146 = (($this) + 40|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)==(0|0);
  if ($148) {
   HEAP32[$143>>2] = $6;
   HEAP32[$146>>2] = $6;
   $149 = (($6) + 16|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($this) + 28|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($152) + ($150))|0;
   HEAP32[$151>>2] = $153;
   STACKTOP = sp;return;
  } else {
   $forward$0$ph = 0;
  }
 } else {
  $forward$0$ph = $144;
 }
 $forward$0 = $forward$0$ph;
 while(1) {
  $154 = ($forward$0|0)==(0|0);
  if ($154) {
   label = 76;
   break;
  }
  $155 = ($6>>>0)<($forward$0>>>0);
  if ($155) {
   $forward$0$lcssa26 = $forward$0;
   label = 61;
   break;
  }
  $165 = HEAP32[$forward$0>>2]|0;
  $166 = ($165|0)==(0|0);
  if ($166) {
   $$lcssa = $forward$0;$forward$0$lcssa27 = $forward$0;
   label = 69;
   break;
  } else {
   $forward$0 = $165;
  }
 }
 if ((label|0) == 61) {
  $156 = ($144>>>0)>($6>>>0);
  if ($156) {
   HEAP32[$143>>2] = $6;
  }
  $157 = (($this) + 40|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($158>>>0)<($6>>>0);
  if ($159) {
   HEAP32[$157>>2] = $6;
  }
  $160 = (($forward$0$lcssa26) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($6) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = HEAP32[$160>>2]|0;
  $164 = ($163|0)==(0|0);
  if (!($164)) {
   HEAP32[$163>>2] = $6;
  }
  HEAP32[$160>>2] = $6;
  HEAP32[$6>>2] = $forward$0$lcssa26;
 }
 else if ((label|0) == 69) {
  $167 = ($144>>>0)>($6>>>0);
  if ($167) {
   HEAP32[$143>>2] = $6;
  }
  $168 = (($this) + 40|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169>>>0)<($6>>>0);
  if ($170) {
   HEAP32[$168>>2] = $6;
  }
  HEAP32[$6>>2] = 0;
  $171 = HEAP32[$$lcssa>>2]|0;
  $172 = ($171|0)==(0|0);
  if (!($172)) {
   $173 = (($171) + 4|0);
   HEAP32[$173>>2] = $6;
  }
  HEAP32[$$lcssa>>2] = $6;
  $174 = (($6) + 4|0);
  HEAP32[$174>>2] = $forward$0$lcssa27;
 }
 else if ((label|0) == 76) {
 }
 $175 = (($6) + 16|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (($this) + 28|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + ($176))|0;
 HEAP32[$177>>2] = $179;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[616>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iii[$3 & 255]($1,$size)|0);
 return ($4|0);
}
function __ZdlPv($pv) {
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[616>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 255]($1,$pv);
 return;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[616>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iii[$3 & 255]($1,$size)|0);
 return ($4|0);
}
function __ZdaPv($pv) {
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[616>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 255]($1,$pv);
 return;
}
function __ZN6toybox17TbStringConverter11ParseSint32EPKc($str) {
 $str = $str|0;
 var $$0 = 0, $$off$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $0;$p$01$i = $str;
 while(1) {
  $$off$i = (($5) + -48)<<24>>24;
  $6 = ($$off$i&255)<(10);
  $3 = (($p$01$i) + 1|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $2 = HEAP8[$3>>0]|0;
  $4 = ($2<<24>>24)==(0);
  if ($4) {
   label = 5;
   break;
  } else {
   $5 = $2;$p$01$i = $3;
  }
 }
 if ((label|0) == 5) {
  $7 = (_atoi($str)|0);
  $$0 = $7;
  return ($$0|0);
 }
 else if ((label|0) == 6) {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN6toybox13TbTaskManagerC2Em($this,$taskLineCount) {
 $this = $this|0;
 $taskLineCount = $taskLineCount|0;
 var $$012$i$i$i = 0, $$012$i$i$i2 = 0, $$03$i$i$i = 0, $$03$i$i$i1 = 0, $$index1 = 0, $$index3 = 0, $$index5 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i4 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $exitcond$i = 0;
 var $i$01$i = 0, $info$sroa$7 = 0, $phitmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info$sroa$7 = sp;
 HEAP32[$this>>2] = ((2304 + 8|0));
 $0 = HEAP32[2320>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[2320>>2] = $this;
 }
 HEAP32[$this>>2] = ((2184 + 8|0));
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($this) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 12|0);
 HEAP8[$4>>0]=0&255;HEAP8[$4+1>>0]=(0>>8)&255;HEAP8[$4+2>>0]=(0>>16)&255;HEAP8[$4+3>>0]=0>>24;
 $$index1 = (($4) + 4|0);
 HEAP8[$$index1>>0]=0&255;HEAP8[$$index1+1>>0]=(0>>8)&255;HEAP8[$$index1+2>>0]=(0>>16)&255;HEAP8[$$index1+3>>0]=0>>24;
 $5 = (($this) + 20|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 24|0);
 $7 = (($this) + 48|0);
 ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;
 HEAP32[$7>>2] = 1;
 $8 = (($this) + 52|0);
 HEAP32[$8>>2] = 0;
 $9 = (($this) + 56|0);
 HEAP8[$9>>0]=0&255;HEAP8[$9+1>>0]=(0>>8)&255;HEAP8[$9+2>>0]=(0>>16)&255;HEAP8[$9+3>>0]=0>>24;
 $$index3 = (($9) + 4|0);
 HEAP8[$$index3>>0]=0&255;HEAP8[$$index3+1>>0]=(0>>8)&255;HEAP8[$$index3+2>>0]=(0>>16)&255;HEAP8[$$index3+3>>0]=0>>24;
 $10 = (($this) + 64|0);
 HEAP32[$10>>2] = -1;
 $11 = (($this) + 68|0);
 $12 = (($this) + 92|0);
 ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;HEAP32[$11+20>>2]=0|0;
 HEAP32[$12>>2] = 1;
 $13 = (($this) + 96|0);
 HEAP32[$13>>2] = 0;
 $14 = (($this) + 100|0);
 HEAP8[$14>>0]=0&255;HEAP8[$14+1>>0]=(0>>8)&255;HEAP8[$14+2>>0]=(0>>16)&255;HEAP8[$14+3>>0]=0>>24;
 $$index5 = (($14) + 4|0);
 HEAP8[$$index5>>0]=0&255;HEAP8[$$index5+1>>0]=(0>>8)&255;HEAP8[$$index5+2>>0]=(0>>16)&255;HEAP8[$$index5+3>>0]=0>>24;
 $15 = (($this) + 108|0);
 HEAP32[$15>>2] = -1;
 $16 = (($this) + 112|0);
 $17 = (($this) + 136|0);
 ;HEAP32[$16+0>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;HEAP32[$16+16>>2]=0|0;HEAP32[$16+20>>2]=0|0;
 HEAP32[$17>>2] = 1;
 $18 = (($this) + 140|0);
 $19 = (($this) + 144|0);
 $20 = (($this) + 152|0);
 $21 = ($taskLineCount|0)>(0);
 ;HEAP32[$18+0>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;
 if ($21) {
  $22 = HEAP32[616>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($taskLineCount*44)|0;
  $27 = (FUNCTION_TABLE_iii[$25 & 255]($23,$26)|0);
  $28 = HEAP32[$20>>2]|0;
  $29 = ($28|0)==(0|0);
  if (!($29)) {
   $30 = HEAP32[$19>>2]|0;
   $31 = (($28) + (($30*44)|0)|0);
   $32 = ($30|0)==(0);
   if ($32) {
    $41 = $28;
   } else {
    $$012$i$i$i2 = $27;$$03$i$i$i1 = $28;
    while(1) {
     dest=$$012$i$i$i2+0|0; src=$$03$i$i$i1+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $33 = (($$012$i$i$i2) + 44|0);
     $34 = (($$03$i$i$i1) + 44|0);
     $35 = ($34|0)==($31|0);
     if ($35) {
      break;
     } else {
      $$012$i$i$i2 = $33;$$03$i$i$i1 = $34;
     }
    }
    $$pre$i$i4 = HEAP32[$20>>2]|0;
    $41 = $$pre$i$i4;
   }
   $36 = HEAP32[616>>2]|0;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   FUNCTION_TABLE_vii[$40 & 255]($37,$41);
  }
  HEAP32[$20>>2] = $27;
  HEAP32[$18>>2] = $taskLineCount;
  $$pre = HEAP32[$19>>2]|0;
  $44 = $$pre;$46 = $taskLineCount;$85 = $27;
 } else {
  $44 = 0;$46 = 0;$85 = 0;
 }
 $42 = (($this) + 160|0);
 HEAP32[$42>>2] = 0;
 ;HEAP32[$info$sroa$7+0>>2]=0|0;HEAP32[$info$sroa$7+4>>2]=0|0;HEAP32[$info$sroa$7+8>>2]=0|0;HEAP32[$info$sroa$7+12>>2]=0|0;HEAP32[$info$sroa$7+16>>2]=0|0;HEAP32[$info$sroa$7+20>>2]=0|0;
 $43 = (($44) + ($taskLineCount))|0;
 $45 = ($43|0)>($46|0);
 if ($45) {
  $47 = (($this) + 148|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0);
  if ($49) {
   STACKTOP = sp;return;
  }
  $50 = $44 << 1;
  $51 = ($43>>>0)>($50>>>0);
  $52 = $51 ? $43 : $50;
  $53 = ($46|0)<($52|0);
  if ($53) {
   $54 = HEAP32[616>>2]|0;
   $55 = (($54) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   $58 = ($52*44)|0;
   $59 = (FUNCTION_TABLE_iii[$57 & 255]($55,$58)|0);
   $60 = HEAP32[$20>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    $62 = HEAP32[$19>>2]|0;
    $63 = (($60) + (($62*44)|0)|0);
    $64 = ($62|0)==(0);
    if ($64) {
     $73 = $60;
    } else {
     $$012$i$i$i = $59;$$03$i$i$i = $60;
     while(1) {
      dest=$$012$i$i$i+0|0; src=$$03$i$i$i+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $65 = (($$012$i$i$i) + 44|0);
      $66 = (($$03$i$i$i) + 44|0);
      $67 = ($66|0)==($63|0);
      if ($67) {
       break;
      } else {
       $$012$i$i$i = $65;$$03$i$i$i = $66;
      }
     }
     $$pre$i$i = HEAP32[$20>>2]|0;
     $73 = $$pre$i$i;
    }
    $68 = HEAP32[616>>2]|0;
    $69 = (($68) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vii[$72 & 255]($69,$73);
   }
   HEAP32[$20>>2] = $59;
   HEAP32[$18>>2] = $52;
   $86 = $59;
  } else {
   $86 = $85;
  }
 } else {
  $86 = $85;
 }
 $74 = ($taskLineCount|0)==(0);
 if ($74) {
  STACKTOP = sp;return;
 }
 $$pre$i = HEAP32[$19>>2]|0;
 $76 = $86;$77 = $$pre$i;$i$01$i = 1;
 while(1) {
  $75 = (($76) + (($77*44)|0)|0);
  HEAP32[$75>>2] = 0;
  $78 = ((($76) + (($77*44)|0)|0) + 4|0);
  HEAP32[$78>>2] = 0;
  $79 = ((($76) + (($77*44)|0)|0) + 8|0);
  HEAP32[$79>>2] = 0;
  $80 = ((($76) + (($77*44)|0)|0) + 12|0);
  HEAP32[$80>>2] = -1;
  $81 = ((($76) + (($77*44)|0)|0) + 16|0);
  ;HEAP32[$81+0>>2]=HEAP32[$info$sroa$7+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$info$sroa$7+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$info$sroa$7+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$info$sroa$7+12>>2]|0;HEAP32[$81+16>>2]=HEAP32[$info$sroa$7+16>>2]|0;HEAP32[$81+20>>2]=HEAP32[$info$sroa$7+20>>2]|0;
  $82 = ((($76) + (($77*44)|0)|0) + 40|0);
  HEAP32[$82>>2] = 1;
  $83 = HEAP32[$19>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$19>>2] = $84;
  $exitcond$i = ($i$01$i|0)==($taskLineCount|0);
  if ($exitcond$i) {
   break;
  }
  $$pre8 = HEAP32[$20>>2]|0;
  $phitmp = (($i$01$i) + 1)|0;
  $76 = $$pre8;$77 = $84;$i$01$i = $phitmp;
 }
 STACKTOP = sp;return;
}
function __ZN6toybox13TbTaskManagerD2Ev($this) {
 $this = $this|0;
 var $$0$i$i = 0, $$0$i2$i = 0, $$0$i2$i7 = 0, $$0$i2$i7$1 = 0, $$0$i2$i7$2 = 0, $$pre = 0, $$pre14 = 0, $$pre14$lcssa = 0, $$pre15 = 0, $$pre16 = 0, $$pre18 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0;
 var $exitcond = 0, $i$013 = 0, $line$off$i$i$i = 0, $next$0$i = 0, $next$0$i2 = 0, $next$0$i8 = 0, $next$0$i8$1 = 0, $next$0$i8$2 = 0, $node$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2184 + 8|0));
 $0 = (($this) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $85 = $1;$node$0 = $1;
  while(1) {
   $3 = (($node$0) + 28|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($node$0|0)==(0|0);
   if ($5) {
    $7 = $85;
   } else {
    __ZdlPv($node$0);
    $$pre18 = HEAP32[$0>>2]|0;
    $7 = $$pre18;
   }
   $6 = ($4|0)==($7|0);
   if ($6) {
    break;
   } else {
    $85 = $7;$node$0 = $4;
   }
  }
  HEAP32[$0>>2] = 0;
 }
 $8 = (($this) + 144|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(2415918850);
 if ($10) {
  $11 = (($this) + 152|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + -1073753000|0);
  $$0$i$i = $13;
 } else {
  $14 = (($this) + 96|0);
  $$0$i$i = $14;
 }
 $15 = (($$0$i$i) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $31 = $9;
 } else {
  $next$0$i = $16;
  while(1) {
   $18 = (($next$0$i) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$next$0$i>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $22 = (($20) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if (!($24)) {
     $25 = (($23) + -1)|0;
     HEAP32[$22>>2] = $25;
     $26 = ($25|0)==(0);
     if ($26) {
      $27 = HEAP32[$20>>2]|0;
      $28 = (($27) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      FUNCTION_TABLE_vi[$29 & 255]($20);
     }
    }
    HEAP32[$next$0$i>>2] = 0;
   }
   __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$next$0$i);
   $30 = ($19|0)==($next$0$i|0);
   if ($30) {
    break;
   } else {
    $next$0$i = $19;
   }
  }
  $$pre = HEAP32[$8>>2]|0;
  $31 = $$pre;
 }
 $32 = ($31|0)==(0);
 $$pre19 = (($this) + 152|0);
 if ($32) {
  $86 = 0;
  label = 31;
 } else {
  $34 = $31;$i$013 = 0;
  while(1) {
   $35 = ($34>>>0)>($i$013>>>0);
   if ($35) {
    $38 = HEAP32[$$pre19>>2]|0;
    $39 = (($38) + (($i$013*44)|0)|0);
    $40 = ($39|0)==(0|0);
    if (!($40)) {
     $$0$i2$i = $39;
     label = 26;
    }
   } else {
    $line$off$i$i$i = (($i$013) + 1879048448)|0;
    $36 = ($line$off$i$i$i>>>0)<(3);
    if ($36) {
     $37 = ((($this) + (($line$off$i$i$i*44)|0)|0) + 8|0);
     $$0$i2$i = $37;
     label = 26;
    }
   }
   if ((label|0) == 26) {
    label = 0;
    $41 = (($$0$i2$i) + 20|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0|0);
    if (!($43)) {
     $next$0$i2 = $42;
     while(1) {
      $44 = (($next$0$i2) + 28|0);
      $45 = HEAP32[$44>>2]|0;
      __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$next$0$i2);
      $46 = ($45|0)==($next$0$i2|0);
      if ($46) {
       break;
      } else {
       $next$0$i2 = $45;
      }
     }
    }
   }
   $47 = (($i$013) + 1)|0;
   $exitcond = ($47|0)==($31|0);
   $$pre14 = HEAP32[$8>>2]|0;
   if ($exitcond) {
    $$pre14$lcssa = $$pre14;
    break;
   } else {
    $34 = $$pre14;$i$013 = $47;
   }
  }
  $33 = ($$pre14$lcssa>>>0)>(2415918848);
  if ($33) {
   $49 = HEAP32[$$pre19>>2]|0;
   $50 = (($49) + -1073753088|0);
   $$0$i2$i7 = $50;$87 = $$pre14$lcssa;
  } else {
   $86 = $$pre14$lcssa;
   label = 31;
  }
 }
 if ((label|0) == 31) {
  $48 = (($this) + 8|0);
  $$0$i2$i7 = $48;$87 = $86;
 }
 $51 = (($$0$i2$i7) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if ($53) {
  $57 = $87;
 } else {
  $next$0$i8 = $52;
  while(1) {
   $54 = (($next$0$i8) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$next$0$i8);
   $56 = ($55|0)==($next$0$i8|0);
   if ($56) {
    break;
   } else {
    $next$0$i8 = $55;
   }
  }
  $$pre15 = HEAP32[$8>>2]|0;
  $57 = $$pre15;
 }
 $58 = ($57>>>0)>(2415918849);
 if ($58) {
  $60 = HEAP32[$$pre19>>2]|0;
  $61 = (($60) + -1073753044|0);
  $$0$i2$i7$1 = $61;
 } else {
  $59 = (($this) + 52|0);
  $$0$i2$i7$1 = $59;
 }
 $62 = (($$0$i2$i7$1) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $68 = $57;
 } else {
  $next$0$i8$1 = $63;
  while(1) {
   $65 = (($next$0$i8$1) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$next$0$i8$1);
   $67 = ($66|0)==($next$0$i8$1|0);
   if ($67) {
    break;
   } else {
    $next$0$i8$1 = $66;
   }
  }
  $$pre16 = HEAP32[$8>>2]|0;
  $68 = $$pre16;
 }
 $69 = ($68>>>0)>(2415918850);
 if ($69) {
  $71 = HEAP32[$$pre19>>2]|0;
  $72 = (($71) + -1073753000|0);
  $$0$i2$i7$2 = $72;
 } else {
  $70 = (($this) + 96|0);
  $$0$i2$i7$2 = $70;
 }
 $73 = (($$0$i2$i7$2) + 20|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $79 = HEAP32[$$pre19>>2]|0;
  $80 = HEAP32[616>>2]|0;
  $81 = (($80) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  FUNCTION_TABLE_vii[$84 & 255]($81,$79);
  HEAP32[$this>>2] = ((2304 + 8|0));
  HEAP32[2320>>2] = 0;
  return;
 }
 $next$0$i8$2 = $74;
 while(1) {
  $76 = (($next$0$i8$2) + 28|0);
  $77 = HEAP32[$76>>2]|0;
  __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$next$0$i8$2);
  $78 = ($77|0)==($next$0$i8$2|0);
  if ($78) {
   break;
  } else {
   $next$0$i8$2 = $77;
  }
 }
 $79 = HEAP32[$$pre19>>2]|0;
 $80 = HEAP32[616>>2]|0;
 $81 = (($80) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 FUNCTION_TABLE_vii[$84 & 255]($81,$79);
 HEAP32[$this>>2] = ((2304 + 8|0));
 HEAP32[2320>>2] = 0;
 return;
}
function __ZN6toybox13TbTaskManagerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6toybox13TbTaskManagerD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN6toybox13TbTaskManager6UpdateEv($this) {
 $this = $this|0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next$0$i = 0, $node$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $node$0 = $1;
  while(1) {
   $3 = (($node$0) + 28|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($node$0) + 24|0);
   HEAP32[$5>>2] = 0;
   HEAP32[$3>>2] = 0;
   $6 = ($node$0|0)==(0|0);
   if (!($6)) {
    $7 = (($node$0) + 16|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($8) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     HEAP32[$9>>2] = $node$0;
     HEAP32[$5>>2] = $node$0;
     HEAP32[$3>>2] = $node$0;
    } else {
     HEAP32[$3>>2] = $10;
     $12 = (($10) + 24|0);
     $13 = HEAP32[$12>>2]|0;
     HEAP32[$5>>2] = $13;
     $14 = HEAP32[$12>>2]|0;
     $15 = (($14) + 28|0);
     HEAP32[$15>>2] = $node$0;
     HEAP32[$12>>2] = $node$0;
    }
    $16 = (($node$0) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & -3;
    HEAP32[$16>>2] = $18;
   }
   $19 = ($4|0)==($1|0);
   if ($19) {
    break;
   } else {
    $node$0 = $4;
   }
  }
  HEAP32[$0>>2] = 0;
 }
 $20 = (($this) + 144|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)>(2415918850);
 if ($22) {
  $23 = (($this) + 152|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -1073753000|0);
  $$0$i$i = $25;
 } else {
  $26 = (($this) + 96|0);
  $$0$i$i = $26;
 }
 $27 = (($$0$i$i) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  return;
 }
 $next$0$i = $28;
 while(1) {
  $30 = (($next$0$i) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$next$0$i>>2]|0;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   $34 = (($32) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   if (!($36)) {
    $37 = (($35) + -1)|0;
    HEAP32[$34>>2] = $37;
    $38 = ($37|0)==(0);
    if ($38) {
     $39 = HEAP32[$32>>2]|0;
     $40 = (($39) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     FUNCTION_TABLE_vi[$41 & 255]($32);
    }
   }
   HEAP32[$next$0$i>>2] = 0;
  }
  __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$next$0$i);
  $42 = ($31|0)==($next$0$i|0);
  if ($42) {
   break;
  } else {
   $next$0$i = $31;
  }
 }
 return;
}
function __ZN6toybox13TbTaskManager11ExecuteTaskEm($this,$taskLine) {
 $this = $this|0;
 $taskLine = $taskLine|0;
 var $$ = 0, $$0$i5 = 0, $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $line$off$i$i = 0, $or$cond = 0, $removeTaskNode$0$taskNode$0 = 0, $taskNode$0$be = 0, $taskNode$07 = 0, $taskNode$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 144|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($taskLine>>>0);
 do {
  if ($2) {
   $5 = (($this) + 152|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + (($taskLine*44)|0)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    return;
   } else {
    $$0$i5 = $7;
   }
  } else {
   $line$off$i$i = (($taskLine) + 1879048448)|0;
   $3 = ($line$off$i$i>>>0)<(3);
   if ($3) {
    $4 = ((($this) + (($line$off$i$i*44)|0)|0) + 8|0);
    $$0$i5 = $4;
    break;
   } else {
    return;
   }
  }
 } while(0);
 $9 = (($$0$i5) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = (($$0$i5) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $taskNode$07 = $13;
 while(1) {
  $15 = HEAP32[$taskNode$07>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = (($taskNode$07) + 4|0);
   $$field = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
   $$index1 = (($17) + 4|0);
   $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
   $18 = $$field2 & 1;
   $19 = ($18|0)==(0);
   $20 = $18 | $$field;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $22 = (($taskNode$07) + 32|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & 5;
    $25 = ($24|0)==(1);
    if ($25) {
     $26 = $$field2 >> 1;
     $27 = (($15) + ($26)|0);
     if ($19) {
      $31 = $$field;
      $32 = $31;
     } else {
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) + ($$field)|0);
      $30 = HEAP32[$29>>2]|0;
      $32 = $30;
     }
     FUNCTION_TABLE_vi[$32 & 255]($27);
    }
   }
  }
  $33 = (($taskNode$07) + 32|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 4;
  $36 = ($35|0)==(0);
  $removeTaskNode$0$taskNode$0 = $36 ? 0 : $taskNode$07;
  $37 = (($taskNode$07) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($removeTaskNode$0$taskNode$0|0)!=(0|0);
  if ($39) {
   label = 17;
  } else {
   $40 = (($taskNode$07) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0|0);
   $43 = $34 & 9;
   $44 = ($43|0)==(9);
   $or$cond = $42 & $44;
   if ($or$cond) {
    $taskNode$0$be = $41;
   } else {
    label = 17;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   $45 = (($taskNode$07) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($38) + 20|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)==($48|0);
   if ($49) {
    $50 = ($38|0)==(0|0);
    if ($50) {
     $taskNode$1 = 0;
    } else {
     $51 = (($38) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if ($53) {
      $taskNode$1 = 0;
     } else {
      $54 = (($38) + 28|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($52) + 20|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($55|0)==($57|0);
      $$ = $58 ? 0 : $55;
      $taskNode$1 = $$;
     }
    }
   } else {
    $taskNode$1 = $46;
   }
   if ($39) {
    __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$removeTaskNode$0$taskNode$0);
    $taskNode$0$be = $taskNode$1;
   } else {
    $taskNode$0$be = $taskNode$1;
   }
  }
  $59 = ($taskNode$0$be|0)==(0|0);
  if ($59) {
   break;
  } else {
   $taskNode$07 = $taskNode$0$be;
  }
 }
 return;
}
function __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$node) {
 $this = $this|0;
 $node = $node|0;
 var $$ = 0, $$0$i2 = 0, $$lcssa = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $child$0 = 0, $line$off$i$i = 0, $reserveNode$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($node|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($node) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 144|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>($2>>>0);
 do {
  if ($5) {
   $8 = (($this) + 152|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + (($2*44)|0)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    return;
   } else {
    $$0$i2 = $10;
   }
  } else {
   $line$off$i$i = (($2) + 1879048448)|0;
   $6 = ($line$off$i$i>>>0)<(3);
   if ($6) {
    $7 = ((($this) + (($line$off$i$i*44)|0)|0) + 8|0);
    $$0$i2 = $7;
    break;
   } else {
    return;
   }
  }
 } while(0);
 $12 = (($$0$i2) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$12>>2] = $14;
 $15 = HEAP32[$node>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  (__ZN6toybox6TbTask14RemoveTaskLineEm($15,$2)|0);
 }
 $17 = (($node) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 2;
 $20 = ($19|0)==(0);
 if ($20) {
  $46 = (($node) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   $child$0 = $47;
   while(1) {
    $49 = (($child$0) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$child$0);
    $51 = HEAP32[$46>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     break;
    } else {
     $child$0 = $50;
    }
   }
  }
  $53 = (($node) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 20|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==($node|0);
  $58 = (($node) + 28|0);
  $59 = HEAP32[$58>>2]|0;
  if ($57) {
   $60 = ($59|0)==($node|0);
   $$ = $60 ? 0 : $59;
   HEAP32[$55>>2] = $$;
  }
  $61 = (($node) + 28|0);
  $62 = (($node) + 24|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + 28|0);
  HEAP32[$64>>2] = $59;
  $65 = HEAP32[$61>>2]|0;
  $66 = (($65) + 24|0);
  HEAP32[$66>>2] = $63;
 } else {
  $21 = (($this) + 160|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   $40 = 0;
  } else {
   $67 = $22;$reserveNode$0 = $22;
   while(1) {
    $24 = (($reserveNode$0) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($reserveNode$0) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==($node|0);
    if ($28) {
     $29 = HEAP32[$reserveNode$0>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      $32 = $67;
     } else {
      __ZN6toybox13TbTaskManager14deleteTaskNodeEPNS_10TbTaskNodeE($this,$reserveNode$0);
      $$pre5 = HEAP32[$21>>2]|0;
      $32 = $$pre5;
     }
    } else {
     $32 = $67;
    }
    $31 = ($25|0)==($32|0);
    if ($31) {
     $$lcssa = $25;
     break;
    } else {
     $67 = $32;$reserveNode$0 = $25;
    }
   }
   $40 = $$lcssa;
  }
  $33 = (($node) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($node) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 28|0);
  HEAP32[$37>>2] = $34;
  $38 = HEAP32[$33>>2]|0;
  $39 = (($38) + 24|0);
  HEAP32[$39>>2] = $36;
  $41 = ($40|0)==($node|0);
  if ($41) {
   $42 = HEAP32[$35>>2]|0;
   $43 = (($42) + 28|0);
   HEAP32[$43>>2] = $38;
   $44 = HEAP32[$33>>2]|0;
   $45 = (($44) + 24|0);
   HEAP32[$45>>2] = $42;
   HEAP32[$21>>2] = $44;
  }
 }
 __ZdlPv($node);
 return;
}
function __ZN6toybox14TbSingletonRefINS_13TbTaskManagerEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2304 + 8|0));
 HEAP32[2320>>2] = 0;
 return;
}
function __ZN6toybox14TbSingletonRefINS_13TbTaskManagerEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2304 + 8|0));
 HEAP32[2320>>2] = 0;
 __ZdlPv($this);
 return;
}
function __ZN6toybox6TbTick6UpdateEv() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $exp$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exp$i = sp;
 $0 = +HEAPF64[2328>>3];
 $1 = $0 < 1.1920928955078125E-7;
 if ($1) {
  $2 = (+__ZN6toybox6TbTick15GetMilliSecondsEv());
  HEAPF64[2328>>3] = $2;
 }
 $3 = (+__ZN6toybox6TbTick15GetMilliSecondsEv());
 $4 = +HEAPF64[2328>>3];
 $5 = $3 - $4;
 HEAPF64[2336>>3] = $5;
 HEAPF64[2328>>3] = $3;
 $6 = +HEAPF64[2344>>3];
 $7 = $6 > 1.1920928955078125E-7;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $5 / $6;
 $9 = $8;
 $10 = $9;
 $11 = (+_modf($10,$exp$i));
 $12 = $11;
 $13 = $9 - $12;
 $14 = $12 >= 0.5;
 $15 = $14 ? 1.0 : 0.0;
 $16 = $13 + $15;
 $17 = (~~(($16))>>>0);
 HEAP32[2352>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN6toybox6TbTick15GetMilliSecondsEv() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $time = sp;
 (_clock_gettime(1,($time|0))|0);
 $0 = HEAP32[$time>>2]|0;
 $1 = (+($0|0));
 $2 = $1 * 1000.0;
 $3 = (($time) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 $6 = $5 * 9.9999999999999995E-7;
 $7 = $2 + $6;
 STACKTOP = sp;return (+$7);
}
function __ZN6toybox15TbFileMapperStd11GetFileSizeEPKcy($this,$path,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN6toybox9TbFileStd11GetFileSizeEPKcy($path,$0,$1)|0);
 return ($2|0);
}
function __ZN6toybox15TbFileMapperStd10ExistsFileEPKcy($this,$path,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN6toybox9TbFileStd10ExistsFileEPKcy($path,$0,$1)|0);
 return ($2|0);
}
function __ZN6toybox15TbFileMapperStd15ExistsDirectoryEPKcy($this,$path,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN6toybox15TbFileMapperStd14CreateFileImplEPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($this,$path,$operateMode,$syncMode,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $operateMode = $operateMode|0;
 $syncMode = $syncMode|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__Znwj(596)|0);
 __ZN6toybox9TbFileStdC2EPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($2,$path,$operateMode,$syncMode,$0,$1);
 return ($2|0);
}
function __ZN6toybox15TbFileMapperStd15CreateDirectoryEPKcy($this,$path,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN6toybox15TbFileMapperStd15DeleteDirectoryEPKcy($this,$path,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN6toybox15TbFileMapperStd8GetFilesERNS_7TbArrayINS_7TbPathTINS_18TbStaticStringBaseIcLm512EEEEENS_22TbTemplateAllocatorStdIS5_EEEEPKcmy($this,$result,$path,$searchFlag,$0,$1) {
 $this = $this|0;
 $result = $result|0;
 $path = $path|0;
 $searchFlag = $searchFlag|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN6toybox15TbFileMapperStd14GetDirectoriesERNS_7TbArrayINS_7TbPathTINS_18TbStaticStringBaseIcLm512EEEEENS_22TbTemplateAllocatorStdIS5_EEEEPKcmy($this,$result,$path,$searchFlag,$0,$1) {
 $this = $this|0;
 $result = $result|0;
 $path = $path|0;
 $searchFlag = $searchFlag|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN6toybox15TbFileMapperStd20GetFileSystemEntriesERNS_7TbArrayINS_7TbPathTINS_18TbStaticStringBaseIcLm512EEEEENS_22TbTemplateAllocatorStdIS5_EEEEPKcmy($this,$result,$path,$searchFlag,$0,$1) {
 $this = $this|0;
 $result = $result|0;
 $path = $path|0;
 $searchFlag = $searchFlag|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK6toybox15TbFileMapperStd8IsEnableEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN6toybox9TbConsole6CreateEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN6toybox9TbConsole6DeleteEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN6toybox9TbFileStd11GetFileSizeEPKcy($path,$0,$1) {
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 __ZN6toybox5inner17TbFileUtilPrivate11GetFullPathEPKcy($2,$path,$0,$1);
 $3 = (_fopen(($2|0),(2968|0))|0);
 (_fseek(($3|0),0,2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_ftell(($3|0))|0);
 (_fclose(($3|0))|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function __ZN6toybox9TbFileStd10ExistsFileEPKcy($path,$0,$1) {
 $path = $path|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 __ZN6toybox5inner17TbFileUtilPrivate11GetFullPathEPKcy($2,$path,$0,$1);
 $3 = (_fopen(($2|0),(2968|0))|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_fclose(($3|0))|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN6toybox9TbFileStdC2EPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($this,$path,$operateMode,$syncMode,$0,$1) {
 $this = $this|0;
 $path = $path|0;
 $operateMode = $operateMode|0;
 $syncMode = $syncMode|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6toybox10TbFileImplC2EPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($this,$path,$operateMode,$syncMode,$0,$1);
 HEAP32[$this>>2] = ((2488 + 8|0));
 $2 = (($this) + 592|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN6toybox9TbFileStdD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2488 + 8|0));
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = 1;
 $1 = (($this) + 592|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN6toybox10TbFileImplD2Ev($this);
  return;
 }
 (_fclose(($2|0))|0);
 HEAP32[$1>>2] = 0;
 __ZN6toybox10TbFileImplD2Ev($this);
 return;
}
function __ZN6toybox9TbFileStdD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2488 + 8|0));
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = 1;
 $1 = (($this) + 592|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  (_fclose(($2|0))|0);
  HEAP32[$1>>2] = 0;
 }
 __ZN6toybox10TbFileImplD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN6toybox9TbFileStd4OpenEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($this) + 592|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($this) + 524|0);
 $4 = HEAP32[$3>>2]|0;
 $cond = ($4|0)==(0);
 if (!($cond)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 8|0);
 HEAP32[$5>>2] = 2;
 $6 = (($this) + 532|0);
 $7 = HEAP32[$6>>2]|0;
 $cond1 = ($7|0)==(1);
 if (!($cond1)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($this) + 12|0);
 $9 = (_fopen(($8|0),(2968|0))|0);
 HEAP32[$0>>2] = $9;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $8;
  __ZN6toybox8TbPrintfEPKcz(2544,$vararg_buffer);
  HEAP32[$5>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer1>>2] = $8;
  __ZN6toybox8TbPrintfEPKcz(2576,$vararg_buffer1);
  HEAP32[$5>>2] = 2;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN6toybox9TbFileStd4SeekEl12TbIOSeekType($this,$offset,$type) {
 $this = $this|0;
 $offset = $offset|0;
 $type = $type|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 592|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($type>>>0)<(3);
 if ($3) {
  $4 = (4616 + ($type<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $$0$i = $5;
 } else {
  $$0$i = 1;
 }
 (_fseek(($1|0),($offset|0),($$0$i|0))|0);
 $$0 = 1;
 return ($$0|0);
}
function __ZNK6toybox9TbFileStd7GetSeekEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 592|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 (_fseek(($1|0),0,1)|0);
 $$0 = 1;
 return ($$0|0);
}
function __ZNK6toybox9TbFileStd11GetFileSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 592|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $3 = (_ftell(($1|0))|0);
 $4 = HEAP32[$0>>2]|0;
 (_fseek(($4|0),0,2)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = (_ftell(($5|0))|0);
 $7 = HEAP32[$0>>2]|0;
 (_fseek(($7|0),($3|0),0)|0);
 $result$0 = $6;
 return ($result$0|0);
}
function __ZN6toybox9TbFileStd12ReadSyncImplEPvmlPm($this,$readBuffer,$readSize,$seekPos,$resultReadSize) {
 $this = $this|0;
 $readBuffer = $readBuffer|0;
 $readSize = $readSize|0;
 $seekPos = $seekPos|0;
 $resultReadSize = $resultReadSize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($seekPos|0)>(-1);
 if ($0) {
  $1 = HEAP32[$this>>2]|0;
  $2 = (($1) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 255]($this,$seekPos,0)|0);
 }
 $4 = (($this) + 592|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_fread(($readBuffer|0),($readSize|0),1,($5|0))|0);
 $7 = ($resultReadSize|0)==(0|0);
 if ($7) {
  return 0;
 }
 HEAP32[$resultReadSize>>2] = $6;
 return 0;
}
function __ZN6toybox9TbFileStd13WriteSyncImplEPKvm($this,$buffer,$size) {
 $this = $this|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 592|0);
 $1 = HEAP32[$0>>2]|0;
 (_fwrite(($buffer|0),($size|0),1,($1|0))|0);
 return 0;
}
function __ZN6toybox9TbFileStd5CloseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = 1;
 $1 = (($this) + 592|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return 0;
 }
 (_fclose(($2|0))|0);
 HEAP32[$1>>2] = 0;
 return 0;
}
function __ZN6toybox14TbResourceBase6updateEv($this) {
 $this = $this|0;
 var $$0$i = 0, $$0$i26 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 296|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 3)) {
  $$phi$trans$insert = (($this) + 292|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $26 = ($$pre|0)==(0|0);
  if ($26) {
   STACKTOP = sp;return;
  } else {
   $28 = $$pre;
   label = 9;
  }
 } else if ((($5|0) == 1)) {
  $6 = HEAP32[344>>2]|0;
  $7 = (($this) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (__ZNK6toybox17TbResourceManager11GetFilePathEm($6,$8)|0);
  $10 = tempRet0;
  $11 = (($this) + 288|0);
  $12 = (($this) + 20|0);
  $13 = (($this) + 276|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (__ZN6toybox6TbFile4OpenEPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy($11,$12,0,$14,$9,$10)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = (($this) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 | 2;
   HEAP32[$17>>2] = $19;
   __ZN6toybox6TbFile7ReleaseEv($11);
   HEAP32[$4>>2] = 6;
   STACKTOP = sp;return;
  }
  HEAP32[$4>>2] = 3;
  $20 = (($this) + 292|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   STACKTOP = sp;return;
  }
  $23 = (($21) + 532|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(1);
  if ($25) {
   $28 = $21;
   label = 9;
  } else {
   STACKTOP = sp;return;
  }
 } else if ((($5|0) == 4)) {
  label = 15;
 } else if ((($5|0) == 5)) {
  $$pre9 = (($this) + 292|0);
  $$pre$phi10Z2D = $$pre9;
 } else {
  STACKTOP = sp;return;
 }
 do {
  if ((label|0) == 9) {
   $27 = (($28) + 524|0);
   $29 = HEAP32[$27>>2]|0;
   $30 = ($29|0)==(0);
   if (!($30)) {
    STACKTOP = sp;return;
   }
   $31 = (($28) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(2);
   if (!($33)) {
    STACKTOP = sp;return;
   }
   dest=$0+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $34 = (__ZN6toybox10TbFileImpl4readEmNS_15TbFileAllocModeEPvmlPmRKNS_18TbStaticFunction32IFvvEEE($28,0,0,0,0,-1,0,$0)|0);
   $35 = (($0) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $38 = (($0) + 12|0);
    FUNCTION_TABLE_vi[$36 & 255]($38);
   }
   HEAP32[$0>>2] = 0;
   HEAP32[$35>>2] = 0;
   $39 = (($0) + 8|0);
   HEAP32[$39>>2] = 0;
   $40 = $34 & -3;
   $41 = ($40|0)==(0);
   if ($41) {
    HEAP32[$4>>2] = 4;
    label = 15;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $$pre$phiZ2D = (($this) + 292|0);
  $42 = HEAP32[$$pre$phiZ2D>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   $44 = (($42) + 588|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0);
   if (!($46)) {
    STACKTOP = sp;return;
   }
  }
  HEAP32[$4>>2] = 5;
  $$pre$phi10Z2D = $$pre$phiZ2D;
 }
 $47 = HEAP32[$this>>2]|0;
 $48 = (($47) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (FUNCTION_TABLE_ii[$49 & 255]($this)|0);
 HEAP32[$1>>2] = $50;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($this) + 20|0);
 $55 = (($this) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($this) + 276|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($this) + 288|0);
 $60 = HEAP32[$$pre$phi10Z2D>>2]|0;
 $61 = ($60|0)==(0|0);
 if ($61) {
  $$0$i = 0;$$0$i26 = 0;
 } else {
  $62 = (($60) + 580|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60) + 584|0);
  $65 = HEAP32[$64>>2]|0;
  $$0$i = $65;$$0$i26 = $63;
 }
 $66 = (FUNCTION_TABLE_iiiiiii[$53 & 63]($50,$54,$56,$58,$$0$i26,$$0$i)|0);
 $67 = ($66|0)==(0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 HEAP32[$4>>2] = 6;
 $68 = (($this) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 | 1;
 HEAP32[$68>>2] = $70;
 __ZN6toybox6TbFile7ReleaseEv($59);
 STACKTOP = sp;return;
}
function __ZN6toybox6TbTask14RemoveTaskLineEm($this,$taskLine) {
 $this = $this|0;
 $taskLine = $taskLine|0;
 var $$0 = 0, $$0$i$i2 = 0, $$idx$i$i$i = 0, $$idx$i$i$i$i = 0, $$idx$val$i$i$i = 0, $$idx$val$i$i$i$i = 0, $$pr$i$i$i = 0, $$pr$i$i$i$lcssa = 0, $$pre = 0, $$sum$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currentIndex$01$i = 0, $exitcond = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $phitmp$i$i$i = 0, $result$0$i$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<2)|0);
 $5 = ($3|0)>(0);
 if ($5) {
  $6 = $4;$8 = $1;
  while(1) {
   $7 = ($6|0)==(0|0);
   $9 = ($8|0)==(0|0);
   $or$cond$i$i$i = $7 | $9;
   if ($or$cond$i$i$i) {
    $result$0$i$i$i$i$i = 0;
   } else {
    $10 = $6;
    $11 = $8;
    $12 = (($10) - ($11))|0;
    $13 = $12 >> 2;
    $phitmp$i$i$i = (($13|0) / 2)&-1;
    $result$0$i$i$i$i$i = $phitmp$i$i$i;
   }
   $14 = (($8) + ($result$0$i$i$i$i$i<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $$idx$i$i$i$i = (($15) + 12|0);
   $$idx$val$i$i$i$i = HEAP32[$$idx$i$i$i$i>>2]|0;
   $16 = ($$idx$val$i$i$i$i>>>0)<($taskLine>>>0);
   if ($16) {
    $$sum$i$i$i = (($result$0$i$i$i$i$i) + 1)|0;
    $17 = (($8) + ($$sum$i$i$i<<2)|0);
    $$pr$i$i$i = $17;$19 = $6;
   } else {
    $$pr$i$i$i = $8;$19 = $14;
   }
   $18 = ($$pr$i$i$i>>>0)<($19>>>0);
   if ($18) {
    $6 = $19;$8 = $$pr$i$i$i;
   } else {
    $$pr$i$i$i$lcssa = $$pr$i$i$i;
    break;
   }
  }
  $20 = $$pr$i$i$i$lcssa;
 } else {
  $20 = $1;
 }
 $21 = ($20|0)==($4|0);
 if ($21) {
  $$0 = 1;
  return ($$0|0);
 }
 $22 = HEAP32[$20>>2]|0;
 $$idx$i$i$i = (($22) + 12|0);
 $$idx$val$i$i$i = HEAP32[$$idx$i$i$i>>2]|0;
 $23 = ($$idx$val$i$i$i|0)==($taskLine|0);
 if (!($23)) {
  $$0 = 1;
  return ($$0|0);
 }
 $24 = ($20|0)==(0|0);
 $25 = ($1|0)==(0|0);
 $or$cond$i$i = $24 | $25;
 if ($or$cond$i$i) {
  $$0$i$i2 = 0;
 } else {
  $26 = $20;
  $27 = $1;
  $28 = (($26) - ($27))|0;
  $29 = $28 >> 2;
  $30 = ($28|0)>(-4);
  if ($30) {
   $$0$i$i2 = $29;
  } else {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $31 = (($1) + ($$0$i$i2<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 | 4;
 HEAP32[$33>>2] = $35;
 HEAP32[$32>>2] = 0;
 $36 = ($3|0)>($$0$i$i2|0);
 if (!($36)) {
  $$0 = 0;
  return ($$0|0);
 }
 $37 = (($3) + -1)|0;
 $38 = ($37|0)>($$0$i$i2|0);
 if ($38) {
  $41 = $1;$currentIndex$01$i = $$0$i$i2;
  while(1) {
   $39 = (($currentIndex$01$i) + 1)|0;
   $40 = (($41) + ($39<<2)|0);
   $42 = HEAP32[$40>>2]|0;
   $43 = (($41) + ($currentIndex$01$i<<2)|0);
   HEAP32[$43>>2] = $42;
   $exitcond = ($39|0)==($37|0);
   if ($exitcond) {
    break;
   }
   $$pre = HEAP32[$0>>2]|0;
   $41 = $$pre;$currentIndex$01$i = $39;
  }
 }
 HEAP32[$2>>2] = $37;
 $$0 = 0;
 return ($$0|0);
}
function _lua_checkstack($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res$01 = 0, $res$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $n;
 $1 = (($L) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($L) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = ($10|0)>($n|0);
 do {
  if ($11) {
   $26 = $6;$27 = $n;$res$03 = 1;
  } else {
   $12 = (($L) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
   $15 = (($8) - ($14))|0;
   $16 = $15 >> 4;
   $17 = (($16) + 5)|0;
   $18 = (1000000 - ($n))|0;
   $19 = ($17|0)>($18|0);
   if ($19) {
    $res$01 = 0;
    STACKTOP = sp;return ($res$01|0);
   }
   $20 = (_luaD_rawrunprotected($L,194,$0)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = $21&1;
    $$pre = HEAP32[$5>>2]|0;
    $$pre4 = HEAP32[$0>>2]|0;
    $26 = $$pre;$27 = $$pre4;$res$03 = $22;
    break;
   } else {
    $res$01 = 0;
    STACKTOP = sp;return ($res$01|0);
   }
  }
 } while(0);
 $23 = (($2) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($26) + ($27<<4)|0);
 $28 = ($24>>>0)<($25>>>0);
 if (!($28)) {
  $res$01 = $res$03;
  STACKTOP = sp;return ($res$01|0);
 }
 HEAP32[$23>>2] = $25;
 $res$01 = $res$03;
 STACKTOP = sp;return ($res$01|0);
}
function _lua_xmove($from,$to,$n) {
 $from = $from|0;
 $to = $to|0;
 $n = $n|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($from|0)==($to|0);
 if ($0) {
  return;
 }
 $1 = (($from) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (0 - ($n))|0;
 $4 = (($2) + ($3<<4)|0);
 HEAP32[$1>>2] = $4;
 $5 = ($n|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = (($to) + 8|0);
 $$pre = HEAP32[$6>>2]|0;
 $8 = $4;$9 = $$pre;$i$01 = 0;
 while(1) {
  $7 = (($8) + ($i$01<<4)|0);
  ;HEAP32[$9+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$7+12>>2]|0;
  $10 = HEAP32[$6>>2]|0;
  $11 = (($10) + 16|0);
  HEAP32[$6>>2] = $11;
  $12 = (($i$01) + 1)|0;
  $exitcond = ($12|0)==($n|0);
  if ($exitcond) {
   break;
  }
  $$pre2 = HEAP32[$1>>2]|0;
  $8 = $$pre2;$9 = $11;$i$01 = $12;
 }
 return;
}
function _lua_atpanic($L,$panicf) {
 $L = $L|0;
 $panicf = $panicf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = $panicf;
 return ($3|0);
}
function _lua_version($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)==(0|0);
 if ($0) {
  $$0 = 2648;
  return ($$0|0);
 }
 $1 = (($L) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _lua_absindex($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $idx$off = (($idx) + 1000999)|0;
 $0 = ($idx$off>>>0)>(1000999);
 if ($0) {
  $11 = $idx;
  return ($11|0);
 }
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($L) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 $10 = (($9) + ($idx))|0;
 $11 = $10;
 return ($11|0);
}
function _lua_gettop($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = $1;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 return ($9|0);
}
function _lua_settop($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep = 0, $scevgep4 = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(-1);
 if (!($0)) {
  $16 = (($idx) + 1)|0;
  $17 = (($L) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<4)|0);
  HEAP32[$17>>2] = $19;
  return;
 }
 $1 = (($L) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($idx) + 1)|0;
 $6 = (($3) + ($$sum<<4)|0);
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $5;
  $scevgep = ((($3) + ($idx<<4)|0) + 8|0);
  $scevgep4 = (($scevgep) + 4|0);
  $9 = (3 - ($8))|0;
  $uglygep = (($scevgep4) + ($9)|0);
  $uglygep6 = $uglygep;
  $10 = $uglygep6 >>> 4;
  $11 = (($10) + 1)|0;
  $13 = $5;
  while(1) {
   $12 = (($13) + 16|0);
   $14 = (($13) + 8|0);
   HEAP32[$14>>2] = 0;
   $15 = ($12>>>0)<($6>>>0);
   if ($15) {
    $13 = $12;
   } else {
    break;
   }
  }
  $scevgep7 = (($5) + ($11<<4)|0);
  HEAP32[$4>>2] = $scevgep7;
 }
 HEAP32[$4>>2] = $6;
 return;
}
function _lua_rotate($L,$idx,$n) {
 $L = $L|0;
 $idx = $idx|0;
 $n = $n|0;
 var $$0$i = 0, $$011$i = 0, $$011$i10 = 0, $$011$i5 = 0, $$02$i = 0, $$02$i4 = 0, $$02$i9 = 0, $$luaO_nilobject_$i = 0, $$sink = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $38$phi = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $43$phi = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp$i = 0, $temp$i2 = 0;
 var $temp$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp$i7 = sp + 32|0;
 $temp$i2 = sp;
 $temp$i = sp + 16|0;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -16|0);
 $3 = (($L) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($idx|0)>(0);
 do {
  if ($5) {
   $6 = HEAP32[$4>>2]|0;
   $7 = (($6) + ($idx<<4)|0);
   $8 = ($7>>>0)<($1>>>0);
   $$luaO_nilobject_$i = $8 ? $7 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $9 = ($idx|0)<(-1000999);
   if (!($9)) {
    $10 = (($1) + ($idx<<4)|0);
    $$0$i = $10;
    break;
   }
   $11 = ($idx|0)==(-1001000);
   if ($11) {
    $12 = (($L) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 40|0);
    $$0$i = $14;
    break;
   }
   $15 = (-1001000 - ($idx))|0;
   $16 = HEAP32[$4>>2]|0;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(22);
   if ($19) {
    $$0$i = 6528;
   } else {
    $20 = HEAP32[$16>>2]|0;
    $21 = (($20) + 6|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($15|0)>($23|0);
    if ($24) {
     $$0$i = 6528;
    } else {
     $25 = (($15) + -1)|0;
     $26 = (($20) + 16|0);
     $27 = (($26) + ($25<<4)|0);
     $$0$i = $27;
    }
   }
  }
 } while(0);
 $28 = ($n|0)>(-1);
 $$sum1 = $n ^ -1;
 $$sink = $28 ? $1 : $$0$i;
 $29 = (($$sink) + ($$sum1<<4)|0);
 $30 = ($$0$i>>>0)<($29>>>0);
 if ($30) {
  $$011$i10 = $29;$$02$i9 = $$0$i;
  while(1) {
   ;HEAP32[$temp$i7+0>>2]=HEAP32[$$02$i9+0>>2]|0;HEAP32[$temp$i7+4>>2]=HEAP32[$$02$i9+4>>2]|0;HEAP32[$temp$i7+8>>2]=HEAP32[$$02$i9+8>>2]|0;HEAP32[$temp$i7+12>>2]=HEAP32[$$02$i9+12>>2]|0;
   ;HEAP32[$$02$i9+0>>2]=HEAP32[$$011$i10+0>>2]|0;HEAP32[$$02$i9+4>>2]=HEAP32[$$011$i10+4>>2]|0;HEAP32[$$02$i9+8>>2]=HEAP32[$$011$i10+8>>2]|0;HEAP32[$$02$i9+12>>2]=HEAP32[$$011$i10+12>>2]|0;
   ;HEAP32[$$011$i10+0>>2]=HEAP32[$temp$i7+0>>2]|0;HEAP32[$$011$i10+4>>2]=HEAP32[$temp$i7+4>>2]|0;HEAP32[$$011$i10+8>>2]=HEAP32[$temp$i7+8>>2]|0;HEAP32[$$011$i10+12>>2]=HEAP32[$temp$i7+12>>2]|0;
   $31 = (($$02$i9) + 16|0);
   $32 = (($$011$i10) + -16|0);
   $33 = ($31>>>0)<($32>>>0);
   if ($33) {
    $$011$i10 = $32;$$02$i9 = $31;
   } else {
    break;
   }
  }
 }
 $$sum = (0 - ($n))|0;
 $34 = (($$sink) + ($$sum<<4)|0);
 $35 = ($34>>>0)<($2>>>0);
 if ($35) {
  $$011$i5 = $2;$$02$i4 = $34;$38 = $1;
  while(1) {
   ;HEAP32[$temp$i2+0>>2]=HEAP32[$$02$i4+0>>2]|0;HEAP32[$temp$i2+4>>2]=HEAP32[$$02$i4+4>>2]|0;HEAP32[$temp$i2+8>>2]=HEAP32[$$02$i4+8>>2]|0;HEAP32[$temp$i2+12>>2]=HEAP32[$$02$i4+12>>2]|0;
   ;HEAP32[$$02$i4+0>>2]=HEAP32[$$011$i5+0>>2]|0;HEAP32[$$02$i4+4>>2]=HEAP32[$$011$i5+4>>2]|0;HEAP32[$$02$i4+8>>2]=HEAP32[$$011$i5+8>>2]|0;HEAP32[$$02$i4+12>>2]=HEAP32[$$011$i5+12>>2]|0;
   ;HEAP32[$$011$i5+0>>2]=HEAP32[$temp$i2+0>>2]|0;HEAP32[$$011$i5+4>>2]=HEAP32[$temp$i2+4>>2]|0;HEAP32[$$011$i5+8>>2]=HEAP32[$temp$i2+8>>2]|0;HEAP32[$$011$i5+12>>2]=HEAP32[$temp$i2+12>>2]|0;
   $36 = (($$02$i4) + 16|0);
   $37 = (($38) + -32|0);
   $39 = ($36>>>0)<($37>>>0);
   if ($39) {
    $38$phi = $$011$i5;$$011$i5 = $37;$$02$i4 = $36;$38 = $38$phi;
   } else {
    break;
   }
  }
 }
 $40 = ($$0$i>>>0)<($2>>>0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $$011$i = $2;$$02$i = $$0$i;$43 = $1;
 while(1) {
  ;HEAP32[$temp$i+0>>2]=HEAP32[$$02$i+0>>2]|0;HEAP32[$temp$i+4>>2]=HEAP32[$$02$i+4>>2]|0;HEAP32[$temp$i+8>>2]=HEAP32[$$02$i+8>>2]|0;HEAP32[$temp$i+12>>2]=HEAP32[$$02$i+12>>2]|0;
  ;HEAP32[$$02$i+0>>2]=HEAP32[$$011$i+0>>2]|0;HEAP32[$$02$i+4>>2]=HEAP32[$$011$i+4>>2]|0;HEAP32[$$02$i+8>>2]=HEAP32[$$011$i+8>>2]|0;HEAP32[$$02$i+12>>2]=HEAP32[$$011$i+12>>2]|0;
  ;HEAP32[$$011$i+0>>2]=HEAP32[$temp$i+0>>2]|0;HEAP32[$$011$i+4>>2]=HEAP32[$temp$i+4>>2]|0;HEAP32[$$011$i+8>>2]=HEAP32[$temp$i+8>>2]|0;HEAP32[$$011$i+12>>2]=HEAP32[$temp$i+12>>2]|0;
  $41 = (($$02$i) + 16|0);
  $42 = (($43) + -32|0);
  $44 = ($41>>>0)<($42>>>0);
  if ($44) {
   $43$phi = $$011$i;$$011$i = $42;$$02$i = $41;$43 = $43$phi;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _lua_copy($L,$fromidx,$toidx) {
 $L = $L|0;
 $fromidx = $fromidx|0;
 $toidx = $toidx|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i2$ph = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($fromidx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($fromidx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($fromidx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($fromidx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($fromidx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($fromidx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = ($toidx|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($toidx<<4)|0);
   $32 = (($L) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   $$luaO_nilobject_$i1 = $34 ? $31 : 6528;
   $$0$i2$ph = $$luaO_nilobject_$i1;
  } else {
   $35 = ($toidx|0)<(-1000999);
   if (!($35)) {
    $36 = (($L) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($toidx<<4)|0);
    $$0$i2$ph = $38;
    break;
   }
   $39 = ($toidx|0)==(-1001000);
   if ($39) {
    $40 = (($L) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 40|0);
    $$0$i2$ph = $42;
    break;
   }
   $43 = (-1001000 - ($toidx))|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(22);
   if ($47) {
    $$0$i2 = 6528;
   } else {
    $48 = HEAP32[$44>>2]|0;
    $49 = (($48) + 6|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($43|0)>($51|0);
    if ($52) {
     $$0$i2 = 6528;
    } else {
     $53 = (($43) + -1)|0;
     $54 = (($48) + 16|0);
     $55 = (($54) + ($53<<4)|0);
     $$0$i2 = $55;
    }
   }
   ;HEAP32[$$0$i2+0>>2]=HEAP32[$$0$i+0>>2]|0;HEAP32[$$0$i2+4>>2]=HEAP32[$$0$i+4>>2]|0;HEAP32[$$0$i2+8>>2]=HEAP32[$$0$i+8>>2]|0;HEAP32[$$0$i2+12>>2]=HEAP32[$$0$i+12>>2]|0;
   $56 = ($toidx|0)<(-1001000);
   if (!($56)) {
    return;
   }
   $57 = (($$0$i) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & 64;
   $60 = ($59|0)==(0);
   if ($60) {
    return;
   }
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 5|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 & 4;
   $67 = ($66<<24>>24)==(0);
   if ($67) {
    return;
   }
   $68 = HEAP32[$$0$i>>2]|0;
   $69 = (($68) + 5|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70 & 3;
   $72 = ($71<<24>>24)==(0);
   if ($72) {
    return;
   }
   _luaC_barrier_($L,$63,$68);
   return;
  }
 } while(0);
 ;HEAP32[$$0$i2$ph+0>>2]=HEAP32[$$0$i+0>>2]|0;HEAP32[$$0$i2$ph+4>>2]=HEAP32[$$0$i+4>>2]|0;HEAP32[$$0$i2$ph+8>>2]=HEAP32[$$0$i+8>>2]|0;HEAP32[$$0$i2$ph+12>>2]=HEAP32[$$0$i+12>>2]|0;
 return;
}
function _lua_pushvalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($idx|0)>(0);
 do {
  if ($4) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($idx<<4)|0);
   $7 = ($6>>>0)<($1>>>0);
   $$luaO_nilobject_$i = $7 ? $6 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($1) + ($idx<<4)|0);
    $$0$i = $9;
    break;
   }
   $10 = ($idx|0)==(-1001000);
   if ($10) {
    $11 = (($L) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 40|0);
    $$0$i = $13;
    break;
   }
   $14 = (-1001000 - ($idx))|0;
   $15 = HEAP32[$3>>2]|0;
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(22);
   if ($18) {
    $$0$i = 6528;
   } else {
    $19 = HEAP32[$15>>2]|0;
    $20 = (($19) + 6|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ($14|0)>($22|0);
    if ($23) {
     $$0$i = 6528;
    } else {
     $24 = (($14) + -1)|0;
     $25 = (($19) + 16|0);
     $26 = (($25) + ($24<<4)|0);
     $$0$i = $26;
    }
   }
  }
 } while(0);
 ;HEAP32[$1+0>>2]=HEAP32[$$0$i+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$$0$i+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$$0$i+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$$0$i+12>>2]|0;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + 16|0);
 HEAP32[$0>>2] = $28;
 return;
}
function _lua_type($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   if ($7) {
    $$0$i = $4;
   } else {
    $33 = -1;
    return ($33|0);
   }
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $33 = -1;
    return ($33|0);
   }
   $21 = HEAP32[$17>>2]|0;
   $22 = (($21) + 6|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($16|0)>($24|0);
   if ($25) {
    $33 = -1;
    return ($33|0);
   } else {
    $26 = (($16) + -1)|0;
    $27 = (($21) + 16|0);
    $28 = (($27) + ($26<<4)|0);
    $$0$i = $28;
    break;
   }
  }
 } while(0);
 $29 = ($$0$i|0)==(6528|0);
 if ($29) {
  $33 = -1;
  return ($33|0);
 }
 $30 = (($$0$i) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 15;
 $33 = $32;
 return ($33|0);
}
function _lua_typename($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 1)|0;
 $1 = (10288 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lua_iscfunction($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$ = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(22);
 $32 = ($30|0)==(102);
 $$ = $31 | $32;
 $33 = $$&1;
 return ($33|0);
}
function _lua_isinteger($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(19);
 $32 = $31&1;
 return ($32|0);
}
function _lua_isnumber($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  $32 = +HEAPF64[$$0$i>>3];
  HEAPF64[$n>>3] = $32;
  $34 = 1;
  STACKTOP = sp;return ($34|0);
 } else {
  $33 = (_luaV_tonumber_($$0$i,$n)|0);
  $34 = $33;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _lua_isstring($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 $$off = (($31) + -3)|0;
 $32 = ($$off>>>0)<(2);
 $33 = $32&1;
 return ($33|0);
}
function _lua_rawequal($L,$index1,$index2) {
 $L = $L|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 var $$0$i = 0, $$0$i3 = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($index1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($index1<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($index1|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($index1<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($index1|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($index1))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = ($index2|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($index2<<4)|0);
   $32 = (($L) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   $$luaO_nilobject_$i2 = $34 ? $31 : 6528;
   $$0$i3 = $$luaO_nilobject_$i2;
  } else {
   $35 = ($index2|0)<(-1000999);
   if (!($35)) {
    $36 = (($L) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($index2<<4)|0);
    $$0$i3 = $38;
    break;
   }
   $39 = ($index2|0)==(-1001000);
   if ($39) {
    $40 = (($L) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 40|0);
    $$0$i3 = $42;
    break;
   }
   $43 = (-1001000 - ($index2))|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(22);
   if ($47) {
    $59 = 0;
    return ($59|0);
   }
   $48 = HEAP32[$44>>2]|0;
   $49 = (($48) + 6|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ($43|0)>($51|0);
   if ($52) {
    $59 = 0;
    return ($59|0);
   } else {
    $53 = (($43) + -1)|0;
    $54 = (($48) + 16|0);
    $55 = (($54) + ($53<<4)|0);
    $$0$i3 = $55;
    break;
   }
  }
 } while(0);
 $56 = ($$0$i|0)!=(6528|0);
 $57 = ($$0$i3|0)!=(6528|0);
 $or$cond = $56 & $57;
 if (!($or$cond)) {
  $59 = 0;
  return ($59|0);
 }
 $58 = (_luaV_equalobj(0,$$0$i,$$0$i3)|0);
 $59 = $58;
 return ($59|0);
}
function _lua_compare($L,$index1,$index2,$op) {
 $L = $L|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 $op = $op|0;
 var $$0$i = 0, $$0$i3 = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($index1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($index1<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($index1|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($index1<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($index1|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($index1))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = ($index2|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($index2<<4)|0);
   $32 = (($L) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   $$luaO_nilobject_$i2 = $34 ? $31 : 6528;
   $$0$i3 = $$luaO_nilobject_$i2;
  } else {
   $35 = ($index2|0)<(-1000999);
   if (!($35)) {
    $36 = (($L) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($index2<<4)|0);
    $$0$i3 = $38;
    break;
   }
   $39 = ($index2|0)==(-1001000);
   if ($39) {
    $40 = (($L) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 40|0);
    $$0$i3 = $42;
    break;
   }
   $43 = (-1001000 - ($index2))|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(22);
   if ($47) {
    $i$0 = 0;
    return ($i$0|0);
   }
   $48 = HEAP32[$44>>2]|0;
   $49 = (($48) + 6|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ($43|0)>($51|0);
   if ($52) {
    $i$0 = 0;
    return ($i$0|0);
   } else {
    $53 = (($43) + -1)|0;
    $54 = (($48) + 16|0);
    $55 = (($54) + ($53<<4)|0);
    $$0$i3 = $55;
    break;
   }
  }
 } while(0);
 $56 = ($$0$i|0)!=(6528|0);
 $57 = ($$0$i3|0)!=(6528|0);
 $or$cond = $56 & $57;
 if (!($or$cond)) {
  $i$0 = 0;
  return ($i$0|0);
 }
 if ((($op|0) == 0)) {
  $58 = (_luaV_equalobj($L,$$0$i,$$0$i3)|0);
  $i$0 = $58;
  return ($i$0|0);
 } else if ((($op|0) == 2)) {
  $60 = (_luaV_lessequal($L,$$0$i,$$0$i3)|0);
  $i$0 = $60;
  return ($i$0|0);
 } else if ((($op|0) == 1)) {
  $59 = (_luaV_lessthan($L,$$0$i,$$0$i3)|0);
  $i$0 = $59;
  return ($i$0|0);
 } else {
  $i$0 = 0;
  return ($i$0|0);
 }
 return (0)|0;
}
function _lua_stringtonumber($L,$s) {
 $L = $L|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaO_str2num($s,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  return ($2|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$0>>2] = $5;
 return ($2|0);
}
function _lua_tonumberx($L,$idx,$pisnum) {
 $L = $L|0;
 $idx = $idx|0;
 $pisnum = $pisnum|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  $32 = +HEAPF64[$$0$i>>3];
  HEAPF64[$n>>3] = $32;
  $36 = 1;
 } else {
  $33 = (_luaV_tonumber_($$0$i,$n)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   HEAPF64[$n>>3] = 0.0;
   $36 = 0;
  } else {
   $36 = $33;
  }
 }
 $35 = ($pisnum|0)==(0|0);
 if ($35) {
  $37 = +HEAPF64[$n>>3];
  STACKTOP = sp;return (+$37);
 }
 HEAP32[$pisnum>>2] = $36;
 $37 = +HEAPF64[$n>>3];
 STACKTOP = sp;return (+$37);
}
function _lua_tointegerx($L,$idx,$pisnum) {
 $L = $L|0;
 $idx = $idx|0;
 $pisnum = $pisnum|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $res = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(19);
 if ($31) {
  $32 = $$0$i;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = $res;
  $39 = $38;
  HEAP32[$39>>2] = $34;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $49 = 1;
 } else {
  $42 = (_luaV_tointeger($$0$i,$res,0)|0);
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = $res;
   $45 = $44;
   HEAP32[$45>>2] = 0;
   $46 = (($44) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = 0;
   $49 = 0;
  } else {
   $49 = $42;
  }
 }
 $48 = ($pisnum|0)==(0|0);
 if ($48) {
  $50 = $res;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  tempRet0 = $55;
  STACKTOP = sp;return ($52|0);
 }
 HEAP32[$pisnum>>2] = $49;
 $50 = $res;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 tempRet0 = $55;
 STACKTOP = sp;return ($52|0);
}
function _lua_toboolean($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $35 = 0;
  $34 = $35&1;
  return ($34|0);
 }
 $32 = ($30|0)==(1);
 if (!($32)) {
  $35 = 1;
  $34 = $35&1;
  return ($34|0);
 }
 $33 = HEAP32[$$0$i>>2]|0;
 $phitmp = ($33|0)!=(0);
 $35 = $phitmp;
 $34 = $35&1;
 return ($34|0);
}
function _lua_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i1 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $8 = 0, $9 = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 if ((($31|0) == 4)) {
  $o$0 = $$0$i;
 } else if ((($31|0) == 3)) {
  label = 13;
 } else {
  $32 = ($len|0)==(0|0);
  if ($32) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$len>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 if ((label|0) == 13) {
  $33 = (($L) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(0);
  if ($37) {
   _luaC_step($L);
   $$pre4 = HEAP32[$0>>2]|0;
   $39 = $$pre4;
  } else {
   $39 = $1;
  }
  do {
   if ($2) {
    $38 = HEAP32[$39>>2]|0;
    $40 = (($38) + ($idx<<4)|0);
    $41 = (($L) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($40>>>0)<($42>>>0);
    $$luaO_nilobject_$i1 = $43 ? $40 : 6528;
    $$0$i2 = $$luaO_nilobject_$i1;
   } else {
    $44 = ($idx|0)<(-1000999);
    if (!($44)) {
     $45 = (($L) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + ($idx<<4)|0);
     $$0$i2 = $47;
     break;
    }
    $48 = ($idx|0)==(-1001000);
    if ($48) {
     $49 = HEAP32[$33>>2]|0;
     $50 = (($49) + 40|0);
     $$0$i2 = $50;
     break;
    }
    $51 = (-1001000 - ($idx))|0;
    $52 = HEAP32[$39>>2]|0;
    $53 = (($52) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(22);
    if ($55) {
     $$0$i2 = 6528;
    } else {
     $56 = HEAP32[$52>>2]|0;
     $57 = (($56) + 6|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($51|0)>($59|0);
     if ($60) {
      $$0$i2 = 6528;
     } else {
      $61 = (($51) + -1)|0;
      $62 = (($56) + 16|0);
      $63 = (($62) + ($61<<4)|0);
      $$0$i2 = $63;
     }
    }
   }
  } while(0);
  _luaO_tostring($L,$$0$i2);
  $o$0 = $$0$i2;
 }
 $64 = ($len|0)==(0|0);
 $$pre = HEAP32[$o$0>>2]|0;
 if (!($64)) {
  $65 = (($$pre) + 4|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = ($66<<24>>24)==(4);
  if ($67) {
   $68 = (($$pre) + 7|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $73 = $70;
  } else {
   $71 = (($$pre) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72;
  }
  HEAP32[$len>>2] = $73;
 }
 $74 = (($$pre) + 16|0);
 $$0 = $74;
 return ($$0|0);
}
function _lua_rawlen($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 if ((($31|0) == 20)) {
  $36 = HEAP32[$$0$i>>2]|0;
  $37 = (($36) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $$0 = $38;
  return ($$0|0);
 } else if ((($31|0) == 4)) {
  $32 = HEAP32[$$0$i>>2]|0;
  $33 = (($32) + 7|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $$0 = $35;
  return ($$0|0);
 } else if ((($31|0) == 7)) {
  $39 = HEAP32[$$0$i>>2]|0;
  $40 = (($39) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $$0 = $41;
  return ($$0|0);
 } else if ((($31|0) == 5)) {
  $42 = HEAP32[$$0$i>>2]|0;
  $43 = (_luaH_getn($42)|0);
  $$0 = $43;
  return ($$0|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lua_touserdata($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 if ((($31|0) == 7)) {
  $32 = HEAP32[$$0$i>>2]|0;
  $33 = (($32) + 24|0);
  $$0 = $33;
  return ($$0|0);
 } else if ((($31|0) == 2)) {
  $34 = HEAP32[$$0$i>>2]|0;
  $$0 = $34;
  return ($$0|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lua_tothread($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(72);
 if (!($31)) {
  $33 = 0;
  return ($33|0);
 }
 $32 = HEAP32[$$0$i>>2]|0;
 $33 = $32;
 return ($33|0);
}
function _lua_topointer($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 switch ($31|0) {
 case 5:  {
  $32 = HEAP32[$$0$i>>2]|0;
  $$0 = $32;
  return ($$0|0);
  break;
 }
 case 22:  {
  $35 = HEAP32[$$0$i>>2]|0;
  $$0 = $35;
  return ($$0|0);
  break;
 }
 case 6:  {
  $33 = HEAP32[$$0$i>>2]|0;
  $$0 = $33;
  return ($$0|0);
  break;
 }
 case 38:  {
  $34 = HEAP32[$$0$i>>2]|0;
  $$0 = $34;
  return ($$0|0);
  break;
 }
 case 7:  {
  $37 = HEAP32[$$0$i>>2]|0;
  $38 = (($37) + 24|0);
  $$0 = $38;
  return ($$0|0);
  break;
 }
 case 8:  {
  $36 = HEAP32[$$0$i>>2]|0;
  $$0 = $36;
  return ($$0|0);
  break;
 }
 case 2:  {
  $39 = HEAP32[$$0$i>>2]|0;
  $$0 = $39;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _lua_pushnil($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 16|0);
 HEAP32[$0>>2] = $3;
 return;
}
function _lua_pushnumber($L,$n) {
 $L = $L|0;
 $n = +$n;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAPF64[$1>>3] = $n;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 3;
 $3 = (($1) + 16|0);
 HEAP32[$0>>2] = $3;
 return;
}
function _lua_pushinteger($L,$0,$1) {
 $L = $L|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($3) + 8|0);
 HEAP32[$8>>2] = 19;
 $9 = (($3) + 16|0);
 HEAP32[$2>>2] = $9;
 return;
}
function _lua_pushlstring($L,$s,$len) {
 $L = $L|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaS_newlstr($L,$s,$len)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($5) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = (($7) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$6>>2]|0;
 $14 = (($13) + 16|0);
 HEAP32[$6>>2] = $14;
 $15 = (($5) + 16|0);
 return ($15|0);
}
function _lua_pushstring($L,$s) {
 $L = $L|0;
 $s = $s|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = (($L) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 8|0);
  HEAP32[$3>>2] = 0;
  $$0 = 0;$20 = $2;
  $18 = (($L) + 8|0);
  $19 = (($20) + 16|0);
  HEAP32[$18>>2] = $19;
  return ($$0|0);
 }
 $4 = (($L) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  _luaC_step($L);
 }
 $9 = (_luaS_new($L,$s)|0);
 $10 = (($L) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$11>>2] = $9;
 $12 = (($9) + 4|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 | 64;
 $16 = (($11) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = (($9) + 16|0);
 $$pre = HEAP32[$10>>2]|0;
 $$0 = $17;$20 = $$pre;
 $18 = (($L) + 8|0);
 $19 = (($20) + 16|0);
 HEAP32[$18>>2] = $19;
 return ($$0|0);
}
function _lua_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 return ($5|0);
}
function _lua_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argp = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 HEAP32[$argp>>2] = $varargs;
 $5 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($5|0);
}
function _lua_pushcclosure($L,$fn,$n) {
 $L = $L|0;
 $fn = $fn|0;
 $n = $n|0;
 var $$in = 0, $$pre = 0, $$pre$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $1 = (($L) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$2>>2] = $fn;
  $3 = (($2) + 8|0);
  HEAP32[$3>>2] = 22;
  $21 = (($L) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 16|0);
  HEAP32[$21>>2] = $23;
  return;
 }
 $4 = (($L) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  _luaC_step($L);
 }
 $9 = (_luaF_newCclosure($L,$n)|0);
 $10 = (($9) + 12|0);
 HEAP32[$10>>2] = $fn;
 $11 = (($L) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (0 - ($n))|0;
 $14 = (($12) + ($13<<4)|0);
 HEAP32[$11>>2] = $14;
 $$in = $n;$18 = $14;
 while(1) {
  $15 = (($$in) + -1)|0;
  $16 = ((($9) + ($15<<4)|0) + 16|0);
  $17 = (($18) + ($15<<4)|0);
  ;HEAP32[$16+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$17+12>>2]|0;
  $19 = ($15|0)==(0);
  $$pre = HEAP32[$11>>2]|0;
  if ($19) {
   $$pre$lcssa = $$pre;
   break;
  } else {
   $$in = $15;$18 = $$pre;
  }
 }
 HEAP32[$$pre$lcssa>>2] = $9;
 $20 = (($$pre$lcssa) + 8|0);
 HEAP32[$20>>2] = 102;
 $21 = (($L) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 16|0);
 HEAP32[$21>>2] = $23;
 return;
}
function _lua_pushboolean($L,$b) {
 $L = $L|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($b|0)!=(0);
 $3 = $2&1;
 HEAP32[$1>>2] = $3;
 $4 = (($1) + 8|0);
 HEAP32[$4>>2] = 1;
 $5 = (($1) + 16|0);
 HEAP32[$0>>2] = $5;
 return;
}
function _lua_pushlightuserdata($L,$p) {
 $L = $L|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $p;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$0>>2] = $4;
 return;
}
function _lua_pushthread($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $L;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 72;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$0>>2] = $4;
 $5 = (($L) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 136|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($L|0);
 $10 = $9&1;
 return ($10|0);
}
function _lua_getglobal($L,$name) {
 $L = $L|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_getint($3,2,0)|0);
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_luaS_new($L,$name)|0);
 HEAP32[$6>>2] = $7;
 $8 = (($7) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = (($6) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$5>>2]|0;
 $14 = (($13) + 16|0);
 HEAP32[$5>>2] = $14;
 _luaV_gettable($L,$4,$13,$13);
 $15 = HEAP32[$5>>2]|0;
 $16 = (($15) + -8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 15;
 return ($18|0);
}
function _lua_gettable($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + -16|0);
 _luaV_gettable($L,$$0$i,$31,$31);
 $32 = HEAP32[$29>>2]|0;
 $33 = (($32) + -8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 15;
 return ($35|0);
}
function _lua_getfield($L,$idx,$k) {
 $L = $L|0;
 $idx = $idx|0;
 $k = $k|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_luaS_new($L,$k)|0);
 HEAP32[$30>>2] = $31;
 $32 = (($31) + 4|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | 64;
 $36 = (($30) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$29>>2]|0;
 $38 = (($37) + 16|0);
 HEAP32[$29>>2] = $38;
 _luaV_gettable($L,$$0$i,$37,$37);
 $39 = HEAP32[$29>>2]|0;
 $40 = (($39) + -8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 15;
 return ($42|0);
}
function _lua_geti($L,$idx,$0,$1) {
 $L = $L|0;
 $idx = $idx|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($idx|0)>(0);
 do {
  if ($4) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($idx<<4)|0);
   $7 = (($L) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   $$luaO_nilobject_$i = $9 ? $6 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $10 = ($idx|0)<(-1000999);
   if (!($10)) {
    $11 = (($L) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($idx<<4)|0);
    $$0$i = $13;
    break;
   }
   $14 = ($idx|0)==(-1001000);
   if ($14) {
    $15 = (($L) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 40|0);
    $$0$i = $17;
    break;
   }
   $18 = (-1001000 - ($idx))|0;
   $19 = HEAP32[$3>>2]|0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(22);
   if ($22) {
    $$0$i = 6528;
   } else {
    $23 = HEAP32[$19>>2]|0;
    $24 = (($23) + 6|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($18|0)>($26|0);
    if ($27) {
     $$0$i = 6528;
    } else {
     $28 = (($18) + -1)|0;
     $29 = (($23) + 16|0);
     $30 = (($29) + ($28<<4)|0);
     $$0$i = $30;
    }
   }
  }
 } while(0);
 $31 = (($L) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = $0;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $1;
 $37 = (($32) + 8|0);
 HEAP32[$37>>2] = 19;
 $38 = (($32) + 16|0);
 HEAP32[$31>>2] = $38;
 _luaV_gettable($L,$$0$i,$32,$32);
 $39 = HEAP32[$31>>2]|0;
 $40 = (($39) + -8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 15;
 return ($42|0);
}
function _lua_rawget($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + -16|0);
 $32 = HEAP32[$$0$i>>2]|0;
 $33 = (_luaH_get($32,$31)|0);
 ;HEAP32[$31+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$31+12>>2]=HEAP32[$33+12>>2]|0;
 $34 = HEAP32[$29>>2]|0;
 $35 = (($34) + -8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 15;
 return ($37|0);
}
function _lua_rawgeti($L,$idx,$0,$1) {
 $L = $L|0;
 $idx = $idx|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($idx|0)>(0);
 do {
  if ($4) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($idx<<4)|0);
   $7 = (($L) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   $$luaO_nilobject_$i = $9 ? $6 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $10 = ($idx|0)<(-1000999);
   if (!($10)) {
    $11 = (($L) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($idx<<4)|0);
    $$0$i = $13;
    break;
   }
   $14 = ($idx|0)==(-1001000);
   if ($14) {
    $15 = (($L) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 40|0);
    $$0$i = $17;
    break;
   }
   $18 = (-1001000 - ($idx))|0;
   $19 = HEAP32[$3>>2]|0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(22);
   if ($22) {
    $$0$i = 6528;
   } else {
    $23 = HEAP32[$19>>2]|0;
    $24 = (($23) + 6|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($18|0)>($26|0);
    if ($27) {
     $$0$i = 6528;
    } else {
     $28 = (($18) + -1)|0;
     $29 = (($23) + 16|0);
     $30 = (($29) + ($28<<4)|0);
     $$0$i = $30;
    }
   }
  }
 } while(0);
 $31 = (($L) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$$0$i>>2]|0;
 $34 = (_luaH_getint($33,$0,$1)|0);
 ;HEAP32[$32+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$34+12>>2]|0;
 $35 = HEAP32[$31>>2]|0;
 $36 = (($35) + 16|0);
 HEAP32[$31>>2] = $36;
 $37 = (($35) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 15;
 return ($39|0);
}
function _lua_rawgetp($L,$idx,$p) {
 $L = $L|0;
 $idx = $idx|0;
 $p = $p|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 HEAP32[$k>>2] = $p;
 $29 = (($k) + 8|0);
 HEAP32[$29>>2] = 2;
 $30 = (($L) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$$0$i>>2]|0;
 $33 = (_luaH_get($32,$k)|0);
 ;HEAP32[$31+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$31+12>>2]=HEAP32[$33+12>>2]|0;
 $34 = HEAP32[$30>>2]|0;
 $35 = (($34) + 16|0);
 HEAP32[$30>>2] = $35;
 $36 = (($34) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 15;
 STACKTOP = sp;return ($38|0);
}
function _lua_createtable($L,$narray,$nrec) {
 $L = $L|0;
 $narray = $narray|0;
 $nrec = $nrec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaH_new($L)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 69;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = ($narray|0)>(0);
 $12 = ($nrec|0)>(0);
 $or$cond = $11 | $12;
 if (!($or$cond)) {
  return;
 }
 _luaH_resize($L,$5,$narray,$nrec);
 return;
}
function _lua_getmetatable($L,$objindex) {
 $L = $L|0;
 $objindex = $objindex|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0, $mt$0$in = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($objindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($objindex<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($objindex|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($objindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($objindex|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($objindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 if ((($31|0) == 5)) {
  $32 = HEAP32[$$0$i>>2]|0;
  $33 = (($32) + 24|0);
  $mt$0$in = $33;
 } else if ((($31|0) == 7)) {
  $34 = HEAP32[$$0$i>>2]|0;
  $35 = (($34) + 8|0);
  $mt$0$in = $35;
 } else {
  $36 = (($L) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37) + ($31<<2)|0) + 244|0);
  $mt$0$in = $38;
 }
 $mt$0 = HEAP32[$mt$0$in>>2]|0;
 $39 = ($mt$0|0)==(0|0);
 if ($39) {
  $res$0 = 0;
  return ($res$0|0);
 }
 $40 = (($L) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$41>>2] = $mt$0;
 $42 = (($41) + 8|0);
 HEAP32[$42>>2] = 69;
 $43 = HEAP32[$40>>2]|0;
 $44 = (($43) + 16|0);
 HEAP32[$40>>2] = $44;
 $res$0 = 1;
 return ($res$0|0);
}
function _lua_getuservalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$$0$i>>2]|0;
 $32 = (($31) + 16|0);
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $30;
 $40 = $39;
 HEAP32[$40>>2] = $35;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = (($31) + 6|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = (($30) + 8|0);
 HEAP32[$46>>2] = $45;
 $47 = HEAP32[$29>>2]|0;
 $48 = (($47) + 16|0);
 HEAP32[$29>>2] = $48;
 $49 = (($47) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & 15;
 return ($51|0);
}
function _lua_setglobal($L,$name) {
 $L = $L|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_getint($3,2,0)|0);
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_luaS_new($L,$name)|0);
 HEAP32[$6>>2] = $7;
 $8 = (($7) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = (($6) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$5>>2]|0;
 $14 = (($13) + 16|0);
 HEAP32[$5>>2] = $14;
 $15 = (($13) + -16|0);
 _luaV_settable($L,$4,$13,$15);
 $16 = HEAP32[$5>>2]|0;
 $17 = (($16) + -32|0);
 HEAP32[$5>>2] = $17;
 return;
}
function _lua_setfield($L,$idx,$k) {
 $L = $L|0;
 $idx = $idx|0;
 $k = $k|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_luaS_new($L,$k)|0);
 HEAP32[$30>>2] = $31;
 $32 = (($31) + 4|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | 64;
 $36 = (($30) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$29>>2]|0;
 $38 = (($37) + 16|0);
 HEAP32[$29>>2] = $38;
 $39 = (($37) + -16|0);
 _luaV_settable($L,$$0$i,$37,$39);
 $40 = HEAP32[$29>>2]|0;
 $41 = (($40) + -32|0);
 HEAP32[$29>>2] = $41;
 return;
}
function _lua_seti($L,$idx,$0,$1) {
 $L = $L|0;
 $idx = $idx|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($idx|0)>(0);
 do {
  if ($4) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($idx<<4)|0);
   $7 = (($L) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   $$luaO_nilobject_$i = $9 ? $6 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $10 = ($idx|0)<(-1000999);
   if (!($10)) {
    $11 = (($L) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($idx<<4)|0);
    $$0$i = $13;
    break;
   }
   $14 = ($idx|0)==(-1001000);
   if ($14) {
    $15 = (($L) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 40|0);
    $$0$i = $17;
    break;
   }
   $18 = (-1001000 - ($idx))|0;
   $19 = HEAP32[$3>>2]|0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(22);
   if ($22) {
    $$0$i = 6528;
   } else {
    $23 = HEAP32[$19>>2]|0;
    $24 = (($23) + 6|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($18|0)>($26|0);
    if ($27) {
     $$0$i = 6528;
    } else {
     $28 = (($18) + -1)|0;
     $29 = (($23) + 16|0);
     $30 = (($29) + ($28<<4)|0);
     $$0$i = $30;
    }
   }
  }
 } while(0);
 $31 = (($L) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = $0;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $1;
 $37 = (($32) + 8|0);
 HEAP32[$37>>2] = 19;
 $38 = (($32) + 16|0);
 HEAP32[$31>>2] = $38;
 $39 = (($32) + -16|0);
 _luaV_settable($L,$$0$i,$32,$39);
 $40 = HEAP32[$31>>2]|0;
 $41 = (($40) + -32|0);
 HEAP32[$31>>2] = $41;
 return;
}
function _lua_rawset($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = (($L) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -32|0);
 $33 = (_luaH_set($L,$29,$32)|0);
 $34 = HEAP32[$30>>2]|0;
 $35 = (($34) + -16|0);
 ;HEAP32[$33+0>>2]=HEAP32[$35+0>>2]|0;HEAP32[$33+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$33+12>>2]=HEAP32[$35+12>>2]|0;
 $36 = (($29) + 6|0);
 HEAP8[$36>>0] = 0;
 $37 = HEAP32[$30>>2]|0;
 $38 = (($37) + -8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 64;
 $41 = ($40|0)==(0);
 if ($41) {
  $53 = $37;
  $52 = (($53) + -32|0);
  HEAP32[$30>>2] = $52;
  return;
 }
 $42 = (($29) + 5|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 & 4;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $53 = $37;
  $52 = (($53) + -32|0);
  HEAP32[$30>>2] = $52;
  return;
 }
 $46 = (($37) + -16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 5|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49 & 3;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $53 = $37;
  $52 = (($53) + -32|0);
  HEAP32[$30>>2] = $52;
  return;
 }
 _luaC_barrierback_($L,$29);
 $$pre = HEAP32[$30>>2]|0;
 $53 = $$pre;
 $52 = (($53) + -32|0);
 HEAP32[$30>>2] = $52;
 return;
}
function _lua_rawseti($L,$idx,$0,$1) {
 $L = $L|0;
 $idx = $idx|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($idx|0)>(0);
 do {
  if ($4) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($idx<<4)|0);
   $7 = (($L) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   $$luaO_nilobject_$i = $9 ? $6 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $10 = ($idx|0)<(-1000999);
   if (!($10)) {
    $11 = (($L) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($idx<<4)|0);
    $$0$i = $13;
    break;
   }
   $14 = ($idx|0)==(-1001000);
   if ($14) {
    $15 = (($L) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 40|0);
    $$0$i = $17;
    break;
   }
   $18 = (-1001000 - ($idx))|0;
   $19 = HEAP32[$3>>2]|0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(22);
   if ($22) {
    $$0$i = 6528;
   } else {
    $23 = HEAP32[$19>>2]|0;
    $24 = (($23) + 6|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($18|0)>($26|0);
    if ($27) {
     $$0$i = 6528;
    } else {
     $28 = (($18) + -1)|0;
     $29 = (($23) + 16|0);
     $30 = (($29) + ($28<<4)|0);
     $$0$i = $30;
    }
   }
  }
 } while(0);
 $31 = HEAP32[$$0$i>>2]|0;
 $32 = (($L) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + -16|0);
 _luaH_setint($L,$31,$0,$1,$34);
 $35 = HEAP32[$32>>2]|0;
 $36 = (($35) + -8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 64;
 $39 = ($38|0)==(0);
 if ($39) {
  $51 = $35;
  $50 = (($51) + -16|0);
  HEAP32[$32>>2] = $50;
  return;
 }
 $40 = (($31) + 5|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 & 4;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $51 = $35;
  $50 = (($51) + -16|0);
  HEAP32[$32>>2] = $50;
  return;
 }
 $44 = (($35) + -16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 5|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 & 3;
 $49 = ($48<<24>>24)==(0);
 if ($49) {
  $51 = $35;
  $50 = (($51) + -16|0);
  HEAP32[$32>>2] = $50;
  return;
 }
 _luaC_barrierback_($L,$31);
 $$pre = HEAP32[$32>>2]|0;
 $51 = $$pre;
 $50 = (($51) + -16|0);
 HEAP32[$32>>2] = $50;
 return;
}
function _lua_rawsetp($L,$idx,$p) {
 $L = $L|0;
 $idx = $idx|0;
 $p = $p|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 HEAP32[$k>>2] = $p;
 $30 = (($k) + 8|0);
 HEAP32[$30>>2] = 2;
 $31 = (_luaH_set($L,$29,$k)|0);
 $32 = (($L) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + -16|0);
 ;HEAP32[$31+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$31+12>>2]=HEAP32[$34+12>>2]|0;
 $35 = HEAP32[$32>>2]|0;
 $36 = (($35) + -8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 64;
 $39 = ($38|0)==(0);
 if ($39) {
  $51 = $35;
  $50 = (($51) + -16|0);
  HEAP32[$32>>2] = $50;
  STACKTOP = sp;return;
 }
 $40 = (($29) + 5|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 & 4;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $51 = $35;
  $50 = (($51) + -16|0);
  HEAP32[$32>>2] = $50;
  STACKTOP = sp;return;
 }
 $44 = (($35) + -16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 5|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 & 3;
 $49 = ($48<<24>>24)==(0);
 if ($49) {
  $51 = $35;
  $50 = (($51) + -16|0);
  HEAP32[$32>>2] = $50;
  STACKTOP = sp;return;
 }
 _luaC_barrierback_($L,$29);
 $$pre = HEAP32[$32>>2]|0;
 $51 = $$pre;
 $50 = (($51) + -16|0);
 HEAP32[$32>>2] = $50;
 STACKTOP = sp;return;
}
function _lua_setmetatable($L,$objindex) {
 $L = $L|0;
 $objindex = $objindex|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($objindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($objindex<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($objindex|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($objindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($objindex|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($objindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + -8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $mt$0 = 0;
 } else {
  $34 = (($30) + -16|0);
  $35 = HEAP32[$34>>2]|0;
  $mt$0 = $35;
 }
 $36 = (($$0$i) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 15;
 if ((($38|0) == 7)) {
  $52 = HEAP32[$$0$i>>2]|0;
  $53 = (($52) + 8|0);
  HEAP32[$53>>2] = $mt$0;
  $54 = ($mt$0|0)==(0|0);
  if ($54) {
   $68 = HEAP32[$29>>2]|0;
   $69 = (($68) + -16|0);
   HEAP32[$29>>2] = $69;
   return 1;
  }
  $55 = HEAP32[$$0$i>>2]|0;
  $56 = (($55) + 5|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 & 4;
  $59 = ($58<<24>>24)==(0);
  if ($59) {
   $64 = $55;
  } else {
   $60 = (($mt$0) + 5|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 & 3;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $64 = $55;
   } else {
    _luaC_barrier_($L,$55,$mt$0);
    $$pre2 = HEAP32[$$0$i>>2]|0;
    $64 = $$pre2;
   }
  }
  _luaC_checkfinalizer($L,$64,$mt$0);
  $68 = HEAP32[$29>>2]|0;
  $69 = (($68) + -16|0);
  HEAP32[$29>>2] = $69;
  return 1;
 } else if ((($38|0) == 5)) {
  $39 = HEAP32[$$0$i>>2]|0;
  $40 = (($39) + 24|0);
  HEAP32[$40>>2] = $mt$0;
  $41 = ($mt$0|0)==(0|0);
  if ($41) {
   $68 = HEAP32[$29>>2]|0;
   $69 = (($68) + -16|0);
   HEAP32[$29>>2] = $69;
   return 1;
  }
  $42 = HEAP32[$$0$i>>2]|0;
  $43 = (($42) + 5|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 & 4;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $51 = $42;
  } else {
   $47 = (($mt$0) + 5|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48 & 3;
   $50 = ($49<<24>>24)==(0);
   if ($50) {
    $51 = $42;
   } else {
    _luaC_barrier_($L,$42,$mt$0);
    $$pre = HEAP32[$$0$i>>2]|0;
    $51 = $$pre;
   }
  }
  _luaC_checkfinalizer($L,$51,$mt$0);
  $68 = HEAP32[$29>>2]|0;
  $69 = (($68) + -16|0);
  HEAP32[$29>>2] = $69;
  return 1;
 } else {
  $65 = (($L) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66) + ($38<<2)|0) + 244|0);
  HEAP32[$67>>2] = $mt$0;
  $68 = HEAP32[$29>>2]|0;
  $69 = (($68) + -16|0);
  HEAP32[$29>>2] = $69;
  return 1;
 }
 return (0)|0;
}
function _lua_setuservalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$$0$i>>2]|0;
 $32 = (($31) + 16|0);
 $33 = (($30) + -16|0);
 $34 = $33;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $32;
 $41 = $40;
 HEAP32[$41>>2] = $36;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = (($30) + -8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45&255;
 $47 = (($31) + 6|0);
 HEAP8[$47>>0] = $46;
 $48 = HEAP32[$29>>2]|0;
 $49 = (($48) + -8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & 64;
 $52 = ($51|0)==(0);
 if ($52) {
  $65 = $48;
  $64 = (($65) + -16|0);
  HEAP32[$29>>2] = $64;
  return;
 }
 $53 = HEAP32[$$0$i>>2]|0;
 $54 = (($53) + 5|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55 & 4;
 $57 = ($56<<24>>24)==(0);
 if ($57) {
  $65 = $48;
  $64 = (($65) + -16|0);
  HEAP32[$29>>2] = $64;
  return;
 }
 $58 = (($48) + -16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 5|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61 & 3;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  $65 = $48;
  $64 = (($65) + -16|0);
  HEAP32[$29>>2] = $64;
  return;
 }
 _luaC_barrier_($L,$53,$59);
 $$pre = HEAP32[$29>>2]|0;
 $65 = $$pre;
 $64 = (($65) + -16|0);
 HEAP32[$29>>2] = $64;
 return;
}
function _lua_callk($L,$nargs,$nresults,$ctx,$k) {
 $L = $L|0;
 $nargs = $nargs|0;
 $nresults = $nresults|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $nargs ^ -1;
 $3 = (($1) + ($2<<4)|0);
 $4 = ($k|0)==(0|0);
 if ($4) {
  label = 4;
 } else {
  $5 = (($L) + 104|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(0);
  if ($7) {
   $8 = (($L) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 16|0);
   HEAP32[$10>>2] = $k;
   $11 = (($9) + 24|0);
   HEAP32[$11>>2] = $ctx;
   _luaD_call($L,$3,$nresults,1);
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _luaD_call($L,$3,$nresults,0);
 }
 $12 = ($nresults|0)==(-1);
 if (!($12)) {
  return;
 }
 $13 = (($L) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = ($16>>>0)<($17>>>0);
 if (!($18)) {
  return;
 }
 HEAP32[$15>>2] = $17;
 return;
}
function _lua_pcallk($L,$nargs,$nresults,$errfunc,$ctx,$k) {
 $L = $L|0;
 $nargs = $nargs|0;
 $nresults = $nresults|0;
 $errfunc = $errfunc|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $c = 0, $func$0 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ($errfunc|0)==(0);
 if ($0) {
  $func$0 = 0;
 } else {
  $1 = (($L) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($errfunc|0)>(0);
  do {
   if ($3) {
    $4 = HEAP32[$2>>2]|0;
    $5 = (($4) + ($errfunc<<4)|0);
    $6 = (($L) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($5>>>0)<($7>>>0);
    $$luaO_nilobject_$i = $8 ? $5 : 6528;
    $$0$i = $$luaO_nilobject_$i;
   } else {
    $9 = ($errfunc|0)<(-1000999);
    if (!($9)) {
     $10 = (($L) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($errfunc<<4)|0);
     $$0$i = $12;
     break;
    }
    $13 = ($errfunc|0)==(-1001000);
    if ($13) {
     $14 = (($L) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 40|0);
     $$0$i = $16;
     break;
    }
    $17 = (-1001000 - ($errfunc))|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = (($18) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(22);
    if ($21) {
     $$0$i = 6528;
    } else {
     $22 = HEAP32[$18>>2]|0;
     $23 = (($22) + 6|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = ($17|0)>($25|0);
     if ($26) {
      $$0$i = 6528;
     } else {
      $27 = (($17) + -1)|0;
      $28 = (($22) + 16|0);
      $29 = (($28) + ($27<<4)|0);
      $$0$i = $29;
     }
    }
   }
  } while(0);
  $30 = (($L) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $$0$i;
  $33 = $31;
  $34 = (($32) - ($33))|0;
  $func$0 = $34;
 }
 $35 = (($L) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $nargs ^ -1;
 $38 = (($36) + ($37<<4)|0);
 HEAP32[$c>>2] = $38;
 $39 = ($k|0)==(0|0);
 if ($39) {
  label = 14;
 } else {
  $40 = (($L) + 104|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = ($41<<16>>16)==(0);
  if ($42) {
   $50 = (($L) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 16|0);
   HEAP32[$52>>2] = $k;
   $53 = (($51) + 24|0);
   HEAP32[$53>>2] = $ctx;
   $54 = (($L) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $38;
   $57 = $55;
   $58 = (($56) - ($57))|0;
   $59 = (($51) + 28|0);
   HEAP32[$59>>2] = $58;
   $60 = (($L) + 88|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($51) + 20|0);
   HEAP32[$62>>2] = $61;
   HEAP32[$60>>2] = $func$0;
   $63 = (($51) + 34|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $65 & 238;
   $67 = (($L) + 109|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $69 | $66;
   $71 = $70 | 16;
   $72 = $71&255;
   HEAP8[$63>>0] = $72;
   _luaD_call($L,$38,$nresults,1);
   $73 = HEAP8[$63>>0]|0;
   $74 = $73&255;
   $75 = $74 & 239;
   $76 = $75&255;
   HEAP8[$63>>0] = $76;
   $77 = HEAP32[$62>>2]|0;
   HEAP32[$60>>2] = $77;
   $status$0 = 0;
  } else {
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $43 = (($c) + 4|0);
  HEAP32[$43>>2] = $nresults;
  $44 = (($L) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $38;
  $47 = $45;
  $48 = (($46) - ($47))|0;
  $49 = (_luaD_pcall($L,195,$c,$48,$func$0)|0);
  $status$0 = $49;
 }
 $78 = ($nresults|0)==(-1);
 if (!($78)) {
  STACKTOP = sp;return ($status$0|0);
 }
 $79 = (($L) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$35>>2]|0;
 $84 = ($82>>>0)<($83>>>0);
 if (!($84)) {
  STACKTOP = sp;return ($status$0|0);
 }
 HEAP32[$81>>2] = $83;
 STACKTOP = sp;return ($status$0|0);
}
function _lua_load($L,$reader,$data,$chunkname,$mode) {
 $L = $L|0;
 $reader = $reader|0;
 $data = $data|0;
 $chunkname = $chunkname|0;
 $mode = $mode|0;
 var $$chunkname = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z = sp;
 $0 = ($chunkname|0)==(0|0);
 $$chunkname = $0 ? 6416 : $chunkname;
 _luaZ_init($L,$z,$reader,$data);
 $1 = (_luaD_protectedparser($L,$z,$$chunkname,$mode)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($1|0);
 }
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 6|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  STACKTOP = sp;return ($1|0);
 }
 $10 = (($L) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_luaH_getint($13,2,0)|0);
 $15 = (($6) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 ;HEAP32[$17+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$17+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[$14+12>>2]|0;
 $18 = HEAP32[$15>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 64;
 $23 = ($22|0)!=(0);
 $24 = (($18) + 8|0);
 $25 = ($19|0)==($24|0);
 $or$cond = $23 & $25;
 if (!($or$cond)) {
  STACKTOP = sp;return ($1|0);
 }
 _luaC_upvalbarrier_($L,$18);
 STACKTOP = sp;return ($1|0);
}
function _lua_dump($L,$writer,$data,$strip) {
 $L = $L|0;
 $writer = $writer|0;
 $data = $data|0;
 $strip = $strip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(70);
 if (!($4)) {
  $status$0 = 1;
  return ($status$0|0);
 }
 $5 = (($1) + -16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_luaU_dump($L,$8,$writer,$data,$strip)|0);
 $status$0 = $9;
 return ($status$0|0);
}
function _lua_status($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function _lua_gc($L,$what,$data) {
 $L = $L|0;
 $what = $what|0;
 $data = $data|0;
 var $$ = 0, $$data = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  switch ($what|0) {
  case 5:  {
   $16 = (($1) + 63|0);
   $17 = HEAP8[$16>>0]|0;
   HEAP8[$16>>0] = 1;
   $18 = ($data|0)==(0);
   if ($18) {
    _luaE_setdebt($1,-1600);
    _luaC_step($L);
    HEAP8[$16>>0] = $17;
    $28 = (($1) + 61|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($29<<24>>24)==(7);
    $$ = $30&1;
    return ($$|0);
   }
   $19 = $data << 10;
   $20 = (($1) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($19))|0;
   _luaE_setdebt($1,$22);
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)>(0);
   if ($26) {
    _luaC_step($L);
   }
   HEAP8[$16>>0] = $17;
   $27 = ($22|0)>(0);
   if ($27) {
    $28 = (($1) + 61|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($29<<24>>24)==(7);
    $$ = $30&1;
    return ($$|0);
   } else {
    $res$0 = 0;
    return ($res$0|0);
   }
   break;
  }
  case 4:  {
   $10 = (($1) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($11))|0;
   $15 = $14 & 1023;
   $res$0 = $15;
   return ($res$0|0);
   break;
  }
  case 2:  {
   _luaC_fullgc($L,0);
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 1:  {
   _luaE_setdebt($1,0);
   $3 = (($1) + 63|0);
   HEAP8[$3>>0] = 1;
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 7:  {
   $33 = (($1) + 128|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($data|0)<(40);
   $$data = $35 ? 40 : $data;
   HEAP32[$33>>2] = $$data;
   $res$0 = $34;
   return ($res$0|0);
   break;
  }
  case 3:  {
   $4 = (($1) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($1) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5))|0;
   $9 = $8 >>> 10;
   $res$0 = $9;
   return ($res$0|0);
   break;
  }
  case 0:  {
   $2 = (($1) + 63|0);
   HEAP8[$2>>0] = 0;
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 9:  {
   $36 = (($1) + 63|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $res$0 = $38;
   return ($res$0|0);
   break;
  }
  case 6:  {
   $31 = (($1) + 124|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$31>>2] = $data;
   $res$0 = $32;
   return ($res$0|0);
   break;
  }
  default: {
   $res$0 = -1;
   return ($res$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _lua_error($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaG_errormsg($L);
 // unreachable;
 return (0)|0;
}
function _lua_next($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = (($L) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -16|0);
 $33 = (_luaH_next($L,$29,$32)|0);
 $34 = ($33|0)==(0);
 $35 = HEAP32[$30>>2]|0;
 $36 = (($35) + -16|0);
 $37 = (($35) + 16|0);
 $storemerge = $34 ? $36 : $37;
 HEAP32[$30>>2] = $storemerge;
 return ($33|0);
}
function _lua_concat($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1);
 if ($0) {
  $1 = (($L) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   _luaC_step($L);
  }
  _luaV_concat($L,$n);
  return;
 } else {
  $6 = ($n|0)==(0);
  if (!($6)) {
   return;
  }
  $7 = (($L) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_luaS_newlstr($L,9952,0)|0);
  HEAP32[$8>>2] = $9;
  $10 = (($9) + 4|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 | 64;
  $14 = (($8) + 8|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$7>>2]|0;
  $16 = (($15) + 16|0);
  HEAP32[$7>>2] = $16;
  return;
 }
}
function _lua_len($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($L) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 _luaV_objlen($L,$30,$$0$i);
 $31 = HEAP32[$29>>2]|0;
 $32 = (($31) + 16|0);
 HEAP32[$29>>2] = $32;
 return;
}
function _lua_newuserdata($L,$size) {
 $L = $L|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaS_newudata($L,$size)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 71;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = (($5) + 24|0);
 return ($11|0);
}
function _lua_getupvalue($L,$funcindex,$n) {
 $L = $L|0;
 $funcindex = $funcindex|0;
 $n = $n|0;
 var $$0$i = 0, $$0$i12 = 0, $$0$i15 = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($funcindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($funcindex<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($funcindex|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($funcindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($funcindex|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($funcindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 do {
  if ((($31|0) == 6)) {
   $41 = HEAP32[$$0$i>>2]|0;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($n|0)>(0);
   if (!($44)) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $45 = (($43) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)<($n|0);
   if ($47) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $48 = (($n) + -1)|0;
   $49 = (($41) + 16|0);
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($43) + 64|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($48<<3)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $$0$i15 = 2656;$61 = $52;
   } else {
    $58 = (($56) + 16|0);
    $$0$i15 = $58;$61 = $52;
   }
  } else if ((($31|0) == 38)) {
   $32 = HEAP32[$$0$i>>2]|0;
   $33 = ($n|0)>(0);
   if (!($33)) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $34 = (($32) + 6|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)<($n|0);
   if ($37) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   } else {
    $38 = (($n) + -1)|0;
    $39 = (($32) + 16|0);
    $40 = (($39) + ($38<<4)|0);
    $$0$i15 = 9952;$61 = $40;
    break;
   }
  } else {
   $$0$i12 = 0;
   return ($$0$i12|0);
  }
 } while(0);
 $59 = (($L) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 ;HEAP32[$60+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$60+12>>2]=HEAP32[$61+12>>2]|0;
 $62 = HEAP32[$59>>2]|0;
 $63 = (($62) + 16|0);
 HEAP32[$59>>2] = $63;
 $$0$i12 = $$0$i15;
 return ($$0$i12|0);
}
function _lua_setupvalue($L,$funcindex,$n) {
 $L = $L|0;
 $funcindex = $funcindex|0;
 $n = $n|0;
 var $$0$i = 0, $$0$i23 = 0, $$0$i28 = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($funcindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($funcindex<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($funcindex|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($funcindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($funcindex|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($funcindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 do {
  if ((($31|0) == 38)) {
   $32 = HEAP32[$$0$i>>2]|0;
   $33 = ($n|0)>(0);
   if (!($33)) {
    $$0$i23 = 0;
    return ($$0$i23|0);
   }
   $34 = (($32) + 6|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)<($n|0);
   if ($37) {
    $$0$i23 = 0;
    return ($$0$i23|0);
   } else {
    $38 = (($n) + -1)|0;
    $39 = (($32) + 16|0);
    $40 = (($39) + ($38<<4)|0);
    $$0$i28 = 9952;$62 = $40;$63 = $32;$79 = 0;
    break;
   }
  } else if ((($31|0) == 6)) {
   $41 = HEAP32[$$0$i>>2]|0;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($n|0)>(0);
   if (!($44)) {
    $$0$i23 = 0;
    return ($$0$i23|0);
   }
   $45 = (($43) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)<($n|0);
   if ($47) {
    $$0$i23 = 0;
    return ($$0$i23|0);
   }
   $48 = (($n) + -1)|0;
   $49 = (($41) + 16|0);
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($43) + 64|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($48<<3)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $$0$i28 = 2656;$62 = $52;$63 = 0;$79 = $51;
   } else {
    $58 = (($56) + 16|0);
    $$0$i28 = $58;$62 = $52;$63 = 0;$79 = $51;
   }
  } else {
   $$0$i23 = 0;
   return ($$0$i23|0);
  }
 } while(0);
 $59 = (($L) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + -16|0);
 HEAP32[$59>>2] = $61;
 ;HEAP32[$62+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$61+12>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $80 = ($79|0)==(0|0);
  if ($80) {
   $$0$i23 = $$0$i28;
   return ($$0$i23|0);
  }
  $81 = HEAP32[$79>>2]|0;
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $83 & 64;
  $85 = ($84|0)!=(0);
  $86 = (($79) + 8|0);
  $87 = ($81|0)==($86|0);
  $or$cond = $85 & $87;
  if (!($or$cond)) {
   $$0$i23 = $$0$i28;
   return ($$0$i23|0);
  }
  _luaC_upvalbarrier_($L,$79);
  $$0$i23 = $$0$i28;
  return ($$0$i23|0);
 }
 $65 = HEAP32[$59>>2]|0;
 $66 = (($65) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 & 64;
 $69 = ($68|0)==(0);
 if ($69) {
  $$0$i23 = $$0$i28;
  return ($$0$i23|0);
 }
 $70 = (($63) + 5|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71 & 4;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $$0$i23 = $$0$i28;
  return ($$0$i23|0);
 }
 $74 = HEAP32[$65>>2]|0;
 $75 = (($74) + 5|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76 & 3;
 $78 = ($77<<24>>24)==(0);
 if ($78) {
  $$0$i23 = $$0$i28;
  return ($$0$i23|0);
 }
 _luaC_barrier_($L,$63,$74);
 $$0$i23 = $$0$i28;
 return ($$0$i23|0);
}
function _lua_upvalueid($L,$fidx,$n) {
 $L = $L|0;
 $fidx = $fidx|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($fidx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($fidx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 6528;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($fidx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($fidx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($fidx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($fidx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i = $28;
    }
   }
  }
 } while(0);
 $29 = (($$0$i) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 if ((($31|0) == 6)) {
  do {
   if ($2) {
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + ($fidx<<4)|0);
    $34 = (($L) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33>>>0)<($35>>>0);
    $$luaO_nilobject_$i$i = $36 ? $33 : 6528;
    $$0$i$i = $$luaO_nilobject_$i$i;
   } else {
    $37 = ($fidx|0)<(-1000999);
    if (!($37)) {
     $38 = (($L) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + ($fidx<<4)|0);
     $$0$i$i = $40;
     break;
    }
    $41 = ($fidx|0)==(-1001000);
    if ($41) {
     $42 = (($L) + 12|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (($43) + 40|0);
     $$0$i$i = $44;
     break;
    }
    $45 = (-1001000 - ($fidx))|0;
    $46 = HEAP32[$1>>2]|0;
    $47 = (($46) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(22);
    if ($49) {
     $$0$i$i = 6528;
    } else {
     $50 = HEAP32[$46>>2]|0;
     $51 = (($50) + 6|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = ($45|0)>($53|0);
     if ($54) {
      $$0$i$i = 6528;
     } else {
      $55 = (($45) + -1)|0;
      $56 = (($50) + 16|0);
      $57 = (($56) + ($55<<4)|0);
      $$0$i$i = $57;
     }
    }
   }
  } while(0);
  $58 = HEAP32[$$0$i$i>>2]|0;
  $59 = (($n) + -1)|0;
  $60 = (($58) + 16|0);
  $61 = (($60) + ($59<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $$0 = $62;
  return ($$0|0);
 } else if ((($31|0) == 38)) {
  $63 = HEAP32[$$0$i>>2]|0;
  $64 = (($n) + -1)|0;
  $65 = (($63) + 16|0);
  $66 = (($65) + ($64<<4)|0);
  $$0 = $66;
  return ($$0|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lua_upvaluejoin($L,$fidx1,$n1,$fidx2,$n2) {
 $L = $L|0;
 $fidx1 = $fidx1|0;
 $n1 = $n1|0;
 $fidx2 = $fidx2|0;
 $n2 = $n2|0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $$luaO_nilobject_$i$i = 0, $$luaO_nilobject_$i$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($fidx1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($fidx1<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i$i = $7 ? $4 : 6528;
   $$0$i$i = $$luaO_nilobject_$i$i;
  } else {
   $8 = ($fidx1|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($fidx1<<4)|0);
    $$0$i$i = $11;
    break;
   }
   $12 = ($fidx1|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0$i$i = $15;
    break;
   }
   $16 = (-1001000 - ($fidx1))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i$i = 6528;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0$i$i = 6528;
    } else {
     $26 = (($16) + -1)|0;
     $27 = (($21) + 16|0);
     $28 = (($27) + ($26<<4)|0);
     $$0$i$i = $28;
    }
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i$i>>2]|0;
 $30 = (($n1) + -1)|0;
 $31 = (($29) + 16|0);
 $32 = (($31) + ($30<<2)|0);
 $33 = ($fidx2|0)>(0);
 do {
  if ($33) {
   $34 = HEAP32[$1>>2]|0;
   $35 = (($34) + ($fidx2<<4)|0);
   $36 = (($L) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35>>>0)<($37>>>0);
   $$luaO_nilobject_$i$i2 = $38 ? $35 : 6528;
   $$0$i$i3 = $$luaO_nilobject_$i$i2;
  } else {
   $39 = ($fidx2|0)<(-1000999);
   if (!($39)) {
    $40 = (($L) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($fidx2<<4)|0);
    $$0$i$i3 = $42;
    break;
   }
   $43 = ($fidx2|0)==(-1001000);
   if ($43) {
    $44 = (($L) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 40|0);
    $$0$i$i3 = $46;
    break;
   }
   $47 = (-1001000 - ($fidx2))|0;
   $48 = HEAP32[$1>>2]|0;
   $49 = (($48) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(22);
   if ($51) {
    $$0$i$i3 = 6528;
   } else {
    $52 = HEAP32[$48>>2]|0;
    $53 = (($52) + 6|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = ($47|0)>($55|0);
    if ($56) {
     $$0$i$i3 = 6528;
    } else {
     $57 = (($47) + -1)|0;
     $58 = (($52) + 16|0);
     $59 = (($58) + ($57<<4)|0);
     $$0$i$i3 = $59;
    }
   }
  }
 } while(0);
 $60 = HEAP32[$$0$i$i3>>2]|0;
 $61 = (($n2) + -1)|0;
 $62 = (($60) + 16|0);
 $63 = (($62) + ($61<<2)|0);
 $64 = HEAP32[$32>>2]|0;
 _luaC_upvdeccount($L,$64);
 $65 = HEAP32[$63>>2]|0;
 HEAP32[$32>>2] = $65;
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + 1)|0;
 HEAP32[$66>>2] = $68;
 $69 = HEAP32[$65>>2]|0;
 $70 = (($65) + 8|0);
 $71 = ($69|0)==($70|0);
 if (!($71)) {
  $72 = (($70) + 4|0);
  HEAP32[$72>>2] = 1;
 }
 $73 = (($69) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 & 64;
 $76 = ($75|0)!=(0);
 $77 = (($65) + 8|0);
 $78 = ($69|0)==($77|0);
 $or$cond = $76 & $78;
 if (!($or$cond)) {
  return;
 }
 _luaC_upvalbarrier_($L,$65);
 return;
}
function _growstack($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 _luaD_growstack($L,$0);
 return;
}
function _f_call($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = (($ud) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _luaD_call($L,$0,$2,0);
 return;
}
function _luaL_traceback($L,$L1,$msg,$level) {
 $L = $L|0;
 $L1 = $L1|0;
 $msg = $msg|0;
 $level = $level|0;
 var $$0$be = 0, $$in = 0, $$le$1$i = 0, $$le$1$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $ar$i = 0, $le$0$i = 0, $le$0$i$lcssa = 0, $le$1$lcssa$i = 0, $le$11$i = 0, $li$0$i = 0, $li$0$i$lcssa = 0, $li$0$i$phi = 0;
 var $li$1$$i = 0, $li$12$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $ar$i = sp + 148|0;
 $ar = sp + 48|0;
 $0 = (_lua_gettop($L)|0);
 $le$0$i = 1;$li$0$i = 1;
 while(1) {
  $1 = (_lua_getstack($L1,$le$0$i,$ar$i)|0);
  $2 = ($1|0)==(0);
  $3 = $le$0$i << 1;
  if ($2) {
   $le$0$i$lcssa = $le$0$i;$li$0$i$lcssa = $li$0$i;
   break;
  } else {
   $li$0$i$phi = $le$0$i;$le$0$i = $3;$li$0$i = $li$0$i$phi;
  }
 }
 $4 = ($li$0$i$lcssa|0)<($le$0$i$lcssa|0);
 if ($4) {
  $le$11$i = $le$0$i$lcssa;$li$12$i = $li$0$i$lcssa;
  while(1) {
   $5 = (($le$11$i) + ($li$12$i))|0;
   $6 = (($5|0) / 2)&-1;
   $7 = (_lua_getstack($L1,$6,$ar$i)|0);
   $8 = ($7|0)==(0);
   $9 = (($6) + 1)|0;
   $$le$1$i = $8 ? $6 : $le$11$i;
   $li$1$$i = $8 ? $li$12$i : $9;
   $10 = ($li$1$$i|0)<($$le$1$i|0);
   if ($10) {
    $le$11$i = $$le$1$i;$li$12$i = $li$1$$i;
   } else {
    $$le$1$i$lcssa = $$le$1$i;
    break;
   }
  }
  $le$1$lcssa$i = $$le$1$i$lcssa;
 } else {
  $le$1$lcssa$i = $le$0$i$lcssa;
 }
 $11 = (($le$1$lcssa$i) + -1)|0;
 $12 = ($11|0)>(22);
 $13 = $12 ? 12 : 0;
 $14 = ($msg|0)==(0|0);
 if (!($14)) {
  HEAP32[$vararg_buffer>>2] = $msg;
  (_lua_pushfstring($L,14048,$vararg_buffer)|0);
 }
 (_lua_pushstring($L,2672)|0);
 $15 = (_lua_getstack($L1,$level,$ar)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $45 = (_lua_gettop($L)|0);
  $46 = (($45) - ($0))|0;
  _lua_concat($L,$46);
  STACKTOP = sp;return;
 }
 $17 = (($le$1$lcssa$i) + -11)|0;
 $18 = (($ar) + 36|0);
 $19 = (($ar) + 20|0);
 $20 = (($ar) + 8|0);
 $21 = (($ar) + 12|0);
 $22 = (($ar) + 24|0);
 $23 = (($ar) + 4|0);
 $24 = (($ar) + 35|0);
 $$in = $level;
 while(1) {
  $25 = (($$in) + 1)|0;
  $26 = ($25|0)==($13|0);
  if ($26) {
   (_lua_pushstring($L,2696)|0);
   $$0$be = $17;
  } else {
   (_lua_getinfo($L1,2704,$ar)|0);
   HEAP32[$vararg_buffer1>>2] = $18;
   (_lua_pushfstring($L,2712,$vararg_buffer1)|0);
   $27 = HEAP32[$19>>2]|0;
   $28 = ($27|0)>(0);
   if ($28) {
    HEAP32[$vararg_buffer4>>2] = $27;
    (_lua_pushfstring($L,2720,$vararg_buffer4)|0);
   }
   (_lua_pushstring($L,2728)|0);
   $29 = (_pushglobalfuncname($L,$ar)|0);
   $30 = ($29|0)==(0);
   do {
    if ($30) {
     $32 = HEAP32[$20>>2]|0;
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(0);
     if (!($34)) {
      $35 = HEAP32[$23>>2]|0;
      HEAP32[$vararg_buffer10>>2] = $32;
      $vararg_ptr13 = (($vararg_buffer10) + 4|0);
      HEAP32[$vararg_ptr13>>2] = $35;
      (_lua_pushfstring($L,3408,$vararg_buffer10)|0);
      break;
     }
     $36 = HEAP32[$21>>2]|0;
     $37 = HEAP8[$36>>0]|0;
     if ((($37<<24>>24) == 109)) {
      (_lua_pushstring($L,3416)|0);
      break;
     } else if ((($37<<24>>24) == 67)) {
      (_lua_pushstring($L,6416)|0);
      break;
     } else {
      $38 = HEAP32[$22>>2]|0;
      HEAP32[$vararg_buffer14>>2] = $18;
      $vararg_ptr17 = (($vararg_buffer14) + 4|0);
      HEAP32[$vararg_ptr17>>2] = $38;
      (_lua_pushfstring($L,3432,$vararg_buffer14)|0);
      break;
     }
    } else {
     $31 = (_lua_tolstring($L,-1,0)|0);
     HEAP32[$vararg_buffer7>>2] = $31;
     (_lua_pushfstring($L,3392,$vararg_buffer7)|0);
     _lua_rotate($L,-2,-1);
     _lua_settop($L,-2);
    }
   } while(0);
   $39 = HEAP8[$24>>0]|0;
   $40 = ($39<<24>>24)==(0);
   if (!($40)) {
    (_lua_pushstring($L,2736)|0);
   }
   $41 = (_lua_gettop($L)|0);
   $42 = (($41) - ($0))|0;
   _lua_concat($L,$42);
   $$0$be = $25;
  }
  $43 = (_lua_getstack($L1,$$0$be,$ar)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   break;
  } else {
   $$in = $$0$be;
  }
 }
 $45 = (_lua_gettop($L)|0);
 $46 = (($45) - ($0))|0;
 _lua_concat($L,$46);
 STACKTOP = sp;return;
}
function _luaL_argerror($L,$arg,$extramsg) {
 $L = $L|0;
 $arg = $arg|0;
 $extramsg = $extramsg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 8|0;
 $ar = sp + 28|0;
 $0 = (_lua_getstack($L,0,$ar)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $arg;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $extramsg;
  $2 = (_luaL_error($L,2760,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 (_lua_getinfo($L,10112,$ar)|0);
 $3 = (($ar) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strcmp($4,3688)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (($arg) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (($ar) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $10;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $extramsg;
   $11 = (_luaL_error($L,2784,$vararg_buffer2)|0);
   $$0 = $11;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $7;
  }
 } else {
  $$01 = $arg;
 }
 $12 = (($ar) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = (_pushglobalfuncname($L,$ar)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $18 = 6416;
  } else {
   $17 = (_lua_tolstring($L,-1,0)|0);
   $18 = $17;
  }
  HEAP32[$12>>2] = $18;
  $19 = $18;
 } else {
  $19 = $13;
 }
 HEAP32[$vararg_buffer6>>2] = $$01;
 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $19;
 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
 HEAP32[$vararg_ptr10>>2] = $extramsg;
 $20 = (_luaL_error($L,2816,$vararg_buffer6)|0);
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_error($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar$i = 0, $argp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar$i = sp + 24|0;
 $argp = sp + 8|0;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_lua_getstack($L,1,$ar$i)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_lua_getinfo($L,2848,$ar$i)|0);
  $2 = (($ar$i) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = (($ar$i) + 36|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $3;
   (_lua_pushfstring($L,2856,$vararg_buffer)|0);
   (_lua_pushvfstring($L,$fmt,$argp)|0);
   _lua_concat($L,2);
   (_lua_error($L)|0);
   // unreachable;
  }
 }
 (_lua_pushstring($L,9952)|0);
 (_lua_pushvfstring($L,$fmt,$argp)|0);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return (0)|0;
}
function _luaL_where($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 8|0;
 $0 = (_lua_getstack($L,$level,$ar)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_lua_getinfo($L,2848,$ar)|0);
  $2 = (($ar) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = (($ar) + 36|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $3;
   (_lua_pushfstring($L,2856,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
 }
 (_lua_pushstring($L,9952)|0);
 STACKTOP = sp;return;
}
function _luaL_fileresult($L,$stat,$fname) {
 $L = $L|0;
 $stat = $stat|0;
 $fname = $fname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($stat|0)==(0);
 if (!($2)) {
  _lua_pushboolean($L,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_pushnil($L);
 $3 = ($fname|0)==(0|0);
 $4 = (_strerror(($1|0))|0);
 if ($3) {
  (_lua_pushstring($L,$4)|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $fname;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  (_lua_pushfstring($L,2864,$vararg_buffer)|0);
 }
 $5 = ($1|0)<(0);
 $6 = $5 << 31 >> 31;
 _lua_pushinteger($L,$1,$6);
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_execresult($L,$stat) {
 $L = $L|0;
 $stat = $stat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($stat|0) == -1)) {
  $0 = (___errno_location()|0);
  $1 = HEAP32[$0>>2]|0;
  _lua_pushnil($L);
  $2 = (_strerror(($1|0))|0);
  (_lua_pushstring($L,$2)|0);
  $3 = ($1|0)<(0);
  $4 = $3 << 31 >> 31;
  _lua_pushinteger($L,$1,$4);
  return 3;
 } else if ((($stat|0) == 0)) {
  _lua_pushboolean($L,1);
 } else {
  _lua_pushnil($L);
 }
 (_lua_pushstring($L,7120)|0);
 $5 = ($stat|0)<(0);
 $6 = $5 << 31 >> 31;
 _lua_pushinteger($L,$stat,$6);
 return 3;
}
function _luaL_newmetatable($L,$tname) {
 $L = $L|0;
 $tname = $tname|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getfield($L,-1001000,$tname)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 _lua_settop($L,-2);
 _lua_createtable($L,0,0);
 (_lua_pushstring($L,$tname)|0);
 _lua_setfield($L,-2,2872);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,$tname);
 $$0 = 1;
 return ($$0|0);
}
function _luaL_setmetatable($L,$tname) {
 $L = $L|0;
 $tname = $tname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_getfield($L,-1001000,$tname)|0);
 (_lua_setmetatable($L,-2)|0);
 return;
}
function _luaL_testudata($L,$ud,$tname) {
 $L = $L|0;
 $ud = $ud|0;
 $tname = $tname|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_touserdata($L,$ud)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_lua_getmetatable($L,$ud)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 (_lua_getfield($L,-1001000,$tname)|0);
 $4 = (_lua_rawequal($L,-1,-2)|0);
 $5 = ($4|0)==(0);
 $$ = $5 ? 0 : $0;
 _lua_settop($L,-3);
 $$0 = $$;
 return ($$0|0);
}
function _luaL_checkudata($L,$ud,$tname) {
 $L = $L|0;
 $ud = $ud|0;
 $tname = $tname|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_touserdata($L,$ud)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_lua_getmetatable($L,$ud)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (_lua_getfield($L,-1001000,$tname)|0);
   $4 = (_lua_rawequal($L,-1,-2)|0);
   $5 = ($4|0)==(0);
   _lua_settop($L,-3);
   if (!($5)) {
    $$0$i1 = $0;
    return ($$0$i1|0);
   }
  }
 }
 _typeerror($L,$ud,$tname);
 $$0$i1 = 0;
 return ($$0$i1|0);
}
function _luaL_checkoption($L,$arg,$def,$lst) {
 $L = $L|0;
 $arg = $arg|0;
 $def = $def|0;
 $lst = $lst|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02 = 0, $i$02$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($def|0)==(0|0);
 if ($0) {
  $6 = (_lua_tolstring($L,$arg,0)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = (_lua_typename($L,4)|0);
   _typeerror($L,$arg,$8);
   $16 = 0;
  } else {
   $16 = $6;
  }
 } else {
  $1 = (_lua_type($L,$arg)|0);
  $2 = ($1|0)<(1);
  if ($2) {
   $16 = $def;
  } else {
   $3 = (_lua_tolstring($L,$arg,0)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $5 = (_lua_typename($L,4)|0);
    _typeerror($L,$arg,$5);
    $16 = 0;
   } else {
    $16 = $3;
   }
  }
 }
 $9 = HEAP32[$lst>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $15 = $9;$i$02 = 0;
   while(1) {
    $17 = (_strcmp($15,$16)|0);
    $18 = ($17|0)==(0);
    $12 = (($i$02) + 1)|0;
    if ($18) {
     $i$02$lcssa = $i$02;
     break;
    }
    $11 = (($lst) + ($12<<2)|0);
    $13 = HEAP32[$11>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     label = 11;
     break;
    } else {
     $15 = $13;$i$02 = $12;
    }
   }
   if ((label|0) == 11) {
    break;
   }
   $$0 = $i$02$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $16;
 $19 = (_lua_pushfstring($L,2880,$vararg_buffer)|0);
 $20 = (_luaL_argerror($L,$arg,$19)|0);
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_optlstring($L,$arg,$def,$len) {
 $L = $L|0;
 $arg = $arg|0;
 $def = $def|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$arg)|0);
 $1 = ($0|0)<(1);
 if (!($1)) {
  $6 = (_lua_tolstring($L,$arg,$len)|0);
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $$0 = $6;
   return ($$0|0);
  }
  $8 = (_lua_typename($L,4)|0);
  _typeerror($L,$arg,$8);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($len|0)==(0|0);
 if ($2) {
  $$0 = $def;
  return ($$0|0);
 }
 $3 = ($def|0)==(0|0);
 if ($3) {
  $5 = 0;
 } else {
  $4 = (_strlen(($def|0))|0);
  $5 = $4;
 }
 HEAP32[$len>>2] = $5;
 $$0 = $def;
 return ($$0|0);
}
function _luaL_checklstring($L,$arg,$len) {
 $L = $L|0;
 $arg = $arg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tolstring($L,$arg,$len)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  return ($0|0);
 }
 $2 = (_lua_typename($L,4)|0);
 _typeerror($L,$arg,$2);
 return ($0|0);
}
function _luaL_checkstack($L,$space,$msg) {
 $L = $L|0;
 $space = $space|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($space) + 20)|0;
 $1 = (_lua_checkstack($L,$0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ($msg|0)==(0|0);
 if ($3) {
  (_luaL_error($L,13624,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $msg;
  (_luaL_error($L,2904,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _luaL_checktype($L,$arg,$t) {
 $L = $L|0;
 $arg = $arg|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$arg)|0);
 $1 = ($0|0)==($t|0);
 if ($1) {
  return;
 }
 $2 = (_lua_typename($L,$t)|0);
 _typeerror($L,$arg,$2);
 return;
}
function _luaL_checkany($L,$arg) {
 $L = $L|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$arg)|0);
 $1 = ($0|0)==(-1);
 if (!($1)) {
  return;
 }
 (_luaL_argerror($L,$arg,5520)|0);
 return;
}
function _luaL_checknumber($L,$arg) {
 $L = $L|0;
 $arg = $arg|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $isnum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $isnum = sp;
 $0 = (+_lua_tonumberx($L,$arg,$isnum));
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return (+$0);
 }
 $3 = (_lua_typename($L,3)|0);
 _typeerror($L,$arg,$3);
 STACKTOP = sp;return (+$0);
}
function _luaL_optnumber($L,$arg,$def) {
 $L = $L|0;
 $arg = $arg|0;
 $def = +$def;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $isnum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $isnum$i = sp;
 $0 = (_lua_type($L,$arg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $6 = $def;
 } else {
  $2 = (+_lua_tonumberx($L,$arg,$isnum$i));
  $3 = HEAP32[$isnum$i>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = (_lua_typename($L,3)|0);
   _typeerror($L,$arg,$5);
   $6 = $2;
  } else {
   $6 = $2;
  }
 }
 STACKTOP = sp;return (+$6);
}
function _luaL_checkinteger($L,$arg) {
 $L = $L|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isnum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $isnum = sp;
 $0 = (_lua_tointegerx($L,$arg,$isnum)|0);
 $1 = tempRet0;
 $2 = HEAP32[$isnum>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = (_lua_isnumber($L,$arg)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (_lua_typename($L,3)|0);
    _typeerror($L,$arg,$6);
    break;
   } else {
    (_luaL_argerror($L,$arg,3296)|0);
    break;
   }
  }
 } while(0);
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _luaL_optinteger($L,$arg,$0,$1) {
 $L = $L|0;
 $arg = $arg|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isnum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $isnum$i = sp;
 $2 = (_lua_type($L,$arg)|0);
 $3 = ($2|0)<(1);
 do {
  if ($3) {
   $11 = $1;$12 = $0;
  } else {
   $4 = (_lua_tointegerx($L,$arg,$isnum$i)|0);
   $5 = tempRet0;
   $6 = HEAP32[$isnum$i>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = (_lua_isnumber($L,$arg)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $10 = (_lua_typename($L,3)|0);
     _typeerror($L,$arg,$10);
     $11 = $5;$12 = $4;
     break;
    } else {
     (_luaL_argerror($L,$arg,3296)|0);
     $11 = $5;$12 = $4;
     break;
    }
   } else {
    $11 = $5;$12 = $4;
   }
  }
 } while(0);
 tempRet0 = $11;
 STACKTOP = sp;return ($12|0);
}
function _luaL_prepbuffsize($B,$sz) {
 $B = $B|0;
 $sz = $sz|0;
 var $$ = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($B) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($B) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($B) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6>>>0)<($sz>>>0);
 if (!($7)) {
  $$pre2 = HEAP32[$B>>2]|0;
  $22 = $$pre2;$23 = $5;
  $21 = (($22) + ($23)|0);
  STACKTOP = sp;return ($21|0);
 }
 $8 = $3 << 1;
 $9 = (($8) - ($5))|0;
 $10 = ($9>>>0)<($sz>>>0);
 $11 = (($5) + ($sz))|0;
 $$ = $10 ? $11 : $8;
 $12 = ($$>>>0)<($5>>>0);
 $13 = (($$) - ($5))|0;
 $14 = ($13>>>0)<($sz>>>0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  (_luaL_error($1,2928,$vararg_buffer)|0);
 }
 $15 = (_lua_newuserdata($1,$$)|0);
 $16 = HEAP32[$B>>2]|0;
 $17 = HEAP32[$4>>2]|0;
 _memcpy(($15|0),($16|0),($17|0))|0;
 $18 = HEAP32[$B>>2]|0;
 $19 = (($B) + 16|0);
 $20 = ($18|0)==($19|0);
 if (!($20)) {
  _lua_rotate($1,-2,-1);
  _lua_settop($1,-2);
 }
 HEAP32[$B>>2] = $15;
 HEAP32[$2>>2] = $$;
 $$pre = HEAP32[$4>>2]|0;
 $22 = $15;$23 = $$pre;
 $21 = (($22) + ($23)|0);
 STACKTOP = sp;return ($21|0);
}
function _luaL_addlstring($B,$s,$l) {
 $B = $B|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_prepbuffsize($B,$l)|0);
 _memcpy(($0|0),($s|0),($l|0))|0;
 $1 = (($B) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($l))|0;
 HEAP32[$1>>2] = $3;
 return;
}
function _luaL_addstring($B,$s) {
 $B = $B|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (_luaL_prepbuffsize($B,$0)|0);
 _memcpy(($1|0),($s|0),($0|0))|0;
 $2 = (($B) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($0))|0;
 HEAP32[$2>>2] = $4;
 return;
}
function _luaL_pushresult($B) {
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$B>>2]|0;
 $3 = (($B) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 (_lua_pushlstring($1,$2,$4)|0);
 $5 = HEAP32[$B>>2]|0;
 $6 = (($B) + 16|0);
 $7 = ($5|0)==($6|0);
 if ($7) {
  return;
 }
 _lua_rotate($1,-2,-1);
 _lua_settop($1,-2);
 return;
}
function _luaL_pushresultsize($B,$sz) {
 $B = $B|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($sz))|0;
 HEAP32[$0>>2] = $2;
 $3 = (($B) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$B>>2]|0;
 (_lua_pushlstring($4,$5,$2)|0);
 $6 = HEAP32[$B>>2]|0;
 $7 = (($B) + 16|0);
 $8 = ($6|0)==($7|0);
 if ($8) {
  return;
 }
 _lua_rotate($4,-2,-1);
 _lua_settop($4,-2);
 return;
}
function _luaL_addvalue($B) {
 $B = $B|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 $0 = (($B) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_tolstring($1,-1,$l)|0);
 $3 = HEAP32[$B>>2]|0;
 $4 = (($B) + 16|0);
 $5 = ($3|0)==($4|0);
 if (!($5)) {
  _lua_rotate($1,-2,1);
 }
 $6 = HEAP32[$l>>2]|0;
 $7 = (_luaL_prepbuffsize($B,$6)|0);
 _memcpy(($7|0),($2|0),($6|0))|0;
 $8 = (($B) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($6))|0;
 HEAP32[$8>>2] = $10;
 $11 = HEAP32[$B>>2]|0;
 $12 = ($11|0)!=($4|0);
 $13 = $12 ? -2 : -1;
 _lua_rotate($1,$13,-1);
 _lua_settop($1,-2);
 STACKTOP = sp;return;
}
function _luaL_buffinit($L,$B) {
 $L = $L|0;
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 12|0);
 HEAP32[$0>>2] = $L;
 $1 = (($B) + 16|0);
 HEAP32[$B>>2] = $1;
 $2 = (($B) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($B) + 4|0);
 HEAP32[$3>>2] = 8192;
 return;
}
function _luaL_buffinitsize($L,$B,$sz) {
 $L = $L|0;
 $B = $B|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 12|0);
 HEAP32[$0>>2] = $L;
 $1 = (($B) + 16|0);
 HEAP32[$B>>2] = $1;
 $2 = (($B) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($B) + 4|0);
 HEAP32[$3>>2] = 8192;
 $4 = (_luaL_prepbuffsize($B,$sz)|0);
 return ($4|0);
}
function _luaL_loadfilex($L,$filename,$mode) {
 $L = $L|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i4 = 0, $$lcssa22 = 0, $$lcssa24 = 0, $$lcssa26 = 0, $$lcssa28 = 0, $$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $lf = 0, $or$cond = 0, $p$0$i$i = 0, $p$0$i$i2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 32|0;
 $lf = sp + 56|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + 1)|0;
 $2 = ($filename|0)==(0|0);
 if ($2) {
  (_lua_pushstring($L,2952)|0);
  $3 = HEAP32[_stdin>>2]|0;
  $4 = (($lf) + 4|0);
  HEAP32[$4>>2] = $3;
  $83 = $3;
 } else {
  HEAP32[$vararg_buffer>>2] = $filename;
  (_lua_pushfstring($L,2960,$vararg_buffer)|0);
  $5 = (_fopen(($filename|0),(6440|0))|0);
  $6 = (($lf) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strerror(($9|0))|0);
   $11 = (_lua_tolstring($L,$1,0)|0);
   $12 = (($11) + 1|0);
   HEAP32[$vararg_buffer1>>2] = 4792;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $12;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $10;
   (_lua_pushfstring($L,3272,$vararg_buffer1)|0);
   _lua_rotate($L,$1,-1);
   _lua_settop($L,-2);
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  } else {
   $83 = $5;
  }
 }
 HEAP32[$lf>>2] = 0;
 $13 = (($lf) + 4|0);
 $14 = $83;$p$0$i$i = 3264;
 while(1) {
  $15 = (_getc(($14|0))|0);
  $16 = ($15|0)==(-1);
  if ($16) {
   label = 7;
   break;
  }
  $18 = (($p$0$i$i) + 1|0);
  $19 = HEAP8[$p$0$i$i>>0]|0;
  $20 = $19&255;
  $21 = ($15|0)==($20|0);
  if (!($21)) {
   $$lcssa26 = $14;$$lcssa28 = $15;
   label = 12;
   break;
  }
  $22 = $15&255;
  $23 = HEAP32[$lf>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$lf>>2] = $24;
  $25 = ((($lf) + ($23)|0) + 8|0);
  HEAP8[$25>>0] = $22;
  $26 = HEAP8[$18>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   label = 11;
   break;
  }
  $$pre = HEAP32[$13>>2]|0;
  $14 = $$pre;$p$0$i$i = $18;
 }
 if ((label|0) == 7) {
  $17 = ($filename|0)!=(0|0);
  $84 = $17;
 }
 else if ((label|0) == 11) {
  HEAP32[$lf>>2] = 0;
  $28 = HEAP32[$13>>2]|0;
  $29 = (_getc(($28|0))|0);
  $$0$i$i = $29;$31 = $28;
  label = 13;
 }
 else if ((label|0) == 12) {
  $$0$i$i = $$lcssa28;$31 = $$lcssa26;
  label = 13;
 }
 do {
  if ((label|0) == 13) {
   $30 = ($$0$i$i|0)==(35);
   if ($30) {
    while(1) {
     $32 = (_getc(($31|0))|0);
     if ((($32|0) == 10) | (($32|0) == -1)) {
      break;
     }
    }
    $33 = (_getc(($31|0))|0);
    $34 = HEAP32[$lf>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$lf>>2] = $35;
    $36 = ((($lf) + ($34)|0) + 8|0);
    HEAP8[$36>>0] = 10;
    $37 = $33;
   } else {
    $37 = $$0$i$i;
   }
   $38 = ($37|0)==(27);
   $39 = ($filename|0)!=(0|0);
   $or$cond = $38 & $39;
   if ($or$cond) {
    $40 = HEAP32[$13>>2]|0;
    $41 = (_freopen(($filename|0),(2968|0),($40|0))|0);
    HEAP32[$13>>2] = $41;
    $42 = ($41|0)==(0|0);
    if ($42) {
     $43 = (___errno_location()|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (_strerror(($44|0))|0);
     $46 = (_lua_tolstring($L,$1,0)|0);
     $47 = (($46) + 1|0);
     HEAP32[$vararg_buffer6>>2] = 2976;
     $vararg_ptr9 = (($vararg_buffer6) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $47;
     $vararg_ptr10 = (($vararg_buffer6) + 8|0);
     HEAP32[$vararg_ptr10>>2] = $45;
     (_lua_pushfstring($L,3272,$vararg_buffer6)|0);
     _lua_rotate($L,$1,-1);
     _lua_settop($L,-2);
     $$0 = 7;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$lf>>2] = 0;
    $48 = $41;$p$0$i$i2 = 3264;
    while(1) {
     $49 = (_getc(($48|0))|0);
     $50 = ($49|0)==(-1);
     if ($50) {
      label = 33;
      break;
     }
     $51 = (($p$0$i$i2) + 1|0);
     $52 = HEAP8[$p$0$i$i2>>0]|0;
     $53 = $52&255;
     $54 = ($49|0)==($53|0);
     if (!($54)) {
      $$lcssa22 = $48;$$lcssa24 = $49;
      label = 26;
      break;
     }
     $55 = $49&255;
     $56 = HEAP32[$lf>>2]|0;
     $57 = (($56) + 1)|0;
     HEAP32[$lf>>2] = $57;
     $58 = ((($lf) + ($56)|0) + 8|0);
     HEAP8[$58>>0] = $55;
     $59 = HEAP8[$51>>0]|0;
     $60 = ($59<<24>>24)==(0);
     if ($60) {
      label = 25;
      break;
     }
     $$pre21 = HEAP32[$13>>2]|0;
     $48 = $$pre21;$p$0$i$i2 = $51;
    }
    if ((label|0) == 25) {
     HEAP32[$lf>>2] = 0;
     $61 = HEAP32[$13>>2]|0;
     $62 = (_getc(($61|0))|0);
     $$0$i$i4 = $62;$64 = $61;
    }
    else if ((label|0) == 26) {
     $$0$i$i4 = $$lcssa24;$64 = $$lcssa22;
    }
    else if ((label|0) == 33) {
     $84 = 1;
     break;
    }
    $63 = ($$0$i$i4|0)==(35);
    if ($63) {
     while(1) {
      $65 = (_getc(($64|0))|0);
      if ((($65|0) == 10) | (($65|0) == -1)) {
       break;
      }
     }
     $66 = (_getc(($64|0))|0);
     $67 = $66;
    } else {
     $67 = $$0$i$i4;
    }
   } else {
    $67 = $37;
   }
   $68 = ($67|0)==(-1);
   if ($68) {
    $84 = $39;
   } else {
    $69 = $67&255;
    $70 = HEAP32[$lf>>2]|0;
    $71 = (($70) + 1)|0;
    HEAP32[$lf>>2] = $71;
    $72 = ((($lf) + ($70)|0) + 8|0);
    HEAP8[$72>>0] = $69;
    $84 = $39;
   }
  }
 } while(0);
 $73 = (_lua_tolstring($L,-1,0)|0);
 $74 = (_lua_load($L,196,$lf,$73,$mode)|0);
 $75 = HEAP32[$13>>2]|0;
 $76 = (_ferror(($75|0))|0);
 if ($84) {
  (_fclose(($75|0))|0);
 }
 $77 = ($76|0)==(0);
 if ($77) {
  _lua_rotate($L,$1,-1);
  _lua_settop($L,-2);
  $$0 = $74;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_settop($L,$1);
  $78 = (___errno_location()|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_strerror(($79|0))|0);
  $81 = (_lua_tolstring($L,$1,0)|0);
  $82 = (($81) + 1|0);
  HEAP32[$vararg_buffer11>>2] = 4456;
  $vararg_ptr14 = (($vararg_buffer11) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $82;
  $vararg_ptr15 = (($vararg_buffer11) + 8|0);
  HEAP32[$vararg_ptr15>>2] = $80;
  (_lua_pushfstring($L,3272,$vararg_buffer11)|0);
  _lua_rotate($L,$1,-1);
  _lua_settop($L,-2);
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaL_loadbufferx($L,$buff,$size,$name,$mode) {
 $L = $L|0;
 $buff = $buff|0;
 $size = $size|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $ls = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ls = sp;
 HEAP32[$ls>>2] = $buff;
 $0 = (($ls) + 4|0);
 HEAP32[$0>>2] = $size;
 $1 = (_lua_load($L,197,$ls,$name,$mode)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaL_getmetafield($L,$obj,$event) {
 $L = $L|0;
 $obj = $obj|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getmetatable($L,$obj)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 (_lua_pushstring($L,$event)|0);
 $2 = (_lua_rawget($L,-2)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lua_settop($L,-3);
  $$0 = 0;
  return ($$0|0);
 } else {
  _lua_rotate($L,-2,-1);
  _lua_settop($L,-2);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaL_callmeta($L,$obj,$event) {
 $L = $L|0;
 $obj = $obj|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_absindex($L,$obj)|0);
 $1 = (_lua_getmetatable($L,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 (_lua_pushstring($L,$event)|0);
 $3 = (_lua_rawget($L,-2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _lua_settop($L,-3);
  $$0 = 0;
  return ($$0|0);
 } else {
  _lua_rotate($L,-2,-1);
  _lua_settop($L,-2);
  _lua_pushvalue($L,$0);
  _lua_callk($L,1,1,0,0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaL_len($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isnum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum = sp + 4|0;
 _lua_len($L,$idx);
 $0 = (_lua_tointegerx($L,-1,$isnum)|0);
 $1 = tempRet0;
 $2 = HEAP32[$isnum>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  (_luaL_error($L,2984,$vararg_buffer)|0);
 }
 _lua_settop($L,-2);
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _luaL_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = (_luaL_callmeta($L,$idx,4488)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_lua_type($L,$idx)|0);
   if ((($2|0) == 4)) {
    _lua_pushvalue($L,$idx);
    break;
   } else if ((($2|0) == 3)) {
    $3 = (_lua_isinteger($L,$idx)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $11 = (+_lua_tonumberx($L,$idx,0));
     HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_lua_pushfstring($L,3024,$vararg_buffer1)|0);
     break;
    } else {
     $5 = (_lua_tointegerx($L,$idx,0)|0);
     $6 = tempRet0;
     $7 = $vararg_buffer;
     $8 = $7;
     HEAP32[$8>>2] = $5;
     $9 = (($7) + 4)|0;
     $10 = $9;
     HEAP32[$10>>2] = $6;
     (_lua_pushfstring($L,3016,$vararg_buffer)|0);
     break;
    }
   } else if ((($2|0) == 1)) {
    $12 = (_lua_toboolean($L,$idx)|0);
    $13 = ($12|0)!=(0);
    $14 = $13 ? 14776 : 14664;
    (_lua_pushstring($L,$14)|0);
    break;
   } else if ((($2|0) == 0)) {
    (_lua_pushstring($L,14728)|0);
    break;
   } else {
    $15 = (_lua_type($L,$idx)|0);
    $16 = (_lua_typename($L,$15)|0);
    $17 = (_lua_topointer($L,$idx)|0);
    HEAP32[$vararg_buffer4>>2] = $16;
    $vararg_ptr7 = (($vararg_buffer4) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $17;
    (_lua_pushfstring($L,3032,$vararg_buffer4)|0);
    break;
   }
  }
 } while(0);
 $18 = (_lua_tolstring($L,-1,$len)|0);
 STACKTOP = sp;return ($18|0);
}
function _luaL_setfuncs($L,$l,$nup) {
 $L = $L|0;
 $l = $l|0;
 $nup = $nup|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01$us = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($nup) + 20)|0;
 $1 = (_lua_checkstack($L,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = 3040;
  (_luaL_error($L,2904,$vararg_buffer)|0);
 }
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $25 = $nup ^ -1;
  _lua_settop($L,$25);
  STACKTOP = sp;return;
 }
 $5 = ($nup|0)>(0);
 $6 = (-2 - ($nup))|0;
 $7 = (0 - ($nup))|0;
 if (!($5)) {
  $18 = $l;$21 = $l;
  while(1) {
   $17 = (($18) + 4|0);
   $19 = HEAP32[$17>>2]|0;
   _lua_pushcclosure($L,$19,$nup);
   $20 = HEAP32[$21>>2]|0;
   _lua_setfield($L,$6,$20);
   $22 = (($18) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    break;
   } else {
    $18 = $22;$21 = $22;
   }
  }
  $25 = $nup ^ -1;
  _lua_settop($L,$25);
  STACKTOP = sp;return;
 }
 $12 = $l;$9 = $l;
 while(1) {
  $i$01$us = 0;
  while(1) {
   _lua_pushvalue($L,$7);
   $16 = (($i$01$us) + 1)|0;
   $exitcond = ($16|0)==($nup|0);
   if ($exitcond) {
    break;
   } else {
    $i$01$us = $16;
   }
  }
  $8 = (($9) + 4|0);
  $10 = HEAP32[$8>>2]|0;
  _lua_pushcclosure($L,$10,$nup);
  $11 = HEAP32[$12>>2]|0;
  _lua_setfield($L,$6,$11);
  $13 = (($9) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   break;
  } else {
   $12 = $13;$9 = $13;
  }
 }
 $25 = $nup ^ -1;
 _lua_settop($L,$25);
 STACKTOP = sp;return;
}
function _luaL_getsubtable($L,$idx,$fname) {
 $L = $L|0;
 $idx = $idx|0;
 $fname = $fname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getfield($L,$idx,$fname)|0);
 $1 = ($0|0)==(5);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 _lua_settop($L,-2);
 $2 = (_lua_absindex($L,$idx)|0);
 _lua_createtable($L,0,0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,$2,$fname);
 $$0 = 0;
 return ($$0|0);
}
function _luaL_requiref($L,$modname,$openf,$glb) {
 $L = $L|0;
 $modname = $modname|0;
 $openf = $openf|0;
 $glb = $glb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getfield($L,-1001000,6008)|0);
 $1 = ($0|0)==(5);
 if (!($1)) {
  _lua_settop($L,-2);
  $2 = (_lua_absindex($L,-1001000)|0);
  _lua_createtable($L,0,0);
  _lua_pushvalue($L,-1);
  _lua_setfield($L,$2,6008);
 }
 (_lua_getfield($L,-1,$modname)|0);
 $3 = (_lua_toboolean($L,-1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _lua_settop($L,-2);
  _lua_pushcclosure($L,$openf,0);
  (_lua_pushstring($L,$modname)|0);
  _lua_callk($L,1,1,0,0);
  _lua_pushvalue($L,-1);
  _lua_setfield($L,-3,$modname);
 }
 _lua_rotate($L,-2,-1);
 _lua_settop($L,-2);
 $5 = ($glb|0)==(0);
 if ($5) {
  return;
 }
 _lua_pushvalue($L,-1);
 _lua_setglobal($L,$modname);
 return;
}
function _luaL_gsub($L,$s,$p,$r) {
 $L = $L|0;
 $s = $s|0;
 $p = $p|0;
 $r = $r|0;
 var $$$i = 0, $$$i11 = 0, $$$i4 = 0, $$0$lcssa = 0, $$015 = 0, $$lcssa = 0, $$lcssa19 = 0, $$pre = 0, $$pre$i = 0, $$pre$i13 = 0, $$pre$i6 = 0, $$pre$lcssa = 0, $$pre16 = 0, $$pre16$lcssa = 0, $$pre2$i = 0, $$pre2$i2 = 0, $$pre2$i9 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, $b = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond$i5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $b = sp + 24|0;
 $0 = (_strlen(($p|0))|0);
 $1 = (($b) + 12|0);
 HEAP32[$1>>2] = $L;
 $2 = (($b) + 16|0);
 HEAP32[$b>>2] = $2;
 $3 = (($b) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($b) + 4|0);
 HEAP32[$4>>2] = 8192;
 $5 = (_strstr($s,$p)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0$lcssa = $s;$60 = 8192;$61 = 0;$70 = $L;
 } else {
  $$015 = $s;$12 = 8192;$13 = 0;$22 = $L;$7 = $5;
  while(1) {
   $8 = $7;
   $9 = $$015;
   $10 = (($8) - ($9))|0;
   $11 = (($12) - ($13))|0;
   $14 = ($11>>>0)<($10>>>0);
   if ($14) {
    $15 = $12 << 1;
    $16 = (($15) - ($13))|0;
    $17 = ($16>>>0)<($10>>>0);
    $18 = (($13) + ($10))|0;
    $$$i = $17 ? $18 : $15;
    $19 = ($$$i>>>0)<($13>>>0);
    $20 = (($$$i) - ($13))|0;
    $21 = ($20>>>0)<($10>>>0);
    $or$cond$i = $19 | $21;
    if ($or$cond$i) {
     (_luaL_error($22,2928,$vararg_buffer)|0);
    }
    $23 = (_lua_newuserdata($22,$$$i)|0);
    $24 = HEAP32[$b>>2]|0;
    $25 = HEAP32[$3>>2]|0;
    _memcpy(($23|0),($24|0),($25|0))|0;
    $26 = HEAP32[$b>>2]|0;
    $27 = ($26|0)==($2|0);
    if (!($27)) {
     _lua_rotate($22,-2,-1);
     _lua_settop($22,-2);
    }
    HEAP32[$b>>2] = $23;
    HEAP32[$4>>2] = $$$i;
    $$pre$i = HEAP32[$3>>2]|0;
    $29 = $23;$30 = $$pre$i;
   } else {
    $$pre2$i = HEAP32[$b>>2]|0;
    $29 = $$pre2$i;$30 = $13;
   }
   $28 = (($29) + ($30)|0);
   _memcpy(($28|0),($$015|0),($10|0))|0;
   $31 = HEAP32[$3>>2]|0;
   $32 = (($31) + ($10))|0;
   HEAP32[$3>>2] = $32;
   $33 = (_strlen(($r|0))|0);
   $34 = HEAP32[$1>>2]|0;
   $35 = HEAP32[$4>>2]|0;
   $36 = (($35) - ($32))|0;
   $37 = ($36>>>0)<($33>>>0);
   if ($37) {
    $38 = $35 << 1;
    $39 = (($38) - ($32))|0;
    $40 = ($39>>>0)<($33>>>0);
    $41 = (($32) + ($33))|0;
    $$$i4 = $40 ? $41 : $38;
    $42 = ($$$i4>>>0)<($32>>>0);
    $43 = (($$$i4) - ($32))|0;
    $44 = ($43>>>0)<($33>>>0);
    $or$cond$i5 = $42 | $44;
    if ($or$cond$i5) {
     (_luaL_error($34,2928,$vararg_buffer1)|0);
    }
    $45 = (_lua_newuserdata($34,$$$i4)|0);
    $46 = HEAP32[$b>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    _memcpy(($45|0),($46|0),($47|0))|0;
    $48 = HEAP32[$b>>2]|0;
    $49 = ($48|0)==($2|0);
    if (!($49)) {
     _lua_rotate($34,-2,-1);
     _lua_settop($34,-2);
    }
    HEAP32[$b>>2] = $45;
    HEAP32[$4>>2] = $$$i4;
    $$pre$i6 = HEAP32[$3>>2]|0;
    $51 = $45;$52 = $$pre$i6;
   } else {
    $$pre2$i2 = HEAP32[$b>>2]|0;
    $51 = $$pre2$i2;$52 = $32;
   }
   $50 = (($51) + ($52)|0);
   _memcpy(($50|0),($r|0),($33|0))|0;
   $53 = HEAP32[$3>>2]|0;
   $54 = (($53) + ($33))|0;
   HEAP32[$3>>2] = $54;
   $55 = (($7) + ($0)|0);
   $56 = (_strstr($55,$p)|0);
   $57 = ($56|0)==(0|0);
   $$pre = HEAP32[$1>>2]|0;
   $$pre16 = HEAP32[$4>>2]|0;
   if ($57) {
    $$lcssa = $54;$$lcssa19 = $55;$$pre$lcssa = $$pre;$$pre16$lcssa = $$pre16;
    break;
   } else {
    $$015 = $55;$12 = $$pre16;$13 = $54;$22 = $$pre;$7 = $56;
   }
  }
  $$0$lcssa = $$lcssa19;$60 = $$pre16$lcssa;$61 = $$lcssa;$70 = $$pre$lcssa;
 }
 $58 = (_strlen(($$0$lcssa|0))|0);
 $59 = (($60) - ($61))|0;
 $62 = ($59>>>0)<($58>>>0);
 if ($62) {
  $63 = $60 << 1;
  $64 = (($63) - ($61))|0;
  $65 = ($64>>>0)<($58>>>0);
  $66 = (($61) + ($58))|0;
  $$$i11 = $65 ? $66 : $63;
  $67 = ($$$i11>>>0)<($61>>>0);
  $68 = (($$$i11) - ($61))|0;
  $69 = ($68>>>0)<($58>>>0);
  $or$cond$i12 = $67 | $69;
  if ($or$cond$i12) {
   (_luaL_error($70,2928,$vararg_buffer3)|0);
  }
  $71 = (_lua_newuserdata($70,$$$i11)|0);
  $72 = HEAP32[$b>>2]|0;
  $73 = HEAP32[$3>>2]|0;
  _memcpy(($71|0),($72|0),($73|0))|0;
  $74 = HEAP32[$b>>2]|0;
  $75 = ($74|0)==($2|0);
  if (!($75)) {
   _lua_rotate($70,-2,-1);
   _lua_settop($70,-2);
  }
  HEAP32[$b>>2] = $71;
  HEAP32[$4>>2] = $$$i11;
  $$pre$i13 = HEAP32[$3>>2]|0;
  $77 = $71;$78 = $$pre$i13;
 } else {
  $$pre2$i9 = HEAP32[$b>>2]|0;
  $77 = $$pre2$i9;$78 = $61;
 }
 $76 = (($77) + ($78)|0);
 _memcpy(($76|0),($$0$lcssa|0),($58|0))|0;
 $79 = HEAP32[$3>>2]|0;
 $80 = (($79) + ($58))|0;
 HEAP32[$3>>2] = $80;
 $81 = HEAP32[$1>>2]|0;
 $82 = HEAP32[$b>>2]|0;
 (_lua_pushlstring($81,$82,$80)|0);
 $83 = HEAP32[$b>>2]|0;
 $84 = ($83|0)==($2|0);
 if ($84) {
  $85 = (_lua_tolstring($L,-1,0)|0);
  STACKTOP = sp;return ($85|0);
 }
 _lua_rotate($81,-2,-1);
 _lua_settop($81,-2);
 $85 = (_lua_tolstring($L,-1,0)|0);
 STACKTOP = sp;return ($85|0);
}
function _luaL_newstate() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_newstate(198,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return ($0|0);
 }
 (_lua_atpanic($0,199)|0);
 return ($0|0);
}
function _luaL_checkversion_($L,$ver,$sz) {
 $L = $L|0;
 $ver = +$ver;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = (_lua_version($L)|0);
 $1 = ($sz|0)==(136);
 if (!($1)) {
  (_luaL_error($L,3064,$vararg_buffer)|0);
 }
 $2 = (_lua_version(0)|0);
 $3 = ($0|0)==($2|0);
 if (!($3)) {
  (_luaL_error($L,3120,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $4 = +HEAPF64[$0>>3];
 $5 = $4 != $ver;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAPF64[tempDoublePtr>>3]=$ver;HEAP32[$vararg_buffer3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer3+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr5 = (($vararg_buffer3) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$4;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_luaL_error($L,3152,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _pushglobalfuncname($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 (_lua_getinfo($L,3376,$ar)|0);
 (_lua_getfield($L,-1001000,6008)|0);
 $1 = (($0) + 1)|0;
 $2 = (_findfield($L,$1,2)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lua_settop($L,$0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_lua_tolstring($L,-1,0)|0);
 $5 = (_strncmp($4,3384,3)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (($4) + 3|0);
  (_lua_pushstring($L,$7)|0);
  _lua_rotate($L,-2,-1);
  _lua_settop($L,-2);
 }
 _lua_copy($L,-1,$1);
 _lua_settop($L,-3);
 $$0 = 1;
 return ($$0|0);
}
function _typeerror($L,$arg,$tname) {
 $L = $L|0;
 $arg = $arg|0;
 $tname = $tname|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $typearg$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_getmetatable($L,$arg)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   label = 6;
  } else {
   (_lua_pushstring($L,2872)|0);
   $2 = (_lua_rawget($L,-2)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    _lua_settop($L,-3);
    label = 6;
    break;
   }
   _lua_rotate($L,-2,-1);
   _lua_settop($L,-2);
   $4 = ($2|0)==(4);
   if ($4) {
    $5 = (_lua_tolstring($L,-1,0)|0);
    $typearg$0 = $5;
   } else {
    label = 6;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $6 = (_lua_type($L,$arg)|0);
  $7 = ($6|0)==(2);
  if ($7) {
   $typearg$0 = 3336;
  } else {
   $8 = (_lua_type($L,$arg)|0);
   $9 = (_lua_typename($L,$8)|0);
   $typearg$0 = $9;
  }
 }
 HEAP32[$vararg_buffer>>2] = $tname;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $typearg$0;
 $10 = (_lua_pushfstring($L,3352,$vararg_buffer)|0);
 (_luaL_argerror($L,$arg,$10)|0);
 STACKTOP = sp;return;
}
function _getF($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  HEAP32[$size>>2] = $0;
  HEAP32[$ud>>2] = 0;
  $$pre = (($ud) + 8|0);
  $$0 = $$pre;
  return ($$0|0);
 }
 $2 = (($ud) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_feof(($3|0))|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($ud) + 8|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = (_fread(($6|0),1,1024,($7|0))|0);
 HEAP32[$size>>2] = $8;
 $$0 = $6;
 return ($$0|0);
}
function _getS($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ud) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$size>>2] = $1;
 HEAP32[$0>>2] = 0;
 $3 = HEAP32[$ud>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _l_alloc($ud,$ptr,$osize,$nsize) {
 $ud = $ud|0;
 $ptr = $ptr|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nsize|0)==(0);
 if ($0) {
  _free($ptr);
  $$0 = 0;
  return ($$0|0);
 } else {
  $1 = (_realloc($ptr,$nsize)|0);
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _panic($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = (_lua_tolstring($L,-1,0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(3208|0),($vararg_buffer|0))|0);
 (_fflush(($0|0))|0);
 STACKTOP = sp;return 0;
}
function _findfield($L,$objidx,$level) {
 $L = $L|0;
 $objidx = $objidx|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_lua_type($L,-1)|0);
 $2 = ($1|0)==(5);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 _lua_pushnil($L);
 $3 = (_lua_next($L,-2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (($level) + -1)|0;
 while(1) {
  $6 = (_lua_type($L,-2)|0);
  $7 = ($6|0)==(4);
  if ($7) {
   $8 = (_lua_rawequal($L,$objidx,-1)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    label = 7;
    break;
   }
   $10 = (_findfield($L,$objidx,$5)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    label = 9;
    break;
   }
  }
  _lua_settop($L,-2);
  $12 = (_lua_next($L,-2)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 7) {
  _lua_settop($L,-2);
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  _lua_rotate($L,-2,-1);
  _lua_settop($L,-2);
  (_lua_pushstring($L,16336)|0);
  _lua_rotate($L,-2,1);
  _lua_concat($L,3);
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 11) {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lua_sethook($L,$func,$mask,$count) {
 $L = $L|0;
 $func = $func|0;
 $mask = $mask|0;
 $count = $count|0;
 var $$func = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($func|0)==(0|0);
 $1 = ($mask|0)==(0);
 $or$cond = $0 | $1;
 $$func = $or$cond ? 0 : $func;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 34|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 2;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = (($3) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($L) + 20|0);
  HEAP32[$10>>2] = $9;
 }
 $11 = (($L) + 84|0);
 HEAP32[$11>>2] = $$func;
 $12 = (($L) + 96|0);
 HEAP32[$12>>2] = $count;
 $13 = (($L) + 100|0);
 HEAP32[$13>>2] = $count;
 $14 = $mask&255;
 $15 = $or$cond ? 0 : $14;
 $16 = (($L) + 108|0);
 HEAP8[$16>>0] = $15;
 return;
}
function _lua_gethook($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lua_gethookmask($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 108|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function _lua_gethookcount($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lua_getstack($L,$level,$ar) {
 $L = $L|0;
 $level = $level|0;
 $ar = $ar|0;
 var $$0 = 0, $$01$lcssa = 0, $$017 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0 = 0, $ci$0$lcssa = 0, $ci$0$lcssa12 = 0, $ci$05 = 0;
 var $ci$08 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($L) + 16|0);
 $ci$05 = HEAP32[$1>>2]|0;
 $2 = ($level|0)>(0);
 $3 = (($L) + 48|0);
 $4 = ($ci$05|0)!=($3|0);
 $or$cond46 = $2 & $4;
 if ($or$cond46) {
  $$017 = $level;$ci$08 = $ci$05;
  while(1) {
   $5 = (($$017) + -1)|0;
   $6 = (($ci$08) + 8|0);
   $ci$0 = HEAP32[$6>>2]|0;
   $7 = ($5|0)>(0);
   $8 = ($ci$0|0)!=($3|0);
   $or$cond4 = $7 & $8;
   if ($or$cond4) {
    $$017 = $5;$ci$08 = $ci$0;
   } else {
    $$lcssa = $5;$ci$0$lcssa12 = $ci$0;
    break;
   }
  }
  $$01$lcssa = $$lcssa;$ci$0$lcssa = $ci$0$lcssa12;
 } else {
  $$01$lcssa = $level;$ci$0$lcssa = $ci$05;
 }
 $9 = ($$01$lcssa|0)!=(0);
 $10 = ($ci$0$lcssa|0)==($3|0);
 $or$cond = $9 | $10;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (($ar) + 96|0);
 HEAP32[$11>>2] = $ci$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _lua_getlocal($L,$ar,$n) {
 $L = $L|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$0$i$ph = 0, $$in$i = 0, $$ph = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$02$i = 0, $base$03$i = 0, $name$0 = 0, $name$1$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $3 = (($L) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($L) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($4) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + ($9)|0);
  HEAP32[$4>>2] = $10;
  $11 = $5;
  $12 = $7;
  $13 = (($11) - ($12))|0;
  HEAP32[$8>>2] = $13;
 }
 $14 = ($ar|0)==(0|0);
 L4: do {
  if ($14) {
   $15 = (($L) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + -8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(70);
   if ($19) {
    $20 = (($16) + -16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_luaF_getlocalname($23,$n,0)|0);
    $name$0 = $24;
   } else {
    $name$0 = 0;
   }
  } else {
   $25 = (($ar) + 96|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 34|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 & 2;
   $30 = ($29<<24>>24)==(0);
   do {
    if ($30) {
     $49 = HEAP32[$26>>2]|0;
     $50 = (($49) + 16|0);
     $base$02$i = $50;
     label = 12;
    } else {
     $31 = ($n|0)<(0);
     if (!($31)) {
      $51 = (($26) + 16|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = HEAP32[$26>>2]|0;
      $54 = HEAP32[$53>>2]|0;
      $55 = (($54) + 12|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($26) + 20|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($56) + 48|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = $58;
      $62 = $60;
      $63 = (($61) - ($62))|0;
      $64 = $63 >> 2;
      $65 = (($64) + -1)|0;
      $66 = (_luaF_getlocalname($56,$n,$65)|0);
      $67 = ($66|0)==(0|0);
      if ($67) {
       $base$02$i = $52;
       label = 12;
       break;
      } else {
       $base$03$i = $52;$name$1$i = $66;
       label = 16;
       break;
      }
     }
     $32 = (0 - ($n))|0;
     $33 = HEAP32[$26>>2]|0;
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + 6|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = (($26) + 16|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $41;
     $43 = $33;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 4;
     $46 = (($45) - ($39))|0;
     $47 = ($46|0)>($32|0);
     if (!($47)) {
      $name$0 = 0;
      break L4;
     }
     $$sum$i$i = (($39) - ($n))|0;
     $48 = (($33) + ($$sum$i$i<<4)|0);
     $$0$i$ph = 3792;$$ph = $48;
    }
   } while(0);
   if ((label|0) == 12) {
    $68 = (($L) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==($26|0);
    if ($70) {
     $71 = (($L) + 8|0);
     $$in$i = $71;
    } else {
     $72 = (($26) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     $$in$i = $73;
    }
    $74 = HEAP32[$$in$i>>2]|0;
    $75 = $74;
    $76 = $base$02$i;
    $77 = (($75) - ($76))|0;
    $78 = $77 >> 4;
    $79 = ($78|0)>=($n|0);
    $80 = ($n|0)>(0);
    $or$cond$i = $79 & $80;
    if ($or$cond$i) {
     $base$03$i = $base$02$i;$name$1$i = 3776;
     label = 16;
    } else {
     $name$0 = 0;
     break;
    }
   }
   if ((label|0) == 16) {
    $81 = (($n) + -1)|0;
    $82 = (($base$03$i) + ($81<<4)|0);
    $$0$i$ph = $name$1$i;$$ph = $82;
   }
   $83 = (($L) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   ;HEAP32[$84+0>>2]=HEAP32[$$ph+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$$ph+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$$ph+8>>2]|0;HEAP32[$84+12>>2]=HEAP32[$$ph+12>>2]|0;
   $85 = HEAP32[$83>>2]|0;
   $86 = (($85) + 16|0);
   HEAP32[$83>>2] = $86;
   $name$0 = $$0$i$ph;
  }
 } while(0);
 $87 = HEAP8[$0>>0]|0;
 $88 = ($87<<24>>24)==(1);
 if (!($88)) {
  return ($name$0|0);
 }
 $89 = (($L) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($L) + 28|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($90) + 28|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + ($95)|0);
 HEAP32[$90>>2] = $96;
 $97 = $91;
 $98 = $93;
 $99 = (($97) - ($98))|0;
 HEAP32[$94>>2] = $99;
 return ($name$0|0);
}
function _lua_setlocal($L,$ar,$n) {
 $L = $L|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$0$i$ph = 0, $$0$i2 = 0, $$in$i = 0, $$ph = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $base$02$i = 0, $base$03$i = 0, $name$1$i = 0, $or$cond$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $3 = (($L) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($L) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($4) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + ($9)|0);
  HEAP32[$4>>2] = $10;
  $11 = $5;
  $12 = $7;
  $13 = (($11) - ($12))|0;
  HEAP32[$8>>2] = $13;
 }
 $14 = (($ar) + 96|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 34|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 & 2;
 $19 = ($18<<24>>24)==(0);
 do {
  if ($19) {
   $38 = HEAP32[$15>>2]|0;
   $39 = (($38) + 16|0);
   $base$02$i = $39;
   label = 9;
  } else {
   $20 = ($n|0)<(0);
   if (!($20)) {
    $40 = (($15) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$15>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($15) + 20|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($45) + 48|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $47;
    $51 = $49;
    $52 = (($50) - ($51))|0;
    $53 = $52 >> 2;
    $54 = (($53) + -1)|0;
    $55 = (_luaF_getlocalname($45,$n,$54)|0);
    $56 = ($55|0)==(0|0);
    if ($56) {
     $base$02$i = $41;
     label = 9;
     break;
    } else {
     $base$03$i = $41;$name$1$i = $55;
     label = 13;
     break;
    }
   }
   $21 = (0 - ($n))|0;
   $22 = HEAP32[$15>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 6|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = (($15) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30;
   $32 = $22;
   $33 = (($31) - ($32))|0;
   $34 = $33 >> 4;
   $35 = (($34) - ($28))|0;
   $36 = ($35|0)>($21|0);
   if ($36) {
    $$sum$i$i = (($28) - ($n))|0;
    $37 = (($22) + ($$sum$i$i<<4)|0);
    $$0$i$ph = 3792;$$ph = $37;
    label = 14;
   } else {
    $$0$i2 = 0;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $57 = (($L) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==($15|0);
  if ($59) {
   $60 = (($L) + 8|0);
   $$in$i = $60;
  } else {
   $61 = (($15) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $$in$i = $62;
  }
  $63 = HEAP32[$$in$i>>2]|0;
  $64 = $63;
  $65 = $base$02$i;
  $66 = (($64) - ($65))|0;
  $67 = $66 >> 4;
  $68 = ($67|0)>=($n|0);
  $69 = ($n|0)>(0);
  $or$cond$i = $68 & $69;
  if ($or$cond$i) {
   $base$03$i = $base$02$i;$name$1$i = 3776;
   label = 13;
  } else {
   $$0$i2 = 0;
  }
 }
 if ((label|0) == 13) {
  $70 = (($n) + -1)|0;
  $71 = (($base$03$i) + ($70<<4)|0);
  $$0$i$ph = $name$1$i;$$ph = $71;
  label = 14;
 }
 if ((label|0) == 14) {
  $72 = (($L) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + -16|0);
  ;HEAP32[$$ph+0>>2]=HEAP32[$74+0>>2]|0;HEAP32[$$ph+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$$ph+8>>2]=HEAP32[$74+8>>2]|0;HEAP32[$$ph+12>>2]=HEAP32[$74+12>>2]|0;
  $75 = HEAP32[$72>>2]|0;
  $76 = (($75) + -16|0);
  HEAP32[$72>>2] = $76;
  $$0$i2 = $$0$i$ph;
 }
 $77 = HEAP8[$0>>0]|0;
 $78 = ($77<<24>>24)==(1);
 if (!($78)) {
  return ($$0$i2|0);
 }
 $79 = (($L) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($L) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($80) + 28|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + ($85)|0);
 HEAP32[$80>>2] = $86;
 $87 = $81;
 $88 = $83;
 $89 = (($87) - ($88))|0;
 HEAP32[$84>>2] = $89;
 return ($$0$i2|0);
}
function _lua_getinfo($L,$what,$ar) {
 $L = $L|0;
 $what = $what|0;
 $ar = $ar|0;
 var $$0 = 0, $$02$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci$0 = 0, $func$0 = 0, $i$01$i = 0, $phitmp$i = 0;
 var $status$0$lcssa$i = 0, $status$03$i = 0, $status$1$i = 0, $status$1$i$lcssa = 0, $storemerge$ph$i = 0, $storemerge4$i = 0, $tm$0$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$i = sp;
 $0 = (($L) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $3 = (($L) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($L) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($4) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + ($9)|0);
  HEAP32[$4>>2] = $10;
  $11 = $5;
  $12 = $7;
  $13 = (($11) - ($12))|0;
  HEAP32[$8>>2] = $13;
 }
 $14 = HEAP8[$what>>0]|0;
 $15 = ($14<<24>>24)==(62);
 if ($15) {
  $16 = (($L) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -16|0);
  $19 = (($what) + 1|0);
  HEAP32[$16>>2] = $18;
  $$0 = $19;$ci$0 = 0;$func$0 = $18;
 } else {
  $20 = (($ar) + 96|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $$0 = $what;$ci$0 = $21;$func$0 = $22;
 }
 $23 = (($func$0) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 31;
 $26 = ($25|0)==(6);
 if ($26) {
  $27 = HEAP32[$func$0>>2]|0;
  $30 = $27;
 } else {
  $30 = 0;
 }
 $28 = HEAP8[$$0>>0]|0;
 $29 = ($28<<24>>24)==(0);
 if ($29) {
  $status$0$lcssa$i = 1;
 } else {
  $31 = ($30|0)==(0|0);
  $32 = (($ar) + 16|0);
  $33 = (($ar) + 24|0);
  $34 = (($ar) + 28|0);
  $35 = (($ar) + 12|0);
  $36 = (($ar) + 36|0);
  $37 = (($30) + 4|0);
  $38 = (($30) + 12|0);
  $39 = ($ci$0|0)==(0|0);
  $40 = (($ar) + 20|0);
  $41 = (($ci$0) + 34|0);
  $42 = (($ci$0) + 20|0);
  $43 = (($ar) + 32|0);
  $44 = (($ar) + 34|0);
  $45 = (($ar) + 33|0);
  $46 = (($30) + 6|0);
  $47 = (($ar) + 35|0);
  $48 = (($ar) + 8|0);
  $49 = (($ar) + 4|0);
  $50 = (($ci$0) + 8|0);
  $51 = (($L) + 12|0);
  $$02$i = $$0;$53 = $28;$status$03$i = 1;
  while(1) {
   $52 = $53 << 24 >> 24;
   L15: do {
    switch ($52|0) {
    case 83:  {
     if ($31) {
      label = 13;
     } else {
      $54 = HEAP8[$37>>0]|0;
      $55 = ($54<<24>>24)==(38);
      if ($55) {
       label = 13;
      } else {
       $56 = HEAP32[$38>>2]|0;
       $57 = (($56) + 72|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(0|0);
       if ($59) {
        $61 = 3752;
       } else {
        $60 = (($58) + 16|0);
        $61 = $60;
       }
       HEAP32[$32>>2] = $61;
       $62 = (($56) + 36|0);
       $63 = HEAP32[$62>>2]|0;
       HEAP32[$33>>2] = $63;
       $64 = (($56) + 40|0);
       $65 = HEAP32[$64>>2]|0;
       HEAP32[$34>>2] = $65;
       $66 = ($63|0)==(0);
       $67 = $66 ? 3760 : 3768;
       $68 = $61;$storemerge4$i = $67;
      }
     }
     if ((label|0) == 13) {
      label = 0;
      HEAP32[$32>>2] = 3736;
      HEAP32[$33>>2] = -1;
      HEAP32[$34>>2] = -1;
      $68 = 3736;$storemerge4$i = 3744;
     }
     HEAP32[$35>>2] = $storemerge4$i;
     _luaO_chunkid($36,$68,60);
     $status$1$i = $status$03$i;
     break;
    }
    case 102: case 76:  {
     $status$1$i = $status$03$i;
     break;
    }
    case 117:  {
     if ($31) {
      HEAP8[$43>>0] = 0;
     } else {
      $90 = HEAP8[$46>>0]|0;
      HEAP8[$43>>0] = $90;
      $91 = HEAP8[$37>>0]|0;
      $92 = ($91<<24>>24)==(38);
      if (!($92)) {
       $93 = HEAP32[$38>>2]|0;
       $94 = (($93) + 7|0);
       $95 = HEAP8[$94>>0]|0;
       HEAP8[$44>>0] = $95;
       $96 = HEAP32[$38>>2]|0;
       $97 = (($96) + 6|0);
       $98 = HEAP8[$97>>0]|0;
       HEAP8[$45>>0] = $98;
       $status$1$i = $status$03$i;
       break L15;
      }
     }
     HEAP8[$44>>0] = 1;
     HEAP8[$45>>0] = 0;
     $status$1$i = $status$03$i;
     break;
    }
    case 116:  {
     if ($39) {
      $102 = 0;
     } else {
      $99 = HEAP8[$41>>0]|0;
      $100 = $99&255;
      $101 = $100 & 32;
      $phitmp$i = $101&255;
      $102 = $phitmp$i;
     }
     HEAP8[$47>>0] = $102;
     $status$1$i = $status$03$i;
     break;
    }
    case 110:  {
     L38: do {
      if ($39) {
       label = 48;
      } else {
       $103 = HEAP8[$41>>0]|0;
       $104 = $103 & 32;
       $105 = ($104<<24>>24)==(0);
       if ($105) {
        $106 = HEAP32[$50>>2]|0;
        $107 = (($106) + 34|0);
        $108 = HEAP8[$107>>0]|0;
        $109 = $108 & 2;
        $110 = ($109<<24>>24)==(0);
        if ($110) {
         label = 48;
        } else {
         $111 = HEAP32[$106>>2]|0;
         $112 = HEAP32[$111>>2]|0;
         $113 = (($112) + 12|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = (($106) + 20|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($114) + 48|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = $116;
         $120 = $118;
         $121 = (($119) - ($120))|0;
         $122 = $121 >> 2;
         $123 = (($122) + -1)|0;
         $124 = (($118) + ($123<<2)|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = $108 & 4;
         $127 = ($126<<24>>24)==(0);
         L42: do {
          if ($127) {
           $128 = $125 & 63;
           do {
            switch ($128|0) {
            case 32:  {
             $tm$0$i$i = 20;
             break;
            }
            case 37: case 36:  {
             $134 = $125 >>> 6;
             $135 = $134 & 255;
             $136 = (_getobjname($114,$123,$135,$49)|0);
             HEAP32[$48>>2] = $136;
             $137 = ($136|0)==(0|0);
             if ($137) {
              break L38;
             } else {
              $status$1$i = $status$03$i;
              break L15;
             }
             break;
            }
            case 26:  {
             $tm$0$i$i = 19;
             break;
            }
            case 29:  {
             $tm$0$i$i = 22;
             break;
            }
            case 25:  {
             $tm$0$i$i = 18;
             break;
            }
            case 28:  {
             $tm$0$i$i = 4;
             break;
            }
            case 31:  {
             $tm$0$i$i = 5;
             break;
            }
            case 33:  {
             $tm$0$i$i = 21;
             break;
            }
            case 41:  {
             HEAP32[$49>>2] = 3704;
             $storemerge$ph$i = 3704;
             break L42;
             break;
            }
            case 10: case 8:  {
             $tm$0$i$i = 1;
             break;
            }
            case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 17: case 16: case 15: case 14: case 13:  {
             $129 = (($128) + -7)|0;
             $tm$0$i$i = $129;
             break;
            }
            default: {
             $tm$0$i$i = 0;
            }
            }
           } while(0);
           $130 = HEAP32[$51>>2]|0;
           $131 = ((($130) + ($tm$0$i$i<<2)|0) + 148|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = (($132) + 16|0);
           HEAP32[$49>>2] = $133;
           $storemerge$ph$i = 3720;
          } else {
           HEAP32[$49>>2] = 6416;
           $storemerge$ph$i = 3696;
          }
         } while(0);
         HEAP32[$48>>2] = $storemerge$ph$i;
         $status$1$i = $status$03$i;
         break L15;
        }
       } else {
        label = 48;
       }
      }
     } while(0);
     if ((label|0) == 48) {
      label = 0;
      HEAP32[$48>>2] = 0;
     }
     HEAP32[$48>>2] = 9952;
     HEAP32[$49>>2] = 0;
     $status$1$i = $status$03$i;
     break;
    }
    case 108:  {
     if ($39) {
      $89 = -1;
     } else {
      $69 = HEAP8[$41>>0]|0;
      $70 = $69 & 2;
      $71 = ($70<<24>>24)==(0);
      if ($71) {
       $89 = -1;
      } else {
       $72 = HEAP32[$ci$0>>2]|0;
       $73 = HEAP32[$72>>2]|0;
       $74 = (($73) + 12|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($75) + 56|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = ($77|0)==(0|0);
       if ($78) {
        $89 = -1;
       } else {
        $79 = HEAP32[$42>>2]|0;
        $80 = (($75) + 48|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = $79;
        $83 = $81;
        $84 = (($82) - ($83))|0;
        $85 = $84 >> 2;
        $86 = (($85) + -1)|0;
        $87 = (($77) + ($86<<2)|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = $88;
       }
      }
     }
     HEAP32[$40>>2] = $89;
     $status$1$i = $status$03$i;
     break;
    }
    default: {
     $status$1$i = 0;
    }
    }
   } while(0);
   $138 = (($$02$i) + 1|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = ($139<<24>>24)==(0);
   if ($140) {
    $status$1$i$lcssa = $status$1$i;
    break;
   } else {
    $$02$i = $138;$53 = $139;$status$03$i = $status$1$i;
   }
  }
  $status$0$lcssa$i = $status$1$i$lcssa;
 }
 $141 = (_strchr($$0,102)|0);
 $142 = ($141|0)==(0|0);
 if (!($142)) {
  $143 = (($L) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  ;HEAP32[$144+0>>2]=HEAP32[$func$0+0>>2]|0;HEAP32[$144+4>>2]=HEAP32[$func$0+4>>2]|0;HEAP32[$144+8>>2]=HEAP32[$func$0+8>>2]|0;HEAP32[$144+12>>2]=HEAP32[$func$0+12>>2]|0;
  $145 = HEAP32[$143>>2]|0;
  $146 = (($145) + 16|0);
  HEAP32[$143>>2] = $146;
 }
 $147 = HEAP8[$0>>0]|0;
 $148 = ($147<<24>>24)==(1);
 if ($148) {
  $149 = (($L) + 16|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = HEAP32[$150>>2]|0;
  $152 = (($L) + 28|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) + 28|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($153) + ($155)|0);
  HEAP32[$150>>2] = $156;
  $157 = $151;
  $158 = $153;
  $159 = (($157) - ($158))|0;
  HEAP32[$154>>2] = $159;
 }
 $160 = (_strchr($$0,76)|0);
 $161 = ($160|0)==(0|0);
 if ($161) {
  STACKTOP = sp;return ($status$0$lcssa$i|0);
 }
 $162 = ($30|0)==(0|0);
 if (!($162)) {
  $163 = (($30) + 4|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = ($164<<24>>24)==(38);
  if (!($165)) {
   $170 = (($30) + 12|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 56|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (_luaH_new($L)|0);
   $175 = (($L) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP32[$176>>2] = $174;
   $177 = (($176) + 8|0);
   HEAP32[$177>>2] = 69;
   $178 = HEAP32[$175>>2]|0;
   $179 = (($178) + 16|0);
   HEAP32[$175>>2] = $179;
   HEAP32[$v$i>>2] = 1;
   $180 = (($v$i) + 8|0);
   HEAP32[$180>>2] = 1;
   $181 = HEAP32[$170>>2]|0;
   $182 = (($181) + 24|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ($183|0)>(0);
   if (!($184)) {
    STACKTOP = sp;return ($status$0$lcssa$i|0);
   }
   $i$01$i = 0;
   while(1) {
    $185 = (($173) + ($i$01$i<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = ($186|0)<(0);
    $188 = $187 << 31 >> 31;
    _luaH_setint($L,$174,$186,$188,$v$i);
    $189 = (($i$01$i) + 1)|0;
    $190 = HEAP32[$170>>2]|0;
    $191 = (($190) + 24|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($189|0)<($192|0);
    if ($193) {
     $i$01$i = $189;
    } else {
     break;
    }
   }
   STACKTOP = sp;return ($status$0$lcssa$i|0);
  }
 }
 $166 = (($L) + 8|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (($167) + 8|0);
 HEAP32[$168>>2] = 0;
 $169 = (($167) + 16|0);
 HEAP32[$166>>2] = $169;
 STACKTOP = sp;return ($status$0$lcssa$i|0);
}
function _luaG_typeerror($L,$o,$op) {
 $L = $L|0;
 $o = $o|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = (($2) + 1)|0;
 $4 = (10288 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_varinfo($L,$o)|0);
 HEAP32[$vararg_buffer>>2] = $op;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 _luaG_runerror($L,3456,$vararg_buffer);
 // unreachable;
}
function _luaG_runerror($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argp = 0, $buff$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff$i = sp + 32|0;
 $argp = sp + 16|0;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$argp>>2] = $varargs;
 $2 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 $3 = (($1) + 34|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 2;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  _luaG_errormsg($L);
  // unreachable;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $30 = -1;
 } else {
  $16 = (($1) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($10) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $17;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = $22 >> 2;
  $24 = (($23) + -1)|0;
  $25 = (($14) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $30 = $26;
 }
 $27 = ($12|0)==(0|0);
 if ($27) {
  HEAP8[$buff$i>>0] = 63;
  $29 = (($buff$i) + 1|0);
  HEAP8[$29>>0] = 0;
 } else {
  $28 = (($12) + 16|0);
  _luaO_chunkid($buff$i,$28,60);
 }
 HEAP32[$vararg_buffer>>2] = $buff$i;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $30;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 (_luaO_pushfstring($L,3616,$vararg_buffer)|0);
 _luaG_errormsg($L);
 // unreachable;
}
function _luaG_concaterror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $p2$p1 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $$off = (($2) + -3)|0;
 $switch = ($$off>>>0)<(2);
 $p2$p1 = $switch ? $p2 : $p1;
 _luaG_typeerror($L,$p2$p1,3488);
 // unreachable;
}
function _luaG_opinterror($L,$p1,$p2,$msg) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $msg = $msg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $p1$p2 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = +HEAPF64[$p1>>3];
  HEAPF64[$temp>>3] = $3;
  $$0 = $p2;
  _luaG_typeerror($L,$$0,$msg);
  // unreachable;
 } else {
  $4 = (_luaV_tonumber_($p1,$temp)|0);
  $5 = ($4|0)==(0);
  $p1$p2 = $5 ? $p1 : $p2;
  $$0 = $p1$p2;
  _luaG_typeerror($L,$$0,$msg);
  // unreachable;
 }
}
function _luaG_tointerror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p1$p2 = 0, $temp = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $temp = sp;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(19);
 if ($2) {
  $3 = $p1;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = $temp;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  $$0 = $p2;
 } else {
  $13 = (_luaV_tointeger($p1,$temp,0)|0);
  $14 = ($13|0)==(0);
  $p1$p2 = $14 ? $p1 : $p2;
  $$0 = $p1$p2;
 }
 $15 = (_varinfo($L,$$0)|0);
 HEAP32[$vararg_buffer>>2] = $15;
 _luaG_runerror($L,3504,$vararg_buffer);
 // unreachable;
}
function _luaG_ordererror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = (($2) + 1)|0;
 $4 = (10288 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($p2) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 15;
 $9 = (($8) + 1)|0;
 $10 = (10288 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($5|0)==($11|0);
 if ($12) {
  HEAP32[$vararg_buffer>>2] = $5;
  _luaG_runerror($L,3544,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer1>>2] = $5;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $11;
  _luaG_runerror($L,3584,$vararg_buffer1);
  // unreachable;
 }
}
function _luaG_addinfo($L,$msg,$src,$line) {
 $L = $L|0;
 $msg = $msg|0;
 $src = $src|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $buff = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff = sp + 12|0;
 $0 = ($src|0)==(0|0);
 if ($0) {
  HEAP8[$buff>>0] = 63;
  $2 = (($buff) + 1|0);
  HEAP8[$2>>0] = 0;
 } else {
  $1 = (($src) + 16|0);
  _luaO_chunkid($buff,$1,60);
 }
 HEAP32[$vararg_buffer>>2] = $buff;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $line;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $msg;
 $3 = (_luaO_pushfstring($L,3616,$vararg_buffer)|0);
 STACKTOP = sp;return ($3|0);
}
function _luaG_errormsg($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _luaD_throw($L,2);
  // unreachable;
 }
 $3 = (($L) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -16|0);
 ;HEAP32[$7+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$8+12>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + -16|0);
 ;HEAP32[$10+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$5+12>>2]|0;
 $11 = HEAP32[$6>>2]|0;
 $12 = (($11) + 16|0);
 HEAP32[$6>>2] = $12;
 $13 = (($11) + -16|0);
 _luaD_call($L,$13,1,0);
 _luaD_throw($L,2);
 // unreachable;
}
function _luaG_traceexec($L) {
 $L = $L|0;
 var $$c = 0, $$pre = 0, $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 108|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 8;
 $6 = ($5|0)==(0);
 if ($6) {
  $66 = 0;
 } else {
  $7 = (($L) + 100|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (($L) + 96|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$7>>2] = $11;
   $66 = 1;
  } else {
   $66 = 0;
  }
 }
 $12 = (($1) + 34|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 & 64;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $14 & 191;
  $18 = $17&255;
  HEAP8[$12>>0] = $18;
  return;
 }
 if ($66) {
  _luaD_hook($L,3,-1);
 }
 $19 = $4 & 4;
 $20 = ($19|0)==(0);
 do {
  if ($20) {
   $$pre = (($1) + 20|0);
   $$pre$phi2Z2D = $$pre;$$pre$phiZ2D = $$pre;
  } else {
   $21 = HEAP32[$1>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($1) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $26;
   $30 = $28;
   $31 = (($29) - ($30))|0;
   $32 = $31 >> 2;
   $33 = (($32) + -1)|0;
   $34 = (($24) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $49 = -1;
   } else {
    $37 = (($35) + ($33<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $49 = $38;
   }
   $39 = ($33|0)==(0);
   if (!($39)) {
    $40 = (($L) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($26>>>0)>($41>>>0);
    if ($42) {
     if ($36) {
      $51 = -1;
     } else {
      $43 = $41;
      $44 = (($43) - ($30))|0;
      $45 = $44 >> 2;
      $46 = (($45) + -1)|0;
      $47 = (($35) + ($46<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $51 = $48;
     }
     $50 = ($49|0)==($51|0);
     if ($50) {
      $$pre$phi2Z2D = $25;$$pre$phiZ2D = $25;
      break;
     }
    }
   }
   _luaD_hook($L,2,$49);
   $$pre$phi2Z2D = $25;$$pre$phiZ2D = $25;
  }
 } while(0);
 $52 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $53 = (($L) + 20|0);
 HEAP32[$53>>2] = $52;
 $54 = (($L) + 6|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55<<24>>24)==(1);
 if (!($56)) {
  return;
 }
 if (!($66)) {
  $58 = (($52) + -4|0);
  $$c = $58;
  HEAP32[$$pre$phiZ2D>>2] = $$c;
  $59 = HEAP8[$12>>0]|0;
  $60 = $59&255;
  $61 = $60 | 64;
  $62 = $61&255;
  HEAP8[$12>>0] = $62;
  $63 = (($L) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -16|0);
  HEAP32[$1>>2] = $65;
  _luaD_throw($L,1);
  // unreachable;
 }
 $57 = (($L) + 100|0);
 HEAP32[$57>>2] = 1;
 $58 = (($52) + -4|0);
 $$c = $58;
 HEAP32[$$pre$phiZ2D>>2] = $$c;
 $59 = HEAP8[$12>>0]|0;
 $60 = $59&255;
 $61 = $60 | 64;
 $62 = $61&255;
 HEAP8[$12>>0] = $62;
 $63 = (($L) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + -16|0);
 HEAP32[$1>>2] = $65;
 _luaD_throw($L,1);
 // unreachable;
}
function _getobjname($p,$lastpc,$reg,$name) {
 $p = $p|0;
 $lastpc = $lastpc|0;
 $reg = $reg|0;
 $name = $name|0;
 var $$0 = 0, $$0$i = 0, $$0$ph = 0, $$jmptarget$0$i = 0, $$lcssa = 0, $$lcssa42 = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $$lcssa51 = 0, $$pc$i$i = 0, $$pc$i3$i = 0, $$pc$i4$i = 0, $$pc$i5$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i = 0, $jmptarget$06$i = 0, $jmptarget$1$i = 0, $lastpc$tr = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond$not$i = 0, $or$cond1$i = 0, $or$cond2$i = 0, $p$idx = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, $pc$08$i = 0, $phitmp = 0, $reg$tr = 0, $setreg$07$i = 0, $setreg$1$i = 0;
 var $setreg$1$i$lcssa = 0, $setreg$1$i$lcssa$lcssa = 0, $setreg$1$i$lcssa$lcssa44 = 0, $setreg$1$i$lcssa$lcssa46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 48|0);
 $lastpc$tr = $lastpc;$reg$tr = $reg;
 L1: while(1) {
  $1 = (($reg$tr) + 1)|0;
  $2 = (_luaF_getlocalname($p,$1,$lastpc$tr)|0);
  HEAP32[$name>>2] = $2;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$0$ph = 14720;
   label = 45;
   break;
  }
  $4 = ($lastpc$tr|0)>(0);
  if (!($4)) {
   $$0$ph = 0;
   label = 45;
   break;
  }
  $5 = HEAP32[$0>>2]|0;
  $jmptarget$06$i = 0;$pc$08$i = 0;$setreg$07$i = -1;
  while(1) {
   $6 = (($5) + ($pc$08$i<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 63;
   $9 = $7 >>> 6;
   $10 = $9 & 255;
   switch ($8|0) {
   case 4:  {
    $11 = ($10|0)>($reg$tr|0);
    if ($11) {
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $setreg$07$i;
    } else {
     $12 = $7 >>> 23;
     $13 = (($10) + ($12))|0;
     $14 = ($13|0)<($reg$tr|0);
     if ($14) {
      $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $setreg$07$i;
     } else {
      $15 = ($pc$08$i|0)<($jmptarget$06$i|0);
      $$pc$i$i = $15 ? -1 : $pc$08$i;
      $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $$pc$i$i;
     }
    }
    break;
   }
   case 41:  {
    $16 = (($10) + 2)|0;
    $17 = ($16|0)>($reg$tr|0);
    if ($17) {
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $setreg$07$i;
    } else {
     $18 = ($pc$08$i|0)<($jmptarget$06$i|0);
     $$pc$i5$i = $18 ? -1 : $pc$08$i;
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $$pc$i5$i;
    }
    break;
   }
   case 37: case 36:  {
    $19 = ($10|0)>($reg$tr|0);
    if ($19) {
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $setreg$07$i;
    } else {
     $20 = ($pc$08$i|0)<($jmptarget$06$i|0);
     $$pc$i4$i = $20 ? -1 : $pc$08$i;
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $$pc$i4$i;
    }
    break;
   }
   case 30:  {
    $21 = $7 >>> 14;
    $22 = (($pc$08$i) + -131070)|0;
    $23 = (($22) + ($21))|0;
    $notlhs$i = ($pc$08$i|0)<($23|0);
    $notrhs$i = ($23|0)<=($lastpc$tr|0);
    $or$cond$not$i = $notrhs$i & $notlhs$i;
    $24 = ($23|0)>($jmptarget$06$i|0);
    $or$cond1$i = $or$cond$not$i & $24;
    $$jmptarget$0$i = $or$cond1$i ? $23 : $jmptarget$06$i;
    $jmptarget$1$i = $$jmptarget$0$i;$setreg$1$i = $setreg$07$i;
    break;
   }
   default: {
    $25 = (6936 + ($8)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 & 64;
    $28 = ($27<<24>>24)!=(0);
    $29 = ($10|0)==($reg$tr|0);
    $or$cond2$i = $28 & $29;
    if ($or$cond2$i) {
     $30 = ($pc$08$i|0)<($jmptarget$06$i|0);
     $$pc$i3$i = $30 ? -1 : $pc$08$i;
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $$pc$i3$i;
    } else {
     $jmptarget$1$i = $jmptarget$06$i;$setreg$1$i = $setreg$07$i;
    }
   }
   }
   $31 = (($pc$08$i) + 1)|0;
   $exitcond$i = ($31|0)==($lastpc$tr|0);
   if ($exitcond$i) {
    $setreg$1$i$lcssa = $setreg$1$i;
    break;
   } else {
    $jmptarget$06$i = $jmptarget$1$i;$pc$08$i = $31;$setreg$07$i = $setreg$1$i;
   }
  }
  $32 = ($setreg$1$i$lcssa|0)==(-1);
  if ($32) {
   $$0$ph = 0;
   label = 45;
   break;
  }
  $33 = (($5) + ($setreg$1$i$lcssa<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 63;
  switch ($35|0) {
  case 7: case 6:  {
   $$lcssa = $34;$$lcssa51 = $35;$setreg$1$i$lcssa$lcssa = $setreg$1$i$lcssa;
   label = 20;
   break L1;
   break;
  }
  case 1:  {
   $$lcssa49 = $34;
   label = 35;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  case 2:  {
   $$lcssa42 = $5;$setreg$1$i$lcssa$lcssa46 = $setreg$1$i$lcssa;
   label = 36;
   break L1;
   break;
  }
  case 12:  {
   $$lcssa48 = $34;$setreg$1$i$lcssa$lcssa44 = $setreg$1$i$lcssa;
   label = 39;
   break L1;
   break;
  }
  case 5:  {
   $$lcssa47 = $34;
   label = 32;
   break L1;
   break;
  }
  default: {
   $$0$ph = 0;
   label = 45;
   break L1;
  }
  }
  $36 = $34 >>> 23;
  $37 = $34 >>> 6;
  $38 = $37 & 255;
  $39 = ($36>>>0)<($38>>>0);
  if ($39) {
   $lastpc$tr = $setreg$1$i$lcssa;$reg$tr = $36;
  } else {
   $$0$ph = 0;
   label = 45;
   break;
  }
 }
 if ((label|0) == 20) {
  $40 = $$lcssa >>> 14;
  $41 = $40 & 511;
  $42 = $$lcssa >>> 23;
  $43 = ($$lcssa51|0)==(7);
  if ($43) {
   $44 = (($42) + 1)|0;
   $45 = (_luaF_getlocalname($p,$44,$setreg$1$i$lcssa$lcssa)|0);
   $66 = $45;
  } else {
   $p$idx1 = (($p) + 64|0);
   $p$idx1$val = HEAP32[$p$idx1>>2]|0;
   $46 = (($p$idx1$val) + ($42<<3)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $66 = 6416;
   } else {
    $49 = (($47) + 16|0);
    $66 = $49;
   }
  }
  $50 = $40 & 256;
  $51 = ($50|0)==(0);
  if ($51) {
   $62 = (_getobjname($p,$setreg$1$i$lcssa$lcssa,$41,$name)|0);
   $63 = ($62|0)==(0|0);
   if ($63) {
    label = 29;
   } else {
    $64 = HEAP8[$62>>0]|0;
    $65 = ($64<<24>>24)==(99);
    if (!($65)) {
     label = 29;
    }
   }
  } else {
   $52 = $40 & 255;
   $53 = (($p) + 44|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54) + ($52<<4)|0) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 & 15;
   $58 = ($57|0)==(4);
   if ($58) {
    $59 = (($54) + ($52<<4)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + 16|0);
    HEAP32[$name>>2] = $61;
   } else {
    label = 29;
   }
  }
  if ((label|0) == 29) {
   HEAP32[$name>>2] = 6416;
  }
  $67 = ($66|0)==(0|0);
  if ($67) {
   $$0 = 3656;
   return ($$0|0);
  }
  $68 = (_strcmp($66,14056)|0);
  $69 = ($68|0)==(0);
  $phitmp = $69 ? 3648 : 3656;
  $$0 = $phitmp;
  return ($$0|0);
 }
 else if ((label|0) == 32) {
  $70 = $$lcssa47 >>> 23;
  $p$idx = (($p) + 64|0);
  $p$idx$val = HEAP32[$p$idx>>2]|0;
  $71 = (($p$idx$val) + ($70<<3)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)==(0|0);
  if ($73) {
   $$0$i = 6416;
  } else {
   $74 = (($72) + 16|0);
   $$0$i = $74;
  }
  HEAP32[$name>>2] = $$0$i;
  $$0 = 3664;
  return ($$0|0);
 }
 else if ((label|0) == 35) {
  $75 = $$lcssa49 >>> 14;
  $83 = $75;
 }
 else if ((label|0) == 36) {
  $76 = (($setreg$1$i$lcssa$lcssa46) + 1)|0;
  $77 = (($$lcssa42) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 >>> 6;
  $83 = $79;
 }
 else if ((label|0) == 39) {
  $90 = $$lcssa48 >>> 14;
  $91 = $90 & 256;
  $92 = ($91|0)==(0);
  if ($92) {
   $103 = $90 & 511;
   $104 = (_getobjname($p,$setreg$1$i$lcssa$lcssa44,$103,$name)|0);
   $105 = ($104|0)==(0|0);
   if (!($105)) {
    $106 = HEAP8[$104>>0]|0;
    $107 = ($106<<24>>24)==(99);
    if ($107) {
     $$0 = 3688;
     return ($$0|0);
    }
   }
  } else {
   $93 = $90 & 255;
   $94 = (($p) + 44|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95) + ($93<<4)|0) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & 15;
   $99 = ($98|0)==(4);
   if ($99) {
    $100 = (($95) + ($93<<4)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + 16|0);
    HEAP32[$name>>2] = $102;
    $$0 = 3688;
    return ($$0|0);
   }
  }
  HEAP32[$name>>2] = 6416;
  $$0 = 3688;
  return ($$0|0);
 }
 else if ((label|0) == 45) {
  $$0 = $$0$ph;
  return ($$0|0);
 }
 $80 = (($p) + 44|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81) + ($83<<4)|0) + 8|0);
 $84 = HEAP32[$82>>2]|0;
 $85 = $84 & 15;
 $86 = ($85|0)==(4);
 if (!($86)) {
  $$0 = 0;
  return ($$0|0);
 }
 $87 = (($81) + ($83<<4)|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 16|0);
 HEAP32[$name>>2] = $89;
 $$0 = 3672;
 return ($$0|0);
}
function _varinfo($L,$o) {
 $L = $L|0;
 $o = $o|0;
 var $$0$i$i = 0, $$idx$i = 0, $$idx$val = 0, $$idx$val$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$02$i = 0, $i$02$i$lcssa = 0, $kind$03 = 0, $name = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 8|0;
 HEAP32[$name>>2] = 0;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 34|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 2;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $54 = 9952;
  STACKTOP = sp;return ($54|0);
 }
 $$idx$val = HEAP32[$1>>2]|0;
 $6 = HEAP32[$$idx$val>>2]|0;
 $7 = (($6) + 6|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 do {
  if ($9) {
   label = 10;
  } else {
   $10 = (($6) + 16|0);
   $11 = $8&255;
   $i$02$i = 0;
   while(1) {
    $14 = (($10) + ($i$02$i<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($o|0);
    $12 = (($i$02$i) + 1)|0;
    if ($17) {
     $i$02$i$lcssa = $i$02$i;
     break;
    }
    $13 = ($12|0)<($11|0);
    if ($13) {
     $i$02$i = $12;
    } else {
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    label = 10;
    break;
   }
   $18 = (($6) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $$idx$i = (($19) + 64|0);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $20 = (($$idx$val$i) + ($i$02$i$lcssa<<3)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $$0$i$i = 6416;
   } else {
    $23 = (($21) + 16|0);
    $$0$i$i = $23;
   }
   HEAP32[$name>>2] = $$0$i$i;
   $52 = $$0$i$i;$kind$03 = 3664;
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $24 = (($1) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $o;
   $27 = $25;
   $28 = (($26) - ($27))|0;
   $29 = $28 >> 4;
   $30 = ($28|0)>(-16);
   if (!($30)) {
    $54 = 9952;
    STACKTOP = sp;return ($54|0);
   }
   $31 = (($1) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32;
   $34 = (($33) - ($27))|0;
   $35 = $34 >> 4;
   $36 = ($29|0)<($35|0);
   $37 = (($25) + ($29<<4)|0);
   $38 = ($37|0)==($o|0);
   $or$cond = $36 & $38;
   if (!($or$cond)) {
    $54 = 9952;
    STACKTOP = sp;return ($54|0);
   }
   $39 = (($6) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($1) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 48|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $42;
   $46 = $44;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = (($48) + -1)|0;
   $50 = (_getobjname($40,$49,$29,$name)|0);
   $51 = ($50|0)==(0|0);
   if ($51) {
    $54 = 9952;
    STACKTOP = sp;return ($54|0);
   } else {
    $$pre = HEAP32[$name>>2]|0;
    $52 = $$pre;$kind$03 = $50;
    break;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $kind$03;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $52;
 $53 = (_luaO_pushfstring($L,3632,$vararg_buffer)|0);
 $54 = $53;
 STACKTOP = sp;return ($54|0);
}
function _luaD_throw($L,$errcode) {
 $L = $L|0;
 $errcode = $errcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 160|0);
  HEAP32[$3>>2] = $errcode;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 4|0);
  _longjmp(($5|0),1);
  // unreachable;
 }
 $6 = (($L) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $errcode&255;
 $9 = (($L) + 6|0);
 HEAP8[$9>>0] = $8;
 $10 = (($7) + 136|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = (($11) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 16|0);
  HEAP32[$15>>2] = $17;
  $18 = (($L) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + -16|0);
  ;HEAP32[$16+0>>2]=HEAP32[$20+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$20+12>>2]|0;
  $21 = HEAP32[$10>>2]|0;
  _luaD_throw($21,$errcode);
  // unreachable;
 }
 $22 = (($7) + 132|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  _abort();
  // unreachable;
 }
 $25 = (($L) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 if ((($errcode|0) == 4)) {
  $27 = (($7) + 144|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$26>>2] = $28;
  $29 = (($28) + 4|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 | 64;
  $33 = (($26) + 8|0);
  HEAP32[$33>>2] = $32;
 } else if ((($errcode|0) == 6)) {
  $34 = (_luaS_newlstr($L,4032,23)|0);
  HEAP32[$26>>2] = $34;
  $35 = (($34) + 4|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 | 64;
  $39 = (($26) + 8|0);
  HEAP32[$39>>2] = $38;
 } else {
  $40 = (($26) + -16|0);
  ;HEAP32[$26+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$40+12>>2]|0;
 }
 $41 = (($26) + 16|0);
 HEAP32[$25>>2] = $41;
 $42 = (($L) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45>>>0)<($41>>>0);
 if ($46) {
  HEAP32[$44>>2] = $41;
 }
 $47 = HEAP32[$22>>2]|0;
 (FUNCTION_TABLE_ii[$47 & 255]($L)|0);
 _abort();
 // unreachable;
}
function _luaD_rawrunprotected($L,$f,$ud) {
 $L = $L|0;
 $f = $f|0;
 $ud = $ud|0;
 var $$reg2mem23$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $lj = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $lj = sp;
 $0 = (($L) + 106|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($lj) + 160|0);
 HEAP32[$2>>2] = 0;
 $3 = (($L) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$lj>>2] = $4;
 HEAP32[$3>>2] = $lj;
 $5 = (($lj) + 4|0);
 _setjmpTable = _saveSetjmp($5,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $6 = __THREW__; __THREW__ = 0;
 if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
 $8 = tempRet0;
 $cond = ($7|0)==(1);
 if ($cond) {
  $$reg2mem23$0 = $8;
 } else {
  $$reg2mem23$0 = 0;
 }
 while(1) {
  $9 = ($$reg2mem23$0|0)==(0);
  if (!($9)) {
   label = 6;
   break;
  }
  __THREW__ = 0;
  invoke_vii($f|0,($L|0),($ud|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
  $12 = tempRet0;
  $cond1 = ($11|0)==(1);
  if ($cond1) {
   $$reg2mem23$0 = $12;
  } else {
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = HEAP32[$lj>>2]|0;
  HEAP32[$3>>2] = $13;
  HEAP16[$0>>1] = $1;
  $14 = HEAP32[$2>>2]|0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($14|0);
 }
 $13 = HEAP32[$lj>>2]|0;
 HEAP32[$3>>2] = $13;
 HEAP16[$0>>1] = $1;
 $14 = HEAP32[$2>>2]|0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($14|0);
}
function _luaD_reallocstack($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0$i = 0, $ci$01$i = 0, $ci$02$i = 0, $exitcond = 0;
 var $lim$01 = 0, $up$0$i = 0, $up$03$i = 0, $up$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($newsize) + 1)|0;
 $5 = ($4>>>0)>(268435455);
 if ($5) {
  _luaM_toobig($L);
  // unreachable;
 }
 $6 = $3 << 4;
 $7 = $newsize << 4;
 $8 = (_luaM_realloc_($L,$1,$6,$7)|0);
 HEAP32[$0>>2] = $8;
 $9 = ($3|0)<($newsize|0);
 if ($9) {
  $lim$01 = $3;
  while(1) {
   $10 = ((($8) + ($lim$01<<4)|0) + 8|0);
   HEAP32[$10>>2] = 0;
   $11 = (($lim$01) + 1)|0;
   $exitcond = ($11|0)==($newsize|0);
   if ($exitcond) {
    break;
   } else {
    $lim$01 = $11;
   }
  }
 }
 HEAP32[$2>>2] = $newsize;
 $$sum = (($newsize) + -5)|0;
 $12 = (($8) + ($$sum<<4)|0);
 $13 = (($L) + 24|0);
 HEAP32[$13>>2] = $12;
 $14 = (($L) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $1;
 $18 = (($16) - ($17))|0;
 $19 = $18 >> 4;
 $20 = (($8) + ($19<<4)|0);
 HEAP32[$14>>2] = $20;
 $21 = (($L) + 32|0);
 $up$03$i = HEAP32[$21>>2]|0;
 $22 = ($up$03$i|0)==(0|0);
 if (!($22)) {
  $up$04$i = $up$03$i;
  while(1) {
   $23 = HEAP32[$up$04$i>>2]|0;
   $24 = $23;
   $25 = (($24) - ($17))|0;
   $26 = $25 >> 4;
   $27 = (($8) + ($26<<4)|0);
   HEAP32[$up$04$i>>2] = $27;
   $28 = (($up$04$i) + 8|0);
   $up$0$i = HEAP32[$28>>2]|0;
   $29 = ($up$0$i|0)==(0|0);
   if ($29) {
    break;
   } else {
    $up$04$i = $up$0$i;
   }
  }
 }
 $30 = (($L) + 16|0);
 $ci$01$i = HEAP32[$30>>2]|0;
 $31 = ($ci$01$i|0)==(0|0);
 if ($31) {
  return;
 }
 $ci$02$i = $ci$01$i;
 while(1) {
  $32 = (($ci$02$i) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33;
  $35 = (($34) - ($17))|0;
  $36 = $35 >> 4;
  $37 = (($8) + ($36<<4)|0);
  HEAP32[$32>>2] = $37;
  $38 = HEAP32[$ci$02$i>>2]|0;
  $39 = $38;
  $40 = (($39) - ($17))|0;
  $41 = $40 >> 4;
  $42 = (($8) + ($41<<4)|0);
  HEAP32[$ci$02$i>>2] = $42;
  $43 = (($ci$02$i) + 34|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 & 2;
  $46 = ($45<<24>>24)==(0);
  if (!($46)) {
   $47 = (($ci$02$i) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48;
   $50 = (($49) - ($17))|0;
   $51 = $50 >> 4;
   $52 = (($8) + ($51<<4)|0);
   HEAP32[$47>>2] = $52;
  }
  $53 = (($ci$02$i) + 8|0);
  $ci$0$i = HEAP32[$53>>2]|0;
  $54 = ($ci$0$i|0)==(0|0);
  if ($54) {
   break;
  } else {
   $ci$02$i = $ci$0$i;
  }
 }
 return;
}
function _luaD_growstack($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(1000000);
 if ($2) {
  _luaD_throw($L,6);
  // unreachable;
 }
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($L) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = (($n) + 5)|0;
 $12 = (($11) + ($10))|0;
 $13 = $1 << 1;
 $14 = ($13|0)>(1000000);
 $$ = $14 ? 1000000 : $13;
 $15 = ($$|0)<($12|0);
 $$$ = $15 ? $12 : $$;
 $16 = ($$$|0)>(1000000);
 if ($16) {
  _luaD_reallocstack($L,1000200);
  _luaG_runerror($L,13624,$vararg_buffer);
  // unreachable;
 } else {
  _luaD_reallocstack($L,$$$);
  STACKTOP = sp;return;
 }
}
function _luaD_shrinkstack($L) {
 $L = $L|0;
 var $$ = 0, $$lim$0$i = 0, $$lim$0$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0$i = 0, $ci$01$i = 0, $ci$03$i = 0, $lim$0$lcssa$i = 0, $lim$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 16|0);
 $ci$01$i = HEAP32[$2>>2]|0;
 $3 = ($ci$01$i|0)==(0|0);
 if ($3) {
  $lim$0$lcssa$i = $1;
 } else {
  $ci$03$i = $ci$01$i;$lim$02$i = $1;
  while(1) {
   $4 = (($ci$03$i) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($lim$02$i>>>0)<($5>>>0);
   $$lim$0$i = $6 ? $5 : $lim$02$i;
   $7 = (($ci$03$i) + 8|0);
   $ci$0$i = HEAP32[$7>>2]|0;
   $8 = ($ci$0$i|0)==(0|0);
   if ($8) {
    $$lim$0$i$lcssa = $$lim$0$i;
    break;
   } else {
    $ci$03$i = $ci$0$i;$lim$02$i = $$lim$0$i;
   }
  }
  $lim$0$lcssa$i = $$lim$0$i$lcssa;
 }
 $9 = (($L) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $lim$0$lcssa$i;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 4;
 $15 = (($14) + 1)|0;
 $16 = (($15|0) / 8)&-1;
 $17 = (($16) + 10)|0;
 $18 = (($17) + ($15))|0;
 $19 = ($18|0)>(1000000);
 $$ = $19 ? 1000000 : $18;
 $20 = (($L) + 92|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(1000000);
 if ($22) {
  _luaE_freeCI($L);
 } else {
  _luaE_shrinkCI($L);
 }
 $23 = ($13|0)>(15999984);
 if ($23) {
  return;
 }
 $24 = HEAP32[$20>>2]|0;
 $25 = ($$|0)<($24|0);
 if (!($25)) {
  return;
 }
 _luaD_reallocstack($L,$$);
 return;
}
function _luaD_hook($L,$event,$line) {
 $L = $L|0;
 $event = $event|0;
 $line = $line|0;
 var $$$$i = 0, $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 4|0;
 $0 = (($L) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($L) + 109|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($L) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($L) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($L) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($7) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = (($17) - ($13))|0;
 HEAP32[$ar>>2] = $event;
 $19 = (($ar) + 20|0);
 HEAP32[$19>>2] = $line;
 $20 = (($ar) + 96|0);
 HEAP32[$20>>2] = $7;
 $21 = (($L) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22;
 $24 = (($23) - ($12))|0;
 $25 = ($24|0)<(336);
 do {
  if ($25) {
   $26 = (($L) + 92|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)>(1000000);
   if ($28) {
    _luaD_throw($L,6);
    // unreachable;
   }
   $29 = $14 >> 4;
   $30 = (($29) + 25)|0;
   $31 = $27 << 1;
   $32 = ($31|0)>(1000000);
   $$$i = $32 ? 1000000 : $31;
   $33 = ($$$i|0)<($30|0);
   $$$$i = $33 ? $30 : $$$i;
   $34 = ($$$$i|0)>(1000000);
   if ($34) {
    _luaD_reallocstack($L,1000200);
    _luaG_runerror($L,13624,$vararg_buffer);
    // unreachable;
   } else {
    _luaD_reallocstack($L,$$$$i);
    $$pre = HEAP32[$8>>2]|0;
    $36 = $$pre;
    break;
   }
  } else {
   $36 = $9;
  }
 } while(0);
 $35 = (($36) + 320|0);
 HEAP32[$15>>2] = $35;
 HEAP8[$3>>0] = 0;
 $37 = (($7) + 34|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 | 4;
 $41 = $40&255;
 HEAP8[$37>>0] = $41;
 FUNCTION_TABLE_vii[$1 & 255]($L,$ar);
 HEAP8[$3>>0] = 1;
 $42 = HEAP32[$10>>2]|0;
 $43 = (($42) + ($18)|0);
 HEAP32[$15>>2] = $43;
 $44 = (($42) + ($14)|0);
 HEAP32[$8>>2] = $44;
 $45 = HEAP8[$37>>0]|0;
 $46 = $45&255;
 $47 = $46 & 251;
 $48 = $47&255;
 HEAP8[$37>>0] = $48;
 STACKTOP = sp;return;
}
function _luaD_precall($L,$func,$nresults) {
 $L = $L|0;
 $func = $func|0;
 $nresults = $nresults|0;
 var $$$$i = 0, $$$$i$i = 0, $$$$i4 = 0, $$$$i9 = 0, $$$i = 0, $$$i$i = 0, $$$i3 = 0, $$$i8 = 0, $$0 = 0, $$0$i = 0, $$01$in = 0, $$017$i = 0, $$1$i = 0, $$28$i = 0, $$c = 0, $$c$i = 0, $$c1$i = 0, $$idx2$val = 0, $$lcssa = 0, $$lcssa67 = 0;
 var $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa76 = 0, $$phi$trans$insert$i = 0, $$pn = 0, $$pre = 0, $$pre$i = 0, $$pre$i12 = 0, $$pre$i6 = 0, $$pre3$i = 0, $$pre59 = 0, $$promoted = 0, $$sum = 0, $$sum$i = 0, $$sum$i37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $base$0 = 0, $f$0 = 0, $f$0$in = 0, $func$tr = 0, $func$tr$lcssa = 0, $func$tr$lcssa61 = 0, $func$tr$lcssa62 = 0, $hook$0$i = 0, $i$0$lcssa$i = 0, $i$05$i = 0, $i$12$i = 0, $n$0$lcssa = 0, $n$038 = 0, $or$cond$i = 0, $or$cond4$i = 0, $p$01$i = 0, $res$0$lcssa$i = 0;
 var $res$06$i = 0, $res$1$lcssa$i = 0, $res$13$i = 0, $scevgep = 0, $scevgep$i = 0, $scevgep14$i = 0, $umax$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $0 = (($L) + 28|0);
 $1 = (($L) + 24|0);
 $2 = (($L) + 8|0);
 $3 = (($L) + 92|0);
 $func$tr = $func;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = $func$tr;
  $6 = $4;
  $7 = (($5) - ($6))|0;
  $8 = (($func$tr) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 63;
  if ((($10|0) == 38)) {
   $$lcssa71 = $7;$func$tr$lcssa61 = $func$tr;
   label = 4;
   break;
  } else if ((($10|0) == 6)) {
   $$lcssa67 = $5;$$lcssa72 = $7;$func$tr$lcssa62 = $func$tr;
   label = 31;
   break;
  } else if ((($10|0) == 22)) {
   $$lcssa = $7;$func$tr$lcssa = $func$tr;
   label = 3;
   break;
  }
  $220 = HEAP32[$1>>2]|0;
  $221 = HEAP32[$2>>2]|0;
  $222 = $220;
  $223 = $221;
  $224 = (($222) - ($223))|0;
  $225 = ($224|0)<(32);
  if ($225) {
   $226 = HEAP32[$3>>2]|0;
   $227 = ($226|0)>(1000000);
   if ($227) {
    label = 66;
    break;
   }
   $228 = (($223) - ($6))|0;
   $229 = $228 >> 4;
   $230 = (($229) + 6)|0;
   $231 = $226 << 1;
   $232 = ($231|0)>(1000000);
   $$$i8 = $232 ? 1000000 : $231;
   $233 = ($$$i8|0)<($230|0);
   $$$$i9 = $233 ? $230 : $$$i8;
   $234 = ($$$$i9|0)>(1000000);
   if ($234) {
    label = 68;
    break;
   }
   _luaD_reallocstack($L,$$$$i9);
   $$pre = HEAP32[$0>>2]|0;
   $236 = $$pre;
  } else {
   $236 = $4;
  }
  $235 = (($236) + ($7)|0);
  $237 = (_luaT_gettmbyobj($L,$235,23)|0);
  $238 = (($237) + 8|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = $239 & 15;
  $241 = ($240|0)==(6);
  if (!($241)) {
   $$lcssa76 = $235;
   label = 71;
   break;
  }
  $242 = HEAP32[$2>>2]|0;
  $243 = ($242>>>0)>($235>>>0);
  if ($243) {
   $p$01$i = $242;
   while(1) {
    $244 = (($p$01$i) + -16|0);
    ;HEAP32[$p$01$i+0>>2]=HEAP32[$244+0>>2]|0;HEAP32[$p$01$i+4>>2]=HEAP32[$244+4>>2]|0;HEAP32[$p$01$i+8>>2]=HEAP32[$244+8>>2]|0;HEAP32[$p$01$i+12>>2]=HEAP32[$244+12>>2]|0;
    $245 = ($244>>>0)>($235>>>0);
    if ($245) {
     $p$01$i = $244;
    } else {
     break;
    }
   }
   $$pre$i12 = HEAP32[$2>>2]|0;
   $247 = $$pre$i12;
  } else {
   $247 = $242;
  }
  $246 = (($247) + 16|0);
  HEAP32[$2>>2] = $246;
  ;HEAP32[$235+0>>2]=HEAP32[$237+0>>2]|0;HEAP32[$235+4>>2]=HEAP32[$237+4>>2]|0;HEAP32[$235+8>>2]=HEAP32[$237+8>>2]|0;HEAP32[$235+12>>2]=HEAP32[$237+12>>2]|0;
  $func$tr = $235;
 }
 if ((label|0) == 3) {
  $46 = $$lcssa;$f$0$in = $func$tr$lcssa;
 }
 else if ((label|0) == 4) {
  $11 = HEAP32[$func$tr$lcssa61>>2]|0;
  $12 = (($11) + 12|0);
  $46 = $$lcssa71;$f$0$in = $12;
 }
 else if ((label|0) == 31) {
  $99 = HEAP32[$func$tr$lcssa62>>2]|0;
  $100 = (($99) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = HEAP32[$2>>2]|0;
  $103 = $102;
  $104 = (($103) - ($$lcssa67))|0;
  $105 = $104 >> 4;
  $106 = (($105) + -1)|0;
  $107 = (($L) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)>(0);
  if ($111) {
   _luaC_step($L);
   $$pre59 = HEAP32[$2>>2]|0;
   $114 = $$pre59;
  } else {
   $114 = $102;
  }
  $112 = HEAP32[$1>>2]|0;
  $113 = $112;
  $115 = $114;
  $116 = (($113) - ($115))|0;
  $117 = $116 >> 4;
  $118 = (($101) + 8|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = ($117|0)>($120|0);
  do {
   if (!($121)) {
    $122 = HEAP32[$3>>2]|0;
    $123 = ($122|0)>(1000000);
    if ($123) {
     _luaD_throw($L,6);
     // unreachable;
    }
    $124 = HEAP32[$0>>2]|0;
    $125 = $124;
    $126 = (($115) - ($125))|0;
    $127 = $126 >> 4;
    $128 = (($120) + 5)|0;
    $129 = (($128) + ($127))|0;
    $130 = $122 << 1;
    $131 = ($130|0)>(1000000);
    $$$i3 = $131 ? 1000000 : $130;
    $132 = ($$$i3|0)<($129|0);
    $$$$i4 = $132 ? $129 : $$$i3;
    $133 = ($$$$i4|0)>(1000000);
    if ($133) {
     _luaD_reallocstack($L,1000200);
     _luaG_runerror($L,13624,$vararg_buffer1);
     // unreachable;
    } else {
     _luaD_reallocstack($L,$$$$i4);
     break;
    }
   }
  } while(0);
  $134 = (($101) + 6|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = ($105|0)>($136|0);
  if ($137) {
   $n$0$lcssa = $106;
  } else {
   $$promoted = HEAP32[$2>>2]|0;
   $138 = (($136) + 1)|0;
   $139 = (($138) - ($105))|0;
   $141 = $$promoted;$n$038 = $106;
   while(1) {
    $140 = (($141) + 16|0);
    $142 = (($141) + 8|0);
    HEAP32[$142>>2] = 0;
    $143 = (($n$038) + 1)|0;
    $144 = ($143|0)<($136|0);
    if ($144) {
     $141 = $140;$n$038 = $143;
    } else {
     break;
    }
   }
   $scevgep = (($$promoted) + ($139<<4)|0);
   HEAP32[$2>>2] = $scevgep;
   $n$0$lcssa = $136;
  }
  $145 = (($101) + 7|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = ($146<<24>>24)==(0);
  if ($147) {
   $148 = HEAP32[$0>>2]|0;
   $$sum = (($$lcssa72) + 16)|0;
   $149 = (($148) + ($$sum)|0);
   $$pn = $148;$base$0 = $149;
  } else {
   $$idx2$val = HEAP8[$118>>0]|0;
   $150 = HEAP32[$1>>2]|0;
   $151 = HEAP32[$2>>2]|0;
   $152 = $150;
   $153 = $151;
   $154 = (($152) - ($153))|0;
   $155 = $154 >> 4;
   $156 = $$idx2$val&255;
   $157 = ($155|0)>($156|0);
   do {
    if ($157) {
     $172 = $151;
    } else {
     $158 = HEAP32[$3>>2]|0;
     $159 = ($158|0)>(1000000);
     if ($159) {
      _luaD_throw($L,6);
      // unreachable;
     }
     $160 = HEAP32[$0>>2]|0;
     $161 = $160;
     $162 = (($153) - ($161))|0;
     $163 = $162 >> 4;
     $164 = (($156) + 5)|0;
     $165 = (($164) + ($163))|0;
     $166 = $158 << 1;
     $167 = ($166|0)>(1000000);
     $$$i$i = $167 ? 1000000 : $166;
     $168 = ($$$i$i|0)<($165|0);
     $$$$i$i = $168 ? $165 : $$$i$i;
     $169 = ($$$$i$i|0)>(1000000);
     if ($169) {
      _luaD_reallocstack($L,1000200);
      _luaG_runerror($L,13624,$vararg_buffer3);
      // unreachable;
     } else {
      _luaD_reallocstack($L,$$$$i$i);
      $$pre$i6 = HEAP32[$2>>2]|0;
      $172 = $$pre$i6;
      break;
     }
    }
   } while(0);
   $170 = ($135<<24>>24)==(0);
   if (!($170)) {
    $171 = (($172) + 16|0);
    HEAP32[$2>>2] = $171;
    $$sum$i37 = (0 - ($n$0$lcssa))|0;
    $173 = (($172) + ($$sum$i37<<4)|0);
    ;HEAP32[$172+0>>2]=HEAP32[$173+0>>2]|0;HEAP32[$172+4>>2]=HEAP32[$173+4>>2]|0;HEAP32[$172+8>>2]=HEAP32[$173+8>>2]|0;HEAP32[$172+12>>2]=HEAP32[$173+12>>2]|0;
    $174 = ((($172) + ($$sum$i37<<4)|0) + 8|0);
    HEAP32[$174>>2] = 0;
    $175 = ($135&255)>(1);
    if ($175) {
     $177 = 1;
     while(1) {
      $$pre3$i = HEAP32[$2>>2]|0;
      $176 = (($$pre3$i) + 16|0);
      HEAP32[$2>>2] = $176;
      $$sum$i = (($177) - ($n$0$lcssa))|0;
      $178 = (($172) + ($$sum$i<<4)|0);
      ;HEAP32[$$pre3$i+0>>2]=HEAP32[$178+0>>2]|0;HEAP32[$$pre3$i+4>>2]=HEAP32[$178+4>>2]|0;HEAP32[$$pre3$i+8>>2]=HEAP32[$178+8>>2]|0;HEAP32[$$pre3$i+12>>2]=HEAP32[$178+12>>2]|0;
      $179 = ((($172) + ($$sum$i<<4)|0) + 8|0);
      HEAP32[$179>>2] = 0;
      $180 = (($177) + 1)|0;
      $181 = ($180|0)<($136|0);
      if ($181) {
       $177 = $180;
      } else {
       break;
      }
     }
    }
   }
   $182 = HEAP32[$0>>2]|0;
   $$pn = $182;$base$0 = $172;
  }
  $$01$in = (($$pn) + ($$lcssa72)|0);
  $183 = (($L) + 16|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + 12|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)==(0|0);
  if ($187) {
   $188 = (_luaE_extendCI($L)|0);
   $189 = $188;
  } else {
   $189 = $186;
  }
  HEAP32[$183>>2] = $189;
  $190 = $nresults&65535;
  $191 = (($189) + 32|0);
  HEAP16[$191>>1] = $190;
  HEAP32[$189>>2] = $$01$in;
  $192 = (($189) + 16|0);
  HEAP32[$192>>2] = $base$0;
  $193 = HEAP8[$118>>0]|0;
  $194 = $193&255;
  $195 = (($base$0) + ($194<<4)|0);
  $196 = (($189) + 4|0);
  HEAP32[$196>>2] = $195;
  $197 = (($101) + 48|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (($189) + 20|0);
  $$c = $198;
  HEAP32[$199>>2] = $$c;
  $200 = (($189) + 34|0);
  HEAP8[$200>>0] = 2;
  HEAP32[$2>>2] = $195;
  $201 = (($L) + 108|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202 & 1;
  $204 = ($203<<24>>24)==(0);
  if ($204) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $205 = (($198) + 4|0);
  $$c$i = $205;
  HEAP32[$199>>2] = $$c$i;
  $206 = (($189) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + 34|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209 & 2;
  $211 = ($210<<24>>24)==(0);
  if ($211) {
   $hook$0$i = 0;
  } else {
   $212 = (($207) + 20|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (($213) + -4|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $215 & 63;
   $217 = ($216|0)==(37);
   if ($217) {
    HEAP8[$200>>0] = 34;
    $hook$0$i = 4;
   } else {
    $hook$0$i = 0;
   }
  }
  _luaD_hook($L,$hook$0$i,-1);
  $218 = HEAP32[$199>>2]|0;
  $219 = (($218) + -4|0);
  $$c1$i = $219;
  HEAP32[$199>>2] = $$c1$i;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 66) {
  _luaD_throw($L,6);
  // unreachable;
 }
 else if ((label|0) == 68) {
  _luaD_reallocstack($L,1000200);
  _luaG_runerror($L,13624,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 71) {
  _luaG_typeerror($L,$$lcssa76,13688);
  // unreachable;
 }
 $f$0 = HEAP32[$f$0$in>>2]|0;
 $13 = (($L) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  _luaC_step($L);
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = $18;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($22|0)<(336);
 do {
  if ($23) {
   $24 = HEAP32[$3>>2]|0;
   $25 = ($24|0)>(1000000);
   if ($25) {
    _luaD_throw($L,6);
    // unreachable;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = $26;
   $28 = (($21) - ($27))|0;
   $29 = $28 >> 4;
   $30 = (($29) + 25)|0;
   $31 = $24 << 1;
   $32 = ($31|0)>(1000000);
   $$$i = $32 ? 1000000 : $31;
   $33 = ($$$i|0)<($30|0);
   $$$$i = $33 ? $30 : $$$i;
   $34 = ($$$$i|0)>(1000000);
   if ($34) {
    _luaD_reallocstack($L,1000200);
    _luaG_runerror($L,13624,$vararg_buffer);
    // unreachable;
   } else {
    _luaD_reallocstack($L,$$$$i);
    break;
   }
  }
 } while(0);
 $35 = (($L) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $40 = (_luaE_extendCI($L)|0);
  $41 = $40;
 } else {
  $41 = $38;
 }
 HEAP32[$35>>2] = $41;
 $42 = $nresults&65535;
 $43 = (($41) + 32|0);
 HEAP16[$43>>1] = $42;
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + ($46)|0);
 HEAP32[$41>>2] = $45;
 $47 = HEAP32[$2>>2]|0;
 $48 = (($47) + 320|0);
 $49 = (($41) + 4|0);
 HEAP32[$49>>2] = $48;
 $50 = (($41) + 34|0);
 HEAP8[$50>>0] = 0;
 $51 = (($L) + 108|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 & 1;
 $54 = ($53<<24>>24)==(0);
 if (!($54)) {
  _luaD_hook($L,0,-1);
 }
 $55 = (FUNCTION_TABLE_ii[$f$0 & 255]($L)|0);
 $56 = HEAP32[$2>>2]|0;
 $57 = (0 - ($55))|0;
 $58 = (($56) + ($57<<4)|0);
 $59 = HEAP32[$35>>2]|0;
 $60 = HEAP8[$51>>0]|0;
 $61 = $60&255;
 $62 = $61 & 6;
 $63 = ($62|0)==(0);
 if ($63) {
  $$phi$trans$insert$i = (($59) + 8|0);
  $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $$1$i = $58;$81 = $$pre$i;
 } else {
  $64 = $61 & 2;
  $65 = ($64|0)==(0);
  if ($65) {
   $$0$i = $58;
  } else {
   $66 = HEAP32[$0>>2]|0;
   $67 = $58;
   $68 = $66;
   $69 = (($67) - ($68))|0;
   _luaD_hook($L,1,-1);
   $70 = HEAP32[$0>>2]|0;
   $71 = (($70) + ($69)|0);
   $$0$i = $71;
  }
  $72 = (($59) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 20|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($L) + 20|0);
  HEAP32[$76>>2] = $75;
  $$1$i = $$0$i;$81 = $73;
 }
 $77 = HEAP32[$59>>2]|0;
 $78 = (($59) + 32|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 HEAP32[$35>>2] = $81;
 $82 = ($79<<16>>16)!=(0);
 $83 = ($55|0)>(0);
 $or$cond4$i = $82 & $83;
 if ($or$cond4$i) {
  $84 = (0 - ($80))|0;
  $85 = ($57>>>0)>($84>>>0);
  $umax$i = $85 ? $57 : $84;
  $$017$i = $55;$$28$i = $$1$i;$i$05$i = $80;$res$06$i = $77;
  while(1) {
   $89 = (($$017$i) + -1)|0;
   $90 = (($res$06$i) + 16|0);
   $91 = (($$28$i) + 16|0);
   ;HEAP32[$res$06$i+0>>2]=HEAP32[$$28$i+0>>2]|0;HEAP32[$res$06$i+4>>2]=HEAP32[$$28$i+4>>2]|0;HEAP32[$res$06$i+8>>2]=HEAP32[$$28$i+8>>2]|0;HEAP32[$res$06$i+12>>2]=HEAP32[$$28$i+12>>2]|0;
   $92 = (($i$05$i) + -1)|0;
   $93 = ($92|0)!=(0);
   $94 = ($89|0)>(0);
   $or$cond$i = $93 & $94;
   if ($or$cond$i) {
    $$017$i = $89;$$28$i = $91;$i$05$i = $92;$res$06$i = $90;
   } else {
    break;
   }
  }
  $86 = (0 - ($umax$i))|0;
  $87 = (($umax$i) + ($80))|0;
  $scevgep14$i = (($77) + ($86<<4)|0);
  $i$0$lcssa$i = $87;$res$0$lcssa$i = $scevgep14$i;
 } else {
  $i$0$lcssa$i = $80;$res$0$lcssa$i = $77;
 }
 $88 = ($i$0$lcssa$i|0)>(0);
 if ($88) {
  $i$12$i = $i$0$lcssa$i;$res$13$i = $res$0$lcssa$i;
  while(1) {
   $95 = (($i$12$i) + -1)|0;
   $96 = (($res$13$i) + 16|0);
   $97 = (($res$13$i) + 8|0);
   HEAP32[$97>>2] = 0;
   $98 = ($95|0)>(0);
   if ($98) {
    $i$12$i = $95;$res$13$i = $96;
   } else {
    break;
   }
  }
  $scevgep$i = (($res$0$lcssa$i) + ($i$0$lcssa$i<<4)|0);
  $res$1$lcssa$i = $scevgep$i;
 } else {
  $res$1$lcssa$i = $res$0$lcssa$i;
 }
 HEAP32[$2>>2] = $res$1$lcssa$i;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaD_poscall($L,$firstResult,$nres) {
 $L = $L|0;
 $firstResult = $firstResult|0;
 $nres = $nres|0;
 var $$0 = 0, $$017 = 0, $$1 = 0, $$28 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$05 = 0, $i$12 = 0, $or$cond = 0, $or$cond4 = 0, $res$0$lcssa = 0, $res$06 = 0, $res$1$lcssa = 0;
 var $res$13 = 0, $scevgep = 0, $scevgep14 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 108|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 6;
 $6 = ($5|0)==(0);
 if ($6) {
  $$phi$trans$insert = (($1) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$1 = $firstResult;$25 = $$pre;
 } else {
  $7 = $4 & 2;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $firstResult;
  } else {
   $9 = (($L) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $firstResult;
   $12 = $10;
   $13 = (($11) - ($12))|0;
   _luaD_hook($L,1,-1);
   $14 = HEAP32[$9>>2]|0;
   $15 = (($14) + ($13)|0);
   $$0 = $15;
  }
  $16 = (($1) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($L) + 20|0);
  HEAP32[$20>>2] = $19;
  $$1 = $$0;$25 = $17;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($1) + 32|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 HEAP32[$0>>2] = $25;
 $26 = ($23<<16>>16)!=(0);
 $27 = ($nres|0)>(0);
 $or$cond4 = $26 & $27;
 if ($or$cond4) {
  $28 = (0 - ($nres))|0;
  $29 = (0 - ($24))|0;
  $30 = ($28>>>0)>($29>>>0);
  $umax = $30 ? $28 : $29;
  $31 = (0 - ($umax))|0;
  $$017 = $nres;$$28 = $$1;$i$05 = $24;$res$06 = $21;
  while(1) {
   $34 = (($$017) + -1)|0;
   $35 = (($res$06) + 16|0);
   $36 = (($$28) + 16|0);
   ;HEAP32[$res$06+0>>2]=HEAP32[$$28+0>>2]|0;HEAP32[$res$06+4>>2]=HEAP32[$$28+4>>2]|0;HEAP32[$res$06+8>>2]=HEAP32[$$28+8>>2]|0;HEAP32[$res$06+12>>2]=HEAP32[$$28+12>>2]|0;
   $37 = (($i$05) + -1)|0;
   $38 = ($37|0)!=(0);
   $39 = ($34|0)>(0);
   $or$cond = $38 & $39;
   if ($or$cond) {
    $$017 = $34;$$28 = $36;$i$05 = $37;$res$06 = $35;
   } else {
    break;
   }
  }
  $32 = (($umax) + ($24))|0;
  $scevgep14 = (($21) + ($31<<4)|0);
  $i$0$lcssa = $32;$res$0$lcssa = $scevgep14;
 } else {
  $i$0$lcssa = $24;$res$0$lcssa = $21;
 }
 $33 = ($i$0$lcssa|0)>(0);
 if (!($33)) {
  $res$1$lcssa = $res$0$lcssa;
  $44 = (($L) + 8|0);
  HEAP32[$44>>2] = $res$1$lcssa;
  $45 = (($24) + 1)|0;
  return ($45|0);
 }
 $i$12 = $i$0$lcssa;$res$13 = $res$0$lcssa;
 while(1) {
  $40 = (($i$12) + -1)|0;
  $41 = (($res$13) + 16|0);
  $42 = (($res$13) + 8|0);
  HEAP32[$42>>2] = 0;
  $43 = ($40|0)>(0);
  if ($43) {
   $i$12 = $40;$res$13 = $41;
  } else {
   break;
  }
 }
 $scevgep = (($res$0$lcssa) + ($i$0$lcssa<<4)|0);
 $res$1$lcssa = $scevgep;
 $44 = (($L) + 8|0);
 HEAP32[$44>>2] = $res$1$lcssa;
 $45 = (($24) + 1)|0;
 return ($45|0);
}
function _luaD_call($L,$func,$nResults,$allowyield) {
 $L = $L|0;
 $func = $func|0;
 $nResults = $nResults|0;
 $allowyield = $allowyield|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 106|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2&65535)>(199);
 if ($3) {
  $4 = ($2<<16>>16)==(200);
  if ($4) {
   _luaG_runerror($L,3808,$vararg_buffer);
   // unreachable;
  }
  $5 = ($2&65535)>(224);
  if ($5) {
   _luaD_throw($L,6);
   // unreachable;
  }
 }
 $6 = ($allowyield|0)!=(0);
 if (!($6)) {
  $7 = (($L) + 104|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (($8) + 1)<<16>>16;
  HEAP16[$7>>1] = $9;
 }
 $10 = (_luaD_precall($L,$func,$nResults)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _luaV_execute($L);
 }
 if ($6) {
  $15 = HEAP16[$0>>1]|0;
  $16 = (($15) + -1)<<16>>16;
  HEAP16[$0>>1] = $16;
  STACKTOP = sp;return;
 }
 $12 = (($L) + 104|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($13) + -1)<<16>>16;
 HEAP16[$12>>1] = $14;
 $15 = HEAP16[$0>>1]|0;
 $16 = (($15) + -1)<<16>>16;
 HEAP16[$0>>1] = $16;
 STACKTOP = sp;return;
}
function _lua_resume($L,$from,$nargs) {
 $L = $L|0;
 $from = $from|0;
 $nargs = $nargs|0;
 var $$$i$i = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$lim$0$i$i$i = 0, $$lim$0$i$i$i$lcssa = 0, $$pre = 0, $$sum$i = 0, $$sum3$i = 0, $$sum4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci$0$i$i = 0, $ci$0$i$i$i = 0;
 var $ci$01$i$i = 0, $ci$02$i$i = 0, $ci$02$i$i$lcssa = 0, $ci$03$i$i$i = 0, $lim$0$lcssa$i$i$i = 0, $lim$02$i$i$i = 0, $phitmp = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $status = sp;
 HEAP32[$0>>2] = $nargs;
 $1 = (($L) + 104|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($from|0)==(0|0);
 if ($3) {
  $9 = 1;
 } else {
  $4 = (($from) + 106|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = (($6) + 1)|0;
  $phitmp = $7&65535;
  $9 = $phitmp;
 }
 $8 = (($L) + 106|0);
 HEAP16[$8>>1] = $9;
 HEAP16[$1>>1] = 0;
 $10 = (_luaD_rawrunprotected($L,200,$0)|0);
 HEAP32[$status>>2] = $10;
 $11 = ($10|0)==(-1);
 if ($11) {
  HEAP32[$status>>2] = 2;
  $105 = 2;
  HEAP16[$1>>1] = $2;
  $103 = HEAP16[$8>>1]|0;
  $104 = (($103) + -1)<<16>>16;
  HEAP16[$8>>1] = $104;
  STACKTOP = sp;return ($105|0);
 }
 $12 = ($10|0)>(1);
 if (!($12)) {
  $105 = $10;
  HEAP16[$1>>1] = $2;
  $103 = HEAP16[$8>>1]|0;
  $104 = (($103) + -1)<<16>>16;
  HEAP16[$8>>1] = $104;
  STACKTOP = sp;return ($105|0);
 }
 $13 = (($L) + 16|0);
 $14 = (($L) + 28|0);
 $15 = (($L) + 8|0);
 $16 = (($L) + 109|0);
 $17 = (($L) + 92|0);
 $18 = (($L) + 88|0);
 $19 = (($L) + 12|0);
 $106 = $10;
 L11: while(1) {
  $ci$01$i$i = HEAP32[$13>>2]|0;
  $20 = ($ci$01$i$i|0)==(0|0);
  if ($20) {
   $$lcssa10 = $106;
   label = 27;
   break;
  }
  $ci$02$i$i = $ci$01$i$i;
  while(1) {
   $23 = (($ci$02$i$i) + 34|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 & 16;
   $26 = ($25<<24>>24)==(0);
   if (!($26)) {
    $$lcssa = $23;$ci$02$i$i$lcssa = $ci$02$i$i;
    break;
   }
   $21 = (($ci$02$i$i) + 8|0);
   $ci$0$i$i = HEAP32[$21>>2]|0;
   $22 = ($ci$0$i$i|0)==(0|0);
   if ($22) {
    $$lcssa12 = $106;
    label = 26;
    break L11;
   } else {
    $ci$02$i$i = $ci$0$i$i;
   }
  }
  $27 = HEAP32[$14>>2]|0;
  $28 = (($ci$02$i$i$lcssa) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + ($29)|0);
  _luaF_close($L,$30);
  if ((($106|0) == 6)) {
   $39 = (_luaS_newlstr($L,4032,23)|0);
   HEAP32[$30>>2] = $39;
   $40 = (($39) + 4|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 | 64;
   $$sum$i = (($29) + 8)|0;
   $44 = (($27) + ($$sum$i)|0);
   HEAP32[$44>>2] = $43;
  } else if ((($106|0) == 4)) {
   $31 = HEAP32[$19>>2]|0;
   $32 = (($31) + 144|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$30>>2] = $33;
   $34 = (($33) + 4|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $36 | 64;
   $$sum4$i = (($29) + 8)|0;
   $38 = (($27) + ($$sum4$i)|0);
   HEAP32[$38>>2] = $37;
  } else {
   $45 = HEAP32[$15>>2]|0;
   $46 = (($45) + -16|0);
   ;HEAP32[$30+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$30+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$46+12>>2]|0;
  }
  $$sum3$i = (($29) + 16)|0;
  $47 = (($27) + ($$sum3$i)|0);
  HEAP32[$15>>2] = $47;
  HEAP32[$13>>2] = $ci$02$i$i$lcssa;
  $48 = HEAP8[$$lcssa>>0]|0;
  $49 = $48&255;
  $50 = $49 & 1;
  $51 = $50&255;
  HEAP8[$16>>0] = $51;
  HEAP16[$1>>1] = 0;
  $52 = ($ci$02$i$i$lcssa|0)==(0|0);
  if ($52) {
   $lim$0$lcssa$i$i$i = $47;
  } else {
   $ci$03$i$i$i = $ci$02$i$i$lcssa;$lim$02$i$i$i = $47;
   while(1) {
    $53 = (($ci$03$i$i$i) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($lim$02$i$i$i>>>0)<($54>>>0);
    $$lim$0$i$i$i = $55 ? $54 : $lim$02$i$i$i;
    $56 = (($ci$03$i$i$i) + 8|0);
    $ci$0$i$i$i = HEAP32[$56>>2]|0;
    $57 = ($ci$0$i$i$i|0)==(0|0);
    if ($57) {
     $$lim$0$i$i$i$lcssa = $$lim$0$i$i$i;
     break;
    } else {
     $ci$03$i$i$i = $ci$0$i$i$i;$lim$02$i$i$i = $$lim$0$i$i$i;
    }
   }
   $lim$0$lcssa$i$i$i = $$lim$0$i$i$i$lcssa;
  }
  $58 = HEAP32[$14>>2]|0;
  $59 = $lim$0$lcssa$i$i$i;
  $60 = $58;
  $61 = (($59) - ($60))|0;
  $62 = $61 >> 4;
  $63 = (($62) + 1)|0;
  $64 = (($63|0) / 8)&-1;
  $65 = (($64) + 10)|0;
  $66 = (($65) + ($63))|0;
  $67 = ($66|0)>(1000000);
  $$$i$i = $67 ? 1000000 : $66;
  $68 = HEAP32[$17>>2]|0;
  $69 = ($68|0)>(1000000);
  if ($69) {
   _luaE_freeCI($L);
  } else {
   _luaE_shrinkCI($L);
  }
  $70 = ($61|0)>(15999984);
  if (!($70)) {
   $71 = HEAP32[$17>>2]|0;
   $72 = ($$$i$i|0)<($71|0);
   if ($72) {
    _luaD_reallocstack($L,$$$i$i);
   }
  }
  $73 = (($ci$02$i$i$lcssa) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  HEAP32[$18>>2] = $74;
  $75 = (_luaD_rawrunprotected($L,201,$status)|0);
  HEAP32[$status>>2] = $75;
  $76 = ($75|0)>(1);
  if ($76) {
   $106 = $75;
  } else {
   $$lcssa13 = $75;
   label = 34;
   break;
  }
 }
 if ((label|0) == 26) {
  $77 = $$lcssa12;
 }
 else if ((label|0) == 27) {
  $77 = $$lcssa10;
 }
 else if ((label|0) == 34) {
  $105 = $$lcssa13;
  HEAP16[$1>>1] = $2;
  $103 = HEAP16[$8>>1]|0;
  $104 = (($103) + -1)<<16>>16;
  HEAP16[$8>>1] = $104;
  STACKTOP = sp;return ($105|0);
 }
 $78 = ($77|0)>(1);
 if (!($78)) {
  $105 = $77;
  HEAP16[$1>>1] = $2;
  $103 = HEAP16[$8>>1]|0;
  $104 = (($103) + -1)<<16>>16;
  HEAP16[$8>>1] = $104;
  STACKTOP = sp;return ($105|0);
 }
 $79 = $77&255;
 $80 = (($L) + 6|0);
 HEAP8[$80>>0] = $79;
 $81 = (($L) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 if ((($77|0) == 6)) {
  $92 = (_luaS_newlstr($L,4032,23)|0);
  HEAP32[$82>>2] = $92;
  $93 = (($92) + 4|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $95 | 64;
  $97 = (($82) + 8|0);
  HEAP32[$97>>2] = $96;
 } else if ((($77|0) == 4)) {
  $83 = (($L) + 12|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 144|0);
  $86 = HEAP32[$85>>2]|0;
  HEAP32[$82>>2] = $86;
  $87 = (($86) + 4|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $89 | 64;
  $91 = (($82) + 8|0);
  HEAP32[$91>>2] = $90;
 } else {
  $98 = (($82) + -16|0);
  ;HEAP32[$82+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$82+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$82+8>>2]=HEAP32[$98+8>>2]|0;HEAP32[$82+12>>2]=HEAP32[$98+12>>2]|0;
 }
 $99 = (($82) + 16|0);
 HEAP32[$81>>2] = $99;
 $100 = (($L) + 16|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 4|0);
 HEAP32[$102>>2] = $99;
 $$pre = HEAP32[$status>>2]|0;
 $105 = $$pre;
 HEAP16[$1>>1] = $2;
 $103 = HEAP16[$8>>1]|0;
 $104 = (($103) + -1)<<16>>16;
 HEAP16[$8>>1] = $104;
 STACKTOP = sp;return ($105|0);
}
function _lua_isyieldable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 104|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 $3 = $2&1;
 return ($3|0);
}
function _lua_yieldk($L,$nresults,$ctx,$k) {
 $L = $L|0;
 $nresults = $nresults|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 104|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if (!($4)) {
  $5 = (($L) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 136|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($L|0);
  if ($9) {
   _luaG_runerror($L,3880,$vararg_buffer1);
   // unreachable;
  } else {
   _luaG_runerror($L,3832,$vararg_buffer);
   // unreachable;
  }
 }
 $10 = (($L) + 6|0);
 HEAP8[$10>>0] = 1;
 $11 = HEAP32[$1>>2]|0;
 $12 = (($L) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($1) + 28|0);
 HEAP32[$17>>2] = $16;
 $18 = (($1) + 34|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 & 2;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 $22 = (($1) + 16|0);
 HEAP32[$22>>2] = $k;
 $23 = ($k|0)==(0|0);
 if ($23) {
  $25 = (($L) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum = $nresults ^ -1;
  $27 = (($26) + ($$sum<<4)|0);
  HEAP32[$1>>2] = $27;
  _luaD_throw($L,1);
  // unreachable;
 }
 $24 = (($1) + 24|0);
 HEAP32[$24>>2] = $ctx;
 $25 = (($L) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $$sum = $nresults ^ -1;
 $27 = (($26) + ($$sum<<4)|0);
 HEAP32[$1>>2] = $27;
 _luaD_throw($L,1);
 // unreachable;
 return (0)|0;
}
function _luaD_pcall($L,$func,$u,$old_top,$ef) {
 $L = $L|0;
 $func = $func|0;
 $u = $u|0;
 $old_top = $old_top|0;
 $ef = $ef|0;
 var $$$i = 0, $$lim$0$i$i = 0, $$lim$0$i$i$lcssa = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ci$0$i$i = 0, $ci$03$i$i = 0, $lim$0$lcssa$i$i = 0, $lim$02$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 109|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($L) + 104|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (($L) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$6>>2] = $ef;
 $8 = (_luaD_rawrunprotected($L,$func,$u)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$6>>2] = $7;
  return ($8|0);
 }
 $10 = (($L) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($old_top)|0);
 _luaF_close($L,$12);
 if ((($8|0) == 4)) {
  $13 = (($L) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 144|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$12>>2] = $16;
  $17 = (($16) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 | 64;
  $$sum2 = (($old_top) + 8)|0;
  $21 = (($11) + ($$sum2)|0);
  HEAP32[$21>>2] = $20;
 } else if ((($8|0) == 6)) {
  $22 = (_luaS_newlstr($L,4032,23)|0);
  HEAP32[$12>>2] = $22;
  $23 = (($22) + 4|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 | 64;
  $$sum = (($old_top) + 8)|0;
  $27 = (($11) + ($$sum)|0);
  HEAP32[$27>>2] = $26;
 } else {
  $28 = (($L) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + -16|0);
  ;HEAP32[$12+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$30+12>>2]|0;
 }
 $$sum1 = (($old_top) + 16)|0;
 $31 = (($11) + ($$sum1)|0);
 $32 = (($L) + 8|0);
 HEAP32[$32>>2] = $31;
 HEAP32[$0>>2] = $1;
 HEAP8[$2>>0] = $3;
 HEAP16[$4>>1] = $5;
 $33 = ($1|0)==(0|0);
 if ($33) {
  $lim$0$lcssa$i$i = $31;
 } else {
  $ci$03$i$i = $1;$lim$02$i$i = $31;
  while(1) {
   $34 = (($ci$03$i$i) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($lim$02$i$i>>>0)<($35>>>0);
   $$lim$0$i$i = $36 ? $35 : $lim$02$i$i;
   $37 = (($ci$03$i$i) + 8|0);
   $ci$0$i$i = HEAP32[$37>>2]|0;
   $38 = ($ci$0$i$i|0)==(0|0);
   if ($38) {
    $$lim$0$i$i$lcssa = $$lim$0$i$i;
    break;
   } else {
    $ci$03$i$i = $ci$0$i$i;$lim$02$i$i = $$lim$0$i$i;
   }
  }
  $lim$0$lcssa$i$i = $$lim$0$i$i$lcssa;
 }
 $39 = HEAP32[$10>>2]|0;
 $40 = $lim$0$lcssa$i$i;
 $41 = $39;
 $42 = (($40) - ($41))|0;
 $43 = $42 >> 4;
 $44 = (($43) + 1)|0;
 $45 = (($44|0) / 8)&-1;
 $46 = (($45) + 10)|0;
 $47 = (($46) + ($44))|0;
 $48 = ($47|0)>(1000000);
 $$$i = $48 ? 1000000 : $47;
 $49 = (($L) + 92|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)>(1000000);
 if ($51) {
  _luaE_freeCI($L);
 } else {
  _luaE_shrinkCI($L);
 }
 $52 = ($42|0)>(15999984);
 if ($52) {
  HEAP32[$6>>2] = $7;
  return ($8|0);
 }
 $53 = HEAP32[$49>>2]|0;
 $54 = ($$$i|0)<($53|0);
 if (!($54)) {
  HEAP32[$6>>2] = $7;
  return ($8|0);
 }
 _luaD_reallocstack($L,$$$i);
 HEAP32[$6>>2] = $7;
 return ($8|0);
}
function _luaD_protectedparser($L,$z,$name,$mode) {
 $L = $L|0;
 $z = $z|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $0 = (($L) + 104|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 HEAP32[$p>>2] = $z;
 $3 = (($p) + 56|0);
 HEAP32[$3>>2] = $name;
 $4 = (($p) + 52|0);
 HEAP32[$4>>2] = $mode;
 $5 = (($p) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = (($p) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = (($p) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = (($p) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = (($p) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = (($p) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = (($p) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = (($p) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = (($L) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($L) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = (($L) + 88|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_luaD_pcall($L,202,$p,$19,$21)|0);
 $23 = HEAP32[$11>>2]|0;
 $24 = HEAP32[$12>>2]|0;
 $25 = (_luaM_realloc_($L,$23,$24,0)|0);
 HEAP32[$11>>2] = $25;
 HEAP32[$12>>2] = 0;
 $26 = HEAP32[$5>>2]|0;
 $27 = HEAP32[$6>>2]|0;
 $28 = $27 << 1;
 (_luaM_realloc_($L,$26,$28,0)|0);
 $29 = HEAP32[$7>>2]|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = $30 << 4;
 (_luaM_realloc_($L,$29,$31,0)|0);
 $32 = HEAP32[$9>>2]|0;
 $33 = HEAP32[$10>>2]|0;
 $34 = $33 << 4;
 (_luaM_realloc_($L,$32,$34,0)|0);
 $35 = HEAP16[$0>>1]|0;
 $36 = (($35) + -1)<<16>>16;
 HEAP16[$0>>1] = $36;
 STACKTOP = sp;return ($22|0);
}
function _resume($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $$0$i = 0, $$0$i7 = 0, $$017$i = 0, $$017$i18 = 0, $$1$i = 0, $$1$i8 = 0, $$28$i = 0, $$28$i17 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert$i4 = 0, $$pre = 0, $$pre$i = 0, $$pre$i5 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $firstArg$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i15 = 0, $i$05$i = 0, $i$05$i20 = 0, $i$12$i = 0, $i$12$i23 = 0, $n$0 = 0, $or$cond$i = 0, $or$cond$i21 = 0, $or$cond4$i = 0, $or$cond4$i9 = 0, $res$0$lcssa$i = 0, $res$0$lcssa$i14 = 0, $res$06$i = 0;
 var $res$06$i19 = 0, $res$1$lcssa$i = 0, $res$1$lcssa$i27 = 0, $res$13$i = 0, $res$13$i22 = 0, $scevgep$i = 0, $scevgep$i25 = 0, $scevgep14$i = 0, $scevgep14$i12 = 0, $umax$i = 0, $umax$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 106|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = HEAP32[$ud>>2]|0;
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (0 - ($2))|0;
 $6 = (($4) + ($5<<4)|0);
 $7 = (($L) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($1&65535)>(199);
 if ($9) {
  _resume_error($L,3808,$6);
  // unreachable;
 }
 $10 = (($L) + 6|0);
 $11 = HEAP8[$10>>0]|0;
 if ((($11<<24>>24) == 0)) {
  $12 = (($L) + 48|0);
  $13 = ($8|0)==($12|0);
  if (!($13)) {
   _resume_error($L,3992,$6);
   // unreachable;
  }
  $$sum = $2 ^ -1;
  $14 = (($4) + ($$sum<<4)|0);
  $15 = (_luaD_precall($L,$14,-1)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   return;
  }
  _luaV_execute($L);
  return;
 } else if ((($11<<24>>24) == 1)) {
  HEAP8[$10>>0] = 0;
  $17 = (($L) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($8) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + ($20)|0);
  HEAP32[$8>>2] = $21;
  $22 = (($8) + 34|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 & 2;
  $25 = ($24<<24>>24)==(0);
  if ($25) {
   $26 = (($8) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $40 = $8;$firstArg$0 = $6;$n$0 = $2;
   } else {
    $29 = (($8) + 24|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$27 & 255]($L,1,$30)|0);
    $32 = HEAP32[$3>>2]|0;
    $33 = (0 - ($31))|0;
    $34 = (($32) + ($33<<4)|0);
    $$pre = HEAP32[$7>>2]|0;
    $40 = $$pre;$firstArg$0 = $34;$n$0 = $31;
   }
   $35 = (($L) + 108|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 & 6;
   $39 = ($38|0)==(0);
   if ($39) {
    $$phi$trans$insert$i = (($40) + 8|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $$1$i = $firstArg$0;$58 = $$pre$i;
   } else {
    $41 = $37 & 2;
    $42 = ($41|0)==(0);
    if ($42) {
     $$0$i = $firstArg$0;
    } else {
     $43 = HEAP32[$17>>2]|0;
     $44 = $firstArg$0;
     $45 = $43;
     $46 = (($44) - ($45))|0;
     _luaD_hook($L,1,-1);
     $47 = HEAP32[$17>>2]|0;
     $48 = (($47) + ($46)|0);
     $$0$i = $48;
    }
    $49 = (($40) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($L) + 20|0);
    HEAP32[$53>>2] = $52;
    $$1$i = $$0$i;$58 = $50;
   }
   $54 = HEAP32[$40>>2]|0;
   $55 = (($40) + 32|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   HEAP32[$7>>2] = $58;
   $59 = ($56<<16>>16)!=(0);
   $60 = ($n$0|0)>(0);
   $or$cond4$i = $59 & $60;
   if ($or$cond4$i) {
    $61 = (0 - ($n$0))|0;
    $62 = (0 - ($57))|0;
    $63 = ($61>>>0)>($62>>>0);
    $umax$i = $63 ? $61 : $62;
    $$017$i = $n$0;$$28$i = $$1$i;$i$05$i = $57;$res$06$i = $54;
    while(1) {
     $67 = (($$017$i) + -1)|0;
     $68 = (($res$06$i) + 16|0);
     $69 = (($$28$i) + 16|0);
     ;HEAP32[$res$06$i+0>>2]=HEAP32[$$28$i+0>>2]|0;HEAP32[$res$06$i+4>>2]=HEAP32[$$28$i+4>>2]|0;HEAP32[$res$06$i+8>>2]=HEAP32[$$28$i+8>>2]|0;HEAP32[$res$06$i+12>>2]=HEAP32[$$28$i+12>>2]|0;
     $70 = (($i$05$i) + -1)|0;
     $71 = ($70|0)!=(0);
     $72 = ($67|0)>(0);
     $or$cond$i = $71 & $72;
     if ($or$cond$i) {
      $$017$i = $67;$$28$i = $69;$i$05$i = $70;$res$06$i = $68;
     } else {
      break;
     }
    }
    $64 = (0 - ($umax$i))|0;
    $65 = (($umax$i) + ($57))|0;
    $scevgep14$i = (($54) + ($64<<4)|0);
    $i$0$lcssa$i = $65;$res$0$lcssa$i = $scevgep14$i;
   } else {
    $i$0$lcssa$i = $57;$res$0$lcssa$i = $54;
   }
   $66 = ($i$0$lcssa$i|0)>(0);
   if ($66) {
    $i$12$i = $i$0$lcssa$i;$res$13$i = $res$0$lcssa$i;
    while(1) {
     $73 = (($i$12$i) + -1)|0;
     $74 = (($res$13$i) + 16|0);
     $75 = (($res$13$i) + 8|0);
     HEAP32[$75>>2] = 0;
     $76 = ($73|0)>(0);
     if ($76) {
      $i$12$i = $73;$res$13$i = $74;
     } else {
      break;
     }
    }
    $scevgep$i = (($res$0$lcssa$i) + ($i$0$lcssa$i<<4)|0);
    $res$1$lcssa$i = $scevgep$i;
   } else {
    $res$1$lcssa$i = $res$0$lcssa$i;
   }
   HEAP32[$3>>2] = $res$1$lcssa$i;
  } else {
   _luaV_execute($L);
  }
  $77 = HEAP32[$7>>2]|0;
  $78 = (($L) + 48|0);
  $79 = ($77|0)==($78|0);
  if ($79) {
   return;
  }
  $80 = (($L) + 108|0);
  $81 = (($L) + 20|0);
  $82 = (($L) + 88|0);
  $84 = $77;
  while(1) {
   $83 = (($84) + 34|0);
   $85 = HEAP8[$83>>0]|0;
   $86 = $85 & 2;
   $87 = ($86<<24>>24)==(0);
   if ($87) {
    $88 = $85&255;
    $89 = $88 & 16;
    $90 = ($89|0)==(0);
    if (!($90)) {
     $91 = $88 & 239;
     $92 = $91&255;
     HEAP8[$83>>0] = $92;
     $93 = (($84) + 20|0);
     $94 = HEAP32[$93>>2]|0;
     HEAP32[$82>>2] = $94;
    }
    $95 = (($84) + 32|0);
    $96 = HEAP16[$95>>1]|0;
    $97 = ($96<<16>>16)==(-1);
    if ($97) {
     $98 = (($84) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = HEAP32[$3>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      HEAP32[$98>>2] = $100;
     }
    }
    $102 = (($84) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($84) + 24|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (FUNCTION_TABLE_iiii[$103 & 255]($L,1,$105)|0);
    $107 = HEAP32[$3>>2]|0;
    $108 = (0 - ($106))|0;
    $109 = (($107) + ($108<<4)|0);
    $110 = HEAP32[$7>>2]|0;
    $111 = HEAP8[$80>>0]|0;
    $112 = $111&255;
    $113 = $112 & 6;
    $114 = ($113|0)==(0);
    if ($114) {
     $$phi$trans$insert$i4 = (($110) + 8|0);
     $$pre$i5 = HEAP32[$$phi$trans$insert$i4>>2]|0;
     $$1$i8 = $109;$131 = $$pre$i5;
    } else {
     $115 = $112 & 2;
     $116 = ($115|0)==(0);
     if ($116) {
      $$0$i7 = $109;
     } else {
      $117 = HEAP32[$17>>2]|0;
      $118 = $109;
      $119 = $117;
      $120 = (($118) - ($119))|0;
      _luaD_hook($L,1,-1);
      $121 = HEAP32[$17>>2]|0;
      $122 = (($121) + ($120)|0);
      $$0$i7 = $122;
     }
     $123 = (($110) + 8|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($124) + 20|0);
     $126 = HEAP32[$125>>2]|0;
     HEAP32[$81>>2] = $126;
     $$1$i8 = $$0$i7;$131 = $124;
    }
    $127 = HEAP32[$110>>2]|0;
    $128 = (($110) + 32|0);
    $129 = HEAP16[$128>>1]|0;
    $130 = $129 << 16 >> 16;
    HEAP32[$7>>2] = $131;
    $132 = ($129<<16>>16)!=(0);
    $133 = ($106|0)>(0);
    $or$cond4$i9 = $132 & $133;
    if ($or$cond4$i9) {
     $134 = (0 - ($130))|0;
     $135 = ($108>>>0)>($134>>>0);
     $umax$i10 = $135 ? $108 : $134;
     $$017$i18 = $106;$$28$i17 = $$1$i8;$i$05$i20 = $130;$res$06$i19 = $127;
     while(1) {
      $139 = (($$017$i18) + -1)|0;
      $140 = (($res$06$i19) + 16|0);
      $141 = (($$28$i17) + 16|0);
      ;HEAP32[$res$06$i19+0>>2]=HEAP32[$$28$i17+0>>2]|0;HEAP32[$res$06$i19+4>>2]=HEAP32[$$28$i17+4>>2]|0;HEAP32[$res$06$i19+8>>2]=HEAP32[$$28$i17+8>>2]|0;HEAP32[$res$06$i19+12>>2]=HEAP32[$$28$i17+12>>2]|0;
      $142 = (($i$05$i20) + -1)|0;
      $143 = ($142|0)!=(0);
      $144 = ($139|0)>(0);
      $or$cond$i21 = $143 & $144;
      if ($or$cond$i21) {
       $$017$i18 = $139;$$28$i17 = $141;$i$05$i20 = $142;$res$06$i19 = $140;
      } else {
       break;
      }
     }
     $136 = (0 - ($umax$i10))|0;
     $137 = (($umax$i10) + ($130))|0;
     $scevgep14$i12 = (($127) + ($136<<4)|0);
     $i$0$lcssa$i15 = $137;$res$0$lcssa$i14 = $scevgep14$i12;
    } else {
     $i$0$lcssa$i15 = $130;$res$0$lcssa$i14 = $127;
    }
    $138 = ($i$0$lcssa$i15|0)>(0);
    if ($138) {
     $i$12$i23 = $i$0$lcssa$i15;$res$13$i22 = $res$0$lcssa$i14;
     while(1) {
      $145 = (($i$12$i23) + -1)|0;
      $146 = (($res$13$i22) + 16|0);
      $147 = (($res$13$i22) + 8|0);
      HEAP32[$147>>2] = 0;
      $148 = ($145|0)>(0);
      if ($148) {
       $i$12$i23 = $145;$res$13$i22 = $146;
      } else {
       break;
      }
     }
     $scevgep$i25 = (($res$0$lcssa$i14) + ($i$0$lcssa$i15<<4)|0);
     $res$1$lcssa$i27 = $scevgep$i25;
    } else {
     $res$1$lcssa$i27 = $res$0$lcssa$i14;
    }
    HEAP32[$3>>2] = $res$1$lcssa$i27;
   } else {
    _luaV_finishOp($L);
    _luaV_execute($L);
   }
   $149 = HEAP32[$7>>2]|0;
   $150 = ($149|0)==($78|0);
   if ($150) {
    break;
   } else {
    $84 = $149;
   }
  }
  return;
 } else {
  _resume_error($L,12840,$6);
  // unreachable;
 }
}
function _unroll($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ud|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$ud>>2]|0;
  _finishCcall($L,$1);
 }
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 48|0);
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $7 = $3;
 while(1) {
  $6 = (($7) + 34|0);
  $8 = HEAP8[$6>>0]|0;
  $9 = $8 & 2;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   _finishCcall($L,1);
  } else {
   _luaV_finishOp($L);
   _luaV_execute($L);
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11|0)==($4|0);
  if ($12) {
   break;
  } else {
   $7 = $11;
  }
 }
 return;
}
function _f_parser($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cl$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$ud>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($1|0)==(0);
 if ($3) {
  $9 = (_luaZ_fill($0)|0);
  $10 = $9;
 } else {
  $4 = (($0) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 1|0);
  HEAP32[$4>>2] = $6;
  $7 = HEAP8[$5>>0]|0;
  $8 = $7&255;
  $10 = $8;
 }
 $11 = ($10|0)==(27);
 $12 = (($ud) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($11) {
  if (!($14)) {
   $15 = (_strchr($13,98)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer>>2] = 3928;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $13;
    (_luaO_pushfstring($L,3944,$vararg_buffer)|0);
    _luaD_throw($L,3);
    // unreachable;
   }
  }
  $17 = HEAP32[$ud>>2]|0;
  $18 = (($ud) + 4|0);
  $19 = (($ud) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_luaU_undump($L,$17,$18,$20)|0);
  $cl$0 = $21;
  _luaF_initupvals($L,$cl$0);
  STACKTOP = sp;return;
 } else {
  if (!($14)) {
   $22 = (_strchr($13,116)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    HEAP32[$vararg_buffer2>>2] = 3936;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $13;
    (_luaO_pushfstring($L,3944,$vararg_buffer2)|0);
    _luaD_throw($L,3);
    // unreachable;
   }
  }
  $24 = HEAP32[$ud>>2]|0;
  $25 = (($ud) + 4|0);
  $26 = (($ud) + 16|0);
  $27 = (($ud) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_luaY_parser($L,$24,$25,$26,$28,$10)|0);
  $cl$0 = $29;
  _luaF_initupvals($L,$cl$0);
  STACKTOP = sp;return;
 }
}
function _resume_error($L,$msg,$firstArg) {
 $L = $L|0;
 $msg = $msg|0;
 $firstArg = $firstArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 HEAP32[$0>>2] = $firstArg;
 $1 = (_luaS_new($L,$msg)|0);
 HEAP32[$firstArg>>2] = $1;
 $2 = (($1) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 64;
 $6 = (($firstArg) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$0>>2] = $8;
 _luaD_throw($L,-1);
 // unreachable;
}
function _finishCcall($L,$status) {
 $L = $L|0;
 $status = $status|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 34|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 16;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = $4 & 239;
  $8 = $7&255;
  HEAP8[$2>>0] = $8;
  $9 = (($1) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($L) + 88|0);
  HEAP32[$11>>2] = $10;
 }
 $12 = (($1) + 32|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(-1);
 if ($14) {
  $15 = (($1) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($L) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16>>>0)<($18>>>0);
  if ($19) {
   HEAP32[$15>>2] = $18;
   $$pre$phiZ2D = $17;
  } else {
   $$pre$phiZ2D = $17;
  }
 } else {
  $$pre = (($L) + 8|0);
  $$pre$phiZ2D = $$pre;
 }
 $20 = (($1) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($1) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_iiii[$21 & 255]($L,$status,$23)|0);
 $25 = HEAP32[$$pre$phiZ2D>>2]|0;
 $26 = (0 - ($24))|0;
 $27 = (($25) + ($26<<4)|0);
 (_luaD_poscall($L,$27,$24)|0);
 return;
}
function _luaU_dump($L,$f,$w,$data,$strip) {
 $L = $L|0;
 $f = $f|0;
 $w = $w|0;
 $data = $data|0;
 $strip = $strip|0;
 var $$ph14$i = 0, $$ph15$i = 0, $$ph16$i = 0, $$ph17$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $D = 0, $x$i = 0, $x$i$i = 0, $x$i1$i = 0, $x$i10$i = 0, $x$i12$i = 0, $x$i4$i = 0, $x$i6$i = 0, $x$i8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp + 43|0;
 $0 = sp;
 $1 = sp + 8|0;
 $x$i12$i = sp + 42|0;
 $x$i10$i = sp + 41|0;
 $x$i8$i = sp + 37|0;
 $x$i6$i = sp + 38|0;
 $x$i4$i = sp + 39|0;
 $x$i1$i = sp + 36|0;
 $x$i$i = sp + 40|0;
 $D = sp + 16|0;
 HEAP32[$D>>2] = $L;
 $2 = (($D) + 4|0);
 HEAP32[$2>>2] = $w;
 $3 = (($D) + 8|0);
 HEAP32[$3>>2] = $data;
 $4 = (($D) + 12|0);
 HEAP32[$4>>2] = $strip;
 $5 = (($D) + 16|0);
 $6 = (FUNCTION_TABLE_iiiii[$w & 255]($L,10680,4,$data)|0);
 HEAP32[$5>>2] = $6;
 HEAP8[$x$i$i>>0] = 83;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (FUNCTION_TABLE_iiiii[$w & 255]($L,$x$i$i,1,$data)|0);
   HEAP32[$5>>2] = $8;
   HEAP8[$x$i1$i>>0] = 0;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = HEAP32[$2>>2]|0;
    $11 = HEAP32[$D>>2]|0;
    $12 = HEAP32[$3>>2]|0;
    $13 = (FUNCTION_TABLE_iiiii[$10 & 255]($11,$x$i1$i,1,$12)|0);
    HEAP32[$5>>2] = $13;
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = HEAP32[$2>>2]|0;
     $16 = HEAP32[$D>>2]|0;
     $17 = HEAP32[$3>>2]|0;
     $18 = (FUNCTION_TABLE_iiiii[$15 & 255]($16,10808,6,$17)|0);
     HEAP32[$5>>2] = $18;
     HEAP8[$x$i4$i>>0] = 4;
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = HEAP32[$2>>2]|0;
      $21 = HEAP32[$D>>2]|0;
      $22 = HEAP32[$3>>2]|0;
      $23 = (FUNCTION_TABLE_iiiii[$20 & 255]($21,$x$i4$i,1,$22)|0);
      HEAP32[$5>>2] = $23;
      $24 = $23;
      label = 8;
      break;
     } else {
      HEAP8[$x$i6$i>>0] = 4;
      $$ph15$i = $18;
      label = 9;
      break;
     }
    } else {
     $$ph14$i = $13;
     label = 4;
    }
   } else {
    $$ph14$i = $8;
    label = 4;
   }
  } else {
   $$ph14$i = $6;
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  HEAP8[$x$i4$i>>0] = 4;
  $24 = $$ph14$i;
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   HEAP8[$x$i6$i>>0] = 4;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$2>>2]|0;
    $27 = HEAP32[$D>>2]|0;
    $28 = HEAP32[$3>>2]|0;
    $29 = (FUNCTION_TABLE_iiiii[$26 & 255]($27,$x$i6$i,1,$28)|0);
    HEAP32[$5>>2] = $29;
    HEAP8[$x$i8$i>>0] = 4;
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = HEAP32[$2>>2]|0;
     $32 = HEAP32[$D>>2]|0;
     $33 = HEAP32[$3>>2]|0;
     $34 = (FUNCTION_TABLE_iiiii[$31 & 255]($32,$x$i8$i,1,$33)|0);
     HEAP32[$5>>2] = $34;
     $35 = $34;
     label = 13;
     break;
    } else {
     HEAP8[$x$i10$i>>0] = 8;
     $$ph16$i = $29;
     label = 14;
     break;
    }
   } else {
    $$ph15$i = $24;
    label = 9;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  HEAP8[$x$i8$i>>0] = 4;
  $35 = $$ph15$i;
  label = 13;
 }
 do {
  if ((label|0) == 13) {
   HEAP8[$x$i10$i>>0] = 8;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = HEAP32[$2>>2]|0;
    $38 = HEAP32[$D>>2]|0;
    $39 = HEAP32[$3>>2]|0;
    $40 = (FUNCTION_TABLE_iiiii[$37 & 255]($38,$x$i10$i,1,$39)|0);
    HEAP32[$5>>2] = $40;
    HEAP8[$x$i12$i>>0] = 8;
    $41 = ($40|0)==(0);
    if ($41) {
     $46 = HEAP32[$2>>2]|0;
     $47 = HEAP32[$D>>2]|0;
     $48 = HEAP32[$3>>2]|0;
     $49 = (FUNCTION_TABLE_iiiii[$46 & 255]($47,$x$i12$i,1,$48)|0);
     HEAP32[$5>>2] = $49;
     $54 = $49;
     label = 18;
     break;
    } else {
     $42 = $1;
     $43 = $42;
     HEAP32[$43>>2] = 22136;
     $44 = (($42) + 4)|0;
     $45 = $44;
     HEAP32[$45>>2] = 0;
     $$ph17$i = $1;$75 = $40;
     label = 19;
     break;
    }
   } else {
    $$ph16$i = $35;
    label = 14;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  HEAP8[$x$i12$i>>0] = 8;
  $54 = $$ph16$i;
  label = 18;
 }
 if ((label|0) == 18) {
  $50 = $1;
  $51 = $50;
  HEAP32[$51>>2] = 22136;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = 0;
  $55 = ($54|0)==(0);
  if ($55) {
   $56 = HEAP32[$2>>2]|0;
   $57 = HEAP32[$D>>2]|0;
   $58 = HEAP32[$3>>2]|0;
   $59 = (FUNCTION_TABLE_iiiii[$56 & 255]($57,$1,8,$58)|0);
   HEAP32[$5>>2] = $59;
   HEAPF64[$0>>3] = 370.5;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = HEAP32[$2>>2]|0;
    $62 = HEAP32[$D>>2]|0;
    $63 = HEAP32[$3>>2]|0;
    $64 = (FUNCTION_TABLE_iiiii[$61 & 255]($62,$0,8,$63)|0);
    HEAP32[$5>>2] = $64;
    $68 = $64;$76 = $0;
   } else {
    $68 = $59;$76 = $0;
   }
  } else {
   $$ph17$i = $1;$75 = $54;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  HEAPF64[$0>>3] = 370.5;
  $68 = $75;$76 = $0;
 }
 $65 = (($f) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66&255;
 HEAP8[$x$i>>0] = $67;
 $69 = ($68|0)==(0);
 if (!($69)) {
  _DumpFunction($f,0,$D);
  $74 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($74|0);
 }
 $70 = HEAP32[$2>>2]|0;
 $71 = HEAP32[$D>>2]|0;
 $72 = HEAP32[$3>>2]|0;
 $73 = (FUNCTION_TABLE_iiiii[$70 & 255]($71,$x$i,1,$72)|0);
 HEAP32[$5>>2] = $73;
 _DumpFunction($f,0,$D);
 $74 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($74|0);
}
function _DumpFunction($f,$psource,$D) {
 $f = $f|0;
 $psource = $psource|0;
 $D = $D|0;
 var $$lcssa = 0, $$lcssa30 = 0, $$ph = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre28 = 0, $$pre29 = 0, $$pre29$lcssa = 0, $$pre4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i15 = 0, $exitcond$i24 = 0, $exitcond8$i = 0, $i$0$i27 = 0, $i$03$i = 0, $i$03$i21 = 0, $i$06$i = 0, $i$15$i = 0, $x$i = 0, $x$i$i = 0, $x$i$i13 = 0, $x$i$i18 = 0, $x$i1$i = 0, $x$i1$i17 = 0, $x$i5 = 0;
 var $x$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 44|0;
 $x$i1$i17 = sp + 61|0;
 $x$i$i18 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 8|0;
 $3 = sp;
 $x$i1$i = sp + 63|0;
 $x$i$i13 = sp + 65|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $x$i8 = sp + 62|0;
 $x$i5 = sp + 67|0;
 $x$i = sp + 66|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $x$i$i = sp + 64|0;
 $8 = sp + 16|0;
 $9 = sp + 28|0;
 $10 = sp + 32|0;
 $11 = sp + 36|0;
 $12 = sp + 40|0;
 $13 = (($D) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = (($f) + 72|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==($psource|0);
  if ($18) {
   label = 3;
  } else {
   _DumpString($17,$D);
   $$phi$trans$insert = (($D) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre28 = $$pre;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP8[$x$i$i>>0] = 0;
  $19 = (($D) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $22 = (($D) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$D>>2]|0;
   $25 = (($D) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_iiiii[$23 & 255]($24,$x$i$i,1,$26)|0);
   HEAP32[$19>>2] = $27;
   $$pre28 = $27;
  } else {
   $$pre28 = $20;
  }
 }
 $28 = (($f) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$7>>2] = $29;
 $30 = (($D) + 16|0);
 $31 = ($$pre28|0)==(0);
 if ($31) {
  $32 = (($D) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$D>>2]|0;
  $35 = (($D) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_iiiii[$33 & 255]($34,$7,4,$36)|0);
  HEAP32[$30>>2] = $37;
  $40 = $37;
 } else {
  $40 = $$pre28;
 }
 $38 = (($f) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$6>>2] = $39;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = (($D) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$D>>2]|0;
  $45 = (($D) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_iiiii[$43 & 255]($44,$6,4,$46)|0);
  HEAP32[$30>>2] = $47;
  $50 = $47;
 } else {
  $50 = $40;
 }
 $48 = (($f) + 6|0);
 $49 = HEAP8[$48>>0]|0;
 HEAP8[$x$i>>0] = $49;
 $51 = ($50|0)==(0);
 if ($51) {
  $52 = (($D) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$D>>2]|0;
  $55 = (($D) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_iiiii[$53 & 255]($54,$x$i,1,$56)|0);
  HEAP32[$30>>2] = $57;
  $60 = $57;
 } else {
  $60 = $50;
 }
 $58 = (($f) + 7|0);
 $59 = HEAP8[$58>>0]|0;
 HEAP8[$x$i5>>0] = $59;
 $61 = ($60|0)==(0);
 if ($61) {
  $62 = (($D) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$D>>2]|0;
  $65 = (($D) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_iiiii[$63 & 255]($64,$x$i5,1,$66)|0);
  HEAP32[$30>>2] = $67;
  $70 = $67;
 } else {
  $70 = $60;
 }
 $68 = (($f) + 8|0);
 $69 = HEAP8[$68>>0]|0;
 HEAP8[$x$i8>>0] = $69;
 $71 = ($70|0)==(0);
 if ($71) {
  $72 = (($D) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = HEAP32[$D>>2]|0;
  $75 = (($D) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (FUNCTION_TABLE_iiiii[$73 & 255]($74,$x$i8,1,$76)|0);
  HEAP32[$30>>2] = $77;
  $80 = $77;
 } else {
  $80 = $70;
 }
 $78 = (($f) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[$5>>2] = $79;
 $81 = ($80|0)==(0);
 if ($81) {
  $82 = (($D) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$D>>2]|0;
  $85 = (($D) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_iiiii[$83 & 255]($84,$5,4,$86)|0);
  HEAP32[$30>>2] = $87;
  $88 = ($87|0)==(0);
  if ($88) {
   $91 = HEAP32[$78>>2]|0;
   $92 = $91 << 2;
   $93 = (($f) + 48|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$82>>2]|0;
   $96 = HEAP32[$D>>2]|0;
   $97 = HEAP32[$85>>2]|0;
   $98 = (FUNCTION_TABLE_iiiii[$95 & 255]($96,$94,$92,$97)|0);
   HEAP32[$30>>2] = $98;
   $99 = (($f) + 16|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$4>>2] = $100;
   $101 = ($98|0)==(0);
   if ($101) {
    $102 = (($D) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = HEAP32[$D>>2]|0;
    $105 = (($D) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iiiii[$103 & 255]($104,$4,4,$106)|0);
    HEAP32[$30>>2] = $107;
    $108 = $100;$287 = $107;
   } else {
    $108 = $100;$287 = $98;
   }
  } else {
   $$ph = $87;
   label = 18;
  }
 } else {
  $$ph = $80;
  label = 18;
 }
 if ((label|0) == 18) {
  $89 = (($f) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  HEAP32[$4>>2] = $90;
  $108 = $90;$287 = $$ph;
 }
 $109 = ($108|0)>(0);
 if ($109) {
  $110 = (($f) + 44|0);
  $111 = (($D) + 4|0);
  $112 = (($D) + 8|0);
  $119 = $287;$i$03$i = 0;
  while(1) {
   $113 = HEAP32[$110>>2]|0;
   $114 = (($113) + ($i$03$i<<4)|0);
   $115 = ((($113) + ($i$03$i<<4)|0) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 & 63;
   $118 = $117&255;
   HEAP8[$x$i$i13>>0] = $118;
   $120 = ($119|0)==(0);
   if ($120) {
    $121 = HEAP32[$111>>2]|0;
    $122 = HEAP32[$D>>2]|0;
    $123 = HEAP32[$112>>2]|0;
    $124 = (FUNCTION_TABLE_iiiii[$121 & 255]($122,$x$i$i13,1,$123)|0);
    HEAP32[$30>>2] = $124;
    $$pre4$i = HEAP32[$115>>2]|0;
    $126 = $$pre4$i;$129 = $124;
   } else {
    $126 = $116;$129 = $119;
   }
   $125 = $126 & 63;
   switch ($125|0) {
   case 4: case 20:  {
    $156 = HEAP32[$114>>2]|0;
    _DumpString($156,$D);
    break;
   }
   case 3:  {
    $135 = +HEAPF64[$114>>3];
    HEAPF64[$3>>3] = $135;
    $136 = ($129|0)==(0);
    if ($136) {
     $137 = HEAP32[$111>>2]|0;
     $138 = HEAP32[$D>>2]|0;
     $139 = HEAP32[$112>>2]|0;
     $140 = (FUNCTION_TABLE_iiiii[$137 & 255]($138,$3,8,$139)|0);
     HEAP32[$30>>2] = $140;
    }
    break;
   }
   case 1:  {
    $127 = HEAP32[$114>>2]|0;
    $128 = $127&255;
    HEAP8[$x$i1$i>>0] = $128;
    $130 = ($129|0)==(0);
    if ($130) {
     $131 = HEAP32[$111>>2]|0;
     $132 = HEAP32[$D>>2]|0;
     $133 = HEAP32[$112>>2]|0;
     $134 = (FUNCTION_TABLE_iiiii[$131 & 255]($132,$x$i1$i,1,$133)|0);
     HEAP32[$30>>2] = $134;
    }
    break;
   }
   case 19:  {
    $141 = $114;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($141) + 4)|0;
    $145 = $144;
    $146 = HEAP32[$145>>2]|0;
    $147 = $2;
    $148 = $147;
    HEAP32[$148>>2] = $143;
    $149 = (($147) + 4)|0;
    $150 = $149;
    HEAP32[$150>>2] = $146;
    $151 = ($129|0)==(0);
    if ($151) {
     $152 = HEAP32[$111>>2]|0;
     $153 = HEAP32[$D>>2]|0;
     $154 = HEAP32[$112>>2]|0;
     $155 = (FUNCTION_TABLE_iiiii[$152 & 255]($153,$2,8,$154)|0);
     HEAP32[$30>>2] = $155;
    }
    break;
   }
   default: {
   }
   }
   $157 = (($i$03$i) + 1)|0;
   $exitcond$i15 = ($157|0)==($108|0);
   $$pre29 = HEAP32[$30>>2]|0;
   if ($exitcond$i15) {
    $$pre29$lcssa = $$pre29;
    break;
   } else {
    $119 = $$pre29;$i$03$i = $157;
   }
  }
  $160 = $$pre29$lcssa;
 } else {
  $160 = $287;
 }
 $158 = (($f) + 12|0);
 $159 = HEAP32[$158>>2]|0;
 HEAP32[$1>>2] = $159;
 $161 = ($160|0)==(0);
 if ($161) {
  $162 = (($D) + 4|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = HEAP32[$D>>2]|0;
  $165 = (($D) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (FUNCTION_TABLE_iiiii[$163 & 255]($164,$1,4,$166)|0);
  HEAP32[$30>>2] = $167;
  $288 = $167;
 } else {
  $288 = $160;
 }
 $168 = ($159|0)>(0);
 if ($168) {
  $169 = (($f) + 64|0);
  $170 = (($D) + 4|0);
  $171 = (($D) + 8|0);
  $175 = $288;$i$03$i21 = 0;
  while(1) {
   $172 = HEAP32[$169>>2]|0;
   $173 = ((($172) + ($i$03$i21<<3)|0) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   HEAP8[$x$i$i18>>0] = $174;
   $176 = ($175|0)==(0);
   if ($176) {
    $177 = HEAP32[$170>>2]|0;
    $178 = HEAP32[$D>>2]|0;
    $179 = HEAP32[$171>>2]|0;
    $180 = (FUNCTION_TABLE_iiiii[$177 & 255]($178,$x$i$i18,1,$179)|0);
    HEAP32[$30>>2] = $180;
    $$pre$i22 = HEAP32[$169>>2]|0;
    $182 = $$pre$i22;$184 = $180;
   } else {
    $182 = $172;$184 = $175;
   }
   $181 = ((($182) + ($i$03$i21<<3)|0) + 5|0);
   $183 = HEAP8[$181>>0]|0;
   HEAP8[$x$i1$i17>>0] = $183;
   $185 = ($184|0)==(0);
   if ($185) {
    $186 = HEAP32[$170>>2]|0;
    $187 = HEAP32[$D>>2]|0;
    $188 = HEAP32[$171>>2]|0;
    $189 = (FUNCTION_TABLE_iiiii[$186 & 255]($187,$x$i1$i17,1,$188)|0);
    HEAP32[$30>>2] = $189;
    $289 = $189;
   } else {
    $289 = $184;
   }
   $190 = (($i$03$i21) + 1)|0;
   $exitcond$i24 = ($190|0)==($159|0);
   if ($exitcond$i24) {
    $$lcssa30 = $289;
    break;
   } else {
    $175 = $289;$i$03$i21 = $190;
   }
  }
  $193 = $$lcssa30;
 } else {
  $193 = $288;
 }
 $191 = (($f) + 28|0);
 $192 = HEAP32[$191>>2]|0;
 HEAP32[$0>>2] = $192;
 $194 = ($193|0)==(0);
 if ($194) {
  $195 = (($D) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = HEAP32[$D>>2]|0;
  $198 = (($D) + 8|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_iiiii[$196 & 255]($197,$0,4,$199)|0);
  HEAP32[$30>>2] = $200;
 }
 $201 = ($192|0)>(0);
 if ($201) {
  $202 = (($f) + 52|0);
  $203 = (($f) + 72|0);
  $i$0$i27 = 0;
  while(1) {
   $204 = HEAP32[$202>>2]|0;
   $205 = (($204) + ($i$0$i27<<2)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = HEAP32[$203>>2]|0;
   _DumpFunction($206,$207,$D);
   $208 = (($i$0$i27) + 1)|0;
   $exitcond = ($208|0)==($192|0);
   if ($exitcond) {
    break;
   } else {
    $i$0$i27 = $208;
   }
  }
 }
 $209 = HEAP32[$13>>2]|0;
 $210 = ($209|0)==(0);
 if ($210) {
  $211 = (($f) + 24|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $212;
 } else {
  $213 = 0;
 }
 HEAP32[$12>>2] = $213;
 $214 = HEAP32[$30>>2]|0;
 $215 = ($214|0)==(0);
 if ($215) {
  $216 = (($D) + 4|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = HEAP32[$D>>2]|0;
  $219 = (($D) + 8|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (FUNCTION_TABLE_iiiii[$217 & 255]($218,$12,4,$220)|0);
  HEAP32[$30>>2] = $221;
  $222 = ($221|0)==(0);
  if ($222) {
   $223 = $213 << 2;
   $224 = (($f) + 56|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = HEAP32[$216>>2]|0;
   $227 = HEAP32[$D>>2]|0;
   $228 = HEAP32[$219>>2]|0;
   $229 = (FUNCTION_TABLE_iiiii[$226 & 255]($227,$225,$223,$228)|0);
   HEAP32[$30>>2] = $229;
   $235 = $229;
  } else {
   $235 = $221;
  }
 } else {
  $235 = $214;
 }
 $230 = HEAP32[$13>>2]|0;
 $231 = ($230|0)==(0);
 if ($231) {
  $232 = (($f) + 32|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $233;
 } else {
  $234 = 0;
 }
 HEAP32[$11>>2] = $234;
 $236 = ($235|0)==(0);
 if ($236) {
  $237 = (($D) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = HEAP32[$D>>2]|0;
  $240 = (($D) + 8|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (FUNCTION_TABLE_iiiii[$238 & 255]($239,$11,4,$241)|0);
  HEAP32[$30>>2] = $242;
  $290 = $242;
 } else {
  $290 = $235;
 }
 $243 = ($234|0)>(0);
 if ($243) {
  $244 = (($f) + 60|0);
  $245 = (($D) + 4|0);
  $246 = (($D) + 8|0);
  $i$06$i = 0;
  while(1) {
   $247 = HEAP32[$244>>2]|0;
   $248 = (($247) + (($i$06$i*12)|0)|0);
   $249 = HEAP32[$248>>2]|0;
   _DumpString($249,$D);
   $250 = HEAP32[$244>>2]|0;
   $251 = ((($250) + (($i$06$i*12)|0)|0) + 4|0);
   $252 = HEAP32[$251>>2]|0;
   HEAP32[$10>>2] = $252;
   $253 = HEAP32[$30>>2]|0;
   $254 = ($253|0)==(0);
   if ($254) {
    $255 = HEAP32[$245>>2]|0;
    $256 = HEAP32[$D>>2]|0;
    $257 = HEAP32[$246>>2]|0;
    $258 = (FUNCTION_TABLE_iiiii[$255 & 255]($256,$10,4,$257)|0);
    HEAP32[$30>>2] = $258;
    $$pre$i = HEAP32[$244>>2]|0;
    $260 = $$pre$i;$262 = $258;
   } else {
    $260 = $250;$262 = $253;
   }
   $259 = ((($260) + (($i$06$i*12)|0)|0) + 8|0);
   $261 = HEAP32[$259>>2]|0;
   HEAP32[$9>>2] = $261;
   $263 = ($262|0)==(0);
   if ($263) {
    $264 = HEAP32[$245>>2]|0;
    $265 = HEAP32[$D>>2]|0;
    $266 = HEAP32[$246>>2]|0;
    $267 = (FUNCTION_TABLE_iiiii[$264 & 255]($265,$9,4,$266)|0);
    HEAP32[$30>>2] = $267;
    $291 = $267;
   } else {
    $291 = $262;
   }
   $268 = (($i$06$i) + 1)|0;
   $exitcond8$i = ($268|0)==($234|0);
   if ($exitcond8$i) {
    $$lcssa = $291;
    break;
   } else {
    $i$06$i = $268;
   }
  }
  $273 = $$lcssa;
 } else {
  $273 = $290;
 }
 $269 = HEAP32[$13>>2]|0;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = HEAP32[$158>>2]|0;
  $272 = $271;
 } else {
  $272 = 0;
 }
 HEAP32[$8>>2] = $272;
 $274 = ($273|0)==(0);
 if ($274) {
  $275 = (($D) + 4|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = HEAP32[$D>>2]|0;
  $278 = (($D) + 8|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = (FUNCTION_TABLE_iiiii[$276 & 255]($277,$8,4,$279)|0);
  HEAP32[$30>>2] = $280;
 }
 $281 = ($272|0)>(0);
 if (!($281)) {
  STACKTOP = sp;return;
 }
 $282 = (($f) + 64|0);
 $i$15$i = 0;
 while(1) {
  $283 = HEAP32[$282>>2]|0;
  $284 = (($283) + ($i$15$i<<3)|0);
  $285 = HEAP32[$284>>2]|0;
  _DumpString($285,$D);
  $286 = (($i$15$i) + 1)|0;
  $exitcond$i = ($286|0)==($272|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$15$i = $286;
  }
 }
 STACKTOP = sp;return;
}
function _DumpString($s,$D) {
 $s = $s|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0;
 var $x$i = 0, $x$i1 = 0, $x$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i3 = sp + 6|0;
 $x$i1 = sp + 5|0;
 $x$i = sp + 4|0;
 $size = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  HEAP8[$x$i>>0] = 0;
  $1 = (($D) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   STACKTOP = sp;return;
  }
  $4 = (($D) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$D>>2]|0;
  $7 = (($D) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiiii[$5 & 255]($6,$x$i,1,$8)|0);
  HEAP32[$1>>2] = $9;
  STACKTOP = sp;return;
 }
 $10 = (($s) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(4);
 if ($12) {
  $13 = (($s) + 7|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $19 = $15;
 } else {
  $16 = (($s) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $19 = $17;
 }
 $18 = (($19) + 1)|0;
 HEAP32[$size>>2] = $18;
 $20 = (($s) + 16|0);
 $21 = ($18>>>0)<(255);
 do {
  if ($21) {
   $22 = $18&255;
   HEAP8[$x$i1>>0] = $22;
   $23 = (($D) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = (($D) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$D>>2]|0;
    $29 = (($D) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (FUNCTION_TABLE_iiiii[$27 & 255]($28,$x$i1,1,$30)|0);
    HEAP32[$23>>2] = $31;
    $48 = $31;
    break;
   } else {
    STACKTOP = sp;return;
   }
  } else {
   HEAP8[$x$i3>>0] = -1;
   $32 = (($D) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   if (!($34)) {
    STACKTOP = sp;return;
   }
   $35 = (($D) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$D>>2]|0;
   $38 = (($D) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_iiiii[$36 & 255]($37,$x$i3,1,$39)|0);
   HEAP32[$32>>2] = $40;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = (($D) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$D>>2]|0;
    $45 = (($D) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_iiiii[$43 & 255]($44,$size,4,$46)|0);
    HEAP32[$32>>2] = $47;
    $48 = $47;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $49 = ($48|0)==(0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = (($D) + 16|0);
 $51 = HEAP32[$size>>2]|0;
 $52 = (($51) + -1)|0;
 $53 = (($D) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$D>>2]|0;
 $56 = (($D) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_iiiii[$54 & 255]($55,$20,$52,$57)|0);
 HEAP32[$50>>2] = $58;
 STACKTOP = sp;return;
}
function _luaF_newCclosure($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 4;
 $1 = (($0) + 16)|0;
 $2 = (_luaC_newobj($L,38,$1)|0);
 $3 = $n&255;
 $4 = (($2) + 6|0);
 HEAP8[$4>>0] = $3;
 return ($2|0);
}
function _luaF_newLclosure($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $1 = (($0) + 16)|0;
 $2 = (_luaC_newobj($L,6,$1)|0);
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = $n&255;
 $5 = (($2) + 6|0);
 HEAP8[$5>>0] = $4;
 $6 = ($n|0)==(0);
 if ($6) {
  return ($2|0);
 }
 $7 = (($2) + 16|0);
 $$in = $n;
 while(1) {
  $8 = (($$in) + -1)|0;
  $9 = (($7) + ($8<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = ($8|0)==(0);
  if ($10) {
   break;
  } else {
   $$in = $8;
  }
 }
 return ($2|0);
}
function _luaF_initupvals($L,$cl) {
 $L = $L|0;
 $cl = $cl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cl) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $i$01 = 0;
 while(1) {
  $3 = (_luaM_realloc_($L,0,0,24)|0);
  $4 = (($3) + 4|0);
  HEAP32[$4>>2] = 1;
  $5 = (($3) + 8|0);
  HEAP32[$3>>2] = $5;
  $6 = (($3) + 16|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($cl) + ($i$01<<2)|0) + 16|0);
  HEAP32[$7>>2] = $3;
  $8 = (($i$01) + 1)|0;
  $9 = HEAP8[$0>>0]|0;
  $10 = $9&255;
  $11 = ($8|0)<($10|0);
  if ($11) {
   $i$01 = $8;
  } else {
   break;
  }
 }
 return;
}
function _luaF_findupval($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $$0 = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$0$lcssa = 0, $pp$0$lcssa$ph = 0, $pp$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $pp$0$lcssa = $0;
  } else {
   $4 = $1;$pp$03 = $0;
   while(1) {
    $3 = HEAP32[$4>>2]|0;
    $5 = ($3>>>0)<($level>>>0);
    if ($5) {
     $pp$0$lcssa$ph = $pp$03;
     label = 6;
     break;
    }
    $6 = ($3|0)==($level|0);
    if ($6) {
     $$lcssa10 = $4;
     break;
    }
    $7 = (($4) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $pp$0$lcssa$ph = $7;
     label = 6;
     break;
    } else {
     $4 = $8;$pp$03 = $7;
    }
   }
   if ((label|0) == 6) {
    $pp$0$lcssa = $pp$0$lcssa$ph;
    break;
   }
   $$0 = $$lcssa10;
   return ($$0|0);
  }
 } while(0);
 $10 = (_luaM_realloc_($L,0,0,24)|0);
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$pp$0$lcssa>>2]|0;
 $13 = (($10) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = (($10) + 12|0);
 HEAP32[$14>>2] = 1;
 HEAP32[$pp$0$lcssa>>2] = $10;
 HEAP32[$10>>2] = $level;
 $15 = (($L) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==($L|0);
 if (!($17)) {
  $$0 = $10;
  return ($$0|0);
 }
 $18 = (($L) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 104|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$15>>2] = $21;
 HEAP32[$20>>2] = $L;
 $$0 = $10;
 return ($$0|0);
}
function _luaF_close($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $4 = $1;
 while(1) {
  $3 = HEAP32[$4>>2]|0;
  $5 = ($3>>>0)<($level>>>0);
  if ($5) {
   break;
  }
  $6 = (($4) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = (($4) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   (_luaM_realloc_($L,$4,24,0)|0);
  } else {
   ;HEAP32[$6+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$3+12>>2]|0;
   HEAP32[$4>>2] = $6;
   $11 = (($4) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 64;
   $14 = ($13|0)==(0);
   if (!($14)) {
    _luaC_upvalbarrier_($L,$4);
   }
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   break;
  } else {
   $4 = $15;
  }
 }
 return;
}
function _luaF_newproto($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,9,80)|0);
 $1 = (($0) + 44|0);
 $2 = (($0) + 68|0);
 HEAP32[$2>>2] = 0;
 $3 = (($0) + 64|0);
 HEAP32[$3>>2] = 0;
 $4 = (($0) + 12|0);
 $5 = (($0) + 6|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 HEAP8[$5>>0] = 0;
 $6 = (($0) + 7|0);
 HEAP8[$6>>0] = 0;
 $7 = (($0) + 8|0);
 HEAP8[$7>>0] = 0;
 $8 = (($0) + 60|0);
 HEAP32[$8>>2] = 0;
 $9 = (($0) + 32|0);
 HEAP32[$9>>2] = 0;
 $10 = (($0) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = (($0) + 40|0);
 HEAP32[$11>>2] = 0;
 $12 = (($0) + 72|0);
 HEAP32[$12>>2] = 0;
 return ($0|0);
}
function _luaF_freeproto($L,$f) {
 $L = $L|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 (_luaM_realloc_($L,$1,$4,0)|0);
 $5 = (($f) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($f) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = (($f) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($f) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 (_luaM_realloc_($L,$11,$14,0)|0);
 $15 = (($f) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($f) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 2;
 (_luaM_realloc_($L,$16,$19,0)|0);
 $20 = (($f) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($f) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23*12)|0;
 (_luaM_realloc_($L,$21,$24,0)|0);
 $25 = (($f) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($f) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 << 3;
 (_luaM_realloc_($L,$26,$29,0)|0);
 (_luaM_realloc_($L,$f,80,0)|0);
 return;
}
function _luaF_getlocalname($f,$local_number,$pc) {
 $f = $f|0;
 $local_number = $local_number|0;
 $pc = $pc|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$04 = 0, $i$04$lcssa8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($f) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $$013 = $local_number;$i$04 = 0;
 while(1) {
  $5 = ((($4) + (($i$04*12)|0)|0) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>($pc|0);
  if ($7) {
   label = 8;
   break;
  }
  $8 = ((($4) + (($i$04*12)|0)|0) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>($pc|0);
  if ($10) {
   $11 = (($$013) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $i$04$lcssa8 = $i$04;
    label = 6;
    break;
   } else {
    $$1 = $11;
   }
  } else {
   $$1 = $$013;
  }
  $16 = (($i$04) + 1)|0;
  $17 = ($16|0)<($1|0);
  if ($17) {
   $$013 = $$1;$i$04 = $16;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = (($4) + (($i$04$lcssa8*12)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 16|0);
  $$0 = $15;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaC_barrier_($L,$o,$v) {
 $L = $L|0;
 $o = $o|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)<(2);
 if ($4) {
  _reallymarkobject($1,$v);
  return;
 } else {
  $5 = (($o) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 & 248;
  $9 = (($1) + 60|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 & 3;
  $13 = $12 | $8;
  $14 = $13&255;
  HEAP8[$5>>0] = $14;
  return;
 }
}
function _luaC_barrierback_($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 251;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($t) + 28|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$7>>2] = $t;
 return;
}
function _luaC_upvalbarrier_($L,$uv) {
 $L = $L|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$uv>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 61|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255)<(2);
 if (!($6)) {
  return;
 }
 $7 = (($3) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 3;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  return;
 }
 _reallymarkobject($1,$3);
 return;
}
function _luaC_fix($L,$o) {
 $L = $L|0;
 $o = $o|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($o) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 252;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = HEAP32[$o>>2]|0;
 $8 = (($1) + 64|0);
 HEAP32[$8>>2] = $7;
 $9 = (($1) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$o>>2] = $10;
 HEAP32[$9>>2] = $o;
 return;
}
function _luaC_newobj($L,$tt,$sz) {
 $L = $L|0;
 $tt = $tt|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $tt & 15;
 $3 = (_luaM_realloc_($L,0,$2,$sz)|0);
 $4 = (($1) + 60|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 3;
 $8 = $7&255;
 $9 = (($3) + 5|0);
 HEAP8[$9>>0] = $8;
 $10 = $tt&255;
 $11 = (($3) + 4|0);
 HEAP8[$11>>0] = $10;
 $12 = (($1) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$3>>2] = $13;
 HEAP32[$12>>2] = $3;
 return ($3|0);
}
function _luaC_upvdeccount($L,$uv) {
 $L = $L|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($uv) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[$uv>>2]|0;
 $5 = (($uv) + 8|0);
 $6 = ($4|0)==($5|0);
 if (!($6)) {
  return;
 }
 (_luaM_realloc_($L,$uv,24,0)|0);
 return;
}
function _luaC_checkfinalizer($L,$o,$mt) {
 $L = $L|0;
 $o = $o|0;
 $mt = $mt|0;
 var $$lcssa = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond2 = 0, $p$0 = 0, $p$0$lcssa = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($o) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 8;
 $5 = ($4<<24>>24)!=(0);
 $6 = ($mt|0)==(0|0);
 $or$cond2 = $5 | $6;
 if ($or$cond2) {
  return;
 }
 $7 = (($mt) + 6|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 4;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  return;
 }
 $11 = (($1) + 156|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_luaT_gettm($mt,2,$12)|0);
 $phitmp = ($13|0)==(0|0);
 if ($phitmp) {
  return;
 }
 $14 = (($1) + 61|0);
 $15 = HEAP8[$14>>0]|0;
 $$off = (($15) + -2)<<24>>24;
 $16 = ($$off&255)<(4);
 if ($16) {
  $17 = HEAP8[$2>>0]|0;
  $18 = $17&255;
  $19 = $18 & 248;
  $20 = (($1) + 60|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 & 3;
  $24 = $23 | $19;
  $25 = $24&255;
  HEAP8[$2>>0] = $25;
  $26 = (($1) + 68|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==($o|0);
  if ($28) {
   while(1) {
    $29 = (_sweeplist($L,$27,1)|0);
    $30 = ($29|0)==($27|0);
    if (!($30)) {
     $$lcssa = $29;
     break;
    }
   }
   HEAP32[$26>>2] = $$lcssa;
  }
 }
 $31 = (($1) + 64|0);
 $p$0 = $31;
 while(1) {
  $32 = HEAP32[$p$0>>2]|0;
  $33 = ($32|0)==($o|0);
  if ($33) {
   $p$0$lcssa = $p$0;
   break;
  } else {
   $p$0 = $32;
  }
 }
 $34 = HEAP32[$o>>2]|0;
 HEAP32[$p$0$lcssa>>2] = $34;
 $35 = (($1) + 72|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$o>>2] = $36;
 HEAP32[$35>>2] = $o;
 $37 = HEAP8[$2>>0]|0;
 $38 = $37&255;
 $39 = $38 | 8;
 $40 = $39&255;
 HEAP8[$2>>0] = $40;
 return;
}
function _luaC_freeallobjects($L) {
 $L = $L|0;
 var $$0$i$i = 0, $$0$i$i$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lastnext$03$us$us$i = 0, $lastnext$03$us$us$i$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 96|0);
 $$0$i$i = $2;
 while(1) {
  $3 = HEAP32[$$0$i$i>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0$i$i$lcssa = $$0$i$i;
   break;
  } else {
   $$0$i$i = $3;
  }
 }
 $5 = (($1) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $14 = $1;
 } else {
  $9 = $6;$lastnext$03$us$us$i = $$0$i$i$lcssa;
  while(1) {
   $8 = HEAP32[$9>>2]|0;
   HEAP32[$5>>2] = $8;
   $10 = HEAP32[$lastnext$03$us$us$i>>2]|0;
   HEAP32[$9>>2] = $10;
   HEAP32[$lastnext$03$us$us$i>>2] = $9;
   $11 = HEAP32[$5>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   } else {
    $lastnext$03$us$us$i$phi = $9;$9 = $11;$lastnext$03$us$us$i = $lastnext$03$us$us$i$phi;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $14 = $$pre;
 }
 $13 = (($14) + 96|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  while(1) {
   _GCTM($L,0);
   $17 = HEAP32[$13>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    break;
   }
  }
 }
 $19 = (($1) + 60|0);
 HEAP8[$19>>0] = 3;
 $20 = (($1) + 62|0);
 HEAP8[$20>>0] = 0;
 (_sweeplist($L,$5,-1)|0);
 $21 = (($1) + 64|0);
 (_sweeplist($L,$21,-1)|0);
 $22 = (($1) + 100|0);
 (_sweeplist($L,$22,-1)|0);
 return;
}
function _luaC_step($L) {
 $L = $L|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$lcssa = 0, $$lcssa7 = 0, $$lcssa9 = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $debt$0 = 0, $i$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx = (($1) + 12|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = (($1) + 128|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $2 = (($$idx$val|0) / 200)&-1;
 $3 = (($2) + 1)|0;
 $4 = (2147483647 / ($$idx1$val|0))&-1;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = Math_imul($3, $$idx1$val)|0;
  $44 = $6;
 } else {
  $44 = 2147483647;
 }
 $7 = (($1) + 63|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  _luaE_setdebt($1,-16000);
  return;
 }
 $10 = (($1) + 61|0);
 $debt$0 = $44;
 while(1) {
  $11 = (_singlestep($L)|0);
  $12 = (($debt$0) - ($11))|0;
  $13 = ($12|0)>(-1600);
  $14 = HEAP8[$10>>0]|0;
  $15 = ($14<<24>>24)==(7);
  if (!($13)) {
   $$lcssa7 = $12;$$lcssa9 = $15;
   label = 8;
   break;
  }
  if ($15) {
   label = 9;
   break;
  } else {
   $debt$0 = $12;
  }
 }
 if ((label|0) == 8) {
  if (!($$lcssa9)) {
   $30 = HEAP32[$$idx1>>2]|0;
   $31 = (($$lcssa7|0) / ($30|0))&-1;
   $32 = ($31*200)|0;
   _luaE_setdebt($1,$32);
   $33 = HEAP32[$0>>2]|0;
   $34 = (($33) + 96|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   $$pre$pre$i = (($33) + 120|0);
   do {
    if ($36) {
     $43 = 0;
    } else {
     $i$04$i = 0;
     while(1) {
      $37 = HEAP32[$$pre$pre$i>>2]|0;
      $38 = ($i$04$i>>>0)<($37>>>0);
      if (!($38)) {
       $$lcssa = $37;
       label = 17;
       break;
      }
      _GCTM($L,1);
      $39 = (($i$04$i) + 1)|0;
      $40 = HEAP32[$34>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       label = 18;
       break;
      } else {
       $i$04$i = $39;
      }
     }
     if ((label|0) == 17) {
      $42 = $$lcssa << 1;
      $43 = $42;
      break;
     }
     else if ((label|0) == 18) {
      $43 = 0;
      break;
     }
    }
   } while(0);
   HEAP32[$$pre$pre$i>>2] = $43;
   return;
  }
 }
 else if ((label|0) == 9) {
 }
 $16 = (($1) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17>>>0) / 100)&-1;
 $19 = (($1) + 124|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (2147483647 / ($18>>>0))&-1;
 $22 = ($20|0)<($21|0);
 if ($22) {
  $23 = Math_imul($20, $18)|0;
  $28 = $23;
 } else {
  $28 = 2147483647;
 }
 $24 = (($1) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$$idx>>2]|0;
 $27 = (($25) - ($28))|0;
 $29 = (($27) + ($26))|0;
 _luaE_setdebt($1,$29);
 return;
}
function _luaC_fullgc($L,$isemergency) {
 $L = $L|0;
 $isemergency = $isemergency|0;
 var $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert12 = 0, $$phi$trans$insert15 = 0, $$phi$trans$insert9 = 0, $$pn = 0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre13 = 0, $$pre14 = 0, $$pre16 = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($isemergency|0)==(0);
 if (!($2)) {
  $3 = (($1) + 62|0);
  HEAP8[$3>>0] = 1;
 }
 $4 = (($1) + 61|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255)<(2);
 if ($6) {
  HEAP8[$4>>0] = 2;
  $7 = (($1) + 64|0);
  while(1) {
   $8 = (_sweeplist($L,$7,1)|0);
   $9 = ($8|0)==($7|0);
   if (!($9)) {
    $$lcssa = $8;
    break;
   }
  }
  $10 = (($1) + 68|0);
  HEAP32[$10>>2] = $$lcssa;
  $$pre = HEAP32[$0>>2]|0;
  $$phi$trans$insert = (($$pre) + 61|0);
  $$pre7 = HEAP8[$$phi$trans$insert>>0]|0;
  $12 = $$pre;$13 = $$pre7;
 } else {
  $12 = $1;$13 = $5;
 }
 $11 = (($12) + 61|0);
 $14 = ($13<<24>>24)==(7);
 if ($14) {
  $18 = $12;$20 = 7;
 } else {
  while(1) {
   (_singlestep($L)|0);
   $15 = HEAP8[$11>>0]|0;
   $16 = ($15<<24>>24)==(7);
   if ($16) {
    break;
   }
  }
  $$pre8 = HEAP32[$0>>2]|0;
  $$phi$trans$insert9 = (($$pre8) + 61|0);
  $$pre10 = HEAP8[$$phi$trans$insert9>>0]|0;
  $18 = $$pre8;$20 = $$pre10;
 }
 $17 = (($18) + 61|0);
 $19 = $20&255;
 $21 = 1 << $19;
 $22 = $21 & -129;
 $23 = ($22|0)==(0);
 if ($23) {
  while(1) {
   (_singlestep($L)|0);
   $24 = HEAP8[$17>>0]|0;
   $25 = $24&255;
   $26 = 1 << $25;
   $27 = $26 & -129;
   $28 = ($27|0)==(0);
   if (!($28)) {
    break;
   }
  }
  $$pre11 = HEAP32[$0>>2]|0;
  $$phi$trans$insert12 = (($$pre11) + 61|0);
  $$pre13 = HEAP8[$$phi$trans$insert12>>0]|0;
  $30 = $$pre11;$31 = $$pre13;
 } else {
  $30 = $18;$31 = $20;
 }
 $29 = (($30) + 61|0);
 $32 = ($31<<24>>24)==(6);
 if ($32) {
  $$pn = $30;
  label = 19;
 } else {
  while(1) {
   (_singlestep($L)|0);
   $33 = HEAP8[$29>>0]|0;
   $34 = ($33<<24>>24)==(6);
   if ($34) {
    break;
   }
  }
  $$pre14 = HEAP32[$0>>2]|0;
  $$phi$trans$insert15 = (($$pre14) + 61|0);
  $$pre16 = HEAP8[$$phi$trans$insert15>>0]|0;
  $phitmp = ($$pre16<<24>>24)==(7);
  if (!($phitmp)) {
   $$pn = $$pre14;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $35 = (($$pn) + 61|0);
  while(1) {
   (_singlestep($L)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)==(7);
   if ($37) {
    break;
   }
  }
 }
 $38 = (($1) + 62|0);
 HEAP8[$38>>0] = 0;
 $39 = (($1) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40>>>0) / 100)&-1;
 $42 = (($1) + 124|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (2147483647 / ($41>>>0))&-1;
 $45 = ($43|0)<($44|0);
 if (!($45)) {
  $52 = 2147483647;
  $47 = (($1) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($1) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) - ($52))|0;
  $53 = (($51) + ($50))|0;
  _luaE_setdebt($1,$53);
  return;
 }
 $46 = Math_imul($43, $41)|0;
 $52 = $46;
 $47 = (($1) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($1) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) - ($52))|0;
 $53 = (($51) + ($50))|0;
 _luaE_setdebt($1,$53);
 return;
}
function _reallymarkobject($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$0 = 0, $$0$lcssa45 = 0, $$0$lcssa46 = 0, $$0$lcssa47 = 0, $$0$lcssa48 = 0, $$0$lcssa49 = 0, $$0$lcssa50 = 0, $$0$lcssa51 = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa59 = 0, $$lcssa60 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 16|0);
 $$phi$trans$insert = (($o) + 5|0);
 $$pre = HEAP8[$$phi$trans$insert>>0]|0;
 $$0 = $o;$3 = $$pre;
 L1: while(1) {
  $1 = (($$0) + 5|0);
  $2 = $3&255;
  $4 = $2 & 252;
  $5 = $4&255;
  HEAP8[$1>>0] = $5;
  $6 = (($$0) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  switch ($8|0) {
  case 8:  {
   $$0$lcssa50 = $$0;
   label = 13;
   break L1;
   break;
  }
  case 4:  {
   $$0$lcssa45 = $$0;$$lcssa52 = $1;$$lcssa59 = $4;
   label = 3;
   break L1;
   break;
  }
  case 5:  {
   $$0$lcssa49 = $$0;
   label = 12;
   break L1;
   break;
  }
  case 20:  {
   $$0$lcssa46 = $$0;$$lcssa53 = $1;$$lcssa60 = $4;
   label = 4;
   break L1;
   break;
  }
  case 7:  {
   break;
  }
  case 6:  {
   $$0$lcssa47 = $$0;
   label = 10;
   break L1;
   break;
  }
  case 38:  {
   $$0$lcssa48 = $$0;
   label = 11;
   break L1;
   break;
  }
  case 9:  {
   $$0$lcssa51 = $$0;
   label = 14;
   break L1;
   break;
  }
  default: {
   label = 15;
   break L1;
  }
  }
  $24 = (($$0) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $32 = $5;
  } else {
   $27 = (($25) + 5|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 & 3;
   $30 = ($29<<24>>24)==(0);
   if ($30) {
    $32 = $5;
   } else {
    _reallymarkobject($g,$25);
    $$pre44 = HEAP8[$1>>0]|0;
    $32 = $$pre44;
   }
  }
  $31 = $32&255;
  $33 = $31 | 4;
  $34 = $33&255;
  HEAP8[$1>>0] = $34;
  $35 = (($$0) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 24)|0;
  $38 = HEAP32[$0>>2]|0;
  $39 = (($37) + ($38))|0;
  HEAP32[$0>>2] = $39;
  $40 = (($$0) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($$0) + 6|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 & 64;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   label = 15;
   break;
  }
  $46 = (($41) + 5|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 & 3;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   label = 15;
   break;
  } else {
   $$0 = $41;$3 = $47;
  }
 }
 if ((label|0) == 3) {
  $9 = $$lcssa59 | 4;
  $10 = $9&255;
  HEAP8[$$lcssa52>>0] = $10;
  $11 = (($$0$lcssa45) + 7|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($13) + 17)|0;
  $15 = HEAP32[$0>>2]|0;
  $16 = (($14) + ($15))|0;
  HEAP32[$0>>2] = $16;
  return;
 }
 else if ((label|0) == 4) {
  $17 = $$lcssa60 | 4;
  $18 = $17&255;
  HEAP8[$$lcssa53>>0] = $18;
  $19 = (($$0$lcssa46) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 17)|0;
  $22 = HEAP32[$0>>2]|0;
  $23 = (($21) + ($22))|0;
  HEAP32[$0>>2] = $23;
  return;
 }
 else if ((label|0) == 10) {
  $50 = (($g) + 76|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($$0$lcssa47) + 8|0);
  HEAP32[$52>>2] = $51;
  HEAP32[$50>>2] = $$0$lcssa47;
  return;
 }
 else if ((label|0) == 11) {
  $53 = (($g) + 76|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($$0$lcssa48) + 8|0);
  HEAP32[$55>>2] = $54;
  HEAP32[$53>>2] = $$0$lcssa48;
  return;
 }
 else if ((label|0) == 12) {
  $56 = (($g) + 76|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($$0$lcssa49) + 28|0);
  HEAP32[$58>>2] = $57;
  HEAP32[$56>>2] = $$0$lcssa49;
  return;
 }
 else if ((label|0) == 13) {
  $59 = (($g) + 76|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($$0$lcssa50) + 36|0);
  HEAP32[$61>>2] = $60;
  HEAP32[$59>>2] = $$0$lcssa50;
  return;
 }
 else if ((label|0) == 14) {
  $62 = (($g) + 76|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($$0$lcssa51) + 76|0);
  HEAP32[$64>>2] = $63;
  HEAP32[$62>>2] = $$0$lcssa51;
  return;
 }
 else if ((label|0) == 15) {
  return;
 }
}
function _sweeplist($L,$p,$count) {
 $L = $L|0;
 $p = $p|0;
 $count = $count|0;
 var $$0$be = 0, $$015 = 0, $$03 = 0, $$03$ph = 0, $$06 = 0, $$lcssa = 0, $$lcssa$i$i = 0, $$ph = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 60|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 ^ 3;
 $6 = $4 & 3;
 $7 = HEAP32[$p>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$03 = $p;$62 = 0;
  $63 = ($62|0)==(0|0);
  $64 = $63 ? 0 : $$03;
  return ($64|0);
 }
 $$015 = $count;$$06 = $p;$12 = $7;
 while(1) {
  $9 = (($$015) + -1)|0;
  $10 = ($$015|0)==(0);
  if ($10) {
   $$03$ph = $$06;$$ph = $12;
   break;
  }
  $11 = (($12) + 5|0);
  $13 = HEAP8[$11>>0]|0;
  $14 = $13&255;
  $15 = $14 ^ 3;
  $16 = $15 & $5;
  $17 = ($16|0)==(0);
  L7: do {
   if ($17) {
    $18 = HEAP32[$12>>2]|0;
    HEAP32[$$06>>2] = $18;
    $19 = (($12) + 4|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    switch ($21|0) {
    case 8:  {
     _luaE_freethread($L,$12);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 20:  {
     $54 = (($12) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + 17)|0;
     (_luaM_realloc_($L,$12,$56,0)|0);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 7:  {
     $47 = (($12) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + 24)|0;
     (_luaM_realloc_($L,$12,$49,0)|0);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 4:  {
     _luaS_remove($L,$12);
     $50 = (($12) + 7|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = (($52) + 17)|0;
     (_luaM_realloc_($L,$12,$53,0)|0);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 38:  {
     $42 = (($12) + 6|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = $44 << 4;
     $46 = (($45) + 16)|0;
     (_luaM_realloc_($L,$12,$46,0)|0);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 9:  {
     _luaF_freeproto($L,$12);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 5:  {
     _luaH_free($L,$12);
     $$0$be = $$06;
     break L7;
     break;
    }
    case 6:  {
     $22 = (($12) + 6|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = ($23<<24>>24)==(0);
     if ($25) {
      $$lcssa$i$i = $24;
     } else {
      $65 = $23;$i$01$i$i = 0;
      while(1) {
       $26 = ((($12) + ($i$01$i$i<<2)|0) + 16|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(0|0);
       if ($28) {
        $38 = $65;
       } else {
        $29 = (($27) + 4|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (($30) + -1)|0;
        HEAP32[$29>>2] = $31;
        $32 = ($31|0)==(0);
        if ($32) {
         $33 = HEAP32[$27>>2]|0;
         $34 = (($27) + 8|0);
         $35 = ($33|0)==($34|0);
         if ($35) {
          (_luaM_realloc_($L,$27,24,0)|0);
          $$pre$i$i = HEAP8[$22>>0]|0;
          $38 = $$pre$i$i;
         } else {
          $38 = $65;
         }
        } else {
         $38 = $65;
        }
       }
       $36 = (($i$01$i$i) + 1)|0;
       $37 = $38&255;
       $39 = ($36|0)<($37|0);
       if ($39) {
        $65 = $38;$i$01$i$i = $36;
       } else {
        $$lcssa = $37;
        break;
       }
      }
      $$lcssa$i$i = $$lcssa;
     }
     $40 = $$lcssa$i$i << 2;
     $41 = (($40) + 16)|0;
     (_luaM_realloc_($L,$12,$41,0)|0);
     $$0$be = $$06;
     break L7;
     break;
    }
    default: {
     $$0$be = $$06;
     break L7;
    }
    }
   } else {
    $57 = $14 & 248;
    $58 = $57 | $6;
    $59 = $58&255;
    HEAP8[$11>>0] = $59;
    $$0$be = $12;
   }
  } while(0);
  $60 = HEAP32[$$0$be>>2]|0;
  $61 = ($60|0)==(0|0);
  if ($61) {
   $$03$ph = $$0$be;$$ph = 0;
   break;
  } else {
   $$015 = $9;$$06 = $$0$be;$12 = $60;
  }
 }
 $$03 = $$03$ph;$62 = $$ph;
 $63 = ($62|0)==(0|0);
 $64 = $63 ? 0 : $$03;
 return ($64|0);
}
function _GCTM($L,$propagateerrors) {
 $L = $L|0;
 $propagateerrors = $propagateerrors|0;
 var $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $status$0 = 0, $v = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $v = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = (($1) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 HEAP32[$5>>2] = $3;
 $7 = (($3) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 247;
 $11 = $10&255;
 HEAP8[$7>>0] = $11;
 $12 = (($1) + 61|0);
 $13 = HEAP8[$12>>0]|0;
 $$off$i = (($13) + -2)<<24>>24;
 $14 = ($$off$i&255)<(4);
 if ($14) {
  $15 = $9 & 240;
  $16 = (($1) + 60|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 & 3;
  $20 = $19 | $15;
  $21 = $20&255;
  HEAP8[$7>>0] = $21;
 }
 HEAP32[$v>>2] = $3;
 $22 = (($3) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 | 64;
 $26 = (($v) + 8|0);
 HEAP32[$26>>2] = $25;
 $27 = (_luaT_gettmbyobj($L,$v,2)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = (($27) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 $32 = ($31|0)==(6);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = (($L) + 109|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = (($1) + 63|0);
 $36 = HEAP8[$35>>0]|0;
 HEAP8[$33>>0] = 0;
 HEAP8[$35>>0] = 0;
 $37 = (($L) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 ;HEAP32[$38+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$38+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$27+12>>2]|0;
 $39 = HEAP32[$37>>2]|0;
 $40 = (($39) + 16|0);
 ;HEAP32[$40+0>>2]=HEAP32[$v+0>>2]|0;HEAP32[$40+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$v+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$v+12>>2]|0;
 $41 = HEAP32[$37>>2]|0;
 $42 = (($41) + 32|0);
 HEAP32[$37>>2] = $42;
 $43 = (($L) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $41;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (_luaD_pcall($L,203,0,$47,0)|0);
 HEAP8[$33>>0] = $34;
 HEAP8[$35>>0] = $36;
 $49 = ($48|0)!=(0);
 $50 = ($propagateerrors|0)!=(0);
 $or$cond = $49 & $50;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $51 = ($48|0)==(2);
 if (!($51)) {
  $status$0 = $48;
  _luaD_throw($L,$status$0);
  // unreachable;
 }
 $52 = HEAP32[$37>>2]|0;
 $53 = (($52) + -8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 15;
 $56 = ($55|0)==(4);
 if ($56) {
  $57 = (($52) + -16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 16|0);
  $60 = $59;
 } else {
  $60 = 4056;
 }
 HEAP32[$vararg_buffer>>2] = $60;
 (_luaO_pushfstring($L,4072,$vararg_buffer)|0);
 $status$0 = 5;
 _luaD_throw($L,$status$0);
 // unreachable;
}
function _singlestep($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$lcssa = 0, $$02$i$i = 0, $$02$i16$i = 0, $$lcssa = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa48 = 0, $$lcssa50 = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa56 = 0, $$lcssa58 = 0, $$pre = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $changed$0$ph$i$i = 0, $changed$0$ph$i$i$lcssa = 0, $changed$0$ph$i7$i = 0, $changed$0$ph$i7$i$lcssa = 0, $i$0$i$i = 0, $i$02$i = 0, $i$04$i = 0, $i$04$i$lcssa = 0;
 var $lastnext$0$ph5$i$i = 0, $lastnext$03$i$i = 0, $lastnext$03$i$i$lcssa = 0, $lastnext$03$i$i$phi = 0, $n$01$i$i = 0, $n$01$i18$i = 0, $next$0$i$i = 0, $next$0$i10$i = 0, $next$0$ph$i$i = 0, $next$0$ph$i8$i = 0, $o$0$i$i = 0, $o$0$i$i4 = 0, $o$01$i$i = 0, $o$01$i$i2 = 0, $o$02$i$i = 0, $o$02$i$i3 = 0, $p$0$ph4$i$i = 0, $p$0$ph5$i$i = 0, $uv$0$i$i = 0, $uv$02$i$i = 0;
 var $uv$03$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 2:  {
  $248 = (($1) + 72|0);
  $249 = (($1) + 68|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ($250|0)==(0|0);
  if (!($251)) {
   $252 = (($1) + 12|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = (_sweeplist($L,$250,80)|0);
   HEAP32[$249>>2] = $254;
   $255 = HEAP32[$252>>2]|0;
   $256 = (($255) - ($253))|0;
   $257 = (($1) + 20|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($256) + ($258))|0;
   HEAP32[$257>>2] = $259;
   $260 = ($254|0)==(0|0);
   if (!($260)) {
    $$0 = 400;
    return ($$0|0);
   }
  }
  HEAP8[$2>>0] = 3;
  HEAP32[$249>>2] = $248;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 5:  {
  $286 = (($1) + 136|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = (($287) + 5|0);
  $289 = HEAP8[$288>>0]|0;
  $290 = $289&255;
  $291 = $290 & 248;
  $292 = (($1) + 60|0);
  $293 = HEAP8[$292>>0]|0;
  $294 = $293&255;
  $295 = $294 & 3;
  $296 = $295 | $291;
  $297 = $296&255;
  HEAP8[$288>>0] = $297;
  $298 = (($1) + 62|0);
  $299 = HEAP8[$298>>0]|0;
  $300 = ($299<<24>>24)==(1);
  if (!($300)) {
   $301 = (($1) + 12|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = (($1) + 108|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($1) + 116|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (_luaM_realloc_($L,$304,$306,0)|0);
   HEAP32[$303>>2] = $307;
   HEAP32[$305>>2] = 0;
   $308 = (($1) + 28|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (($1) + 32|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = (($311|0) / 4)&-1;
   $313 = ($309|0)<($312|0);
   if ($313) {
    $314 = (($311|0) / 2)&-1;
    _luaS_resize($L,$314);
   }
   $315 = HEAP32[$301>>2]|0;
   $316 = (($315) - ($302))|0;
   $317 = (($1) + 20|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($316) + ($318))|0;
   HEAP32[$317>>2] = $319;
  }
  HEAP8[$2>>0] = 6;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 3:  {
  $261 = (($1) + 96|0);
  $262 = (($1) + 68|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($263|0)==(0|0);
  if (!($264)) {
   $265 = (($1) + 12|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = (_sweeplist($L,$263,80)|0);
   HEAP32[$262>>2] = $267;
   $268 = HEAP32[$265>>2]|0;
   $269 = (($268) - ($266))|0;
   $270 = (($1) + 20|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($269) + ($271))|0;
   HEAP32[$270>>2] = $272;
   $273 = ($267|0)==(0|0);
   if (!($273)) {
    $$0 = 400;
    return ($$0|0);
   }
  }
  HEAP8[$2>>0] = 4;
  HEAP32[$262>>2] = $261;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 4:  {
  $274 = (($1) + 68|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = ($275|0)==(0|0);
  if (!($276)) {
   $277 = (($1) + 12|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (_sweeplist($L,$275,80)|0);
   HEAP32[$274>>2] = $279;
   $280 = HEAP32[$277>>2]|0;
   $281 = (($280) - ($278))|0;
   $282 = (($1) + 20|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = (($281) + ($283))|0;
   HEAP32[$282>>2] = $284;
   $285 = ($279|0)==(0|0);
   if (!($285)) {
    $$0 = 400;
    return ($$0|0);
   }
  }
  HEAP8[$2>>0] = 5;
  HEAP32[$274>>2] = 0;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 6:  {
  $320 = (($1) + 96|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = ($321|0)==(0|0);
  if (!($322)) {
   $323 = (($1) + 62|0);
   $324 = HEAP8[$323>>0]|0;
   $325 = ($324<<24>>24)==(1);
   if (!($325)) {
    $$pre$pre$i = (($1) + 120|0);
    $i$04$i = 0;
    while(1) {
     $326 = HEAP32[$$pre$pre$i>>2]|0;
     $327 = ($i$04$i>>>0)<($326>>>0);
     if (!($327)) {
      $$lcssa56 = $326;$i$04$i$lcssa = $i$04$i;
      label = 146;
      break;
     }
     _GCTM($L,1);
     $328 = (($i$04$i) + 1)|0;
     $329 = HEAP32[$320>>2]|0;
     $330 = ($329|0)==(0|0);
     if ($330) {
      $$lcssa58 = $328;
      label = 147;
      break;
     } else {
      $i$04$i = $328;
     }
    }
    if ((label|0) == 146) {
     $331 = $$lcssa56 << 1;
     $332 = $331;$i$02$i = $i$04$i$lcssa;
    }
    else if ((label|0) == 147) {
     $332 = 0;$i$02$i = $$lcssa58;
    }
    HEAP32[$$pre$pre$i>>2] = $332;
    $333 = ($i$02$i*5)|0;
    $$0 = $333;
    return ($$0|0);
   }
  }
  HEAP8[$2>>0] = 7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 7:  {
  $5 = (($1) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 << 2;
  $8 = (($1) + 16|0);
  HEAP32[$8>>2] = $7;
  $9 = (($1) + 76|0);
  $10 = (($1) + 136|0);
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 5|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 3;
  $15 = ($14<<24>>24)==(0);
  if (!($15)) {
   _reallymarkobject($1,$11);
  }
  $16 = (($1) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 64;
  $19 = ($18|0)==(0);
  if (!($19)) {
   $20 = (($1) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 5|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 & 3;
   $25 = ($24<<24>>24)==(0);
   if (!($25)) {
    _reallymarkobject($1,$21);
   }
  }
  _markmt($1);
  $26 = (($1) + 96|0);
  $o$01$i$i = HEAP32[$26>>2]|0;
  $27 = ($o$01$i$i|0)==(0|0);
  if (!($27)) {
   $o$02$i$i = $o$01$i$i;
   while(1) {
    $28 = (($o$02$i$i) + 5|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 & 3;
    $31 = ($30<<24>>24)==(0);
    if (!($31)) {
     _reallymarkobject($1,$o$02$i$i);
    }
    $o$0$i$i = HEAP32[$o$02$i$i>>2]|0;
    $32 = ($o$0$i$i|0)==(0|0);
    if ($32) {
     break;
    } else {
     $o$02$i$i = $o$0$i$i;
    }
   }
  }
  HEAP8[$2>>0] = 0;
  $33 = HEAP32[$8>>2]|0;
  $$0 = $33;
  return ($$0|0);
  break;
 }
 case 0:  {
  $34 = (($1) + 16|0);
  HEAP32[$34>>2] = 0;
  _propagatemark($1);
  $35 = (($1) + 76|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   HEAP8[$2>>0] = 1;
  }
  $38 = HEAP32[$34>>2]|0;
  $$0 = $38;
  return ($$0|0);
  break;
 }
 case 1:  {
  $39 = (($1) + 76|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $45 = $1;
  } else {
   while(1) {
    _propagatemark($1);
    $42 = HEAP32[$39>>2]|0;
    $43 = ($42|0)==(0|0);
    if ($43) {
     break;
    }
   }
   $$pre = HEAP32[$0>>2]|0;
   $45 = $$pre;
  }
  $44 = (($45) + 80|0);
  $46 = HEAP32[$44>>2]|0;
  $47 = (($45) + 61|0);
  HEAP8[$47>>0] = 8;
  $48 = (($45) + 16|0);
  HEAP32[$48>>2] = 0;
  $49 = (($L) + 5|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 & 3;
  $52 = ($51<<24>>24)==(0);
  if (!($52)) {
   _reallymarkobject($45,$L);
  }
  $53 = (($45) + 48|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 & 64;
  $56 = ($55|0)==(0);
  if (!($56)) {
   $57 = (($45) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 5|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 & 3;
   $62 = ($61<<24>>24)==(0);
   if (!($62)) {
    _reallymarkobject($45,$58);
   }
  }
  _markmt($45);
  $63 = (($45) + 104|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  do {
   if (!($65)) {
    $334 = $64;$p$0$ph5$i$i = $63;
    L81: while(1) {
     $69 = $334;
     while(1) {
      $68 = (($69) + 5|0);
      $70 = HEAP8[$68>>0]|0;
      $71 = $70 & 7;
      $72 = ($71<<24>>24)==(0);
      $73 = (($69) + 32|0);
      if ($72) {
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(0|0);
       if (!($75)) {
        $$lcssa53 = $69;
        break;
       }
      }
      $79 = (($69) + 40|0);
      $80 = HEAP32[$79>>2]|0;
      HEAP32[$p$0$ph5$i$i>>2] = $80;
      HEAP32[$79>>2] = $69;
      $uv$02$i$i = HEAP32[$73>>2]|0;
      $81 = ($uv$02$i$i|0)==(0|0);
      if (!($81)) {
       $uv$03$i$i = $uv$02$i$i;
       while(1) {
        $82 = (($uv$03$i$i) + 8|0);
        $83 = (($82) + 4|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($84|0)==(0);
        if (!($85)) {
         $86 = HEAP32[$uv$03$i$i>>2]|0;
         $87 = (($86) + 8|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $88 & 64;
         $90 = ($89|0)==(0);
         if (!($90)) {
          $91 = HEAP32[$86>>2]|0;
          $92 = (($91) + 5|0);
          $93 = HEAP8[$92>>0]|0;
          $94 = $93 & 3;
          $95 = ($94<<24>>24)==(0);
          if (!($95)) {
           _reallymarkobject($45,$91);
          }
         }
         HEAP32[$83>>2] = 0;
        }
        $uv$0$i$i = HEAP32[$82>>2]|0;
        $96 = ($uv$0$i$i|0)==(0|0);
        if ($96) {
         break;
        } else {
         $uv$03$i$i = $uv$0$i$i;
        }
       }
      }
      $66 = HEAP32[$p$0$ph5$i$i>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       label = 42;
       break L81;
      } else {
       $69 = $66;
      }
     }
     $76 = (($$lcssa53) + 40|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      label = 43;
      break;
     } else {
      $334 = $77;$p$0$ph5$i$i = $76;
     }
    }
    if ((label|0) == 42) {
     break;
    }
    else if ((label|0) == 43) {
     break;
    }
   }
  } while(0);
  $97 = (($45) + 76|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0|0);
  if (!($99)) {
   while(1) {
    _propagatemark($45);
    $100 = HEAP32[$97>>2]|0;
    $101 = ($100|0)==(0|0);
    if ($101) {
     break;
    }
   }
  }
  $102 = HEAP32[$48>>2]|0;
  HEAP32[$97>>2] = $46;
  $103 = ($46|0)==(0|0);
  if (!($103)) {
   while(1) {
    _propagatemark($45);
    $104 = HEAP32[$97>>2]|0;
    $105 = ($104|0)==(0|0);
    if ($105) {
     break;
    }
   }
  }
  HEAP32[$48>>2] = 0;
  $106 = (($45) + 88|0);
  while(1) {
   $107 = HEAP32[$106>>2]|0;
   HEAP32[$106>>2] = 0;
   $changed$0$ph$i$i = 0;$next$0$ph$i$i = $107;
   L120: while(1) {
    $next$0$i$i = $next$0$ph$i$i;
    while(1) {
     $108 = ($next$0$i$i|0)==(0|0);
     if ($108) {
      $changed$0$ph$i$i$lcssa = $changed$0$ph$i$i;
      break L120;
     }
     $109 = (($next$0$i$i) + 28|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (_traverseephemeron($45,$next$0$i$i)|0);
     $112 = ($111|0)==(0);
     if ($112) {
      $next$0$i$i = $110;
     } else {
      $$lcssa52 = $110;
      break;
     }
    }
    $113 = HEAP32[$97>>2]|0;
    $114 = ($113|0)==(0|0);
    if (!($114)) {
     while(1) {
      _propagatemark($45);
      $115 = HEAP32[$97>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       break;
      }
     }
    }
    $changed$0$ph$i$i = 1;$next$0$ph$i$i = $$lcssa52;
   }
   $117 = ($changed$0$ph$i$i$lcssa|0)==(0);
   if ($117) {
    break;
   }
  }
  $118 = (($45) + 84|0);
  $119 = HEAP32[$118>>2]|0;
  _clearvalues($45,$119,0);
  $120 = (($45) + 92|0);
  $121 = HEAP32[$120>>2]|0;
  _clearvalues($45,$121,0);
  $122 = HEAP32[$118>>2]|0;
  $123 = HEAP32[$120>>2]|0;
  $124 = HEAP32[$48>>2]|0;
  $125 = (($45) + 96|0);
  $$0$i$i$i = $125;
  while(1) {
   $126 = HEAP32[$$0$i$i$i>>2]|0;
   $127 = ($126|0)==(0|0);
   if ($127) {
    $$0$i$i$i$lcssa = $$0$i$i$i;
    break;
   } else {
    $$0$i$i$i = $126;
   }
  }
  $128 = (($124) + ($102))|0;
  $129 = (($45) + 72|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)==(0|0);
  do {
   if (!($131)) {
    $335 = $130;$lastnext$0$ph5$i$i = $$0$i$i$i$lcssa;$p$0$ph4$i$i = $129;
    L139: while(1) {
     $134 = $335;$lastnext$03$i$i = $lastnext$0$ph5$i$i;
     while(1) {
      $133 = (($134) + 5|0);
      $135 = HEAP8[$133>>0]|0;
      $136 = $135 & 3;
      $137 = ($136<<24>>24)==(0);
      $138 = HEAP32[$134>>2]|0;
      if ($137) {
       $$lcssa48 = $134;$$lcssa50 = $138;$lastnext$03$i$i$lcssa = $lastnext$03$i$i;
       break;
      }
      HEAP32[$p$0$ph4$i$i>>2] = $138;
      $139 = HEAP32[$lastnext$03$i$i>>2]|0;
      HEAP32[$134>>2] = $139;
      HEAP32[$lastnext$03$i$i>>2] = $134;
      $140 = HEAP32[$p$0$ph4$i$i>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       label = 71;
       break L139;
      } else {
       $lastnext$03$i$i$phi = $134;$134 = $140;$lastnext$03$i$i = $lastnext$03$i$i$phi;
      }
     }
     $132 = ($$lcssa50|0)==(0|0);
     if ($132) {
      label = 72;
      break;
     } else {
      $335 = $$lcssa50;$lastnext$0$ph5$i$i = $lastnext$03$i$i$lcssa;$p$0$ph4$i$i = $$lcssa48;
     }
    }
    if ((label|0) == 71) {
     break;
    }
    else if ((label|0) == 72) {
     break;
    }
   }
  } while(0);
  $142 = (($45) + 120|0);
  HEAP32[$142>>2] = 1;
  $o$01$i$i2 = HEAP32[$125>>2]|0;
  $143 = ($o$01$i$i2|0)==(0|0);
  if (!($143)) {
   $o$02$i$i3 = $o$01$i$i2;
   while(1) {
    $144 = (($o$02$i$i3) + 5|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145 & 3;
    $147 = ($146<<24>>24)==(0);
    if (!($147)) {
     _reallymarkobject($45,$o$02$i$i3);
    }
    $o$0$i$i4 = HEAP32[$o$02$i$i3>>2]|0;
    $148 = ($o$0$i$i4|0)==(0|0);
    if ($148) {
     break;
    } else {
     $o$02$i$i3 = $o$0$i$i4;
    }
   }
  }
  $149 = HEAP32[$97>>2]|0;
  $150 = ($149|0)==(0|0);
  if (!($150)) {
   while(1) {
    _propagatemark($45);
    $151 = HEAP32[$97>>2]|0;
    $152 = ($151|0)==(0|0);
    if ($152) {
     break;
    }
   }
  }
  HEAP32[$48>>2] = 0;
  while(1) {
   $153 = HEAP32[$106>>2]|0;
   HEAP32[$106>>2] = 0;
   $changed$0$ph$i7$i = 0;$next$0$ph$i8$i = $153;
   L166: while(1) {
    $next$0$i10$i = $next$0$ph$i8$i;
    while(1) {
     $154 = ($next$0$i10$i|0)==(0|0);
     if ($154) {
      $changed$0$ph$i7$i$lcssa = $changed$0$ph$i7$i;
      break L166;
     }
     $155 = (($next$0$i10$i) + 28|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (_traverseephemeron($45,$next$0$i10$i)|0);
     $158 = ($157|0)==(0);
     if ($158) {
      $next$0$i10$i = $156;
     } else {
      $$lcssa46 = $156;
      break;
     }
    }
    $159 = HEAP32[$97>>2]|0;
    $160 = ($159|0)==(0|0);
    if (!($160)) {
     while(1) {
      _propagatemark($45);
      $161 = HEAP32[$97>>2]|0;
      $162 = ($161|0)==(0|0);
      if ($162) {
       break;
      }
     }
    }
    $changed$0$ph$i7$i = 1;$next$0$ph$i8$i = $$lcssa46;
   }
   $163 = ($changed$0$ph$i7$i$lcssa|0)==(0);
   if ($163) {
    break;
   }
  }
  $164 = HEAP32[$106>>2]|0;
  $165 = ($164|0)==(0|0);
  if (!($165)) {
   $$02$i$i = $164;
   while(1) {
    $166 = (($$02$i$i) + 7|0);
    $167 = HEAP8[$166>>0]|0;
    $168 = $167&255;
    $169 = 1 << $168;
    $170 = (($$02$i$i) + 16|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + ($169<<5)|0);
    $173 = ($167<<24>>24)==(31);
    if (!($173)) {
     $n$01$i$i = $171;
     while(1) {
      $174 = (($n$01$i$i) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==(0);
      do {
       if (!($176)) {
        $177 = (($n$01$i$i) + 24|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = $178 & 64;
        $180 = ($179|0)==(0);
        if (!($180)) {
         $181 = (($n$01$i$i) + 16|0);
         $182 = $178 & 15;
         $183 = ($182|0)==(4);
         $184 = HEAP32[$181>>2]|0;
         $185 = (($184) + 5|0);
         $186 = HEAP8[$185>>0]|0;
         $187 = $186 & 3;
         $188 = ($187<<24>>24)==(0);
         if ($183) {
          if ($188) {
           break;
          }
          _reallymarkobject($45,$184);
          break;
         } else {
          if ($188) {
           break;
          }
          HEAP32[$174>>2] = 0;
          HEAP32[$177>>2] = 10;
          break;
         }
        }
       }
      } while(0);
      $189 = (($n$01$i$i) + 32|0);
      $190 = ($189>>>0)<($172>>>0);
      if ($190) {
       $n$01$i$i = $189;
      } else {
       break;
      }
     }
    }
    $191 = (($$02$i$i) + 28|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)==(0|0);
    if ($193) {
     break;
    } else {
     $$02$i$i = $192;
    }
   }
  }
  $194 = HEAP32[$120>>2]|0;
  $195 = ($194|0)==(0|0);
  if (!($195)) {
   $$02$i16$i = $194;
   while(1) {
    $196 = (($$02$i16$i) + 7|0);
    $197 = HEAP8[$196>>0]|0;
    $198 = $197&255;
    $199 = 1 << $198;
    $200 = (($$02$i16$i) + 16|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = (($201) + ($199<<5)|0);
    $203 = ($197<<24>>24)==(31);
    if (!($203)) {
     $n$01$i18$i = $201;
     while(1) {
      $204 = (($n$01$i18$i) + 8|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==(0);
      do {
       if (!($206)) {
        $207 = (($n$01$i18$i) + 24|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = $208 & 64;
        $210 = ($209|0)==(0);
        if (!($210)) {
         $211 = (($n$01$i18$i) + 16|0);
         $212 = $208 & 15;
         $213 = ($212|0)==(4);
         $214 = HEAP32[$211>>2]|0;
         $215 = (($214) + 5|0);
         $216 = HEAP8[$215>>0]|0;
         $217 = $216 & 3;
         $218 = ($217<<24>>24)==(0);
         if ($213) {
          if ($218) {
           break;
          }
          _reallymarkobject($45,$214);
          break;
         } else {
          if ($218) {
           break;
          }
          HEAP32[$204>>2] = 0;
          HEAP32[$207>>2] = 10;
          break;
         }
        }
       }
      } while(0);
      $219 = (($n$01$i18$i) + 32|0);
      $220 = ($219>>>0)<($202>>>0);
      if ($220) {
       $n$01$i18$i = $219;
      } else {
       break;
      }
     }
    }
    $221 = (($$02$i16$i) + 28|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ($222|0)==(0|0);
    if ($223) {
     break;
    } else {
     $$02$i16$i = $222;
    }
   }
  }
  $224 = HEAP32[$118>>2]|0;
  _clearvalues($45,$224,$122);
  $225 = HEAP32[$120>>2]|0;
  _clearvalues($45,$225,$123);
  _luaS_clearcache($45);
  $226 = (($45) + 60|0);
  $227 = HEAP8[$226>>0]|0;
  $228 = $227&255;
  $229 = $228 ^ 3;
  $230 = $229&255;
  HEAP8[$226>>0] = $230;
  $231 = HEAP32[$48>>2]|0;
  $232 = HEAP32[$0>>2]|0;
  $233 = (($232) + 61|0);
  HEAP8[$233>>0] = 2;
  $234 = (($232) + 64|0);
  $i$0$i$i = 0;
  while(1) {
   $235 = (($i$0$i$i) + 1)|0;
   $236 = (_sweeplist($L,$234,1)|0);
   $237 = ($236|0)==($234|0);
   if ($237) {
    $i$0$i$i = $235;
   } else {
    $$lcssa = $235;$$lcssa45 = $236;
    break;
   }
  }
  $238 = (($128) + ($231))|0;
  $239 = (($232) + 68|0);
  HEAP32[$239>>2] = $$lcssa45;
  $240 = (($1) + 8|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($1) + 12|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($243) + ($241))|0;
  $245 = (($1) + 20|0);
  HEAP32[$245>>2] = $244;
  $246 = ($$lcssa*5)|0;
  $247 = (($238) + ($246))|0;
  $$0 = $247;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _dothecall($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -32|0);
 _luaD_call($L,$2,0,0);
 return;
}
function _markmt($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 244|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   _reallymarkobject($g,$1);
  }
 }
 $7 = (($g) + 248|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = (($8) + 5|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 3;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   _reallymarkobject($g,$8);
  }
 }
 $14 = (($g) + 252|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = (($15) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 3;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   _reallymarkobject($g,$15);
  }
 }
 $21 = (($g) + 256|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = (($22) + 5|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 & 3;
  $27 = ($26<<24>>24)==(0);
  if (!($27)) {
   _reallymarkobject($g,$22);
  }
 }
 $28 = (($g) + 260|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = (($29) + 5|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 & 3;
  $34 = ($33<<24>>24)==(0);
  if (!($34)) {
   _reallymarkobject($g,$29);
  }
 }
 $35 = (($g) + 264|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = (($36) + 5|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & 3;
  $41 = ($40<<24>>24)==(0);
  if (!($41)) {
   _reallymarkobject($g,$36);
  }
 }
 $42 = (($g) + 268|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = (($43) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & 3;
  $48 = ($47<<24>>24)==(0);
  if (!($48)) {
   _reallymarkobject($g,$43);
  }
 }
 $49 = (($g) + 272|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = (($50) + 5|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 & 3;
  $55 = ($54<<24>>24)==(0);
  if (!($55)) {
   _reallymarkobject($g,$50);
  }
 }
 $56 = (($g) + 276|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if ($58) {
  return;
 }
 $59 = (($57) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 & 3;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  return;
 }
 _reallymarkobject($g,$57);
 return;
}
function _propagatemark($g) {
 $g = $g|0;
 var $$lcssa = 0, $$lcssa$i = 0, $$lcssa$i12 = 0, $$lcssa$i4 = 0, $$lcssa21 = 0, $$lcssa22 = 0, $$lcssa23 = 0, $$lcssa24 = 0, $$ph8$i = 0, $$ph9$i = 0, $$pr$pre$i = 0, $$pr7$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i3 = 0, $$pre$i6 = 0, $$pre$i8 = 0, $$pre20$i = 0, $$pre21$i = 0, $$pre22$i = 0;
 var $$pre23$i = 0, $$pre7$i$i = 0, $$pre8$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $hasclears$0$lcssa$i$i = 0, $hasclears$04$i$i = 0, $hasclears$1$i$i = 0, $hasclears$1$i$i$lcssa = 0, $i$01$i = 0, $i$01$i1 = 0, $i$016$i = 0, $i$03$i$i = 0, $i$113$i = 0, $i$210$i = 0, $i$39$i = 0, $n$01$i$i = 0, $n$02$i$i = 0, $o$0$lcssa$i = 0, $o$02$i = 0, $o$11$i = 0, $or$cond$i = 0, $phitmp1$i$i = 0, $size$0 = 0, $tmp$i = 0;
 var $tmp1$i = 0, $tmp2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 4;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 switch ($9|0) {
 case 6:  {
  $162 = (($1) + 8|0);
  $163 = HEAP32[$162>>2]|0;
  HEAP32[$0>>2] = $163;
  $164 = (($1) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = ($165|0)==(0|0);
  if (!($166)) {
   $167 = (($165) + 5|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168 & 3;
   $170 = ($169<<24>>24)==(0);
   if (!($170)) {
    _reallymarkobject($g,$165);
   }
  }
  $171 = (($1) + 6|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&255;
  $174 = ($172<<24>>24)==(0);
  if ($174) {
   $$lcssa$i = $173;
  } else {
   $175 = (($g) + 61|0);
   $369 = $172;$i$01$i = 0;
   while(1) {
    $176 = ((($1) + ($i$01$i<<2)|0) + 16|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)==(0|0);
    do {
     if ($178) {
      $196 = $369;
     } else {
      $179 = HEAP32[$177>>2]|0;
      $180 = (($177) + 8|0);
      $181 = ($179|0)==($180|0);
      if (!($181)) {
       $182 = HEAP8[$175>>0]|0;
       $183 = ($182<<24>>24)==(8);
       if (!($183)) {
        $184 = (($180) + 4|0);
        HEAP32[$184>>2] = 1;
        $196 = $369;
        break;
       }
      }
      $185 = (($179) + 8|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 & 64;
      $188 = ($187|0)==(0);
      if ($188) {
       $196 = $369;
      } else {
       $189 = HEAP32[$179>>2]|0;
       $190 = (($189) + 5|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = $191 & 3;
       $193 = ($192<<24>>24)==(0);
       if ($193) {
        $196 = $369;
       } else {
        _reallymarkobject($g,$189);
        $$pre$i = HEAP8[$171>>0]|0;
        $196 = $$pre$i;
       }
      }
     }
    } while(0);
    $194 = (($i$01$i) + 1)|0;
    $195 = $196&255;
    $197 = ($194|0)<($195|0);
    if ($197) {
     $369 = $196;$i$01$i = $194;
    } else {
     $$lcssa = $195;
     break;
    }
   }
   $$lcssa$i = $$lcssa;
  }
  $198 = $$lcssa$i << 2;
  $199 = (($198) + 16)|0;
  $size$0 = $199;
  break;
 }
 case 38:  {
  $200 = (($1) + 8|0);
  $201 = HEAP32[$200>>2]|0;
  HEAP32[$0>>2] = $201;
  $202 = (($1) + 6|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = ($203<<24>>24)==(0);
  if ($205) {
   $$lcssa$i4 = $204;
  } else {
   $370 = $203;$i$01$i1 = 0;
   while(1) {
    $206 = ((($1) + ($i$01$i1<<4)|0) + 24|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $207 & 64;
    $209 = ($208|0)==(0);
    if ($209) {
     $218 = $370;
    } else {
     $210 = ((($1) + ($i$01$i1<<4)|0) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = (($211) + 5|0);
     $213 = HEAP8[$212>>0]|0;
     $214 = $213 & 3;
     $215 = ($214<<24>>24)==(0);
     if ($215) {
      $218 = $370;
     } else {
      _reallymarkobject($g,$211);
      $$pre$i3 = HEAP8[$202>>0]|0;
      $218 = $$pre$i3;
     }
    }
    $216 = (($i$01$i1) + 1)|0;
    $217 = $218&255;
    $219 = ($216|0)<($217|0);
    if ($219) {
     $370 = $218;$i$01$i1 = $216;
    } else {
     $$lcssa21 = $217;
     break;
    }
   }
   $$lcssa$i4 = $$lcssa21;
  }
  $220 = $$lcssa$i4 << 4;
  $221 = (($220) + 16)|0;
  $size$0 = $221;
  break;
 }
 case 8:  {
  $222 = (($1) + 36|0);
  $223 = HEAP32[$222>>2]|0;
  HEAP32[$0>>2] = $223;
  $224 = (($g) + 80|0);
  $225 = HEAP32[$224>>2]|0;
  HEAP32[$222>>2] = $225;
  HEAP32[$224>>2] = $1;
  $226 = $4 & 251;
  $227 = $226&255;
  HEAP8[$2>>0] = $227;
  $228 = (($1) + 28|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($229|0)==(0|0);
  if ($230) {
   $size$0 = 1;
  } else {
   $231 = (($1) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ($229>>>0)<($232>>>0);
   if ($233) {
    $371 = $232;$o$02$i = $229;
    while(1) {
     $234 = (($o$02$i) + 8|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = $235 & 64;
     $237 = ($236|0)==(0);
     if ($237) {
      $245 = $371;
     } else {
      $238 = HEAP32[$o$02$i>>2]|0;
      $239 = (($238) + 5|0);
      $240 = HEAP8[$239>>0]|0;
      $241 = $240 & 3;
      $242 = ($241<<24>>24)==(0);
      if ($242) {
       $245 = $371;
      } else {
       _reallymarkobject($g,$238);
       $$pre$i6 = HEAP32[$231>>2]|0;
       $245 = $$pre$i6;
      }
     }
     $243 = (($o$02$i) + 16|0);
     $244 = ($243>>>0)<($245>>>0);
     if ($244) {
      $371 = $245;$o$02$i = $243;
     } else {
      $$lcssa22 = $243;
      break;
     }
    }
    $o$0$lcssa$i = $$lcssa22;
   } else {
    $o$0$lcssa$i = $229;
   }
   $246 = (($g) + 61|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = ($247<<24>>24)==(8);
   if ($248) {
    $249 = HEAP32[$228>>2]|0;
    $250 = (($1) + 92|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = (($249) + ($251<<4)|0);
    $253 = ($o$0$lcssa$i>>>0)<($252>>>0);
    if ($253) {
     $o$11$i = $o$0$lcssa$i;
     while(1) {
      $254 = (($o$11$i) + 8|0);
      HEAP32[$254>>2] = 0;
      $255 = (($o$11$i) + 16|0);
      $256 = ($255>>>0)<($252>>>0);
      if ($256) {
       $o$11$i = $255;
      } else {
       break;
      }
     }
    }
    $257 = (($1) + 40|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ($258|0)==($1|0);
    if ($259) {
     $260 = (($1) + 32|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = ($261|0)==(0|0);
     if (!($262)) {
      $263 = (($g) + 104|0);
      $264 = HEAP32[$263>>2]|0;
      HEAP32[$257>>2] = $264;
      HEAP32[$263>>2] = $1;
     }
    }
   } else {
    $265 = (($g) + 62|0);
    $266 = HEAP8[$265>>0]|0;
    $267 = ($266<<24>>24)==(1);
    if (!($267)) {
     _luaD_shrinkstack($1);
    }
   }
   $268 = (($1) + 92|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $269 << 4;
   $271 = (($270) + 112)|0;
   $size$0 = $271;
  }
  break;
 }
 case 9:  {
  $272 = (($1) + 76|0);
  $273 = HEAP32[$272>>2]|0;
  HEAP32[$0>>2] = $273;
  $274 = (($1) + 68|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = ($275|0)==(0|0);
  if (!($276)) {
   $277 = (($275) + 5|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278 & 3;
   $280 = ($279<<24>>24)==(0);
   if (!($280)) {
    HEAP32[$274>>2] = 0;
   }
  }
  $281 = (($1) + 72|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = ($282|0)==(0|0);
  if (!($283)) {
   $284 = (($282) + 5|0);
   $285 = HEAP8[$284>>0]|0;
   $286 = $285 & 3;
   $287 = ($286<<24>>24)==(0);
   if (!($287)) {
    _reallymarkobject($g,$282);
   }
  }
  $288 = (($1) + 16|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)>(0);
  if ($290) {
   $291 = (($1) + 44|0);
   $372 = $289;$i$016$i = 0;
   while(1) {
    $296 = HEAP32[$291>>2]|0;
    $297 = ((($296) + ($i$016$i<<4)|0) + 8|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = $298 & 64;
    $300 = ($299|0)==(0);
    if ($300) {
     $309 = $372;
    } else {
     $301 = (($296) + ($i$016$i<<4)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = (($302) + 5|0);
     $304 = HEAP8[$303>>0]|0;
     $305 = $304 & 3;
     $306 = ($305<<24>>24)==(0);
     if ($306) {
      $309 = $372;
     } else {
      _reallymarkobject($g,$302);
      $$pre$i8 = HEAP32[$288>>2]|0;
      $309 = $$pre$i8;
     }
    }
    $307 = (($i$016$i) + 1)|0;
    $308 = ($307|0)<($309|0);
    if ($308) {
     $372 = $309;$i$016$i = $307;
    } else {
     break;
    }
   }
  }
  $292 = (($1) + 12|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = ($293|0)>(0);
  if ($294) {
   $295 = (($1) + 64|0);
   $373 = $293;$i$113$i = 0;
   while(1) {
    $314 = HEAP32[$295>>2]|0;
    $315 = (($314) + ($i$113$i<<3)|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = ($316|0)==(0|0);
    if ($317) {
     $324 = $373;
    } else {
     $318 = (($316) + 5|0);
     $319 = HEAP8[$318>>0]|0;
     $320 = $319 & 3;
     $321 = ($320<<24>>24)==(0);
     if ($321) {
      $324 = $373;
     } else {
      _reallymarkobject($g,$316);
      $$pre20$i = HEAP32[$292>>2]|0;
      $324 = $$pre20$i;
     }
    }
    $322 = (($i$113$i) + 1)|0;
    $323 = ($322|0)<($324|0);
    if ($323) {
     $373 = $324;$i$113$i = $322;
    } else {
     break;
    }
   }
  }
  $310 = (($1) + 28|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = ($311|0)>(0);
  if ($312) {
   $313 = (($1) + 52|0);
   $375 = $311;$i$210$i = 0;
   while(1) {
    $329 = HEAP32[$313>>2]|0;
    $330 = (($329) + ($i$210$i<<2)|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ($331|0)==(0|0);
    if ($332) {
     $339 = $375;
    } else {
     $333 = (($331) + 5|0);
     $334 = HEAP8[$333>>0]|0;
     $335 = $334 & 3;
     $336 = ($335<<24>>24)==(0);
     if ($336) {
      $339 = $375;
     } else {
      _reallymarkobject($g,$331);
      $$pre21$i = HEAP32[$310>>2]|0;
      $339 = $$pre21$i;
     }
    }
    $337 = (($i$210$i) + 1)|0;
    $338 = ($337|0)<($339|0);
    if ($338) {
     $375 = $339;$i$210$i = $337;
    } else {
     $$lcssa24 = $339;
     break;
    }
   }
   $374 = $$lcssa24;
  } else {
   $374 = $311;
  }
  $325 = (($1) + 32|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($326|0)>(0);
  if ($327) {
   $328 = (($1) + 60|0);
   $376 = $326;$i$39$i = 0;
   while(1) {
    $340 = HEAP32[$328>>2]|0;
    $341 = (($340) + (($i$39$i*12)|0)|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = ($342|0)==(0|0);
    if ($343) {
     $350 = $376;
    } else {
     $344 = (($342) + 5|0);
     $345 = HEAP8[$344>>0]|0;
     $346 = $345 & 3;
     $347 = ($346<<24>>24)==(0);
     if ($347) {
      $350 = $376;
     } else {
      _reallymarkobject($g,$342);
      $$pre22$i = HEAP32[$325>>2]|0;
      $350 = $$pre22$i;
     }
    }
    $348 = (($i$39$i) + 1)|0;
    $349 = ($348|0)<($350|0);
    if ($349) {
     $376 = $350;$i$39$i = $348;
    } else {
     $$lcssa23 = $350;
     break;
    }
   }
   $$pre23$i = HEAP32[$310>>2]|0;
   $$lcssa$i12 = $$lcssa23;$360 = $$pre23$i;
  } else {
   $$lcssa$i12 = $326;$360 = $374;
  }
  $351 = (($1) + 20|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = HEAP32[$288>>2]|0;
  $354 = $353 << 4;
  $355 = (($1) + 24|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = ($$lcssa$i12*12)|0;
  $358 = HEAP32[$292>>2]|0;
  $359 = $358 << 3;
  $tmp$i = (($352) + ($360))|0;
  $tmp1$i = (($tmp$i) + ($356))|0;
  $tmp2$i = $tmp1$i << 2;
  $361 = (($357) + 80)|0;
  $362 = (($361) + ($354))|0;
  $363 = (($362) + ($359))|0;
  $364 = (($363) + ($tmp2$i))|0;
  $size$0 = $364;
  break;
 }
 case 5:  {
  $10 = (($1) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$0>>2] = $11;
  $12 = (($1) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 35;
   } else {
    $15 = (($13) + 6|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 & 8;
    $18 = ($17<<24>>24)==(0);
    if ($18) {
     $19 = (($g) + 160|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_luaT_gettm($13,3,$20)|0);
     $$pr$pre$i = HEAP32[$12>>2]|0;
     $22 = ($$pr$pre$i|0)==(0|0);
     if ($22) {
      $$ph9$i = $21;
     } else {
      $$ph8$i = $21;$$pr7$i = $$pr$pre$i;
      label = 5;
     }
    } else {
     $$ph8$i = 0;$$pr7$i = $13;
     label = 5;
    }
    if ((label|0) == 5) {
     $23 = (($$pr7$i) + 5|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24 & 3;
     $26 = ($25<<24>>24)==(0);
     if ($26) {
      $$ph9$i = $$ph8$i;
     } else {
      _reallymarkobject($g,$$pr7$i);
      $$ph9$i = $$ph8$i;
     }
    }
    $27 = ($$ph9$i|0)==(0|0);
    if ($27) {
     label = 35;
    } else {
     $28 = (($$ph9$i) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 & 15;
     $31 = ($30|0)==(4);
     if ($31) {
      $32 = HEAP32[$$ph9$i>>2]|0;
      $33 = (($32) + 16|0);
      $34 = (_strchr($33,107)|0);
      $35 = (_strchr($33,118)|0);
      $36 = ($34|0)!=(0|0);
      $37 = ($35|0)!=(0|0);
      $or$cond$i = $36 | $37;
      if ($or$cond$i) {
       $38 = HEAP8[$2>>0]|0;
       $39 = $38&255;
       $40 = $39 & 251;
       $41 = $40&255;
       HEAP8[$2>>0] = $41;
       if ($36) {
        if ($37) {
         $95 = (($g) + 92|0);
         $96 = HEAP32[$95>>2]|0;
         HEAP32[$10>>2] = $96;
         HEAP32[$95>>2] = $1;
         break;
        } else {
         (_traverseephemeron($g,$1)|0);
         break;
        }
       }
       $42 = (($1) + 7|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $43&255;
       $45 = 1 << $44;
       $46 = (($1) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (($47) + ($45<<5)|0);
       $49 = (($1) + 8|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)!=(0);
       $52 = $51&1;
       $53 = ($43<<24>>24)==(31);
       if ($53) {
        $hasclears$0$lcssa$i$i = $52;
       } else {
        $hasclears$04$i$i = $52;$n$02$i$i = $47;
        while(1) {
         $54 = (($n$02$i$i) + 8|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($55|0)==(0);
         $57 = (($n$02$i$i) + 24|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = $58 & 64;
         $60 = ($59|0)==(0);
         do {
          if ($56) {
           if ($60) {
            $hasclears$1$i$i = $hasclears$04$i$i;
           } else {
            $61 = (($n$02$i$i) + 16|0);
            $62 = HEAP32[$61>>2]|0;
            $63 = (($62) + 5|0);
            $64 = HEAP8[$63>>0]|0;
            $65 = $64 & 3;
            $66 = ($65<<24>>24)==(0);
            if ($66) {
             $hasclears$1$i$i = $hasclears$04$i$i;
            } else {
             HEAP32[$57>>2] = 10;
             $hasclears$1$i$i = $hasclears$04$i$i;
            }
           }
          } else {
           if (!($60)) {
            $67 = (($n$02$i$i) + 16|0);
            $68 = HEAP32[$67>>2]|0;
            $69 = (($68) + 5|0);
            $70 = HEAP8[$69>>0]|0;
            $71 = $70 & 3;
            $72 = ($71<<24>>24)==(0);
            if (!($72)) {
             _reallymarkobject($g,$68);
            }
           }
           $73 = ($hasclears$04$i$i|0)==(0);
           if ($73) {
            $74 = HEAP32[$54>>2]|0;
            $75 = $74 & 64;
            $76 = ($75|0)==(0);
            if ($76) {
             $hasclears$1$i$i = 0;
            } else {
             $77 = $74 & 15;
             $78 = ($77|0)==(4);
             $79 = HEAP32[$n$02$i$i>>2]|0;
             $80 = (($79) + 5|0);
             $81 = HEAP8[$80>>0]|0;
             $82 = $81 & 3;
             $83 = ($82<<24>>24)==(0);
             if (!($78)) {
              $84 = $83&1;
              $phitmp1$i$i = $84 ^ 1;
              $hasclears$1$i$i = $phitmp1$i$i;
              break;
             }
             if ($83) {
              $hasclears$1$i$i = 0;
             } else {
              _reallymarkobject($g,$79);
              $hasclears$1$i$i = 0;
             }
            }
           } else {
            $hasclears$1$i$i = $hasclears$04$i$i;
           }
          }
         } while(0);
         $85 = (($n$02$i$i) + 32|0);
         $86 = ($85>>>0)<($48>>>0);
         if ($86) {
          $hasclears$04$i$i = $hasclears$1$i$i;$n$02$i$i = $85;
         } else {
          $hasclears$1$i$i$lcssa = $hasclears$1$i$i;
          break;
         }
        }
        $hasclears$0$lcssa$i$i = $hasclears$1$i$i$lcssa;
       }
       $87 = (($g) + 61|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        $90 = (($g) + 80|0);
        $91 = HEAP32[$90>>2]|0;
        HEAP32[$10>>2] = $91;
        HEAP32[$90>>2] = $1;
        break;
       }
       $92 = ($hasclears$0$lcssa$i$i|0)==(0);
       if (!($92)) {
        $93 = (($g) + 84|0);
        $94 = HEAP32[$93>>2]|0;
        HEAP32[$10>>2] = $94;
        HEAP32[$93>>2] = $1;
       }
      } else {
       label = 35;
      }
     } else {
      label = 35;
     }
    }
   }
  } while(0);
  if ((label|0) == 35) {
   $97 = (($1) + 7|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = 1 << $99;
   $101 = (($1) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102) + ($100<<5)|0);
   $104 = (($1) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $122 = $102;
   } else {
    $107 = (($1) + 12|0);
    $368 = $105;$i$03$i$i = 0;
    while(1) {
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($108) + ($i$03$i$i<<4)|0) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 & 64;
     $112 = ($111|0)==(0);
     if ($112) {
      $121 = $368;
     } else {
      $113 = (($108) + ($i$03$i$i<<4)|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (($114) + 5|0);
      $116 = HEAP8[$115>>0]|0;
      $117 = $116 & 3;
      $118 = ($117<<24>>24)==(0);
      if ($118) {
       $121 = $368;
      } else {
       _reallymarkobject($g,$114);
       $$pre8$i$i = HEAP32[$104>>2]|0;
       $121 = $$pre8$i$i;
      }
     }
     $119 = (($i$03$i$i) + 1)|0;
     $120 = ($119>>>0)<($121>>>0);
     if ($120) {
      $368 = $121;$i$03$i$i = $119;
     } else {
      break;
     }
    }
    $$pre$i$i = HEAP32[$101>>2]|0;
    $122 = $$pre$i$i;
   }
   $123 = ($122>>>0)<($103>>>0);
   if ($123) {
    $n$01$i$i = $122;
    while(1) {
     $124 = (($n$01$i$i) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)==(0);
     $127 = (($n$01$i$i) + 24|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $128 & 64;
     $130 = ($129|0)==(0);
     if ($126) {
      if (!($130)) {
       $131 = (($n$01$i$i) + 16|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($132) + 5|0);
       $134 = HEAP8[$133>>0]|0;
       $135 = $134 & 3;
       $136 = ($135<<24>>24)==(0);
       if (!($136)) {
        HEAP32[$127>>2] = 10;
       }
      }
     } else {
      if ($130) {
       $144 = $125;
      } else {
       $137 = (($n$01$i$i) + 16|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (($138) + 5|0);
       $140 = HEAP8[$139>>0]|0;
       $141 = $140 & 3;
       $142 = ($141<<24>>24)==(0);
       if ($142) {
        $144 = $125;
       } else {
        _reallymarkobject($g,$138);
        $$pre7$i$i = HEAP32[$124>>2]|0;
        $144 = $$pre7$i$i;
       }
      }
      $143 = $144 & 64;
      $145 = ($143|0)==(0);
      if (!($145)) {
       $146 = HEAP32[$n$01$i$i>>2]|0;
       $147 = (($146) + 5|0);
       $148 = HEAP8[$147>>0]|0;
       $149 = $148 & 3;
       $150 = ($149<<24>>24)==(0);
       if (!($150)) {
        _reallymarkobject($g,$146);
       }
      }
     }
     $151 = (($n$01$i$i) + 32|0);
     $152 = ($151>>>0)<($103>>>0);
     if ($152) {
      $n$01$i$i = $151;
     } else {
      break;
     }
    }
   }
  }
  $153 = (($1) + 8|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $154 << 4;
  $156 = (($155) + 32)|0;
  $157 = (($1) + 7|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = 32 << $159;
  $161 = (($156) + ($160))|0;
  $size$0 = $161;
  break;
 }
 default: {
  return;
 }
 }
 $365 = (($g) + 16|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = (($366) + ($size$0))|0;
 HEAP32[$365>>2] = $367;
 return;
}
function _traverseephemeron($g,$h) {
 $g = $g|0;
 $h = $h|0;
 var $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $9 = 0, $hasclears$0$lcssa = 0, $hasclears$01 = 0, $hasclears$1 = 0, $hasclears$1$lcssa = 0, $hasww$0$ = 0, $hasww$0$lcssa = 0, $hasww$03 = 0, $hasww$1 = 0, $hasww$1$lcssa = 0, $i$012 = 0, $marked$0$lcssa = 0, $marked$011 = 0, $marked$1 = 0, $marked$1$lcssa = 0, $marked$2$lcssa = 0, $marked$27 = 0, $marked$3 = 0;
 var $marked$3$lcssa = 0, $n$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = 1 << $2;
 $4 = (($h) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<5)|0);
 $7 = (($h) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $25 = $5;$marked$0$lcssa = 0;
 } else {
  $10 = (($h) + 12|0);
  $79 = $8;$i$012 = 0;$marked$011 = 0;
  while(1) {
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11) + ($i$012<<4)|0) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 64;
   $15 = ($14|0)==(0);
   if ($15) {
    $24 = $79;$marked$1 = $marked$011;
   } else {
    $16 = (($11) + ($i$012<<4)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 5|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 & 3;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $24 = $79;$marked$1 = $marked$011;
    } else {
     _reallymarkobject($g,$17);
     $$pre18 = HEAP32[$7>>2]|0;
     $24 = $$pre18;$marked$1 = 1;
    }
   }
   $22 = (($i$012) + 1)|0;
   $23 = ($22>>>0)<($24>>>0);
   if ($23) {
    $79 = $24;$i$012 = $22;$marked$011 = $marked$1;
   } else {
    $marked$1$lcssa = $marked$1;
    break;
   }
  }
  $$pre = HEAP32[$4>>2]|0;
  $25 = $$pre;$marked$0$lcssa = $marked$1$lcssa;
 }
 $26 = ($25>>>0)<($6>>>0);
 if ($26) {
  $hasclears$01 = 0;$hasww$03 = 0;$marked$27 = $marked$0$lcssa;$n$05 = $25;
  while(1) {
   $27 = (($n$05) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   $30 = (($n$05) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 64;
   $33 = ($32|0)==(0);
   L15: do {
    if ($29) {
     if ($33) {
      $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
     } else {
      $34 = (($n$05) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($35) + 5|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37 & 3;
      $39 = ($38<<24>>24)==(0);
      if ($39) {
       $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
      } else {
       HEAP32[$30>>2] = 10;
       $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
      }
     }
    } else {
     do {
      if ($33) {
       $49 = $28;
       label = 18;
      } else {
       $40 = (($n$05) + 16|0);
       $41 = $31 & 15;
       $42 = ($41|0)==(4);
       $43 = HEAP32[$40>>2]|0;
       $44 = (($43) + 5|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45 & 3;
       $47 = ($46<<24>>24)==(0);
       if ($42) {
        if ($47) {
         $49 = $28;
         label = 18;
         break;
        }
        _reallymarkobject($g,$43);
        $$pre17 = HEAP32[$27>>2]|0;
        $49 = $$pre17;
        label = 18;
        break;
       }
       $51 = $28 & 64;
       $52 = ($51|0)==(0);
       if ($47) {
        if ($52) {
         $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
         break L15;
        } else {
         break;
        }
       }
       if ($52) {
        $hasclears$1 = 1;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
        break L15;
       }
       $53 = HEAP32[$n$05>>2]|0;
       $54 = (($53) + 5|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = $55 & 3;
       $57 = ($56<<24>>24)==(0);
       $hasww$0$ = $57 ? $hasww$03 : 1;
       $hasclears$1 = 1;$hasww$1 = $hasww$0$;$marked$3 = $marked$27;
       break L15;
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      $48 = $49 & 64;
      $50 = ($48|0)==(0);
      if ($50) {
       $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
       break;
      }
     }
     $58 = HEAP32[$n$05>>2]|0;
     $59 = (($58) + 5|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 & 3;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = $marked$27;
     } else {
      _reallymarkobject($g,$58);
      $hasclears$1 = $hasclears$01;$hasww$1 = $hasww$03;$marked$3 = 1;
     }
    }
   } while(0);
   $63 = (($n$05) + 32|0);
   $64 = ($63>>>0)<($6>>>0);
   if ($64) {
    $hasclears$01 = $hasclears$1;$hasww$03 = $hasww$1;$marked$27 = $marked$3;$n$05 = $63;
   } else {
    $hasclears$1$lcssa = $hasclears$1;$hasww$1$lcssa = $hasww$1;$marked$3$lcssa = $marked$3;
    break;
   }
  }
  $hasclears$0$lcssa = $hasclears$1$lcssa;$hasww$0$lcssa = $hasww$1$lcssa;$marked$2$lcssa = $marked$3$lcssa;
 } else {
  $hasclears$0$lcssa = 0;$hasww$0$lcssa = 0;$marked$2$lcssa = $marked$0$lcssa;
 }
 $65 = (($g) + 61|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $68 = (($g) + 80|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($h) + 28|0);
  HEAP32[$70>>2] = $69;
  HEAP32[$68>>2] = $h;
  return ($marked$2$lcssa|0);
 }
 $71 = ($hasww$0$lcssa|0)==(0);
 if (!($71)) {
  $72 = (($g) + 88|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($h) + 28|0);
  HEAP32[$74>>2] = $73;
  HEAP32[$72>>2] = $h;
  return ($marked$2$lcssa|0);
 }
 $75 = ($hasclears$0$lcssa|0)==(0);
 if ($75) {
  return ($marked$2$lcssa|0);
 }
 $76 = (($g) + 92|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($h) + 28|0);
 HEAP32[$78>>2] = $77;
 HEAP32[$76>>2] = $h;
 return ($marked$2$lcssa|0);
}
function _clearvalues($g,$l,$f) {
 $g = $g|0;
 $l = $l|0;
 $f = $f|0;
 var $$06 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==($f|0);
 if ($0) {
  return;
 }
 $$06 = $l;
 while(1) {
  $1 = (($$06) + 7|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = 1 << $3;
  $5 = (($$06) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4<<5)|0);
  $8 = (($$06) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $20 = $6;
  } else {
   $11 = (($$06) + 12|0);
   $i$01 = 0;
   while(1) {
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($i$01<<4)|0);
    $14 = (_iscleared($g,$13)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = ((($12) + ($i$01<<4)|0) + 8|0);
     HEAP32[$16>>2] = 0;
    }
    $17 = (($i$01) + 1)|0;
    $18 = HEAP32[$8>>2]|0;
    $19 = ($17>>>0)<($18>>>0);
    if ($19) {
     $i$01 = $17;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$5>>2]|0;
   $20 = $$pre;
  }
  $21 = ($20>>>0)<($7>>>0);
  if ($21) {
   $n$02 = $20;
   while(1) {
    $22 = (($n$02) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if (!($24)) {
     $25 = (_iscleared($g,$n$02)|0);
     $26 = ($25|0)==(0);
     if (!($26)) {
      HEAP32[$22>>2] = 0;
      $27 = (($n$02) + 24|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $28 & 64;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $31 = (($n$02) + 16|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($32) + 5|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34 & 3;
       $36 = ($35<<24>>24)==(0);
       if (!($36)) {
        HEAP32[$27>>2] = 10;
       }
      }
     }
    }
    $37 = (($n$02) + 32|0);
    $38 = ($37>>>0)<($7>>>0);
    if ($38) {
     $n$02 = $37;
    } else {
     break;
    }
   }
  }
  $39 = (($$06) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==($f|0);
  if ($41) {
   break;
  } else {
   $$06 = $40;
  }
 }
 return;
}
function _iscleared($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $1 & 15;
 $5 = ($4|0)==(4);
 $6 = HEAP32[$o>>2]|0;
 $7 = (($6) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 if (!($5)) {
  $11 = $8&255;
  $12 = $11 & 3;
  $$0 = $12;
  return ($$0|0);
 }
 $9 = $8 & 3;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 _reallymarkobject($g,$6);
 $$0 = 0;
 return ($$0|0);
}
function _luaL_openlibs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_requiref($L,11848,204,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4104,205,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4112,206,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,10264,207,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4128,208,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4136,209,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,14504,210,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4144,211,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4152,212,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,13352,213,1);
 _lua_settop($L,-2);
 return;
}
function _luaopen_io($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,11);
 _luaL_setfuncs($L,4160,0);
 (_luaL_newmetatable($L,4312)|0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-2,12368);
 _luaL_setfuncs($L,4352,0);
 _lua_settop($L,-2);
 $0 = HEAP32[_stdin>>2]|0;
 $1 = (_lua_newuserdata($L,8)|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 _luaL_setmetatable($L,4312);
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 214;
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,4256);
 _lua_setfield($L,-2,4272);
 $3 = HEAP32[_stdout>>2]|0;
 $4 = (_lua_newuserdata($L,8)|0);
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = 0;
 _luaL_setmetatable($L,4312);
 HEAP32[$4>>2] = $3;
 HEAP32[$5>>2] = 214;
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,4280);
 _lua_setfield($L,-2,4296);
 $6 = HEAP32[_stderr>>2]|0;
 $7 = (_lua_newuserdata($L,8)|0);
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = 0;
 _luaL_setmetatable($L,4312);
 HEAP32[$7>>2] = $6;
 HEAP32[$8>>2] = 214;
 _lua_setfield($L,-2,4304);
 return 1;
}
function _io_noclose($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 HEAP32[$1>>2] = 214;
 _lua_pushnil($L);
 (_lua_pushstring($L,4320)|0);
 return 2;
}
function _io_close($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cf$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cf$i = sp + 4|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  (_lua_getfield($L,-1001000,4280)|0);
 }
 $2 = (_luaL_checkudata($L,1,4312)|0);
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $6 = (_luaL_checkudata($L,1,4312)|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$cf$i>>2] = $8;
 HEAP32[$7>>2] = 0;
 $9 = HEAP32[$cf$i>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 255]($L)|0);
 STACKTOP = sp;return ($10|0);
}
function _io_flush($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_lua_getfield($L,-1001000,4280)|0);
 $0 = (_lua_touserdata($L,-1)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = ((4280 + 4|0));
  (_luaL_error($L,4824,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_fflush(($4|0))|0);
 $6 = ($5|0)==(0);
 $7 = $6&1;
 $8 = (_luaL_fileresult($L,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _io_input($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _g_iofile($L,4256,6440);
 return 1;
}
function _io_lines($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $toclose$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  _lua_pushnil($L);
 }
 $2 = (_lua_type($L,1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  (_lua_getfield($L,-1001000,4256)|0);
  _lua_copy($L,-1,1);
  _lua_settop($L,-2);
  $4 = (_luaL_checkudata($L,1,4312)|0);
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   (_luaL_error($L,4536,$vararg_buffer)|0);
   $toclose$0 = 0;
  } else {
   $toclose$0 = 0;
  }
 } else {
  $8 = (_luaL_checklstring($L,1,0)|0);
  $9 = (_lua_newuserdata($L,8)|0);
  $10 = (($9) + 4|0);
  HEAP32[$10>>2] = 0;
  _luaL_setmetatable($L,4312);
  HEAP32[$9>>2] = 0;
  HEAP32[$10>>2] = 215;
  $11 = (_fopen(($8|0),(6440|0))|0);
  HEAP32[$9>>2] = $11;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = (___errno_location()|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strerror(($14|0))|0);
   HEAP32[$vararg_buffer1>>2] = $8;
   $vararg_ptr3 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $15;
   (_luaL_error($L,4912,$vararg_buffer1)|0);
  }
  _lua_copy($L,-1,1);
  _lua_settop($L,-2);
  $toclose$0 = 1;
 }
 $16 = (_lua_gettop($L)|0);
 $17 = (($16) + -1)|0;
 $18 = ($17|0)<(0);
 $19 = $18 << 31 >> 31;
 _lua_pushinteger($L,$17,$19);
 _lua_pushboolean($L,$toclose$0);
 _lua_rotate($L,2,2);
 $20 = (($16) + 2)|0;
 _lua_pushcclosure($L,216,$20);
 STACKTOP = sp;return 1;
}
function _io_open($L) {
 $L = $L|0;
 var $$ = 0, $$1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_optlstring($L,2,6440,0)|0);
 $2 = (_lua_newuserdata($L,8)|0);
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = 0;
 _luaL_setmetatable($L,4312);
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 215;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  label = 6;
 } else {
  $6 = $4 << 24 >> 24;
  $7 = (($1) + 1|0);
  $memchr = (_memchr(4944,$6,4)|0);
  $8 = ($memchr|0)==(0|0);
  if ($8) {
   label = 6;
  } else {
   $9 = HEAP8[$7>>0]|0;
   $10 = ($9<<24>>24)==(43);
   $11 = (($1) + 2|0);
   $$1 = $10 ? $11 : $7;
   $12 = HEAP8[$$1>>0]|0;
   $13 = ($12<<24>>24)==(98);
   if ($13) {
    $$ = $10 ? 3 : 2;
    $14 = (($1) + ($$)|0);
    $$pre = HEAP8[$14>>0]|0;
    $15 = $$pre;
   } else {
    $15 = $12;
   }
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  (_luaL_argerror($L,2,4952)|0);
 }
 $17 = (_fopen(($0|0),($1|0))|0);
 HEAP32[$2>>2] = $17;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $20 = 1;
  return ($20|0);
 }
 $19 = (_luaL_fileresult($L,0,$0)|0);
 $20 = $19;
 return ($20|0);
}
function _io_output($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _g_iofile($L,4280,4904);
 return 1;
}
function _io_popen($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 (_luaL_optlstring($L,2,6440,0)|0);
 $1 = (_lua_newuserdata($L,8)|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 _luaL_setmetatable($L,4312);
 (_luaL_error($L,4880,$vararg_buffer)|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$2>>2] = 217;
 $3 = (_luaL_fileresult($L,0,$0)|0);
 STACKTOP = sp;return ($3|0);
}
function _io_read($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_lua_getfield($L,-1001000,4256)|0);
 $0 = (_lua_touserdata($L,-1)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = ((4256 + 4|0));
  (_luaL_error($L,4824,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_read($L,$4,1)|0);
 STACKTOP = sp;return ($5|0);
}
function _io_tmpfile($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_newuserdata($L,8)|0);
 $1 = (($0) + 4|0);
 HEAP32[$1>>2] = 0;
 _luaL_setmetatable($L,4312);
 HEAP32[$0>>2] = 0;
 HEAP32[$1>>2] = 215;
 $2 = (_tmpfile()|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $5 = 1;
  return ($5|0);
 }
 $4 = (_luaL_fileresult($L,0,0)|0);
 $5 = $4;
 return ($5|0);
}
function _io_type($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_luaL_testudata($L,1,4312)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _lua_pushnil($L);
  return 1;
 }
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_lua_pushstring($L,4856)|0);
  return 1;
 } else {
  (_lua_pushstring($L,4872)|0);
  return 1;
 }
 return (0)|0;
}
function _io_write($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_lua_getfield($L,-1001000,4280)|0);
 $0 = (_lua_touserdata($L,-1)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = ((4280 + 4|0));
  (_luaL_error($L,4824,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_write($L,$4,1)|0);
 STACKTOP = sp;return ($5|0);
}
function _f_flush($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_fflush(($4|0))|0);
 $6 = ($5|0)==(0);
 $7 = $6&1;
 $8 = (_luaL_fileresult($L,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _f_lines($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $4 = (_lua_gettop($L)|0);
 $5 = (($4) + -1)|0;
 $6 = ($5|0)<(0);
 $7 = $6 << 31 >> 31;
 _lua_pushinteger($L,$5,$7);
 _lua_pushboolean($L,0);
 _lua_rotate($L,2,2);
 $8 = (($4) + 2)|0;
 _lua_pushcclosure($L,216,$8);
 STACKTOP = sp;return 1;
}
function _f_read($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_read($L,$4,2)|0);
 STACKTOP = sp;return ($5|0);
}
function _f_seek($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_luaL_checkoption($L,2,4656,4632)|0);
 $6 = (_luaL_optinteger($L,3,0,0)|0);
 $7 = tempRet0;
 $8 = ($6|0)<(0);
 $9 = $8 << 31 >> 31;
 $10 = ($6|0)==($6|0);
 $11 = ($9|0)==($7|0);
 $12 = $10 & $11;
 if (!($12)) {
  (_luaL_argerror($L,3,4664)|0);
 }
 $13 = (4616 + ($5<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_fseek(($4|0),($6|0),($14|0))|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $18 = (_ftell(($4|0))|0);
  $19 = ($18|0)<(0);
  $20 = $19 << 31 >> 31;
  _lua_pushinteger($L,$18,$20);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $17 = (_luaL_fileresult($L,0,0)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _f_setvbuf($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_luaL_checkoption($L,2,0,4584)|0);
 $6 = (_luaL_optinteger($L,3,8192,0)|0);
 $7 = tempRet0;
 $8 = (4568 + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_setvbuf(($4|0),(0|0),($9|0),($6|0))|0);
 $11 = ($10|0)==(0);
 $12 = $11&1;
 $13 = (_luaL_fileresult($L,$12,0)|0);
 STACKTOP = sp;return ($13|0);
}
function _f_write($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,4536,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 _lua_pushvalue($L,1);
 $5 = (_g_write($L,$4,2)|0);
 STACKTOP = sp;return ($5|0);
}
function _f_gc($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cf$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cf$i = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = (_luaL_checkudata($L,1,4312)|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$cf$i>>2] = $8;
 HEAP32[$7>>2] = 0;
 $9 = HEAP32[$cf$i>>2]|0;
 (FUNCTION_TABLE_ii[$9 & 255]($L)|0);
 STACKTOP = sp;return 0;
}
function _f_tostring($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_lua_pushstring($L,4504)|0);
  STACKTOP = sp;return 1;
 } else {
  $4 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_lua_pushfstring($L,4520,$vararg_buffer)|0);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _g_iofile($L,$f,$mode) {
 $L = $L|0;
 $f = $f|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  (_lua_getfield($L,-1001000,$f)|0);
  STACKTOP = sp;return;
 }
 $2 = (_lua_tolstring($L,1,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $11 = (_luaL_checkudata($L,1,4312)|0);
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   (_luaL_error($L,4536,$vararg_buffer2)|0);
  }
  _lua_pushvalue($L,1);
 } else {
  $4 = (_lua_newuserdata($L,8)|0);
  $5 = (($4) + 4|0);
  HEAP32[$5>>2] = 0;
  _luaL_setmetatable($L,4312);
  HEAP32[$4>>2] = 0;
  HEAP32[$5>>2] = 215;
  $6 = (_fopen(($2|0),($mode|0))|0);
  HEAP32[$4>>2] = $6;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strerror(($9|0))|0);
   HEAP32[$vararg_buffer>>2] = $2;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $10;
   (_luaL_error($L,4912,$vararg_buffer)|0);
  }
 }
 _lua_setfield($L,-1001000,$f);
 (_lua_getfield($L,-1001000,$f)|0);
 STACKTOP = sp;return;
}
function _io_fclose($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkudata($L,1,4312)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fclose(($1|0))|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_luaL_fileresult($L,$4,0)|0);
 return ($5|0);
}
function _io_readline($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cf$i = 0, $exitcond = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $cf$i = sp + 12|0;
 $0 = (_lua_touserdata($L,-1001001)|0);
 $1 = (_lua_tointegerx($L,-1001002,0)|0);
 $2 = tempRet0;
 $3 = (($0) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_luaL_error($L,4752,$vararg_buffer)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,1);
 _luaL_checkstack($L,$1,4696);
 $7 = ($1|0)<(1);
 if (!($7)) {
  $i$01 = 1;
  while(1) {
   $8 = (-1001003 - ($i$01))|0;
   _lua_pushvalue($L,$8);
   $9 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $9;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (_g_read($L,$10,2)|0);
 $12 = (0 - ($11))|0;
 $13 = (_lua_toboolean($L,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($11|0)>(1);
 if ($15) {
  $16 = (1 - ($11))|0;
  $17 = (_lua_tolstring($L,$16,0)|0);
  HEAP32[$vararg_buffer1>>2] = $17;
  $18 = (_luaL_error($L,4776,$vararg_buffer1)|0);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (_lua_toboolean($L,-1001003)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,0);
 _lua_pushvalue($L,-1001001);
 $21 = (_luaL_checkudata($L,1,4312)|0);
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$cf$i>>2] = $23;
 HEAP32[$22>>2] = 0;
 $24 = HEAP32[$cf$i>>2]|0;
 (FUNCTION_TABLE_ii[$24 & 255]($L)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _io_pclose($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_checkudata($L,1,4312)|0);
 $0 = (_luaL_execresult($L,-1)|0);
 return ($0|0);
}
function _g_read($L,$f,$first) {
 $L = $L|0;
 $f = $f|0;
 $first = $first|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa127 = 0, $$lcssa128 = 0, $$lcssa130 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$lcssa136 = 0, $$lcssa138 = 0, $$lcssa141 = 0, $$lcssa142 = 0;
 var $$lcssa143 = 0, $$lcssa144 = 0, $$lcssa146 = 0, $$lcssa149 = 0, $$lcssa150 = 0, $$lcssa151 = 0, $$lcssa152 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa157 = 0, $$lcssa160 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$i = 0, $b$i10 = 0, $b$i17 = 0, $b$i2 = 0, $b$i3 = 0, $c$0$i = 0, $c$0$i$lcssa = 0, $c$0$i11 = 0, $c$0$i4 = 0, $c$0$i4$lcssa = 0, $count$0$i1663$i = 0, $count$0$i1663$i$lcssa = 0;
 var $count$0$i71$i = 0, $count$0$i71$i$lcssa = 0, $count$0$lcssa2$i$i = 0, $count$0$lcssa2$i18$i = 0, $count$0$ph$i = 0, $count$0$ph86$i = 0, $count$0$us$i1261$i = 0, $count$0$us$i1261$i$lcssa = 0, $count$0$us$i68$i = 0, $count$0$us$i68$i$lcssa = 0, $count$03$i$i = 0, $count$03$i20$i = 0, $count$038$i = 0, $count$039$i = 0, $count$1$i = 0, $hex$041$i = 0, $hex$042$i = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i13 = 0, $i$0$lcssa$i6 = 0;
 var $i$08$i = 0, $i$08$i12 = 0, $i$08$i5 = 0, $isdigit$us$i$i = 0, $isdigit$us$i14$i = 0, $isdigit$us$i1460$i = 0, $isdigit$us$i32$i = 0, $isdigit$us$i3258$i = 0, $isdigit$us$i67$i = 0, $isdigittmp$us$i$i = 0, $isdigittmp$us$i13$i = 0, $isdigittmp$us$i1359$i = 0, $isdigittmp$us$i31$i = 0, $isdigittmp$us$i3157$i = 0, $isdigittmp$us$i66$i = 0, $n$065 = 0, $n$065$lcssa = 0, $n$065$lcssa158 = 0, $n$1 = 0, $or$cond = 0;
 var $or$cond$i22$i = 0, $rn$i = 0, $success$1 = 0, $success$1$lcssa = 0, $success$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 41264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$i17 = sp + 33048|0;
 $b$i10 = sp;
 $b$i3 = sp + 8208|0;
 $rn$i = sp + 16416|0;
 $b$i2 = sp + 16632|0;
 $b$i = sp + 24840|0;
 $0 = (_lua_gettop($L)|0);
 _clearerr(($f|0));
 $1 = ($0|0)==(1);
 do {
  if ($1) {
   _luaL_buffinit($L,$b$i);
   $2 = (($b$i) + 8|0);
   $c$0$i = 0;
   while(1) {
    if ((($c$0$i|0) == 10) | (($c$0$i|0) == -1)) {
     $c$0$i$lcssa = $c$0$i;
     break;
    }
    $3 = (_luaL_prepbuffsize($b$i,8192)|0);
    $i$08$i = 0;
    while(1) {
     $4 = (_getc(($f|0))|0);
     if ((($4|0) == 10) | (($4|0) == -1)) {
      $$lcssa = $4;$i$0$lcssa$i = $i$08$i;
      break;
     }
     $5 = $4&255;
     $6 = (($i$08$i) + 1)|0;
     $7 = (($3) + ($i$08$i)|0);
     HEAP8[$7>>0] = $5;
     $8 = ($6|0)<(8192);
     if ($8) {
      $i$08$i = $6;
     } else {
      $$lcssa = $4;$i$0$lcssa$i = $6;
      break;
     }
    }
    $9 = HEAP32[$2>>2]|0;
    $10 = (($9) + ($i$0$lcssa$i))|0;
    HEAP32[$2>>2] = $10;
    $c$0$i = $$lcssa;
   }
   $11 = ($c$0$i$lcssa|0)==(10);
   _luaL_pushresult($b$i);
   if ($11) {
    $15 = 1;
   } else {
    $12 = (_lua_rawlen($L,-1)|0);
    $13 = ($12|0)!=(0);
    $15 = $13;
   }
   $14 = $15&1;
   $16 = (($first) + 1)|0;
   $n$1 = $16;$success$2 = $14;
  } else {
   $17 = (($0) + 19)|0;
   _luaL_checkstack($L,$17,4696);
   $18 = (($0) + -2)|0;
   $19 = (($b$i2) + 8|0);
   $20 = (($rn$i) + 8|0);
   $21 = (($rn$i) + 4|0);
   $22 = (($rn$i) + 12|0);
   $23 = (($b$i3) + 8|0);
   $24 = (($b$i10) + 8|0);
   $25 = (($b$i10) + 4|0);
   $26 = (($b$i17) + 8|0);
   $209 = $18;$n$065 = $first;
   L15: while(1) {
    $27 = (_lua_type($L,$n$065)|0);
    $28 = ($27|0)==(3);
    do {
     if ($28) {
      $29 = (_luaL_checkinteger($L,$n$065)|0);
      $30 = tempRet0;
      $31 = ($29|0)==(0);
      if ($31) {
       $32 = (_getc(($f|0))|0);
       (_ungetc(($32|0),($f|0))|0);
       (_lua_pushstring($L,9952)|0);
       $33 = ($32|0)!=(-1);
       $34 = $33&1;
       $success$1 = $34;
       break;
      } else {
       _luaL_buffinit($L,$b$i2);
       $35 = (_luaL_prepbuffsize($b$i2,$29)|0);
       $36 = (_fread(($35|0),1,($29|0),($f|0))|0);
       $37 = HEAP32[$19>>2]|0;
       $38 = (($37) + ($36))|0;
       HEAP32[$19>>2] = $38;
       _luaL_pushresult($b$i2);
       $39 = ($36|0)!=(0);
       $40 = $39&1;
       $success$1 = $40;
       break;
      }
     } else {
      $41 = (_luaL_checklstring($L,$n$065,0)|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = ($42<<24>>24)==(42);
      $44 = (($41) + 1|0);
      $$ = $43 ? $44 : $41;
      $45 = HEAP8[$$>>0]|0;
      $46 = $45 << 24 >> 24;
      if ((($46|0) == 110)) {
       HEAP32[$rn$i>>2] = $f;
       HEAP32[$20>>2] = 0;
       $47 = (_localeconv()|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = HEAP8[$48>>0]|0;
       while(1) {
        $50 = (_getc(($f|0))|0);
        $51 = (_isspace($50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         $$lcssa119 = $50;
         break;
        }
       }
       HEAP32[$21>>2] = $$lcssa119;
       if ((($$lcssa119|0) == 43) | (($$lcssa119|0) == 45)) {
        $53 = $$lcssa119&255;
        HEAP32[$20>>2] = 1;
        HEAP8[$22>>0] = $53;
        $54 = (_getc(($f|0))|0);
        HEAP32[$21>>2] = $54;
        $55 = $54;
       } else {
        $55 = $$lcssa119;
       }
       $56 = ($55|0)==(48);
       do {
        if ($56) {
         $57 = HEAP32[$20>>2]|0;
         $58 = ($57|0)>(199);
         if ($58) {
          HEAP8[$22>>0] = 0;
          $218 = 48;$219 = $f;$count$0$ph86$i = 0;
          label = 30;
          break;
         }
         $59 = (($57) + 1)|0;
         HEAP32[$20>>2] = $59;
         $60 = ((($rn$i) + ($57)|0) + 12|0);
         HEAP8[$60>>0] = 48;
         $61 = HEAP32[$rn$i>>2]|0;
         $62 = (_getc(($61|0))|0);
         HEAP32[$21>>2] = $62;
         if ((($62|0) == 88) | (($62|0) == 120)) {
          $63 = HEAP32[$20>>2]|0;
          $64 = ($63|0)>(199);
          if ($64) {
           HEAP8[$22>>0] = 0;
           $217 = $61;$72 = $62;$count$0$ph$i = 1;
           label = 29;
           break;
          }
          $65 = $62&255;
          $66 = (($63) + 1)|0;
          HEAP32[$20>>2] = $66;
          $67 = ((($rn$i) + ($63)|0) + 12|0);
          HEAP8[$67>>0] = $65;
          $68 = HEAP32[$rn$i>>2]|0;
          $69 = (_getc(($68|0))|0);
          HEAP32[$21>>2] = $69;
          $70 = (_isxdigit($69)|0);
          $71 = ($70|0)==(0);
          if ($71) {
           $220 = $68;$221 = 0;$95 = $69;$count$03$i$i = 0;$count$039$i = 0;$hex$042$i = 1;
          } else {
           $222 = $68;$85 = $69;$count$0$i71$i = 0;
           while(1) {
            $82 = HEAP32[$20>>2]|0;
            $83 = ($82|0)>(199);
            if ($83) {
             $$lcssa120 = $222;$$lcssa122 = $85;$count$0$i71$i$lcssa = $count$0$i71$i;
             label = 35;
             break;
            }
            $84 = $85&255;
            $86 = (($82) + 1)|0;
            HEAP32[$20>>2] = $86;
            $87 = ((($rn$i) + ($82)|0) + 12|0);
            HEAP8[$87>>0] = $84;
            $88 = HEAP32[$rn$i>>2]|0;
            $89 = (_getc(($88|0))|0);
            HEAP32[$21>>2] = $89;
            $90 = (($count$0$i71$i) + 1)|0;
            $91 = (_isxdigit($89)|0);
            $92 = ($91|0)==(0);
            if ($92) {
             $$lcssa125 = $88;$$lcssa126 = $89;$$lcssa127 = $90;
             label = 39;
             break;
            } else {
             $222 = $88;$85 = $89;$count$0$i71$i = $90;
            }
           }
           if ((label|0) == 35) {
            label = 0;
            $224 = $$lcssa120;$225 = $$lcssa122;$226 = 0;$count$0$lcssa2$i$i = $count$0$i71$i$lcssa;$count$038$i = 0;$hex$041$i = 1;
            label = 36;
            break;
           }
           else if ((label|0) == 39) {
            label = 0;
            $220 = $$lcssa125;$221 = 0;$95 = $$lcssa126;$count$03$i$i = $$lcssa127;$count$039$i = 0;$hex$042$i = 1;
            break;
           }
          }
         } else {
          $217 = $61;$72 = $62;$count$0$ph$i = 1;
          label = 29;
         }
        } else {
         $217 = $f;$72 = $55;$count$0$ph$i = 0;
         label = 29;
        }
       } while(0);
       if ((label|0) == 29) {
        label = 0;
        $isdigittmp$us$i66$i = (($72) + -48)|0;
        $isdigit$us$i67$i = ($isdigittmp$us$i66$i>>>0)<(10);
        if ($isdigit$us$i67$i) {
         $218 = $72;$219 = $217;$count$0$ph86$i = $count$0$ph$i;
         label = 30;
        } else {
         $220 = $217;$221 = 1;$95 = $72;$count$03$i$i = 0;$count$039$i = $count$0$ph$i;$hex$042$i = 0;
        }
       }
       do {
        if ((label|0) == 30) {
         label = 0;
         $223 = $219;$76 = $218;$count$0$us$i68$i = 0;
         while(1) {
          $73 = HEAP32[$20>>2]|0;
          $74 = ($73|0)>(199);
          if ($74) {
           $$lcssa128 = $223;$$lcssa130 = $76;$count$0$us$i68$i$lcssa = $count$0$us$i68$i;
           label = 34;
           break;
          }
          $75 = $76&255;
          $77 = (($73) + 1)|0;
          HEAP32[$20>>2] = $77;
          $78 = ((($rn$i) + ($73)|0) + 12|0);
          HEAP8[$78>>0] = $75;
          $79 = HEAP32[$rn$i>>2]|0;
          $80 = (_getc(($79|0))|0);
          HEAP32[$21>>2] = $80;
          $81 = (($count$0$us$i68$i) + 1)|0;
          $isdigittmp$us$i$i = (($80) + -48)|0;
          $isdigit$us$i$i = ($isdigittmp$us$i$i>>>0)<(10);
          if ($isdigit$us$i$i) {
           $223 = $79;$76 = $80;$count$0$us$i68$i = $81;
          } else {
           $$lcssa133 = $79;$$lcssa134 = $80;$$lcssa135 = $81;
           label = 38;
           break;
          }
         }
         if ((label|0) == 34) {
          label = 0;
          $224 = $$lcssa128;$225 = $$lcssa130;$226 = 1;$count$0$lcssa2$i$i = $count$0$us$i68$i$lcssa;$count$038$i = $count$0$ph86$i;$hex$041$i = 0;
          label = 36;
          break;
         }
         else if ((label|0) == 38) {
          label = 0;
          $220 = $$lcssa133;$221 = 1;$95 = $$lcssa134;$count$03$i$i = $$lcssa135;$count$039$i = $count$0$ph86$i;$hex$042$i = 0;
          break;
         }
        }
       } while(0);
       if ((label|0) == 36) {
        label = 0;
        HEAP8[$22>>0] = 0;
        $220 = $224;$221 = $226;$95 = $225;$count$03$i$i = $count$0$lcssa2$i$i;$count$039$i = $count$038$i;$hex$042$i = $hex$041$i;
       }
       $93 = (($count$03$i$i) + ($count$039$i))|0;
       $94 = $49 << 24 >> 24;
       $96 = ($95|0)==($94|0);
       do {
        if ($96) {
         $97 = HEAP32[$20>>2]|0;
         $98 = ($97|0)>(199);
         if ($98) {
          HEAP8[$22>>0] = 0;
          $132 = $95;$227 = $220;$count$1$i = $93;
          break;
         }
         $99 = $95&255;
         $100 = (($97) + 1)|0;
         HEAP32[$20>>2] = $100;
         $101 = ((($rn$i) + ($97)|0) + 12|0);
         HEAP8[$101>>0] = $99;
         $102 = HEAP32[$rn$i>>2]|0;
         $103 = (_getc(($102|0))|0);
         HEAP32[$21>>2] = $103;
         do {
          if ($221) {
           $isdigittmp$us$i1359$i = (($103) + -48)|0;
           $isdigit$us$i1460$i = ($isdigittmp$us$i1359$i>>>0)<(10);
           if ($isdigit$us$i1460$i) {
            $109 = $103;$231 = $102;$count$0$us$i1261$i = 0;
            while(1) {
             $106 = HEAP32[$20>>2]|0;
             $107 = ($106|0)>(199);
             if ($107) {
              $$lcssa144 = $231;$$lcssa146 = $109;$count$0$us$i1261$i$lcssa = $count$0$us$i1261$i;
              label = 51;
              break;
             }
             $108 = $109&255;
             $110 = (($106) + 1)|0;
             HEAP32[$20>>2] = $110;
             $111 = ((($rn$i) + ($106)|0) + 12|0);
             HEAP8[$111>>0] = $108;
             $112 = HEAP32[$rn$i>>2]|0;
             $113 = (_getc(($112|0))|0);
             HEAP32[$21>>2] = $113;
             $114 = (($count$0$us$i1261$i) + 1)|0;
             $isdigittmp$us$i13$i = (($113) + -48)|0;
             $isdigit$us$i14$i = ($isdigittmp$us$i13$i>>>0)<(10);
             if ($isdigit$us$i14$i) {
              $109 = $113;$231 = $112;$count$0$us$i1261$i = $114;
             } else {
              $$lcssa149 = $112;$$lcssa150 = $113;$$lcssa151 = $114;
              label = 55;
              break;
             }
            }
            if ((label|0) == 51) {
             label = 0;
             $232 = $$lcssa144;$233 = $$lcssa146;$count$0$lcssa2$i18$i = $count$0$us$i1261$i$lcssa;
             label = 53;
             break;
            }
            else if ((label|0) == 55) {
             label = 0;
             $228 = $$lcssa149;$229 = $$lcssa150;$count$03$i20$i = $$lcssa151;
             break;
            }
           } else {
            $228 = $102;$229 = $103;$count$03$i20$i = 0;
           }
          } else {
           $104 = (_isxdigit($103)|0);
           $105 = ($104|0)==(0);
           if ($105) {
            $228 = $102;$229 = $103;$count$03$i20$i = 0;
           } else {
            $118 = $103;$230 = $102;$count$0$i1663$i = 0;
            while(1) {
             $115 = HEAP32[$20>>2]|0;
             $116 = ($115|0)>(199);
             if ($116) {
              $$lcssa136 = $230;$$lcssa138 = $118;$count$0$i1663$i$lcssa = $count$0$i1663$i;
              label = 52;
              break;
             }
             $117 = $118&255;
             $119 = (($115) + 1)|0;
             HEAP32[$20>>2] = $119;
             $120 = ((($rn$i) + ($115)|0) + 12|0);
             HEAP8[$120>>0] = $117;
             $121 = HEAP32[$rn$i>>2]|0;
             $122 = (_getc(($121|0))|0);
             HEAP32[$21>>2] = $122;
             $123 = (($count$0$i1663$i) + 1)|0;
             $124 = (_isxdigit($122)|0);
             $125 = ($124|0)==(0);
             if ($125) {
              $$lcssa141 = $121;$$lcssa142 = $122;$$lcssa143 = $123;
              label = 56;
              break;
             } else {
              $118 = $122;$230 = $121;$count$0$i1663$i = $123;
             }
            }
            if ((label|0) == 52) {
             label = 0;
             $232 = $$lcssa136;$233 = $$lcssa138;$count$0$lcssa2$i18$i = $count$0$i1663$i$lcssa;
             label = 53;
             break;
            }
            else if ((label|0) == 56) {
             label = 0;
             $228 = $$lcssa141;$229 = $$lcssa142;$count$03$i20$i = $$lcssa143;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 53) {
          label = 0;
          HEAP8[$22>>0] = 0;
          $228 = $232;$229 = $233;$count$03$i20$i = $count$0$lcssa2$i18$i;
         }
         $126 = (($count$03$i20$i) + ($93))|0;
         $132 = $229;$227 = $228;$count$1$i = $126;
        } else {
         $132 = $95;$227 = $220;$count$1$i = $93;
        }
       } while(0);
       $127 = ($count$1$i|0)>(0);
       do {
        if ($127) {
         $128 = ($hex$042$i|0)!=(0);
         $129 = $128 ? 4736 : 4744;
         $130 = HEAP8[$129>>0]|0;
         $131 = $130 << 24 >> 24;
         $133 = ($132|0)==($131|0);
         if (!($133)) {
          $134 = (($129) + 1|0);
          $135 = HEAP8[$134>>0]|0;
          $136 = $135 << 24 >> 24;
          $137 = ($132|0)!=($136|0);
          $138 = ($132|0)==(0);
          $or$cond$i22$i = $137 | $138;
          if ($or$cond$i22$i) {
           $162 = $132;$163 = $227;
           break;
          }
         }
         $139 = HEAP32[$20>>2]|0;
         $140 = ($139|0)>(199);
         if ($140) {
          HEAP8[$22>>0] = 0;
          $162 = $132;$163 = $227;
          break;
         }
         $141 = $132&255;
         $142 = (($139) + 1)|0;
         HEAP32[$20>>2] = $142;
         $143 = ((($rn$i) + ($139)|0) + 12|0);
         HEAP8[$143>>0] = $141;
         $144 = HEAP32[$rn$i>>2]|0;
         $145 = (_getc(($144|0))|0);
         HEAP32[$21>>2] = $145;
         do {
          if ((($145|0) == 43) | (($145|0) == 45)) {
           $146 = HEAP32[$20>>2]|0;
           $147 = ($146|0)>(199);
           if ($147) {
            HEAP8[$22>>0] = 0;
            $153 = $145;$234 = $144;
            break;
           } else {
            $148 = $145&255;
            $149 = (($146) + 1)|0;
            HEAP32[$20>>2] = $149;
            $150 = ((($rn$i) + ($146)|0) + 12|0);
            HEAP8[$150>>0] = $148;
            $151 = HEAP32[$rn$i>>2]|0;
            $152 = (_getc(($151|0))|0);
            HEAP32[$21>>2] = $152;
            $153 = $152;$234 = $151;
            break;
           }
          } else {
           $153 = $145;$234 = $144;
          }
         } while(0);
         $isdigittmp$us$i3157$i = (($153) + -48)|0;
         $isdigit$us$i3258$i = ($isdigittmp$us$i3157$i>>>0)<(10);
         if ($isdigit$us$i3258$i) {
          $157 = $153;$235 = $234;
          while(1) {
           $154 = HEAP32[$20>>2]|0;
           $155 = ($154|0)>(199);
           if ($155) {
            $$lcssa152 = $235;$$lcssa154 = $157;
            label = 71;
            break;
           }
           $156 = $157&255;
           $158 = (($154) + 1)|0;
           HEAP32[$20>>2] = $158;
           $159 = ((($rn$i) + ($154)|0) + 12|0);
           HEAP8[$159>>0] = $156;
           $160 = HEAP32[$rn$i>>2]|0;
           $161 = (_getc(($160|0))|0);
           HEAP32[$21>>2] = $161;
           $isdigittmp$us$i31$i = (($161) + -48)|0;
           $isdigit$us$i32$i = ($isdigittmp$us$i31$i>>>0)<(10);
           if ($isdigit$us$i32$i) {
            $157 = $161;$235 = $160;
           } else {
            $$lcssa156 = $160;$$lcssa157 = $161;
            label = 72;
            break;
           }
          }
          if ((label|0) == 71) {
           label = 0;
           HEAP8[$22>>0] = 0;
           $162 = $$lcssa154;$163 = $$lcssa152;
           break;
          }
          else if ((label|0) == 72) {
           label = 0;
           $162 = $$lcssa157;$163 = $$lcssa156;
           break;
          }
         } else {
          $162 = $153;$163 = $234;
         }
        } else {
         $162 = $132;$163 = $227;
        }
       } while(0);
       (_ungetc(($162|0),($163|0))|0);
       $164 = HEAP32[$20>>2]|0;
       $165 = ((($rn$i) + ($164)|0) + 12|0);
       HEAP8[$165>>0] = 0;
       $166 = (_lua_stringtonumber($L,$22)|0);
       $167 = ($166|0)==(0);
       if ($167) {
        $n$065$lcssa158 = $n$065;
        label = 74;
        break L15;
       } else {
        $success$1 = 1;
        break;
       }
      } else if ((($46|0) == 97)) {
       _luaL_buffinit($L,$b$i17);
       while(1) {
        $201 = (_luaL_prepbuffsize($b$i17,8192)|0);
        $202 = (_fread(($201|0),1,8192,($f|0))|0);
        $203 = HEAP32[$26>>2]|0;
        $204 = (($203) + ($202))|0;
        HEAP32[$26>>2] = $204;
        $205 = ($202|0)==(8192);
        if (!($205)) {
         break;
        }
       }
       _luaL_pushresult($b$i17);
       $success$1 = 1;
       break;
      } else if ((($46|0) == 76)) {
       _luaL_buffinit($L,$b$i10);
       $c$0$i11 = 0;
       while(1) {
        if ((($c$0$i11|0) == -1)) {
         label = 93;
         break;
        } else if ((($c$0$i11|0) == 10)) {
         label = 90;
         break;
        }
        $182 = (_luaL_prepbuffsize($b$i10,8192)|0);
        $i$08$i12 = 0;
        while(1) {
         $183 = (_getc(($f|0))|0);
         if ((($183|0) == 10) | (($183|0) == -1)) {
          $$lcssa117 = $183;$i$0$lcssa$i13 = $i$08$i12;
          break;
         }
         $184 = $183&255;
         $185 = (($i$08$i12) + 1)|0;
         $186 = (($182) + ($i$08$i12)|0);
         HEAP8[$186>>0] = $184;
         $187 = ($185|0)<(8192);
         if ($187) {
          $i$08$i12 = $185;
         } else {
          $$lcssa117 = $183;$i$0$lcssa$i13 = $185;
          break;
         }
        }
        $188 = HEAP32[$24>>2]|0;
        $189 = (($188) + ($i$0$lcssa$i13))|0;
        HEAP32[$24>>2] = $189;
        $c$0$i11 = $$lcssa117;
       }
       if ((label|0) == 90) {
        label = 0;
        $190 = HEAP32[$24>>2]|0;
        $191 = HEAP32[$25>>2]|0;
        $192 = ($190>>>0)<($191>>>0);
        if ($192) {
         $194 = $190;
        } else {
         (_luaL_prepbuffsize($b$i10,1)|0);
         $$pre$i = HEAP32[$24>>2]|0;
         $194 = $$pre$i;
        }
        $193 = (($194) + 1)|0;
        HEAP32[$24>>2] = $193;
        $195 = HEAP32[$b$i10>>2]|0;
        $196 = (($195) + ($194)|0);
        HEAP8[$196>>0] = 10;
        _luaL_pushresult($b$i10);
        $200 = 1;
       }
       else if ((label|0) == 93) {
        label = 0;
        _luaL_pushresult($b$i10);
        $197 = (_lua_rawlen($L,-1)|0);
        $198 = ($197|0)!=(0);
        $200 = $198;
       }
       $199 = $200&1;
       $success$1 = $199;
       break;
      } else if ((($46|0) == 108)) {
       _luaL_buffinit($L,$b$i3);
       $c$0$i4 = 0;
       while(1) {
        if ((($c$0$i4|0) == 10) | (($c$0$i4|0) == -1)) {
         $c$0$i4$lcssa = $c$0$i4;
         break;
        }
        $169 = (_luaL_prepbuffsize($b$i3,8192)|0);
        $i$08$i5 = 0;
        while(1) {
         $170 = (_getc(($f|0))|0);
         if ((($170|0) == 10) | (($170|0) == -1)) {
          $$lcssa118 = $170;$i$0$lcssa$i6 = $i$08$i5;
          break;
         }
         $171 = $170&255;
         $172 = (($i$08$i5) + 1)|0;
         $173 = (($169) + ($i$08$i5)|0);
         HEAP8[$173>>0] = $171;
         $174 = ($172|0)<(8192);
         if ($174) {
          $i$08$i5 = $172;
         } else {
          $$lcssa118 = $170;$i$0$lcssa$i6 = $172;
          break;
         }
        }
        $175 = HEAP32[$23>>2]|0;
        $176 = (($175) + ($i$0$lcssa$i6))|0;
        HEAP32[$23>>2] = $176;
        $c$0$i4 = $$lcssa118;
       }
       $177 = ($c$0$i4$lcssa|0)==(10);
       _luaL_pushresult($b$i3);
       if ($177) {
        $181 = 1;
       } else {
        $178 = (_lua_rawlen($L,-1)|0);
        $179 = ($178|0)!=(0);
        $181 = $179;
       }
       $180 = $181&1;
       $success$1 = $180;
       break;
      } else {
       $n$065$lcssa = $n$065;
       label = 98;
       break L15;
      }
     }
    } while(0);
    $207 = (($n$065) + 1)|0;
    $208 = (($209) + -1)|0;
    $210 = ($209|0)!=(0);
    $211 = ($success$1|0)!=(0);
    $or$cond = $210 & $211;
    if ($or$cond) {
     $209 = $208;$n$065 = $207;
    } else {
     $$lcssa160 = $207;$success$1$lcssa = $success$1;
     label = 100;
     break;
    }
   }
   if ((label|0) == 74) {
    _lua_pushnil($L);
    $168 = (($n$065$lcssa158) + 1)|0;
    $n$1 = $168;$success$2 = 0;
    break;
   }
   else if ((label|0) == 98) {
    $206 = (_luaL_argerror($L,$n$065$lcssa,4720)|0);
    $$0 = $206;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 100) {
    $n$1 = $$lcssa160;$success$2 = $success$1$lcssa;
    break;
   }
  }
 } while(0);
 $212 = (_ferror(($f|0))|0);
 $213 = ($212|0)==(0);
 if (!($213)) {
  $214 = (_luaL_fileresult($L,0,0)|0);
  $$0 = $214;
  STACKTOP = sp;return ($$0|0);
 }
 $215 = ($success$2|0)==(0);
 if ($215) {
  _lua_settop($L,-2);
  _lua_pushnil($L);
 }
 $216 = (($n$1) - ($first))|0;
 $$0 = $216;
 STACKTOP = sp;return ($$0|0);
}
function _g_write($L,$f,$arg) {
 $L = $L|0;
 $f = $f|0;
 $arg = $arg|0;
 var $$0 = 0, $$013 = 0, $$in = 0, $$sink = 0, $$sink$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $not$ = 0, $status$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $l = sp + 16|0;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)==($arg|0);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) - ($arg))|0;
 $$013 = $arg;$$in = $2;$status$02 = 1;
 while(1) {
  $3 = (($$in) + -1)|0;
  $4 = (_lua_type($L,$$013)|0);
  $5 = ($4|0)==(3);
  if ($5) {
   $6 = (_lua_isinteger($L,$$013)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $15 = (+_lua_tonumberx($L,$$013,0));
    HEAPF64[tempDoublePtr>>3]=$15;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $16 = (_fprintf(($f|0),(6808|0),($vararg_buffer1|0))|0);
    $17 = $16;
   } else {
    $8 = (_lua_tointegerx($L,$$013,0)|0);
    $9 = tempRet0;
    $10 = $vararg_buffer;
    $11 = $10;
    HEAP32[$11>>2] = $8;
    $12 = (($10) + 4)|0;
    $13 = $12;
    HEAP32[$13>>2] = $9;
    $14 = (_fprintf(($f|0),(6800|0),($vararg_buffer|0))|0);
    $17 = $14;
   }
   $18 = ($17|0)>(0);
   $not$ = ($status$02|0)!=(0);
   $19 = $18 & $not$;
   $$sink = $19;
  } else {
   $20 = (_luaL_checklstring($L,$$013,$l)|0);
   $21 = ($status$02|0)==(0);
   if ($21) {
    $$sink = 0;
   } else {
    $22 = HEAP32[$l>>2]|0;
    $23 = (_fwrite(($20|0),1,($22|0),($f|0))|0);
    $24 = HEAP32[$l>>2]|0;
    $25 = ($23|0)==($24|0);
    $$sink = $25;
   }
  }
  $26 = $$sink&1;
  $27 = (($$013) + 1)|0;
  $28 = ($3|0)==(0);
  if ($28) {
   $$sink$lcssa = $$sink;
   break;
  } else {
   $$013 = $27;$$in = $3;$status$02 = $26;
  }
 }
 if ($$sink$lcssa) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (_luaL_fileresult($L,0,0)|0);
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _luaopen_math($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,27);
 _luaL_setfuncs($L,4968,0);
 _lua_pushnumber($L,3.1415926535897931);
 _lua_setfield($L,-2,5192);
 _lua_pushnumber($L,inf);
 _lua_setfield($L,-2,5200);
 _lua_pushinteger($L,-1,2147483647);
 _lua_setfield($L,-2,5208);
 _lua_pushinteger($L,0,-2147483648);
 _lua_setfield($L,-2,5224);
 return 1;
}
function _math_abs($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_isinteger($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $9 = (+_luaL_checknumber($L,1));
  $10 = (+Math_abs((+$9)));
  _lua_pushnumber($L,$10);
  return 1;
 } else {
  $2 = (_lua_tointegerx($L,1,0)|0);
  $3 = tempRet0;
  $4 = ($3|0)<(0);
  $5 = (_i64Subtract(0,0,($2|0),($3|0))|0);
  $6 = tempRet0;
  $7 = $4 ? $5 : $2;
  $8 = $4 ? $6 : $3;
  _lua_pushinteger($L,$7,$8);
  return 1;
 }
 return (0)|0;
}
function _math_acos($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_acos((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_asin($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_asin((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_atan($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_optnumber($L,2,1.0));
 $2 = (+Math_atan2((+$0),(+$1)));
 _lua_pushnumber($L,$2);
 return 1;
}
function _math_ceil($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_isinteger($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _lua_settop($L,1);
  return 1;
 }
 $2 = (+_luaL_checknumber($L,1));
 $3 = (+Math_ceil((+$2)));
 $4 = $3 >= -9.2233720368547758E+18;
 $5 = $3 < 9.2233720368547758E+18;
 $or$cond$i = $4 & $5;
 if ($or$cond$i) {
  $6 = (~~$3)>>>0;
  $7 = +Math_abs($3) >= 1.0 ? $3 > 0.0 ? (~~+Math_min(+Math_floor($3 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($3 - +(~~$3 >>> 0)) / 4294967296.0) >>> 0 : 0;
  _lua_pushinteger($L,$6,$7);
  return 1;
 } else {
  _lua_pushnumber($L,$3);
  return 1;
 }
 return (0)|0;
}
function _math_cos($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_cos((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_deg($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = $0 * 57.295779513082323;
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_exp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_exp((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_toint($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $valid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $valid = sp;
 $0 = (_lua_tointegerx($L,1,$valid)|0);
 $1 = tempRet0;
 $2 = HEAP32[$valid>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _luaL_checkany($L,1);
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 } else {
  _lua_pushinteger($L,$0,$1);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _math_floor($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_isinteger($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _lua_settop($L,1);
  return 1;
 }
 $2 = (+_luaL_checknumber($L,1));
 $3 = (+Math_floor((+$2)));
 $4 = $3 >= -9.2233720368547758E+18;
 $5 = $3 < 9.2233720368547758E+18;
 $or$cond$i = $4 & $5;
 if ($or$cond$i) {
  $6 = (~~$3)>>>0;
  $7 = +Math_abs($3) >= 1.0 ? $3 > 0.0 ? (~~+Math_min(+Math_floor($3 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($3 - +(~~$3 >>> 0)) / 4294967296.0) >>> 0 : 0;
  _lua_pushinteger($L,$6,$7);
  return 1;
 } else {
  _lua_pushnumber($L,$3);
  return 1;
 }
 return (0)|0;
}
function _math_fmod($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_isinteger($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (_lua_isinteger($L,2)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_lua_tointegerx($L,2,0)|0);
   $5 = tempRet0;
   $6 = (_i64Add(($4|0),($5|0),1,0)|0);
   $7 = tempRet0;
   $8 = ($7>>>0)<(0);
   $9 = ($6>>>0)<(2);
   $10 = ($7|0)==(0);
   $11 = $10 & $9;
   $12 = $8 | $11;
   if (!($12)) {
    $16 = (_lua_tointegerx($L,1,0)|0);
    $17 = tempRet0;
    $18 = (___remdi3(($16|0),($17|0),($4|0),($5|0))|0);
    $19 = tempRet0;
    _lua_pushinteger($L,$18,$19);
    return 1;
   }
   $13 = ($4|0)==(0);
   $14 = ($5|0)==(0);
   $15 = $13 & $14;
   if ($15) {
    (_luaL_argerror($L,2,5536)|0);
   }
   _lua_pushinteger($L,0,0);
   return 1;
  }
 }
 $20 = (+_luaL_checknumber($L,1));
 $21 = (+_luaL_checknumber($L,2));
 $22 = (+_fmod($20,$21));
 _lua_pushnumber($L,$22);
 return 1;
}
function _math_ult($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,1)|0);
 $1 = tempRet0;
 $2 = (_luaL_checkinteger($L,2)|0);
 $3 = tempRet0;
 $4 = ($1>>>0)<($3>>>0);
 $5 = ($0>>>0)<($2>>>0);
 $6 = ($1|0)==($3|0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 $9 = $8&1;
 _lua_pushboolean($L,$9);
 return 1;
}
function _math_log($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $res$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 do {
  if ($2) {
   $3 = (+Math_log((+$0)));
   $res$0 = $3;
  } else {
   $4 = (+_luaL_checknumber($L,2));
   $5 = $4 == 2.0;
   if ($5) {
    $6 = (+_log2($0));
    $res$0 = $6;
    break;
   }
   $7 = $4 == 10.0;
   if ($7) {
    $8 = (+_log10($0));
    $res$0 = $8;
    break;
   } else {
    $9 = (+Math_log((+$0)));
    $10 = (+Math_log((+$4)));
    $11 = $9 / $10;
    $res$0 = $11;
    break;
   }
  }
 } while(0);
 _lua_pushnumber($L,$res$0);
 return 1;
}
function _math_max($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, $i$02 = 0, $imax$0$i$0 = 0, $imax$0$i$0$lcssa = 0, $imax$0$lcssa = 0, $imax$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = ($0|0)<(2);
  if ($2) {
   $imax$0$lcssa = 1;
  } else {
   $i$02 = 2;$imax$01 = 1;
   while(1) {
    $3 = (_lua_compare($L,$imax$01,$i$02,1)|0);
    $4 = ($3|0)==(0);
    $imax$0$i$0 = $4 ? $imax$01 : $i$02;
    $5 = (($i$02) + 1)|0;
    $exitcond = ($i$02|0)==($0|0);
    if ($exitcond) {
     $imax$0$i$0$lcssa = $imax$0$i$0;
     break;
    } else {
     $i$02 = $5;$imax$01 = $imax$0$i$0;
    }
   }
   $imax$0$lcssa = $imax$0$i$0$lcssa;
  }
 } else {
  (_luaL_argerror($L,1,5520)|0);
  $imax$0$lcssa = 1;
 }
 _lua_pushvalue($L,$imax$0$lcssa);
 return 1;
}
function _math_min($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, $i$02 = 0, $imin$0$i$0 = 0, $imin$0$i$0$lcssa = 0, $imin$0$lcssa = 0, $imin$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = ($0|0)<(2);
  if ($2) {
   $imin$0$lcssa = 1;
  } else {
   $i$02 = 2;$imin$01 = 1;
   while(1) {
    $3 = (_lua_compare($L,$i$02,$imin$01,1)|0);
    $4 = ($3|0)==(0);
    $imin$0$i$0 = $4 ? $imin$01 : $i$02;
    $5 = (($i$02) + 1)|0;
    $exitcond = ($i$02|0)==($0|0);
    if ($exitcond) {
     $imin$0$i$0$lcssa = $imin$0$i$0;
     break;
    } else {
     $i$02 = $5;$imin$01 = $imin$0$i$0;
    }
   }
   $imin$0$lcssa = $imin$0$i$0$lcssa;
  }
 } else {
  (_luaL_argerror($L,1,5520)|0);
  $imin$0$lcssa = 1;
 }
 _lua_pushvalue($L,$imin$0$lcssa);
 return 1;
}
function _math_modf($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_isinteger($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _lua_settop($L,1);
  _lua_pushnumber($L,0.0);
  return 2;
 }
 $2 = (+_luaL_checknumber($L,1));
 $3 = $2 < 0.0;
 if ($3) {
  $4 = (+Math_ceil((+$2)));
  $7 = $4;
 } else {
  $5 = (+Math_floor((+$2)));
  $7 = $5;
 }
 $6 = $7 >= -9.2233720368547758E+18;
 $8 = $7 < 9.2233720368547758E+18;
 $or$cond$i = $6 & $8;
 if ($or$cond$i) {
  $9 = (~~$7)>>>0;
  $10 = +Math_abs($7) >= 1.0 ? $7 > 0.0 ? (~~+Math_min(+Math_floor($7 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($7 - +(~~$7 >>> 0)) / 4294967296.0) >>> 0 : 0;
  _lua_pushinteger($L,$9,$10);
 } else {
  _lua_pushnumber($L,$7);
 }
 $11 = $2 == $7;
 if ($11) {
  $13 = 0.0;
 } else {
  $12 = $2 - $7;
  $13 = $12;
 }
 _lua_pushnumber($L,$13);
 return 2;
}
function _math_rad($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = $0 * 0.017453292519943295;
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_random($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_rand()|0);
 $1 = (+($0|0));
 $2 = $1 * 4.6566128730773926E-10;
 $3 = (_lua_gettop($L)|0);
 if ((($3|0) == 0)) {
  _lua_pushnumber($L,$2);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($3|0) == 1)) {
  $4 = (_luaL_checkinteger($L,1)|0);
  $5 = tempRet0;
  $11 = $5;$13 = 0;$14 = $4;$16 = 1;
 } else if ((($3|0) == 2)) {
  $6 = (_luaL_checkinteger($L,1)|0);
  $7 = tempRet0;
  $8 = (_luaL_checkinteger($L,2)|0);
  $9 = tempRet0;
  $11 = $9;$13 = $7;$14 = $8;$16 = $6;
 } else {
  $10 = (_luaL_error($L,5440,$vararg_buffer)|0);
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($11|0)<($13|0);
 $15 = ($14>>>0)<($16>>>0);
 $17 = ($11|0)==($13|0);
 $18 = $17 & $15;
 $19 = $12 | $18;
 if ($19) {
  (_luaL_argerror($L,1,5472)|0);
 }
 $20 = ($13|0)<(0);
 $21 = (_i64Add(($16|0),($13|0),-1,2147483647)|0);
 $22 = tempRet0;
 $23 = ($11|0)>($22|0);
 $24 = ($14>>>0)>($21>>>0);
 $25 = ($11|0)==($22|0);
 $26 = $25 & $24;
 $27 = $23 | $26;
 $or$cond = $20 & $27;
 if ($or$cond) {
  (_luaL_argerror($L,1,5496)|0);
 }
 $28 = (_i64Subtract(($14|0),($11|0),($16|0),($13|0))|0);
 $29 = tempRet0;
 $30 = (+($28>>>0)) + (4294967296.0*(+($29|0)));
 $31 = $30 + 1.0;
 $32 = $2 * $31;
 $33 = (~~$32)>>>0;
 $34 = +Math_abs($32) >= 1.0 ? $32 > 0.0 ? (~~+Math_min(+Math_floor($32 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($32 - +(~~$32 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $35 = (_i64Add(($33|0),($34|0),($16|0),($13|0))|0);
 $36 = tempRet0;
 _lua_pushinteger($L,$35,$36);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _math_randomseed($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (~~$0)>>>0;
 $2 = +Math_abs($0) >= 1.0 ? $0 > 0.0 ? (~~+Math_min(+Math_floor($0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($0 - +(~~$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
 _srand($1);
 (_rand()|0);
 return 0;
}
function _math_sin($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_sin((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_sqrt($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_sqrt((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_tan($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_tan((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_type($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(3);
 if (!($1)) {
  _luaL_checkany($L,1);
  _lua_pushnil($L);
  return 1;
 }
 $2 = (_lua_isinteger($L,1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  (_lua_pushstring($L,5432)|0);
  return 1;
 } else {
  (_lua_pushstring($L,5424)|0);
  return 1;
 }
 return (0)|0;
}
function _luaM_growaux_($L,$block,$size,$size_elems,$limit,$what) {
 $L = $L|0;
 $block = $block|0;
 $size = $size|0;
 $size_elems = $size_elems|0;
 $limit = $limit|0;
 $what = $what|0;
 var $$ = 0, $$neg$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newblock$1$i = 0, $newsize$0 = 0, $or$cond$i = 0, $osize$op$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = (($limit|0) / 2)&-1;
 $2 = ($0|0)<($1|0);
 if ($2) {
  $4 = $0 << 1;
  $5 = ($4|0)<(4);
  $$ = $5 ? 4 : $4;
  $newsize$0 = $$;
 } else {
  $3 = ($0|0)<($limit|0);
  if ($3) {
   $newsize$0 = $limit;
  } else {
   HEAP32[$vararg_buffer>>2] = $what;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $limit;
   _luaG_runerror($L,5544,$vararg_buffer);
   // unreachable;
  }
 }
 $6 = (($newsize$0) + 1)|0;
 $7 = (4294967295 / ($size_elems>>>0))&-1;
 $8 = ($6>>>0)>($7>>>0);
 if ($8) {
  _luaM_toobig($L);
  // unreachable;
 }
 $9 = Math_imul($0, $size_elems)|0;
 $10 = Math_imul($newsize$0, $size_elems)|0;
 $11 = (($L) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($block|0)!=(0|0);
 $14 = HEAP32[$12>>2]|0;
 $15 = (($12) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iiiii[$14 & 255]($16,$block,$9,$10)|0);
 $18 = ($17|0)==(0|0);
 $19 = ($10|0)!=(0);
 $or$cond$i = $18 & $19;
 if (!($or$cond$i)) {
  $newblock$1$i = $17;
  $27 = (($12) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $osize$op$i = (0 - ($9))|0;
  $$neg$i = $13 ? $osize$op$i : 0;
  $29 = (($$neg$i) + ($10))|0;
  $30 = (($29) + ($28))|0;
  HEAP32[$27>>2] = $30;
  HEAP32[$size>>2] = $newsize$0;
  STACKTOP = sp;return ($newblock$1$i|0);
 }
 $20 = (($12) + 140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  _luaD_throw($L,4);
  // unreachable;
 }
 _luaC_fullgc($L,1);
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$15>>2]|0;
 $25 = (FUNCTION_TABLE_iiiii[$23 & 255]($24,$block,$9,$10)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  _luaD_throw($L,4);
  // unreachable;
 } else {
  $newblock$1$i = $25;
  $27 = (($12) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $osize$op$i = (0 - ($9))|0;
  $$neg$i = $13 ? $osize$op$i : 0;
  $29 = (($$neg$i) + ($10))|0;
  $30 = (($29) + ($28))|0;
  HEAP32[$27>>2] = $30;
  HEAP32[$size>>2] = $newsize$0;
  STACKTOP = sp;return ($newblock$1$i|0);
 }
 return (0)|0;
}
function _luaM_toobig($L) {
 $L = $L|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaG_runerror($L,5576,$vararg_buffer);
 // unreachable;
}
function _luaM_realloc_($L,$block,$osize,$nsize) {
 $L = $L|0;
 $block = $block|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $newblock$1 = 0, $or$cond = 0, $osize$op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($block|0)!=(0|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = (($1) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$3 & 255]($5,$block,$osize,$nsize)|0);
 $7 = ($6|0)==(0|0);
 $8 = ($nsize|0)!=(0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = (($1) + 140|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   _luaD_throw($L,4);
   // unreachable;
  }
  _luaC_fullgc($L,1);
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$4>>2]|0;
  $14 = (FUNCTION_TABLE_iiiii[$12 & 255]($13,$block,$osize,$nsize)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   _luaD_throw($L,4);
   // unreachable;
  } else {
   $newblock$1 = $14;
  }
 } else {
  $newblock$1 = $6;
 }
 $16 = (($1) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $osize$op = (0 - ($osize))|0;
 $$neg = $2 ? $osize$op : 0;
 $18 = (($$neg) + ($nsize))|0;
 $19 = (($18) + ($17))|0;
 HEAP32[$16>>2] = $19;
 return ($newblock$1|0);
}
function _luaopen_package($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,0);
 _lua_createtable($L,0,1);
 _lua_pushcclosure($L,218,0);
 _lua_setfield($L,-2,10448);
 (_lua_setmetatable($L,-2)|0);
 _lua_rawsetp($L,-1001000,6376);
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,7);
 _luaL_setfuncs($L,5616,0);
 _lua_createtable($L,4,0);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,219,1);
 _lua_rawseti($L,-2,1,0);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,220,1);
 _lua_rawseti($L,-2,2,0);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,221,1);
 _lua_rawseti($L,-2,3,0);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,222,1);
 _lua_rawseti($L,-2,4,0);
 _lua_setfield($L,-2,6072);
 _setpath($L,5680,5688,5704,5720);
 _setpath($L,5872,5880,5896,5912);
 (_lua_pushstring($L,5984)|0);
 _lua_setfield($L,-2,6000);
 (_luaL_getsubtable($L,-1001000,6008)|0);
 _lua_setfield($L,-2,6016);
 (_luaL_getsubtable($L,-1001000,6024)|0);
 _lua_setfield($L,-2,6040);
 (_lua_rawgeti($L,-1001000,2,0)|0);
 _lua_pushvalue($L,-2);
 _luaL_setfuncs($L,6048,1);
 _lua_settop($L,-2);
 return 1;
}
function _gctm($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_len($L,1)|0);
 $1 = tempRet0;
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(0);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if (!($6)) {
  return 0;
 }
 $7 = $0;$8 = $1;
 while(1) {
  (_lua_rawgeti($L,1,$7,$8)|0);
  _lua_settop($L,-2);
  $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
  $10 = tempRet0;
  $11 = ($10|0)>(0);
  $12 = ($9>>>0)>(0);
  $13 = ($10|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  if ($15) {
   $7 = $9;$8 = $10;
  } else {
   break;
  }
 }
 return 0;
}
function _searcher_preload($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 (_lua_getfield($L,-1001000,6024)|0);
 $1 = (_lua_getfield($L,-1,$0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 HEAP32[$vararg_buffer>>2] = $0;
 (_lua_pushfstring($L,6448,$vararg_buffer)|0);
 STACKTOP = sp;return 1;
}
function _searcher_Lua($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 (_lua_getfield($L,-1001001,5680)|0);
 $1 = (_lua_tolstring($L,-1,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = 5680;
  (_luaL_error($L,6384,$vararg_buffer)|0);
 }
 $3 = (_searchpath($L,$0,$1,16336,6200)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_luaL_loadfilex($L,$3,0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  (_lua_pushstring($L,$3)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = (_lua_tolstring($L,1,0)|0);
  $8 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer1>>2] = $7;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $3;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $8;
  $9 = (_luaL_error($L,6240,$vararg_buffer1)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _searcher_C($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 (_lua_getfield($L,-1001001,5872)|0);
 $1 = (_lua_tolstring($L,-1,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = 5872;
  (_luaL_error($L,6384,$vararg_buffer)|0);
 }
 $3 = (_searchpath($L,$0,$1,16336,6200)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_loadfunc($L,$3,$0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  (_lua_pushstring($L,$3)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = (_lua_tolstring($L,1,0)|0);
  $8 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer1>>2] = $7;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $3;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $8;
  $9 = (_luaL_error($L,6240,$vararg_buffer1)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _searcher_Croot($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_strchr($0,46)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 (_lua_pushlstring($L,$0,$5)|0);
 $6 = (_lua_tolstring($L,-1,0)|0);
 (_lua_getfield($L,-1001001,5872)|0);
 $7 = (_lua_tolstring($L,-1,0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = 5872;
  (_luaL_error($L,6384,$vararg_buffer)|0);
 }
 $9 = (_searchpath($L,$6,$7,16336,6200)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_loadfunc($L,$9,$0)|0);
 if ((($11|0) == 2)) {
  HEAP32[$vararg_buffer6>>2] = $0;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $9;
  (_lua_pushfstring($L,6208,$vararg_buffer6)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($11|0) == 0)) {
  (_lua_pushstring($L,$9)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $12 = (_lua_tolstring($L,1,0)|0);
  $13 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer1>>2] = $12;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $9;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $14 = (_luaL_error($L,6240,$vararg_buffer1)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _setpath($L,$fieldname,$envname1,$envname2,$def) {
 $L = $L|0;
 $fieldname = $fieldname|0;
 $envname1 = $envname1|0;
 $envname2 = $envname2|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $path$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv(($envname1|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_getenv(($envname2|0))|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $path$01 = $2;
   label = 3;
  }
 } else {
  $path$01 = $0;
  label = 3;
 }
 if ((label|0) == 3) {
  (_lua_getfield($L,-1001000,6184)|0);
  $4 = (_lua_toboolean($L,-1)|0);
  _lua_settop($L,-2);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (_luaL_gsub($L,$path$01,6160,6168)|0);
   (_luaL_gsub($L,$6,6176,$def)|0);
   _lua_rotate($L,-2,-1);
   _lua_settop($L,-2);
   _lua_setfield($L,-2,$fieldname);
   return;
  }
 }
 (_lua_pushstring($L,$def)|0);
 _lua_setfield($L,-2,$fieldname);
 return;
}
function _ll_loadlib($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_lookforfunc($L,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 _lua_pushnil($L);
 _lua_rotate($L,-2,1);
 $4 = ($2|0)==(1);
 $5 = $4 ? 6512 : 6520;
 (_lua_pushstring($L,$5)|0);
 $$0 = 3;
 return ($$0|0);
}
function _ll_searchpath($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_luaL_optlstring($L,3,16336,0)|0);
 $3 = (_luaL_optlstring($L,4,6200,0)|0);
 $4 = (_searchpath($L,$0,$1,$2,$3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 _lua_pushnil($L);
 _lua_rotate($L,-2,1);
 $$0 = 2;
 return ($$0|0);
}
function _ll_require($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0;
 var $msg$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg$i = sp + 16|0;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_settop($L,1);
 (_lua_getfield($L,-1001000,6008)|0);
 (_lua_getfield($L,2,$0)|0);
 $1 = (_lua_toboolean($L,-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 _lua_settop($L,-2);
 _luaL_buffinit($L,$msg$i);
 $3 = (_lua_getfield($L,-1001001,6072)|0);
 $4 = ($3|0)==(5);
 if (!($4)) {
  (_luaL_error($L,6088,$vararg_buffer)|0);
 }
 $i$0$i = 1;
 while(1) {
  $5 = ($i$0$i|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = (_lua_rawgeti($L,3,$i$0$i,$6)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   _lua_settop($L,-2);
   _luaL_pushresult($msg$i);
   $9 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer1>>2] = $0;
   $vararg_ptr3 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $9;
   (_luaL_error($L,6128,$vararg_buffer1)|0);
  }
  (_lua_pushstring($L,$0)|0);
  _lua_callk($L,1,2,0,0);
  $10 = (_lua_type($L,-2)|0);
  $11 = ($10|0)==(6);
  if ($11) {
   break;
  }
  $12 = (_lua_isstring($L,-2)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   _lua_settop($L,-3);
  } else {
   _lua_settop($L,-2);
   _luaL_addvalue($msg$i);
  }
  $14 = (($i$0$i) + 1)|0;
  $i$0$i = $14;
 }
 (_lua_pushstring($L,$0)|0);
 _lua_rotate($L,-2,1);
 _lua_callk($L,2,1,0,0);
 $15 = (_lua_type($L,-1)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  _lua_setfield($L,2,$0);
 }
 $17 = (_lua_getfield($L,2,$0)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  STACKTOP = sp;return 1;
 }
 _lua_pushboolean($L,1);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,2,$0);
 STACKTOP = sp;return 1;
}
function _searchpath($L,$name,$path,$sep,$dirsep) {
 $L = $L|0;
 $name = $name|0;
 $path = $path|0;
 $sep = $sep|0;
 $dirsep = $dirsep|0;
 var $$0 = 0, $$0$i = 0, $$0$i$be = 0, $$01$ph = 0, $$lcssa = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $l$0$i = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $msg = sp + 8|0;
 _luaL_buffinit($L,$msg);
 $0 = HEAP8[$sep>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$01$ph = $name;
 } else {
  $2 = (_luaL_gsub($L,$name,$sep,$dirsep)|0);
  $$01$ph = $2;
 }
 $$0$i = $path;
 while(1) {
  $3 = HEAP8[$$0$i>>0]|0;
  if ((($3<<24>>24) == 0)) {
   label = 13;
   break;
  } else if ((($3<<24>>24) == 59)) {
   $4 = (($$0$i) + 1|0);
   $$0$i$be = $4;
  } else {
   $5 = (_strchr($$0$i,59)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $7 = (_strlen(($$0$i|0))|0);
    $8 = (($$0$i) + ($7)|0);
    $l$0$i = $8;
   } else {
    $l$0$i = $5;
   }
   $9 = $l$0$i;
   $10 = $$0$i;
   $11 = (($9) - ($10))|0;
   (_lua_pushlstring($L,$$0$i,$11)|0);
   $12 = ($l$0$i|0)==(0|0);
   if ($12) {
    label = 13;
    break;
   }
   $13 = (_lua_tolstring($L,-1,0)|0);
   $14 = (_luaL_gsub($L,$13,6416,$$01$ph)|0);
   _lua_rotate($L,-2,-1);
   _lua_settop($L,-2);
   $15 = (_fopen(($14|0),(6440|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $$lcssa = $14;$$lcssa9 = $15;
    label = 11;
    break;
   }
   HEAP32[$vararg_buffer>>2] = $14;
   (_lua_pushfstring($L,6424,$vararg_buffer)|0);
   _lua_rotate($L,-2,-1);
   _lua_settop($L,-2);
   _luaL_addvalue($msg);
   $$0$i$be = $l$0$i;
  }
  $$0$i = $$0$i$be;
 }
 if ((label|0) == 11) {
  (_fclose(($$lcssa9|0))|0);
  $$0 = $$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 13) {
  _luaL_pushresult($msg);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _loadfunc($L,$filename,$modname) {
 $L = $L|0;
 $filename = $filename|0;
 $modname = $modname|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_gsub($L,$modname,16336,6288)|0);
 $1 = (_strchr($0,45)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$01 = $0;
  } else {
   $3 = $1;
   $4 = $0;
   $5 = (($3) - ($4))|0;
   $6 = (_lua_pushlstring($L,$0,$5)|0);
   HEAP32[$vararg_buffer>>2] = $6;
   $7 = (_lua_pushfstring($L,6296,$vararg_buffer)|0);
   $8 = (_lookforfunc($L,$filename,$7)|0);
   $9 = ($8|0)==(2);
   if ($9) {
    $10 = (($1) + 1|0);
    $$01 = $10;
    break;
   } else {
    $$0 = $8;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$vararg_buffer1>>2] = $$01;
 $11 = (_lua_pushfstring($L,6296,$vararg_buffer1)|0);
 $12 = (_lookforfunc($L,$filename,$11)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _lookforfunc($L,$path,$sym) {
 $L = $L|0;
 $path = $path|0;
 $sym = $sym|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_rawgetp($L,-1001000,6376)|0);
 (_lua_getfield($L,-1,$path)|0);
 $0 = (_lua_touserdata($L,-1)|0);
 _lua_settop($L,-3);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_lua_pushstring($L,6312)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $2 = HEAP8[$sym>>0]|0;
 $3 = ($2<<24>>24)==(42);
 if ($3) {
  _lua_pushboolean($L,1);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_lua_pushstring($L,6312)|0);
  $$0 = 2;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaO_int2fb($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $$06 = 0, $$1$lcssa = 0, $$13 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa15 = 0, $$lcssa16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$0$lcssa = 0, $e$07 = 0, $e$1$lcssa = 0, $e$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)<(8);
 if ($0) {
  $$01 = $x;
  return ($$01|0);
 }
 $1 = ($x>>>0)>(127);
 if ($1) {
  $$06 = $x;$e$07 = 0;
  while(1) {
   $3 = (($$06) + 15)|0;
   $4 = $3 >>> 4;
   $5 = (($e$07) + 4)|0;
   $6 = ($3>>>0)>(2047);
   if ($6) {
    $$06 = $4;$e$07 = $5;
   } else {
    $$lcssa15 = $4;$$lcssa16 = $5;
    break;
   }
  }
  $$0$lcssa = $$lcssa15;$e$0$lcssa = $$lcssa16;
 } else {
  $$0$lcssa = $x;$e$0$lcssa = 0;
 }
 $2 = ($$0$lcssa>>>0)>(15);
 if ($2) {
  $$13 = $$0$lcssa;$e$14 = $e$0$lcssa;
  while(1) {
   $7 = (($$13) + 1)|0;
   $8 = $7 >>> 1;
   $9 = (($e$14) + 1)|0;
   $10 = ($7>>>0)>(31);
   if ($10) {
    $$13 = $8;$e$14 = $9;
   } else {
    $$lcssa = $8;$$lcssa14 = $9;
    break;
   }
  }
  $$1$lcssa = $$lcssa;$e$1$lcssa = $$lcssa14;
 } else {
  $$1$lcssa = $$0$lcssa;$e$1$lcssa = $e$0$lcssa;
 }
 $11 = $e$1$lcssa << 3;
 $12 = (($11) + 8)|0;
 $13 = (($$1$lcssa) + -8)|0;
 $14 = $12 | $13;
 $$01 = $14;
 return ($$01|0);
}
function _luaO_fb2int($x) {
 $x = $x|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x >>> 3;
 $1 = $0 & 31;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $x;
  return ($$0|0);
 }
 $3 = $x & 7;
 $4 = $3 | 8;
 $5 = (($1) + -1)|0;
 $6 = $4 << $5;
 $$0 = $6;
 return ($$0|0);
}
function _luaO_ceillog2($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $$lcssa = 0, $$lcssa5 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $l$0$lcssa = 0, $l$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x) + -1)|0;
 $1 = ($0>>>0)>(255);
 if ($1) {
  $$01 = $0;$l$02 = 0;
  while(1) {
   $2 = (($l$02) + 8)|0;
   $3 = $$01 >>> 8;
   $4 = ($$01>>>0)>(65535);
   if ($4) {
    $$01 = $3;$l$02 = $2;
   } else {
    $$lcssa = $2;$$lcssa5 = $3;
    break;
   }
  }
  $$0$lcssa = $$lcssa5;$l$0$lcssa = $$lcssa;
 } else {
  $$0$lcssa = $0;$l$0$lcssa = 0;
 }
 $5 = (6544 + ($$0$lcssa)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) + ($l$0$lcssa))|0;
 return ($8|0);
}
function _luaO_arith($L,$op,$p1,$p2,$res) {
 $L = $L|0;
 $op = $op|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $res = $res|0;
 var $$0$i1 = 0.0, $$0$i4 = 0.0, $$pre = 0.0, $$pre9 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0;
 var $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $i1 = 0, $i2 = 0, $n1 = 0, $n12 = 0, $n2 = 0, $n23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i1 = sp + 40|0;
 $i2 = sp;
 $n1 = sp + 8|0;
 $n2 = sp + 16|0;
 $n12 = sp + 24|0;
 $n23 = sp + 32|0;
 L1: do {
  switch ($op|0) {
  case 4: case 5:  {
   $77 = (($p1) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)==(3);
   if ($79) {
    $80 = +HEAPF64[$p1>>3];
    HEAPF64[$n1>>3] = $80;
   } else {
    $81 = (_luaV_tonumber_($p1,$n1)|0);
    $82 = ($81|0)==(0);
    if ($82) {
     break L1;
    }
   }
   $83 = (($p2) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(3);
   if ($85) {
    $86 = +HEAPF64[$p2>>3];
    HEAPF64[$n2>>3] = $86;
    $91 = $86;
   } else {
    $87 = (_luaV_tonumber_($p2,$n2)|0);
    $88 = ($87|0)==(0);
    if ($88) {
     break L1;
    }
    $$pre9 = +HEAPF64[$n2>>3];
    $91 = $$pre9;
   }
   $89 = +HEAPF64[$n1>>3];
   switch ($op|0) {
   case 6:  {
    $96 = $89 / $91;
    $97 = (+Math_floor((+$96)));
    $$0$i1 = $97;
    break;
   }
   case 3:  {
    $99 = (+_fmod($89,$91));
    $100 = $91 * $99;
    $101 = $100 < 0.0;
    if ($101) {
     $102 = $91 + $99;
     $$0$i1 = $102;
    } else {
     $$0$i1 = $99;
    }
    break;
   }
   case 0:  {
    $90 = $89 + $91;
    $$0$i1 = $90;
    break;
   }
   case 1:  {
    $92 = $89 - $91;
    $$0$i1 = $92;
    break;
   }
   case 2:  {
    $93 = $89 * $91;
    $$0$i1 = $93;
    break;
   }
   case 5:  {
    $94 = $89 / $91;
    $$0$i1 = $94;
    break;
   }
   case 12:  {
    $98 = -$89;
    $$0$i1 = $98;
    break;
   }
   case 4:  {
    $95 = (+Math_pow((+$89),(+$91)));
    $$0$i1 = $95;
    break;
   }
   default: {
    $$0$i1 = 0.0;
   }
   }
   HEAPF64[$res>>3] = $$0$i1;
   $103 = (($res) + 8|0);
   HEAP32[$103>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 13: case 11: case 10: case 9: case 8: case 7:  {
   $0 = (($p1) + 8|0);
   $1 = HEAP32[$0>>2]|0;
   $2 = ($1|0)==(19);
   if ($2) {
    $3 = $p1;
    $4 = $3;
    $5 = HEAP32[$4>>2]|0;
    $6 = (($3) + 4)|0;
    $7 = $6;
    $8 = HEAP32[$7>>2]|0;
    $9 = $i1;
    $10 = $9;
    HEAP32[$10>>2] = $5;
    $11 = (($9) + 4)|0;
    $12 = $11;
    HEAP32[$12>>2] = $8;
   } else {
    $13 = (_luaV_tointeger($p1,$i1,0)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break L1;
    }
   }
   $15 = (($p2) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(19);
   if ($17) {
    $18 = $p2;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($18) + 4)|0;
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $24 = $i2;
    $25 = $24;
    HEAP32[$25>>2] = $20;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = $23;
    $42 = $20;$43 = $23;
   } else {
    $28 = (_luaV_tointeger($p2,$i2,0)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     break L1;
    }
    $30 = $i2;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $42 = $32;$43 = $35;
   }
   $36 = $i1;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   do {
    switch ($op|0) {
    case 12:  {
     $66 = (_i64Subtract(0,0,($38|0),($41|0))|0);
     $67 = tempRet0;
     $72 = $66;$75 = $67;
     break;
    }
    case 6:  {
     $52 = (_luaV_div($L,$38,$41,$42,$43)|0);
     $53 = tempRet0;
     $72 = $52;$75 = $53;
     break;
    }
    case 8:  {
     $56 = $42 | $38;
     $57 = $43 | $41;
     $72 = $56;$75 = $57;
     break;
    }
    case 0:  {
     $44 = (_i64Add(($42|0),($43|0),($38|0),($41|0))|0);
     $45 = tempRet0;
     $72 = $44;$75 = $45;
     break;
    }
    case 10:  {
     $60 = (_luaV_shiftl($38,$41,$42,$43)|0);
     $61 = tempRet0;
     $72 = $60;$75 = $61;
     break;
    }
    case 3:  {
     $50 = (_luaV_mod($L,$38,$41,$42,$43)|0);
     $51 = tempRet0;
     $72 = $50;$75 = $51;
     break;
    }
    case 2:  {
     $48 = (___muldi3(($42|0),($43|0),($38|0),($41|0))|0);
     $49 = tempRet0;
     $72 = $48;$75 = $49;
     break;
    }
    case 1:  {
     $46 = (_i64Subtract(($38|0),($41|0),($42|0),($43|0))|0);
     $47 = tempRet0;
     $72 = $46;$75 = $47;
     break;
    }
    case 7:  {
     $54 = $42 & $38;
     $55 = $43 & $41;
     $72 = $54;$75 = $55;
     break;
    }
    case 11:  {
     $62 = (_i64Subtract(0,0,($42|0),($43|0))|0);
     $63 = tempRet0;
     $64 = (_luaV_shiftl($38,$41,$62,$63)|0);
     $65 = tempRet0;
     $72 = $64;$75 = $65;
     break;
    }
    case 13:  {
     $68 = $38 ^ -1;
     $69 = $41 ^ -1;
     $72 = $68;$75 = $69;
     break;
    }
    case 9:  {
     $58 = $42 ^ $38;
     $59 = $43 ^ $41;
     $72 = $58;$75 = $59;
     break;
    }
    default: {
     $72 = 0;$75 = 0;
    }
    }
   } while(0);
   $70 = $res;
   $71 = $70;
   HEAP32[$71>>2] = $72;
   $73 = (($70) + 4)|0;
   $74 = $73;
   HEAP32[$74>>2] = $75;
   $76 = (($res) + 8|0);
   HEAP32[$76>>2] = 19;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $104 = (($p1) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   if ((($105|0) == 3)) {
    $154 = +HEAPF64[$p1>>3];
    HEAPF64[$n12>>3] = $154;
   } else if ((($105|0) == 19)) {
    $106 = (($p2) + 8|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(19);
    if ($108) {
     $109 = $p1;
     $110 = $109;
     $111 = HEAP32[$110>>2]|0;
     $112 = (($109) + 4)|0;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = $p2;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = (($115) + 4)|0;
     $119 = $118;
     $120 = HEAP32[$119>>2]|0;
     do {
      switch ($op|0) {
      case 3:  {
       $127 = (_luaV_mod($L,$111,$114,$117,$120)|0);
       $128 = tempRet0;
       $149 = $127;$152 = $128;
       break;
      }
      case 6:  {
       $129 = (_luaV_div($L,$111,$114,$117,$120)|0);
       $130 = tempRet0;
       $149 = $129;$152 = $130;
       break;
      }
      case 0:  {
       $121 = (_i64Add(($117|0),($120|0),($111|0),($114|0))|0);
       $122 = tempRet0;
       $149 = $121;$152 = $122;
       break;
      }
      case 2:  {
       $125 = (___muldi3(($117|0),($120|0),($111|0),($114|0))|0);
       $126 = tempRet0;
       $149 = $125;$152 = $126;
       break;
      }
      case 8:  {
       $133 = $117 | $111;
       $134 = $120 | $114;
       $149 = $133;$152 = $134;
       break;
      }
      case 9:  {
       $135 = $117 ^ $111;
       $136 = $120 ^ $114;
       $149 = $135;$152 = $136;
       break;
      }
      case 1:  {
       $123 = (_i64Subtract(($111|0),($114|0),($117|0),($120|0))|0);
       $124 = tempRet0;
       $149 = $123;$152 = $124;
       break;
      }
      case 7:  {
       $131 = $117 & $111;
       $132 = $120 & $114;
       $149 = $131;$152 = $132;
       break;
      }
      case 10:  {
       $137 = (_luaV_shiftl($111,$114,$117,$120)|0);
       $138 = tempRet0;
       $149 = $137;$152 = $138;
       break;
      }
      case 11:  {
       $139 = (_i64Subtract(0,0,($117|0),($120|0))|0);
       $140 = tempRet0;
       $141 = (_luaV_shiftl($111,$114,$139,$140)|0);
       $142 = tempRet0;
       $149 = $141;$152 = $142;
       break;
      }
      case 12:  {
       $143 = (_i64Subtract(0,0,($111|0),($114|0))|0);
       $144 = tempRet0;
       $149 = $143;$152 = $144;
       break;
      }
      case 13:  {
       $145 = $111 ^ -1;
       $146 = $114 ^ -1;
       $149 = $145;$152 = $146;
       break;
      }
      default: {
       $149 = 0;$152 = 0;
      }
      }
     } while(0);
     $147 = $res;
     $148 = $147;
     HEAP32[$148>>2] = $149;
     $150 = (($147) + 4)|0;
     $151 = $150;
     HEAP32[$151>>2] = $152;
     $153 = (($res) + 8|0);
     HEAP32[$153>>2] = 19;
     STACKTOP = sp;return;
    } else {
     label = 58;
    }
   } else {
    label = 58;
   }
   if ((label|0) == 58) {
    $155 = (_luaV_tonumber_($p1,$n12)|0);
    $156 = ($155|0)==(0);
    if ($156) {
     break L1;
    }
   }
   $157 = (($p2) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(3);
   if ($159) {
    $160 = +HEAPF64[$p2>>3];
    HEAPF64[$n23>>3] = $160;
    $165 = $160;
   } else {
    $161 = (_luaV_tonumber_($p2,$n23)|0);
    $162 = ($161|0)==(0);
    if ($162) {
     break L1;
    }
    $$pre = +HEAPF64[$n23>>3];
    $165 = $$pre;
   }
   $163 = +HEAPF64[$n12>>3];
   switch ($op|0) {
   case 6:  {
    $170 = $163 / $165;
    $171 = (+Math_floor((+$170)));
    $$0$i4 = $171;
    break;
   }
   case 12:  {
    $172 = -$163;
    $$0$i4 = $172;
    break;
   }
   case 0:  {
    $164 = $163 + $165;
    $$0$i4 = $164;
    break;
   }
   case 4:  {
    $169 = (+Math_pow((+$163),(+$165)));
    $$0$i4 = $169;
    break;
   }
   case 2:  {
    $167 = $163 * $165;
    $$0$i4 = $167;
    break;
   }
   case 1:  {
    $166 = $163 - $165;
    $$0$i4 = $166;
    break;
   }
   case 5:  {
    $168 = $163 / $165;
    $$0$i4 = $168;
    break;
   }
   case 3:  {
    $173 = (+_fmod($163,$165));
    $174 = $165 * $173;
    $175 = $174 < 0.0;
    if ($175) {
     $176 = $165 + $173;
     $$0$i4 = $176;
    } else {
     $$0$i4 = $173;
    }
    break;
   }
   default: {
    $$0$i4 = 0.0;
   }
   }
   HEAPF64[$res>>3] = $$0$i4;
   $177 = (($res) + 8|0);
   HEAP32[$177>>2] = 3;
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $178 = (($op) + 6)|0;
 _luaT_trybinTM($L,$p1,$p2,$res,$178);
 STACKTOP = sp;return;
}
function _luaO_hexavalue($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 1)|0;
 $1 = (12952 + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 2;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $6 = $c | 32;
  $7 = (($6) + -87)|0;
  $$0 = $7;
  return ($$0|0);
 } else {
  $5 = (($c) + -48)|0;
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaO_str2num($s,$o) {
 $s = $s|0;
 $o = $o|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i2$i = 0, $$lcssa = 0, $$lcssa$i = 0, $$lcssa1$i = 0, $$lcssa29 = 0, $$lcssa30 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$lcssa34 = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$lcssa38 = 0, $$lcssa39 = 0, $$lcssa40 = 0, $$lcssa7 = 0, $$lcssa8 = 0, $$ph$i = 0, $$ph$i$pn = 0;
 var $$pre$i = 0, $$pre$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $e$0 = 0, $empty$2$ph$i = 0, $endptr$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i$not = 0, $storemerge$i = 0;
 var $storemerge$i$lcssa = 0, $storemerge111$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr$i = sp;
 $storemerge$i = $s;
 while(1) {
  $0 = HEAP8[$storemerge$i>>0]|0;
  $1 = $0&255;
  $2 = (($1) + 1)|0;
  $3 = (12952 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 8;
  $6 = ($5<<24>>24)==(0);
  $7 = (($storemerge$i) + 1|0);
  if ($6) {
   $$lcssa39 = $0;$$lcssa40 = $7;$storemerge$i$lcssa = $storemerge$i;
   break;
  } else {
   $storemerge$i = $7;
  }
 }
 if ((($$lcssa39<<24>>24) == 45)) {
  $$0$i$i = 1;$9 = $$lcssa40;
 } else if ((($$lcssa39<<24>>24) == 43)) {
  $$0$i$i = 0;$9 = $$lcssa40;
 } else {
  $$0$i$i = 0;$9 = $storemerge$i$lcssa;
 }
 $8 = HEAP8[$9>>0]|0;
 $10 = ($8<<24>>24)==(48);
 if ($10) {
  $11 = (($9) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  if ((($12<<24>>24) == 88) | (($12<<24>>24) == 120)) {
   $19 = (($9) + 2|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = (($21) + 1)|0;
   $23 = (12952 + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 & 16;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $$ph$i = $19;$125 = $20;$28 = $24;$86 = 0;$87 = 0;$empty$2$ph$i = 1;
   } else {
    $30 = 0;$31 = 0;$35 = $20;$storemerge111$i = $19;
    while(1) {
     $32 = (_bitshift64Shl(($30|0),($31|0),4)|0);
     $33 = tempRet0;
     $34 = $35 << 24 >> 24;
     $36 = (($34) + 1)|0;
     $37 = (12952 + ($36)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38 & 2;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      $42 = $34 | 32;
      $43 = (($42) + -87)|0;
      $$0$i2$i = $43;
     } else {
      $41 = (($34) + -48)|0;
      $$0$i2$i = $41;
     }
     $44 = ($$0$i2$i|0)<(0);
     $45 = $44 << 31 >> 31;
     $46 = (_i64Add(($$0$i2$i|0),($45|0),($32|0),($33|0))|0);
     $47 = tempRet0;
     $48 = (($storemerge111$i) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = (($50) + 1)|0;
     $52 = (12952 + ($51)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 & 16;
     $55 = ($54<<24>>24)==(0);
     if ($55) {
      $$lcssa36 = $48;$$lcssa37 = $49;$$lcssa38 = $53;$128 = $46;$129 = $47;
      break;
     } else {
      $30 = $46;$31 = $47;$35 = $49;$storemerge111$i = $48;
     }
    }
    $$ph$i = $$lcssa36;$125 = $$lcssa37;$28 = $$lcssa38;$86 = $128;$87 = $129;$empty$2$ph$i = 0;
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $13 = $8&255;
  $14 = (($13) + 1)|0;
  $15 = (12952 + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & 2;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$ph$i = $9;$125 = $8;$28 = $16;$86 = 0;$87 = 0;$empty$2$ph$i = 1;
  } else {
   $56 = 0;$57 = 0;$61 = $8;$69 = $9;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = $61 << 24 >> 24;
    $62 = ($60|0)<(0);
    $63 = $62 << 31 >> 31;
    $64 = (_i64Add(($60|0),($63|0),-48,-1)|0);
    $65 = tempRet0;
    $66 = (_i64Add(($64|0),($65|0),($58|0),($59|0))|0);
    $67 = tempRet0;
    $68 = (($69) + 1|0);
    $70 = HEAP8[$68>>0]|0;
    $71 = $70&255;
    $72 = (($71) + 1)|0;
    $73 = (12952 + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 & 2;
    $76 = ($75<<24>>24)==(0);
    if ($76) {
     $$lcssa32 = $68;$$lcssa33 = $70;$$lcssa34 = $74;$126 = $66;$127 = $67;
     break;
    } else {
     $56 = $66;$57 = $67;$61 = $70;$69 = $68;
    }
   }
   $$ph$i = $$lcssa32;$125 = $$lcssa33;$28 = $$lcssa34;$86 = $126;$87 = $127;$empty$2$ph$i = 0;
  }
 }
 $27 = $28 & 8;
 $29 = ($27<<24>>24)==(0);
 if ($29) {
  $$lcssa7 = $125;$$lcssa8 = $$ph$i;
 } else {
  $$ph$i$pn = $$ph$i;
  while(1) {
   $77 = (($$ph$i$pn) + 1|0);
   $$pre$i = HEAP8[$77>>0]|0;
   $78 = $$pre$i&255;
   $79 = (($78) + 1)|0;
   $80 = (12952 + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81 & 8;
   $83 = ($82<<24>>24)==(0);
   if ($83) {
    $$lcssa30 = $77;$$pre$i$lcssa = $$pre$i;
    break;
   } else {
    $$ph$i$pn = $77;
   }
  }
  $$lcssa7 = $$pre$i$lcssa;$$lcssa8 = $$lcssa30;
 }
 $notlhs = ($empty$2$ph$i|0)!=(0);
 $notrhs = ($$lcssa7<<24>>24)!=(0);
 $or$cond$i$not = $notrhs | $notlhs;
 $84 = ($$lcssa8|0)==(0|0);
 $or$cond = $or$cond$i$not | $84;
 do {
  if ($or$cond) {
   $97 = (_strpbrk($s,6928)|0);
   $98 = ($97|0)==(0|0);
   if (!($98)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $99 = (+_strtod($s,$endptr$i));
   $100 = HEAP32[$endptr$i>>2]|0;
   $101 = ($100|0)==($s|0);
   if ($101) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $102 = HEAP8[$100>>0]|0;
   $103 = $102&255;
   $104 = (($103) + 1)|0;
   $105 = (12952 + ($104)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106 & 8;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $$lcssa$i = $100;$$lcssa1$i = $102;
   } else {
    $110 = $100;
    while(1) {
     $109 = (($110) + 1|0);
     $111 = HEAP8[$109>>0]|0;
     $112 = $111&255;
     $113 = (($112) + 1)|0;
     $114 = (12952 + ($113)|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115 & 8;
     $117 = ($116<<24>>24)==(0);
     if ($117) {
      $$lcssa = $109;$$lcssa29 = $111;
      break;
     } else {
      $110 = $109;
     }
    }
    HEAP32[$endptr$i>>2] = $$lcssa;
    $$lcssa$i = $$lcssa;$$lcssa1$i = $$lcssa29;
   }
   $118 = ($$lcssa1$i<<24>>24)==(0);
   if (!($118)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $119 = ($$lcssa$i|0)==(0|0);
   if ($119) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAPF64[$o>>3] = $99;
    $120 = (($o) + 8|0);
    HEAP32[$120>>2] = 3;
    $e$0 = $$lcssa$i;
    break;
   }
  } else {
   $85 = ($$0$i$i|0)!=(0);
   $88 = (_i64Subtract(0,0,($86|0),($87|0))|0);
   $89 = tempRet0;
   $90 = $85 ? $88 : $86;
   $91 = $85 ? $89 : $87;
   $92 = $o;
   $93 = $92;
   HEAP32[$93>>2] = $90;
   $94 = (($92) + 4)|0;
   $95 = $94;
   HEAP32[$95>>2] = $91;
   $96 = (($o) + 8|0);
   HEAP32[$96>>2] = 19;
   $e$0 = $$lcssa8;
  }
 } while(0);
 $121 = $e$0;
 $122 = $s;
 $123 = (1 - ($122))|0;
 $124 = (($123) + ($121))|0;
 $$0 = $124;
 STACKTOP = sp;return ($$0|0);
}
function _luaO_utf8esc($buff,$x) {
 $buff = $buff|0;
 $x = $x|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa5 = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $mfb$0 = 0, $n$0 = 0, $n$0$lcssa = 0, $n$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)<(128);
 if ($0) {
  $1 = $x&255;
  $2 = (($buff) + 7|0);
  HEAP8[$2>>0] = $1;
  $n$1 = 1;
  return ($n$1|0);
 }
 $$0 = $x;$mfb$0 = 63;$n$0 = 1;
 while(1) {
  $3 = $$0 & 63;
  $4 = $3 | 128;
  $5 = $4&255;
  $6 = (($n$0) + 1)|0;
  $7 = (8 - ($n$0))|0;
  $8 = (($buff) + ($7)|0);
  HEAP8[$8>>0] = $5;
  $9 = $$0 >>> 6;
  $10 = $mfb$0 >>> 1;
  $11 = ($9>>>0)>($10>>>0);
  if ($11) {
   $$0 = $9;$mfb$0 = $10;$n$0 = $6;
  } else {
   $$lcssa = $6;$$lcssa5 = $9;$$lcssa6 = $10;$n$0$lcssa = $n$0;
   break;
  }
 }
 $12 = $$lcssa6 << 1;
 $13 = $12 ^ 254;
 $14 = $13 | $$lcssa5;
 $15 = $14&255;
 $16 = (7 - ($n$0$lcssa))|0;
 $17 = (($buff) + ($16)|0);
 HEAP8[$17>>0] = $15;
 $n$1 = $$lcssa;
 return ($n$1|0);
}
function _luaO_tostring($L,$obj) {
 $L = $L|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $len$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buff = sp + 16|0;
 $0 = (($obj) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(19);
 if ($2) {
  $3 = $obj;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = $vararg_buffer;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  $13 = (_sprintf($buff,6800,$vararg_buffer)|0);
  $len$0 = $13;
 } else {
  $14 = +HEAPF64[$obj>>3];
  HEAPF64[tempDoublePtr>>3]=$14;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (_sprintf($buff,6808,$vararg_buffer1)|0);
  $16 = (_strspn($buff,6816)|0);
  $17 = (($buff) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if ($19) {
   $20 = (_localeconv()|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP8[$21>>0]|0;
   $23 = (($15) + 1)|0;
   $24 = (($buff) + ($15)|0);
   HEAP8[$24>>0] = $22;
   $25 = (($15) + 2)|0;
   $26 = (($buff) + ($23)|0);
   HEAP8[$26>>0] = 48;
   $len$0 = $25;
  } else {
   $len$0 = $15;
  }
 }
 $27 = (_luaS_newlstr($L,$buff,$len$0)|0);
 HEAP32[$obj>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 | 64;
 HEAP32[$0>>2] = $31;
 STACKTOP = sp;return;
}
function _luaO_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $$ = 0, $$0$i = 0, $$0$lcssa = 0, $$011 = 0, $$lcssa = 0, $$lcssa23 = 0, $$lcssa24 = 0, $$lcssa25 = 0, $$lcssa27 = 0, $$lcssa28 = 0, $$lcssa29 = 0, $$lcssa30 = 0, $$lcssa7 = 0, $$pre = 0, $$pre22 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next21 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $buff = 0, $buff3 = 0, $buff4 = 0, $mfb$0$i = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $n$0$lcssa = 0, $n$010 = 0, $n$1$i = 0, $vararg_buffer = 0, $vararg_buffer16 = 0;
 var $vararg_buffer22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 16|0;
 $vararg_buffer16 = sp;
 $vararg_buffer = sp + 8|0;
 $buff = sp + 56|0;
 $buff3 = sp + 24|0;
 $buff4 = sp + 48|0;
 $0 = (_strchr($fmt,37)|0);
 $1 = ($0|0)==(0|0);
 $2 = (($L) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 do {
  if ($1) {
   $$0$lcssa = $fmt;$$lcssa7 = $8;$157 = $5;$n$0$lcssa = 0;
  } else {
   $9 = (($buff4) + 7|0);
   $$011 = $fmt;$10 = $8;$12 = $0;$158 = $5;$n$010 = 0;
   L3: while(1) {
    $11 = ($10|0)<(48);
    if ($11) {
     _luaD_growstack($L,2);
     $$pre22 = HEAP32[$4>>2]|0;
     $17 = $$pre22;
    } else {
     $17 = $158;
    }
    $13 = $12;
    $14 = $$011;
    $15 = (($13) - ($14))|0;
    $16 = (($17) + 16|0);
    HEAP32[$4>>2] = $16;
    $18 = (_luaS_newlstr($L,$$011,$15)|0);
    HEAP32[$17>>2] = $18;
    $19 = (($18) + 4|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = $21 | 64;
    $23 = (($17) + 8|0);
    HEAP32[$23>>2] = $22;
    $24 = (($12) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    L8: do {
     switch ($26|0) {
     case 99:  {
      $arglist_current2 = HEAP32[$argp>>2]|0;
      $38 = HEAP32[$arglist_current2>>2]|0;
      $arglist_next3 = (($arglist_current2) + 4|0);
      HEAP32[$argp>>2] = $arglist_next3;
      $39 = $38&255;
      HEAP8[$buff>>0] = $39;
      $40 = $38 & 255;
      $41 = (($40) + 1)|0;
      $42 = (12952 + ($41)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43 & 4;
      $45 = ($44<<24>>24)==(0);
      if ($45) {
       HEAP32[$vararg_buffer>>2] = $40;
       (_luaO_pushfstring($L,6832,$vararg_buffer)|0);
       break L8;
      } else {
       $46 = HEAP32[$4>>2]|0;
       $47 = (($46) + 16|0);
       HEAP32[$4>>2] = $47;
       $48 = (_luaS_newlstr($L,$buff,1)|0);
       HEAP32[$46>>2] = $48;
       $49 = (($48) + 4|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = $50&255;
       $52 = $51 | 64;
       $53 = (($46) + 8|0);
       HEAP32[$53>>2] = $52;
       break L8;
      }
      break;
     }
     case 85:  {
      $arglist_current20 = HEAP32[$argp>>2]|0;
      $97 = HEAP32[$arglist_current20>>2]|0;
      $arglist_next21 = (($arglist_current20) + 4|0);
      HEAP32[$argp>>2] = $arglist_next21;
      $98 = ($97>>>0)<(128);
      if ($98) {
       $99 = $97&255;
       HEAP8[$9>>0] = $99;
       $n$1$i = 1;
      } else {
       $$0$i = $97;$mfb$0$i = 63;$n$0$i = 1;
       while(1) {
        $100 = $$0$i & 63;
        $101 = $100 | 128;
        $102 = $101&255;
        $103 = (($n$0$i) + 1)|0;
        $104 = (8 - ($n$0$i))|0;
        $105 = (($buff4) + ($104)|0);
        HEAP8[$105>>0] = $102;
        $106 = $$0$i >>> 6;
        $107 = $mfb$0$i >>> 1;
        $108 = ($106>>>0)>($107>>>0);
        if ($108) {
         $$0$i = $106;$mfb$0$i = $107;$n$0$i = $103;
        } else {
         $$lcssa = $103;$$lcssa23 = $106;$$lcssa24 = $107;$n$0$i$lcssa = $n$0$i;
         break;
        }
       }
       $109 = $$lcssa24 << 1;
       $110 = $109 ^ 254;
       $111 = $110 | $$lcssa23;
       $112 = $111&255;
       $113 = (7 - ($n$0$i$lcssa))|0;
       $114 = (($buff4) + ($113)|0);
       HEAP8[$114>>0] = $112;
       $n$1$i = $$lcssa;
      }
      $$sum = (8 - ($n$1$i))|0;
      $115 = (($buff4) + ($$sum)|0);
      $116 = HEAP32[$4>>2]|0;
      $117 = (($116) + 16|0);
      HEAP32[$4>>2] = $117;
      $118 = (_luaS_newlstr($L,$115,$n$1$i)|0);
      HEAP32[$116>>2] = $118;
      $119 = (($118) + 4|0);
      $120 = HEAP8[$119>>0]|0;
      $121 = $120&255;
      $122 = $121 | 64;
      $123 = (($116) + 8|0);
      HEAP32[$123>>2] = $122;
      break;
     }
     case 73:  {
      $66 = HEAP32[$4>>2]|0;
      $67 = (($66) + 16|0);
      HEAP32[$4>>2] = $67;
      $arglist_current8 = HEAP32[$argp>>2]|0;
      $68 = $arglist_current8;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = (($68) + 4)|0;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $arglist_next9 = (($arglist_current8) + 8|0);
      HEAP32[$argp>>2] = $arglist_next9;
      $74 = $66;
      $75 = $74;
      HEAP32[$75>>2] = $70;
      $76 = (($74) + 4)|0;
      $77 = $76;
      HEAP32[$77>>2] = $73;
      $78 = (($66) + 8|0);
      HEAP32[$78>>2] = 19;
      $79 = HEAP32[$4>>2]|0;
      $80 = (($79) + -16|0);
      _luaO_tostring($L,$80);
      break;
     }
     case 102:  {
      $81 = HEAP32[$4>>2]|0;
      $82 = (($81) + 16|0);
      HEAP32[$4>>2] = $82;
      $arglist_current11 = HEAP32[$argp>>2]|0;
      HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current11>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current11+4>>2];$83 = +HEAPF64[tempDoublePtr>>3];
      $arglist_next12 = (($arglist_current11) + 8|0);
      HEAP32[$argp>>2] = $arglist_next12;
      HEAPF64[$81>>3] = $83;
      $84 = (($81) + 8|0);
      HEAP32[$84>>2] = 3;
      $85 = HEAP32[$4>>2]|0;
      $86 = (($85) + -16|0);
      _luaO_tostring($L,$86);
      break;
     }
     case 115:  {
      $arglist_current = HEAP32[$argp>>2]|0;
      $27 = HEAP32[$arglist_current>>2]|0;
      $arglist_next = (($arglist_current) + 4|0);
      HEAP32[$argp>>2] = $arglist_next;
      $28 = ($27|0)==(0|0);
      $$ = $28 ? 16256 : $27;
      $29 = (_strlen(($$|0))|0);
      $30 = HEAP32[$4>>2]|0;
      $31 = (($30) + 16|0);
      HEAP32[$4>>2] = $31;
      $32 = (_luaS_newlstr($L,$$,$29)|0);
      HEAP32[$30>>2] = $32;
      $33 = (($32) + 4|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = $34&255;
      $36 = $35 | 64;
      $37 = (($30) + 8|0);
      HEAP32[$37>>2] = $36;
      break;
     }
     case 112:  {
      $arglist_current14 = HEAP32[$argp>>2]|0;
      $87 = HEAP32[$arglist_current14>>2]|0;
      $arglist_next15 = (($arglist_current14) + 4|0);
      HEAP32[$argp>>2] = $arglist_next15;
      HEAP32[$vararg_buffer16>>2] = $87;
      $88 = (_sprintf($buff3,6840,$vararg_buffer16)|0);
      $89 = HEAP32[$4>>2]|0;
      $90 = (($89) + 16|0);
      HEAP32[$4>>2] = $90;
      $91 = (_luaS_newlstr($L,$buff3,$88)|0);
      HEAP32[$89>>2] = $91;
      $92 = (($91) + 4|0);
      $93 = HEAP8[$92>>0]|0;
      $94 = $93&255;
      $95 = $94 | 64;
      $96 = (($89) + 8|0);
      HEAP32[$96>>2] = $95;
      break;
     }
     case 100:  {
      $54 = HEAP32[$4>>2]|0;
      $55 = (($54) + 16|0);
      HEAP32[$4>>2] = $55;
      $arglist_current5 = HEAP32[$argp>>2]|0;
      $56 = HEAP32[$arglist_current5>>2]|0;
      $arglist_next6 = (($arglist_current5) + 4|0);
      HEAP32[$argp>>2] = $arglist_next6;
      $57 = ($56|0)<(0);
      $58 = $57 << 31 >> 31;
      $59 = $54;
      $60 = $59;
      HEAP32[$60>>2] = $56;
      $61 = (($59) + 4)|0;
      $62 = $61;
      HEAP32[$62>>2] = $58;
      $63 = (($54) + 8|0);
      HEAP32[$63>>2] = 19;
      $64 = HEAP32[$4>>2]|0;
      $65 = (($64) + -16|0);
      _luaO_tostring($L,$65);
      break;
     }
     case 37:  {
      $124 = HEAP32[$4>>2]|0;
      $125 = (($124) + 16|0);
      HEAP32[$4>>2] = $125;
      $126 = (_luaS_newlstr($L,6848,1)|0);
      HEAP32[$124>>2] = $126;
      $127 = (($126) + 4|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = $128&255;
      $130 = $129 | 64;
      $131 = (($124) + 8|0);
      HEAP32[$131>>2] = $130;
      break;
     }
     default: {
      $$lcssa25 = $26;
      label = 21;
      break L3;
     }
     }
    } while(0);
    $132 = (($n$010) + 2)|0;
    $133 = (($12) + 2|0);
    $134 = (_strchr($133,37)|0);
    $135 = ($134|0)==(0|0);
    $136 = HEAP32[$2>>2]|0;
    $137 = HEAP32[$4>>2]|0;
    $138 = $136;
    $139 = $137;
    $140 = (($138) - ($139))|0;
    if ($135) {
     $$lcssa27 = $132;$$lcssa28 = $133;$$lcssa29 = $137;$$lcssa30 = $140;
     label = 23;
     break;
    } else {
     $$011 = $133;$10 = $140;$12 = $134;$158 = $137;$n$010 = $132;
    }
   }
   if ((label|0) == 21) {
    HEAP32[$vararg_buffer22>>2] = $$lcssa25;
    _luaG_runerror($L,6856,$vararg_buffer22);
    // unreachable;
   }
   else if ((label|0) == 23) {
    $$0$lcssa = $$lcssa28;$$lcssa7 = $$lcssa30;$157 = $$lcssa29;$n$0$lcssa = $$lcssa27;
    break;
   }
  }
 } while(0);
 $141 = ($$lcssa7|0)<(32);
 if ($141) {
  _luaD_growstack($L,1);
  $$pre = HEAP32[$4>>2]|0;
  $144 = $$pre;
 } else {
  $144 = $157;
 }
 $142 = (_strlen(($$0$lcssa|0))|0);
 $143 = (($144) + 16|0);
 HEAP32[$4>>2] = $143;
 $145 = (_luaS_newlstr($L,$$0$lcssa,$142)|0);
 HEAP32[$144>>2] = $145;
 $146 = (($145) + 4|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&255;
 $149 = $148 | 64;
 $150 = (($144) + 8|0);
 HEAP32[$150>>2] = $149;
 $151 = ($n$0$lcssa|0)>(0);
 if (!($151)) {
  $153 = HEAP32[$4>>2]|0;
  $154 = (($153) + -16|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + 16|0);
  STACKTOP = sp;return ($156|0);
 }
 $152 = $n$0$lcssa | 1;
 _luaV_concat($L,$152);
 $153 = HEAP32[$4>>2]|0;
 $154 = (($153) + -16|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($155) + 16|0);
 STACKTOP = sp;return ($156|0);
}
function _luaO_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argp = sp;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaO_chunkid($out,$source,$bufflen) {
 $out = $out|0;
 $source = $source|0;
 $bufflen = $bufflen|0;
 var $$0 = 0, $$l$0 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum3$pn = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_strlen(($source|0))|0);
 $1 = HEAP8[$source>>0]|0;
 if ((($1<<24>>24) == 64)) {
  $6 = ($0>>>0)>($bufflen>>>0);
  if ($6) {
   ;HEAP8[$out+0>>0]=HEAP8[14816+0>>0]|0;HEAP8[$out+1>>0]=HEAP8[14816+1>>0]|0;HEAP8[$out+2>>0]=HEAP8[14816+2>>0]|0;
   $8 = (($out) + 3|0);
   $9 = (($bufflen) + -3)|0;
   $$sum4 = (4 - ($bufflen))|0;
   $$sum5 = (($$sum4) + ($0))|0;
   $10 = (($source) + ($$sum5)|0);
   _memcpy(($8|0),($10|0),($9|0))|0;
   return;
  } else {
   $7 = (($source) + 1|0);
   _memcpy(($out|0),($7|0),($0|0))|0;
   return;
  }
 } else if ((($1<<24>>24) == 61)) {
  $2 = ($0>>>0)>($bufflen>>>0);
  $3 = (($source) + 1|0);
  if ($2) {
   $4 = (($bufflen) + -1)|0;
   _memcpy(($out|0),($3|0),($4|0))|0;
   $5 = (($out) + ($4)|0);
   HEAP8[$5>>0] = 0;
   return;
  } else {
   _memcpy(($out|0),($3|0),($0|0))|0;
   return;
  }
 } else {
  $11 = (_strchr($source,10)|0);
  dest=$out+0|0; src=6904+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $12 = (($out) + 9|0);
  $13 = (($bufflen) + -15)|0;
  $14 = ($0>>>0)<($13>>>0);
  $15 = ($11|0)==(0|0);
  $or$cond = $14 & $15;
  if ($or$cond) {
   _memcpy(($12|0),($source|0),($0|0))|0;
   $$sum3 = (($0) + 9)|0;
   $$sum3$pn = $$sum3;
  } else {
   if ($15) {
    $l$0 = $0;
   } else {
    $16 = $11;
    $17 = $source;
    $18 = (($16) - ($17))|0;
    $l$0 = $18;
   }
   $19 = ($l$0>>>0)>($13>>>0);
   $$l$0 = $19 ? $13 : $l$0;
   _memcpy(($12|0),($source|0),($$l$0|0))|0;
   $$sum = (($$l$0) + 9)|0;
   $20 = (($out) + ($$sum)|0);
   ;HEAP8[$20+0>>0]=HEAP8[14816+0>>0]|0;HEAP8[$20+1>>0]=HEAP8[14816+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[14816+2>>0]|0;
   $$sum2 = (($$l$0) + 12)|0;
   $$sum3$pn = $$sum2;
  }
  $$0 = (($out) + ($$sum3$pn)|0);
  ;HEAP8[$$0+0>>0]=HEAP8[6920+0>>0]|0;HEAP8[$$0+1>>0]=HEAP8[6920+1>>0]|0;HEAP8[$$0+2>>0]=HEAP8[6920+2>>0]|0;
  return;
 }
}
function _luaopen_os($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,11);
 _luaL_setfuncs($L,6984,0);
 return 1;
}
function _os_clock($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_clock()|0);
 $1 = (+($0|0));
 $2 = $1 / 1.0E+6;
 _lua_pushnumber($L,$2);
 return 1;
}
function _os_date($L) {
 $L = $L|0;
 var $$0$i = 0, $$lcssa = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $b = 0, $buff = 0, $cc = 0, $i$01$i = 0;
 var $s$0 = 0, $s$1 = 0, $s$1$be = 0, $stm$0 = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t = sp + 8216|0;
 $cc = sp + 8424|0;
 $b = sp + 8|0;
 $buff = sp + 8224|0;
 $0 = (_luaL_optlstring($L,1,7416,0)|0);
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = (_time((0|0))|0);
  $6 = $3;
 } else {
  $4 = (_luaL_checkinteger($L,2)|0);
  $5 = tempRet0;
  $6 = $4;
 }
 HEAP32[$t>>2] = $6;
 $7 = HEAP8[$0>>0]|0;
 $8 = ($7<<24>>24)==(33);
 if ($8) {
  $9 = (_gmtime(($t|0))|0);
  $10 = (($0) + 1|0);
  $s$0 = $10;$stm$0 = $9;
 } else {
  $11 = (_localtime(($t|0))|0);
  $s$0 = $0;$stm$0 = $11;
 }
 $12 = ($stm$0|0)==(0|0);
 if ($12) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 }
 $13 = (_strcmp($s$0,7424)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  _lua_createtable($L,0,9);
  $15 = HEAP32[$stm$0>>2]|0;
  $16 = ($15|0)<(0);
  $17 = $16 << 31 >> 31;
  _lua_pushinteger($L,$15,$17);
  _lua_setfield($L,-2,7216);
  $18 = (($stm$0) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)<(0);
  $21 = $20 << 31 >> 31;
  _lua_pushinteger($L,$19,$21);
  _lua_setfield($L,-2,7224);
  $22 = (($stm$0) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  _lua_pushinteger($L,$23,$25);
  _lua_setfield($L,-2,7232);
  $26 = (($stm$0) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  _lua_pushinteger($L,$27,$29);
  _lua_setfield($L,-2,7240);
  $30 = (($stm$0) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  $33 = ($32|0)<(0);
  $34 = $33 << 31 >> 31;
  _lua_pushinteger($L,$32,$34);
  _lua_setfield($L,-2,7248);
  $35 = (($stm$0) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1900)|0;
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  _lua_pushinteger($L,$37,$39);
  _lua_setfield($L,-2,7256);
  $40 = (($stm$0) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  $43 = ($42|0)<(0);
  $44 = $43 << 31 >> 31;
  _lua_pushinteger($L,$42,$44);
  _lua_setfield($L,-2,7432);
  $45 = (($stm$0) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  $48 = ($47|0)<(0);
  $49 = $48 << 31 >> 31;
  _lua_pushinteger($L,$47,$49);
  _lua_setfield($L,-2,7440);
  $50 = (($stm$0) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)<(0);
  if ($52) {
   STACKTOP = sp;return 1;
  }
  _lua_pushboolean($L,$51);
  _lua_setfield($L,-2,7264);
  STACKTOP = sp;return 1;
 }
 HEAP8[$cc>>0] = 37;
 _luaL_buffinit($L,$b);
 $53 = (($b) + 8|0);
 $54 = (($b) + 4|0);
 $55 = (($cc) + 1|0);
 $56 = (($cc) + 2|0);
 $57 = (($cc) + 3|0);
 $s$1 = $s$0;
 while(1) {
  $58 = HEAP8[$s$1>>0]|0;
  if ((($58<<24>>24) == 0)) {
   break;
  } else if ((($58<<24>>24) == 37)) {
   $68 = (($s$1) + 1|0);
   $69 = (($s$1) + 2|0);
   $i$01$i = 0;
   while(1) {
    $70 = HEAP8[$68>>0]|0;
    $71 = ($70<<24>>24)==(0);
    if (!($71)) {
     $72 = $70 << 24 >> 24;
     $73 = (7448 + ($i$01$i<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (_strchr($74,$72)|0);
     $76 = ($75|0)==(0|0);
     if (!($76)) {
      HEAP8[$55>>0] = $70;
      $77 = $i$01$i | 1;
      $78 = (7448 + ($77<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = HEAP8[$79>>0]|0;
      $81 = ($80<<24>>24)==(0);
      if ($81) {
       label = 21;
       break;
      }
      $82 = HEAP8[$69>>0]|0;
      $83 = ($82<<24>>24)==(0);
      if (!($83)) {
       $84 = $82 << 24 >> 24;
       $85 = (_strchr($79,$84)|0);
       $86 = ($85|0)==(0|0);
       if (!($86)) {
        $$lcssa = $82;
        label = 24;
        break;
       }
      }
     }
    }
    $88 = (($i$01$i) + 2)|0;
    $89 = ($88>>>0)<(6);
    if ($89) {
     $i$01$i = $88;
    } else {
     label = 26;
     break;
    }
   }
   if ((label|0) == 21) {
    label = 0;
    HEAP8[$56>>0] = 0;
    $$0$i = $69;
   }
   else if ((label|0) == 24) {
    label = 0;
    HEAP8[$56>>0] = $$lcssa;
    HEAP8[$57>>0] = 0;
    $87 = (($s$1) + 3|0);
    $$0$i = $87;
   }
   else if ((label|0) == 26) {
    label = 0;
    HEAP32[$vararg_buffer>>2] = $68;
    $90 = (_lua_pushfstring($L,7552,$vararg_buffer)|0);
    (_luaL_argerror($L,1,$90)|0);
    $$0$i = $68;
   }
   $91 = (_strftime(($buff|0),200,($cc|0),($stm$0|0))|0);
   _luaL_addlstring($b,$buff,$91);
   $s$1$be = $$0$i;
  } else {
   $59 = HEAP32[$53>>2]|0;
   $60 = HEAP32[$54>>2]|0;
   $61 = ($59>>>0)<($60>>>0);
   if ($61) {
    $64 = $59;$67 = $58;
   } else {
    (_luaL_prepbuffsize($b,1)|0);
    $$pre = HEAP8[$s$1>>0]|0;
    $$pre1 = HEAP32[$53>>2]|0;
    $64 = $$pre1;$67 = $$pre;
   }
   $62 = (($s$1) + 1|0);
   $63 = (($64) + 1)|0;
   HEAP32[$53>>2] = $63;
   $65 = HEAP32[$b>>2]|0;
   $66 = (($65) + ($64)|0);
   HEAP8[$66>>0] = $67;
   $s$1$be = $62;
  }
  $s$1 = $s$1$be;
 }
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _os_difftime($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,1)|0);
 $1 = tempRet0;
 $2 = (_luaL_checkinteger($L,2)|0);
 $3 = tempRet0;
 $4 = (+_difftime(($0|0),($2|0)));
 _lua_pushnumber($L,$4);
 return 1;
}
function _os_execute($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_system(($0|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  _lua_pushboolean($L,$1);
  $$0 = 1;
  return ($$0|0);
 } else {
  $3 = (_luaL_execresult($L,$1)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _os_exit($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(1);
 if ($1) {
  $2 = (_lua_toboolean($L,1)|0);
  $not$ = ($2|0)==(0);
  $3 = $not$&1;
  $status$0 = $3;
 } else {
  $4 = (_luaL_optinteger($L,1,0,0)|0);
  $5 = tempRet0;
  $status$0 = $4;
 }
 $6 = (_lua_toboolean($L,2)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  _lua_close($L);
 }
 $8 = ($L|0)==(0|0);
 if ($8) {
  return 0;
 } else {
  _exit(($status$0|0));
  // unreachable;
 }
 return (0)|0;
}
function _os_getenv($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_getenv(($0|0))|0);
 (_lua_pushstring($L,$1)|0);
 return 1;
}
function _os_remove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_remove(($0|0))|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $4 = (_luaL_fileresult($L,$3,$0)|0);
 return ($4|0);
}
function _os_rename($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_rename(($0|0),($1|0))|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_luaL_fileresult($L,$4,0)|0);
 return ($5|0);
}
function _os_setlocale($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_luaL_checkoption($L,2,7368,7336)|0);
 $2 = (7312 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_setlocale(($3|0),($0|0))|0);
 (_lua_pushstring($L,$4)|0);
 return 1;
}
function _os_time($L) {
 $L = $L|0;
 var $$ = 0, $$0$i = 0, $$0$i12 = 0, $$0$i16 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isnum$i = 0, $isnum$i1 = 0, $isnum$i10 = 0, $isnum$i14 = 0, $isnum$i4 = 0, $isnum$i7 = 0, $res$0$i2 = 0, $t$0 = 0, $ts = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $isnum$i14 = sp + 80|0;
 $isnum$i10 = sp + 76|0;
 $isnum$i7 = sp + 84|0;
 $isnum$i4 = sp + 68|0;
 $isnum$i1 = sp + 20|0;
 $isnum$i = sp + 72|0;
 $ts = sp + 24|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $2 = (_time((0|0))|0);
  $t$0 = $2;
 } else {
  _luaL_checktype($L,1,5);
  _lua_settop($L,1);
  (_lua_getfield($L,-1,7216)|0);
  $3 = (_lua_tointegerx($L,-1,$isnum$i)|0);
  $4 = tempRet0;
  $5 = HEAP32[$isnum$i>>2]|0;
  $6 = ($5|0)==(0);
  $$ = $6 ? 0 : $3;
  _lua_settop($L,-2);
  HEAP32[$ts>>2] = $$;
  (_lua_getfield($L,-1,7224)|0);
  $7 = (_lua_tointegerx($L,-1,$isnum$i1)|0);
  $8 = tempRet0;
  $9 = HEAP32[$isnum$i1>>2]|0;
  $10 = ($9|0)==(0);
  $res$0$i2 = $10 ? 0 : $7;
  _lua_settop($L,-2);
  $11 = (($ts) + 4|0);
  HEAP32[$11>>2] = $res$0$i2;
  (_lua_getfield($L,-1,7232)|0);
  $12 = (_lua_tointegerx($L,-1,$isnum$i4)|0);
  $13 = tempRet0;
  $14 = HEAP32[$isnum$i4>>2]|0;
  $15 = ($14|0)==(0);
  $$18 = $15 ? 12 : $12;
  _lua_settop($L,-2);
  $16 = (($ts) + 8|0);
  HEAP32[$16>>2] = $$18;
  (_lua_getfield($L,-1,7240)|0);
  $17 = (_lua_tointegerx($L,-1,$isnum$i7)|0);
  $18 = tempRet0;
  $19 = HEAP32[$isnum$i7>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   HEAP32[$vararg_buffer>>2] = 7240;
   $21 = (_luaL_error($L,7272,$vararg_buffer)|0);
   $$0$i = $21;
  } else {
   _lua_settop($L,-2);
   $$0$i = $17;
  }
  $22 = (($ts) + 12|0);
  HEAP32[$22>>2] = $$0$i;
  (_lua_getfield($L,-1,7248)|0);
  $23 = (_lua_tointegerx($L,-1,$isnum$i10)|0);
  $24 = tempRet0;
  $25 = HEAP32[$isnum$i10>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   HEAP32[$vararg_buffer1>>2] = 7248;
   $27 = (_luaL_error($L,7272,$vararg_buffer1)|0);
   $$0$i12 = $27;
  } else {
   _lua_settop($L,-2);
   $$0$i12 = $23;
  }
  $28 = (($$0$i12) + -1)|0;
  $29 = (($ts) + 16|0);
  HEAP32[$29>>2] = $28;
  (_lua_getfield($L,-1,7256)|0);
  $30 = (_lua_tointegerx($L,-1,$isnum$i14)|0);
  $31 = tempRet0;
  $32 = HEAP32[$isnum$i14>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   HEAP32[$vararg_buffer4>>2] = 7256;
   $34 = (_luaL_error($L,7272,$vararg_buffer4)|0);
   $$0$i16 = $34;
  } else {
   _lua_settop($L,-2);
   $$0$i16 = $30;
  }
  $35 = (($$0$i16) + -1900)|0;
  $36 = (($ts) + 20|0);
  HEAP32[$36>>2] = $35;
  $37 = (_lua_getfield($L,-1,7264)|0);
  $38 = ($37|0)==(0);
  if ($38) {
   $41 = -1;
  } else {
   $39 = (_lua_toboolean($L,-1)|0);
   $41 = $39;
  }
  _lua_settop($L,-2);
  $40 = (($ts) + 32|0);
  HEAP32[$40>>2] = $41;
  $42 = (_mktime(($ts|0))|0);
  $t$0 = $42;
 }
 $43 = ($t$0|0)==(-1);
 if ($43) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 } else {
  $44 = ($t$0|0)<(0);
  $45 = $44 << 31 >> 31;
  _lua_pushinteger($L,$t$0,$45);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _os_tmpname($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $buff = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff = sp + 4|0;
 $0 = (_tmpnam(($buff|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_luaL_error($L,7176,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_lua_pushstring($L,$buff)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaY_parser($L,$z,$buff,$dyd,$name,$firstchar) {
 $L = $L|0;
 $z = $z|0;
 $buff = $buff|0;
 $dyd = $dyd|0;
 $name = $name|0;
 $firstchar = $firstchar|0;
 var $$pr$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $bl$i = 0, $funcstate = 0, $lexstate = 0, $ls$idx$val$i$i = 0, $ls$idx$val$i$i$lcssa = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl$i = sp + 160|0;
 $v$i = sp;
 $lexstate = sp + 24|0;
 $funcstate = sp + 112|0;
 $0 = (_luaF_newLclosure($L,1)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 8|0);
 HEAP32[$3>>2] = 70;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$1>>2] = $5;
 $6 = (($L) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $5;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(16);
 if ($11) {
  _luaD_growstack($L,0);
 }
 $12 = (_luaH_new($L)|0);
 $13 = (($lexstate) + 64|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$1>>2]|0;
 HEAP32[$14>>2] = $12;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = 69;
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 16|0);
 HEAP32[$1>>2] = $17;
 $18 = HEAP32[$6>>2]|0;
 $19 = $18;
 $20 = $17;
 $21 = (($19) - ($20))|0;
 $22 = ($21|0)<(16);
 if ($22) {
  _luaD_growstack($L,0);
 }
 $23 = (_luaF_newproto($L)|0);
 $24 = (($0) + 12|0);
 HEAP32[$24>>2] = $23;
 HEAP32[$funcstate>>2] = $23;
 $25 = (_luaS_new($L,$name)|0);
 $26 = (($23) + 72|0);
 HEAP32[$26>>2] = $25;
 $27 = (($lexstate) + 60|0);
 HEAP32[$27>>2] = $buff;
 $28 = (($lexstate) + 68|0);
 HEAP32[$28>>2] = $dyd;
 $29 = (($dyd) + 28|0);
 HEAP32[$29>>2] = 0;
 $30 = (($dyd) + 16|0);
 HEAP32[$30>>2] = 0;
 $31 = (($dyd) + 4|0);
 HEAP32[$31>>2] = 0;
 _luaX_setinput($L,$lexstate,$z,$25,$firstchar);
 $32 = (($lexstate) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($funcstate) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($funcstate) + 8|0);
 HEAP32[$35>>2] = $lexstate;
 HEAP32[$32>>2] = $funcstate;
 $36 = (($funcstate) + 16|0);
 HEAP32[$36>>2] = 0;
 $37 = (($funcstate) + 20|0);
 HEAP32[$37>>2] = 0;
 $38 = (($funcstate) + 24|0);
 HEAP32[$38>>2] = -1;
 $39 = (($funcstate) + 28|0);
 HEAP32[$39>>2] = 0;
 $40 = (($funcstate) + 32|0);
 HEAP32[$40>>2] = 0;
 $41 = (($funcstate) + 40|0);
 ;HEAP32[$41+0>>2]=0|0;HEAP8[$41+4>>0]=0|0;
 $42 = HEAP32[$28>>2]|0;
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($funcstate) + 36|0);
 HEAP32[$45>>2] = $44;
 $46 = (($funcstate) + 12|0);
 $47 = (($lexstate) + 72|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$26>>2] = $48;
 $49 = (($23) + 8|0);
 HEAP8[$49>>0] = 2;
 $50 = (($bl$i) + 14|0);
 HEAP8[$50>>0] = 0;
 $51 = (($bl$i) + 12|0);
 HEAP8[$51>>0] = 0;
 $52 = (($42) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($bl$i) + 4|0);
 HEAP32[$54>>2] = $53;
 $55 = (($42) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($bl$i) + 8|0);
 HEAP32[$57>>2] = $56;
 $58 = (($bl$i) + 13|0);
 HEAP8[$58>>0] = 0;
 HEAP32[$bl$i>>2] = 0;
 HEAP32[$46>>2] = $bl$i;
 $59 = (($23) + 7|0);
 HEAP8[$59>>0] = 1;
 $60 = (($v$i) + 16|0);
 HEAP32[$60>>2] = -1;
 $61 = (($v$i) + 20|0);
 HEAP32[$61>>2] = -1;
 HEAP32[$v$i>>2] = 8;
 $62 = (($v$i) + 8|0);
 HEAP32[$62>>2] = 0;
 $63 = (($lexstate) + 76|0);
 $64 = HEAP32[$63>>2]|0;
 (_newupvalue($funcstate,$64,$v$i)|0);
 _luaX_next($lexstate);
 $65 = (($lexstate) + 16|0);
 L7: while(1) {
  $ls$idx$val$i$i = HEAP32[$65>>2]|0;
  switch ($ls$idx$val$i$i|0) {
  case 277: case 289: case 262: case 261: case 260:  {
   $ls$idx$val$i$i$lcssa = $ls$idx$val$i$i;
   label = 9;
   break L7;
   break;
  }
  default: {
  }
  }
  $66 = ($ls$idx$val$i$i|0)==(274);
  _statement($lexstate);
  if ($66) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $$pr$i = HEAP32[$65>>2]|0;
  $67 = $$pr$i;
 }
 else if ((label|0) == 9) {
  $67 = $ls$idx$val$i$i$lcssa;
 }
 $68 = ($67|0)==(289);
 if ($68) {
  _close_func($lexstate);
  $69 = HEAP32[$1>>2]|0;
  $70 = (($69) + -16|0);
  HEAP32[$1>>2] = $70;
  STACKTOP = sp;return ($0|0);
 } else {
  _error_expected($lexstate,289);
  // unreachable;
 }
 return (0)|0;
}
function _newupvalue($fs,$name,$v) {
 $fs = $fs|0;
 $name = $name|0;
 $v = $v|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $oldsize$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($fs) + 43|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 1)|0;
 $7 = ($6>>>0)>(255);
 if ($7) {
  $8 = (($fs) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($0) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = 7968;
   HEAP32[$vararg_buffer1>>2] = 8296;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 255;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $16;
   $17 = (_luaO_pushfstring($11,8008,$vararg_buffer1)|0);
   $18 = HEAP32[$8>>2]|0;
   _luaX_syntaxerror($18,$17);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $13;
  $15 = (_luaO_pushfstring($11,7984,$vararg_buffer)|0);
  $16 = $15;
  HEAP32[$vararg_buffer1>>2] = 8296;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 255;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $16;
  $17 = (_luaO_pushfstring($11,8008,$vararg_buffer1)|0);
  $18 = HEAP32[$8>>2]|0;
  _luaX_syntaxerror($18,$17);
  // unreachable;
 }
 $19 = ($5|0)<($2|0);
 if ($19) {
  $28 = $2;
 } else {
  $20 = (($fs) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 52|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($0) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_luaM_growaux_($23,$25,$1,8,255,8296)|0);
  HEAP32[$24>>2] = $26;
  $$pre = HEAP32[$1>>2]|0;
  $28 = $$pre;
 }
 $27 = ($2|0)<($28|0);
 $29 = (($0) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 if ($27) {
  $oldsize$01 = $2;
  while(1) {
   $31 = (($oldsize$01) + 1)|0;
   $32 = (($30) + ($oldsize$01<<3)|0);
   HEAP32[$32>>2] = 0;
   $33 = ($31|0)<($28|0);
   if ($33) {
    $oldsize$01 = $31;
   } else {
    break;
   }
  }
 }
 $34 = HEAP32[$v>>2]|0;
 $35 = ($34|0)==(8);
 $36 = $35&1;
 $37 = HEAP8[$3>>0]|0;
 $38 = $37&255;
 $39 = ((($30) + ($38<<3)|0) + 4|0);
 HEAP8[$39>>0] = $36;
 $40 = (($v) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41&255;
 $43 = ((($30) + ($38<<3)|0) + 5|0);
 HEAP8[$43>>0] = $42;
 $44 = (($30) + ($38<<3)|0);
 HEAP32[$44>>2] = $name;
 $45 = (($0) + 5|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 & 4;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $58 = $37;
  $57 = (($58) + 1)<<24>>24;
  HEAP8[$3>>0] = $57;
  $59 = $58&255;
  STACKTOP = sp;return ($59|0);
 }
 $49 = (($name) + 5|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50 & 3;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $58 = $37;
  $57 = (($58) + 1)<<24>>24;
  HEAP8[$3>>0] = $57;
  $59 = $58&255;
  STACKTOP = sp;return ($59|0);
 }
 $53 = (($fs) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 _luaC_barrier_($56,$0,$name);
 $$pre3 = HEAP8[$3>>0]|0;
 $58 = $$pre3;
 $57 = (($58) + 1)<<24>>24;
 HEAP8[$3>>0] = $57;
 $59 = $58&255;
 STACKTOP = sp;return ($59|0);
}
function _statement($ls) {
 $ls = $ls|0;
 var $$$i$i = 0, $$$i$i$i = 0, $$01$i$i42 = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i31 = 0, $$idx$val$idx$i = 0, $$idx$val$idx$i$i = 0, $$idx$val$idx$i$i36 = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i$i = 0, $$idx$val$idx$val$i$i37 = 0, $$idx1$i = 0, $$idx1$i$i = 0, $$idx1$i$i32 = 0, $$idx1$val$i = 0, $$idx1$val$i$i = 0, $$idx1$val$i$i33 = 0, $$idx1$val$idx$i = 0, $$idx1$val$idx$i$i = 0;
 var $$idx1$val$idx$i$i38 = 0, $$idx1$val$idx$val$i = 0, $$idx1$val$idx$val$i$i = 0, $$idx1$val$idx$val$i$i39 = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i$i = 0, $$idx1$val$idx$val$idx$val$i$i41 = 0, $$idx2$i = 0, $$idx2$i$i = 0, $$idx2$i$i34 = 0, $$idx2$val$i = 0, $$idx2$val$i$i = 0, $$idx2$val$i$i35 = 0, $$lcssa = 0, $$lcssa120 = 0, $$lcssa122 = 0, $$lcssa124 = 0, $$lcssa129 = 0, $$lcssa132 = 0, $$off$i = 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre111 = 0, $$pre112 = 0, $$pre114 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$i = 0, $b$i21 = 0, $bl$i = 0, $bl$i$i = 0, $bl$i$i2 = 0;
 var $bl$i8 = 0, $bl$i9 = 0, $bl1$i = 0, $bl2$i = 0, $e$i = 0, $e$i$i = 0, $e$i48 = 0, $e$i70 = 0, $e$i71 = 0, $e$i72 = 0, $escapelist$i = 0, $first$0$i = 0, $i$0$ph1$i$i = 0, $i$02$i$i = 0, $i$02$i$i$lcssa = 0, $ismethod$0$i$i = 0, $key$i$i$i = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0;
 var $ls$idx$val$i$i = 0, $ls$idx$val$i$i$i = 0, $ls$idx$val$i$i$i20 = 0, $ls$idx$val$i$i$i4 = 0, $ls$idx$val$i$i12 = 0, $ls$idx$val$i$i15 = 0, $ls$idx$val$i$i15$lcssa = 0, $ls$idx$val$i29 = 0, $ls$idx$val$i50 = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $ls$idx1$val$i = 0, $ls$idx1$val$i115 = 0, $ls$idx1$val$i116 = 0, $n$0$i$i$lcssa = 0, $n$0$i$i53$lcssa = 0, $n$0$i$i5398 = 0, $n$0$i$i92 = 0, $n$0$i$lcssa = 0, $n$0$i88 = 0;
 var $nret$0$i = 0, $nvars$0$i$i$lcssa = 0, $nvars$0$i$i89 = 0, $nvars$0$i$i89$lcssa121 = 0, $nvars$0$i96 = 0, $nvars$0$i96$lcssa = 0, $nvars$0$i96$lcssa125 = 0, $nvars$0$i96127 = 0, $nvars$0$i96128 = 0, $or$cond$i = 0, $phitmp = 0, $phitmp102 = 0, $switch$i = 0, $v$i = 0, $v$i$i = 0, $v$i$i13 = 0, $v$i59 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 152|0;
 $vararg_buffer26 = sp + 416|0;
 $vararg_buffer21 = sp + 400|0;
 $vararg_buffer16 = sp + 384|0;
 $vararg_buffer11 = sp + 368|0;
 $vararg_buffer6 = sp + 352|0;
 $vararg_buffer1 = sp + 336|0;
 $vararg_buffer = sp + 328|0;
 $e$i72 = sp + 104|0;
 $e$i71 = sp + 80|0;
 $e$i70 = sp + 56|0;
 $v$i59 = sp + 24|0;
 $e$i48 = sp;
 $e$i = sp + 128|0;
 $b$i21 = sp + 304|0;
 $key$i$i$i = sp + 160|0;
 $v$i = sp + 184|0;
 $b$i = sp + 208|0;
 $v$i$i13 = sp + 232|0;
 $bl1$i = sp + 536|0;
 $bl2$i = sp + 520|0;
 $e$i$i = sp + 256|0;
 $bl$i9 = sp + 504|0;
 $bl$i8 = sp + 488|0;
 $v$i$i = sp + 280|0;
 $bl$i$i2 = sp + 448|0;
 $bl$i = sp + 432|0;
 $bl$i$i = sp + 464|0;
 $escapelist$i = sp + 480|0;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $ls$idx = (($ls) + 48|0);
 $ls$idx$val = HEAP32[$ls$idx>>2]|0;
 $ls$idx1 = (($ls) + 52|0);
 $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
 $2 = (($ls$idx1$val) + 106|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = (($3) + 1)<<16>>16;
 HEAP16[$2>>1] = $4;
 $5 = ($4&65535)>(200);
 if ($5) {
  $6 = (($ls$idx$val) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$ls$idx$val>>2]|0;
  $11 = (($10) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $15 = 7968;
   HEAP32[$vararg_buffer1>>2] = 7784;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $15;
   $16 = (_luaO_pushfstring($9,8008,$vararg_buffer1)|0);
   $17 = HEAP32[$6>>2]|0;
   _luaX_syntaxerror($17,$16);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $12;
  $14 = (_luaO_pushfstring($9,7984,$vararg_buffer)|0);
  $15 = $14;
  HEAP32[$vararg_buffer1>>2] = 7784;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 200;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $15;
  $16 = (_luaO_pushfstring($9,8008,$vararg_buffer1)|0);
  $17 = HEAP32[$6>>2]|0;
  _luaX_syntaxerror($17,$16);
  // unreachable;
 }
 $18 = (($ls) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 L8: do {
  switch ($19|0) {
  case 274:  {
   _luaX_next($ls);
   $416 = HEAP32[$ls$idx>>2]|0;
   $ls$idx$val$i50 = HEAP32[$18>>2]|0;
   L10: do {
    switch ($ls$idx$val$i50|0) {
    case 59: case 277: case 289: case 262: case 261: case 260:  {
     $first$0$i = 0;$nret$0$i = 0;
     break;
    }
    default: {
     (_subexpr($ls,$e$i48,0)|0);
     $417 = HEAP32[$18>>2]|0;
     $418 = ($417|0)==(44);
     if ($418) {
      $n$0$i$i5398 = 1;
      while(1) {
       _luaX_next($ls);
       $419 = HEAP32[$ls$idx>>2]|0;
       _luaK_exp2nextreg($419,$e$i48);
       (_subexpr($ls,$e$i48,0)|0);
       $420 = (($n$0$i$i5398) + 1)|0;
       $421 = HEAP32[$18>>2]|0;
       $422 = ($421|0)==(44);
       if ($422) {
        $n$0$i$i5398 = $420;
       } else {
        $$lcssa132 = $420;
        break;
       }
      }
      $n$0$i$i53$lcssa = $$lcssa132;
     } else {
      $n$0$i$i53$lcssa = 1;
     }
     $423 = HEAP32[$e$i48>>2]|0;
     $$off$i = (($423) + -13)|0;
     $switch$i = ($$off$i>>>0)<(2);
     if ($switch$i) {
      _luaK_setreturns($416,$e$i48,-1);
      $424 = HEAP32[$e$i48>>2]|0;
      $425 = ($424|0)==(13);
      $426 = ($n$0$i$i53$lcssa|0)==(1);
      $or$cond$i = $425 & $426;
      if ($or$cond$i) {
       $427 = (($e$i48) + 8|0);
       $428 = HEAP32[$427>>2]|0;
       $429 = HEAP32[$416>>2]|0;
       $430 = (($429) + 48|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = (($431) + ($428<<2)|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = $433 & -64;
       $435 = $434 | 37;
       HEAP32[$432>>2] = $435;
      }
      $436 = (($416) + 42|0);
      $437 = HEAP8[$436>>0]|0;
      $438 = $437&255;
      $first$0$i = $438;$nret$0$i = -1;
      break L10;
     } else {
      $439 = ($n$0$i$i53$lcssa|0)==(1);
      if ($439) {
       $440 = (_luaK_exp2anyreg($416,$e$i48)|0);
       $first$0$i = $440;$nret$0$i = 1;
       break L10;
      } else {
       _luaK_exp2nextreg($416,$e$i48);
       $441 = (($416) + 42|0);
       $442 = HEAP8[$441>>0]|0;
       $443 = $442&255;
       $first$0$i = $443;$nret$0$i = $n$0$i$i53$lcssa;
       break L10;
      }
     }
    }
    }
   } while(0);
   _luaK_ret($416,$first$0$i,$nret$0$i);
   $444 = HEAP32[$18>>2]|0;
   $445 = ($444|0)==(59);
   if ($445) {
    _luaX_next($ls);
   }
   break;
  }
  case 266: case 258:  {
   $446 = (_luaK_jump($ls$idx$val)|0);
   _gotostat($ls,$446);
   break;
  }
  case 288:  {
   _luaX_next($ls);
   $339 = HEAP32[$18>>2]|0;
   $340 = ($339|0)==(292);
   if (!($340)) {
    _error_expected($ls,292);
    // unreachable;
   }
   $341 = (($ls) + 24|0);
   $342 = HEAP32[$341>>2]|0;
   _luaX_next($ls);
   $343 = HEAP32[$ls$idx>>2]|0;
   $344 = (($ls) + 68|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = (($345) + 24|0);
   $347 = (($343) + 12|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = (($348) + 4|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = (($345) + 28|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = ($350|0)<($352|0);
   do {
    if ($353) {
     $354 = HEAP32[$346>>2]|0;
     $i$02$i$i = $350;
     while(1) {
      $357 = (($354) + ($i$02$i$i<<4)|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = ($358|0)==($342|0);
      $355 = (($i$02$i$i) + 1)|0;
      if ($359) {
       $i$02$i$i$lcssa = $i$02$i$i;
       label = 130;
       break;
      }
      $356 = ($355|0)<($352|0);
      if ($356) {
       $i$02$i$i = $355;
      } else {
       label = 131;
       break;
      }
     }
     if ((label|0) == 130) {
      $360 = (($343) + 8|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = (($361) + 52|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = (($342) + 16|0);
      $365 = ((($354) + ($i$02$i$i$lcssa<<4)|0) + 8|0);
      $366 = HEAP32[$365>>2]|0;
      HEAP32[$vararg_buffer31>>2] = $364;
      $vararg_ptr34 = (($vararg_buffer31) + 4|0);
      HEAP32[$vararg_ptr34>>2] = $366;
      $367 = (_luaO_pushfstring($363,8096,$vararg_buffer31)|0);
      $368 = HEAP32[$360>>2]|0;
      _semerror($368,$367);
      // unreachable;
     }
     else if ((label|0) == 131) {
      break;
     }
    }
   } while(0);
   $369 = HEAP32[$18>>2]|0;
   $370 = ($369|0)==(288);
   if (!($370)) {
    _error_expected($ls,288);
    // unreachable;
   }
   _luaX_next($ls);
   $371 = (($343) + 16|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = HEAP32[$351>>2]|0;
   $374 = (($373) + 1)|0;
   $375 = (($345) + 32|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = ($373|0)<($376|0);
   if ($377) {
    $$pre$i$i = HEAP32[$346>>2]|0;
    $382 = $$pre$i$i;
   } else {
    $378 = HEAP32[$ls$idx1>>2]|0;
    $379 = HEAP32[$346>>2]|0;
    $380 = (_luaM_growaux_($378,$379,$375,16,32767,7736)|0);
    HEAP32[$346>>2] = $380;
    $382 = $380;
   }
   $381 = (($382) + ($373<<4)|0);
   HEAP32[$381>>2] = $342;
   $383 = ((($382) + ($373<<4)|0) + 8|0);
   HEAP32[$383>>2] = $1;
   $384 = HEAP32[$ls$idx>>2]|0;
   $385 = (($384) + 42|0);
   $386 = HEAP8[$385>>0]|0;
   $387 = ((($382) + ($373<<4)|0) + 12|0);
   HEAP8[$387>>0] = $386;
   $388 = ((($382) + ($373<<4)|0) + 4|0);
   HEAP32[$388>>2] = $372;
   HEAP32[$351>>2] = $374;
   L57: while(1) {
    $389 = HEAP32[$18>>2]|0;
    switch ($389|0) {
    case 288: case 59:  {
     break;
    }
    case 289: case 262: case 261: case 260:  {
     label = 141;
     break L57;
     break;
    }
    default: {
     label = 140;
     break L57;
    }
    }
    _statement($ls);
   }
   if ((label|0) == 140) {
    $$pre114 = HEAP32[$346>>2]|0;
    $396 = $$pre114;
   }
   else if ((label|0) == 141) {
    $390 = HEAP32[$347>>2]|0;
    $391 = (($390) + 12|0);
    $392 = HEAP8[$391>>0]|0;
    $393 = HEAP32[$346>>2]|0;
    $394 = ((($393) + ($373<<4)|0) + 12|0);
    HEAP8[$394>>0] = $392;
    $396 = $393;
   }
   $395 = (($396) + ($373<<4)|0);
   $397 = HEAP32[$344>>2]|0;
   $398 = HEAP32[$ls$idx>>2]|0;
   $399 = (($398) + 12|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = (($400) + 8|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = (($397) + 16|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = ($402|0)<($404|0);
   if ($405) {
    $406 = (($397) + 12|0);
    $468 = $404;$i$0$ph1$i$i = $402;
    L65: while(1) {
     $469 = $468;
     while(1) {
      $407 = HEAP32[$406>>2]|0;
      $408 = (($407) + ($i$0$ph1$i$i<<4)|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = HEAP32[$395>>2]|0;
      $411 = ($409|0)==($410|0);
      if (!($411)) {
       $$lcssa129 = $469;
       break;
      }
      _closegoto($ls,$i$0$ph1$i$i,$395);
      $412 = HEAP32[$403>>2]|0;
      $413 = ($i$0$ph1$i$i|0)<($412|0);
      if ($413) {
       $469 = $412;
      } else {
       label = 169;
       break L65;
      }
     }
     $414 = (($i$0$ph1$i$i) + 1)|0;
     $415 = ($414|0)<($$lcssa129|0);
     if ($415) {
      $468 = $$lcssa129;$i$0$ph1$i$i = $414;
     } else {
      label = 170;
      break;
     }
    }
    if ((label|0) == 169) {
     break L8;
    }
    else if ((label|0) == 170) {
     break L8;
    }
   }
   break;
  }
  case 259:  {
   _luaX_next($ls);
   $102 = HEAP32[$ls$idx>>2]|0;
   $103 = (($bl$i8) + 14|0);
   HEAP8[$103>>0] = 0;
   $104 = (($102) + 42|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = (($bl$i8) + 12|0);
   HEAP8[$106>>0] = $105;
   $107 = (($102) + 8|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + 68|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + 28|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($bl$i8) + 4|0);
   HEAP32[$113>>2] = $112;
   $114 = (($110) + 16|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($bl$i8) + 8|0);
   HEAP32[$116>>2] = $115;
   $117 = (($bl$i8) + 13|0);
   HEAP8[$117>>0] = 0;
   $118 = (($102) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP32[$bl$i8>>2] = $119;
   HEAP32[$118>>2] = $bl$i8;
   L75: while(1) {
    $ls$idx$val$i$i = HEAP32[$18>>2]|0;
    switch ($ls$idx$val$i$i|0) {
    case 277: case 289: case 262: case 261: case 260:  {
     break L75;
     break;
    }
    default: {
    }
    }
    $120 = ($ls$idx$val$i$i|0)==(274);
    _statement($ls);
    if ($120) {
     break;
    }
   }
   _leaveblock($102);
   $121 = HEAP32[$18>>2]|0;
   $122 = ($121|0)==(262);
   if ($122) {
    _luaX_next($ls);
    break L8;
   }
   $123 = HEAP32[$0>>2]|0;
   $124 = ($123|0)==($1|0);
   if ($124) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $125 = HEAP32[$ls$idx1>>2]|0;
    $126 = (_luaX_token2str($ls,262)|0);
    $127 = (_luaX_token2str($ls,259)|0);
    HEAP32[$vararg_buffer16>>2] = $126;
    $vararg_ptr19 = (($vararg_buffer16) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $127;
    $vararg_ptr20 = (($vararg_buffer16) + 8|0);
    HEAP32[$vararg_ptr20>>2] = $1;
    $128 = (_luaO_pushfstring($125,8256,$vararg_buffer16)|0);
    _luaX_syntaxerror($ls,$128);
    // unreachable;
   }
   break;
  }
  case 267:  {
   HEAP32[$escapelist$i>>2] = -1;
   _test_then_block($ls,$escapelist$i);
   while(1) {
    $20 = HEAP32[$18>>2]|0;
    if ((($20|0) == 260)) {
     label = 10;
     break;
    } else if (!((($20|0) == 261))) {
     $$lcssa = $20;
     label = 14;
     break;
    }
    _test_then_block($ls,$escapelist$i);
   }
   if ((label|0) == 10) {
    _luaX_next($ls);
    $21 = HEAP32[$ls$idx>>2]|0;
    $22 = (($bl$i$i) + 14|0);
    HEAP8[$22>>0] = 0;
    $23 = (($21) + 42|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = (($bl$i$i) + 12|0);
    HEAP8[$25>>0] = $24;
    $26 = (($21) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 68|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($bl$i$i) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($29) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($bl$i$i) + 8|0);
    HEAP32[$35>>2] = $34;
    $36 = (($bl$i$i) + 13|0);
    HEAP8[$36>>0] = 0;
    $37 = (($21) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP32[$bl$i$i>>2] = $38;
    HEAP32[$37>>2] = $bl$i$i;
    L92: while(1) {
     $ls$idx$val$i$i$i = HEAP32[$18>>2]|0;
     switch ($ls$idx$val$i$i$i|0) {
     case 277: case 289: case 262: case 261: case 260:  {
      break L92;
      break;
     }
     default: {
     }
     }
     $39 = ($ls$idx$val$i$i$i|0)==(274);
     _statement($ls);
     if ($39) {
      break;
     }
    }
    _leaveblock($21);
    $$pre = HEAP32[$18>>2]|0;
    $40 = $$pre;
   }
   else if ((label|0) == 14) {
    $40 = $$lcssa;
   }
   $41 = ($40|0)==(262);
   if ($41) {
    _luaX_next($ls);
    $48 = HEAP32[$escapelist$i>>2]|0;
    _luaK_patchtohere($ls$idx$val,$48);
    break L8;
   }
   $42 = HEAP32[$0>>2]|0;
   $43 = ($42|0)==($1|0);
   if ($43) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $44 = HEAP32[$ls$idx1>>2]|0;
    $45 = (_luaX_token2str($ls,262)|0);
    $46 = (_luaX_token2str($ls,267)|0);
    HEAP32[$vararg_buffer6>>2] = $45;
    $vararg_ptr9 = (($vararg_buffer6) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $46;
    $vararg_ptr10 = (($vararg_buffer6) + 8|0);
    HEAP32[$vararg_ptr10>>2] = $1;
    $47 = (_luaO_pushfstring($44,8256,$vararg_buffer6)|0);
    _luaX_syntaxerror($ls,$47);
    // unreachable;
   }
   break;
  }
  case 264:  {
   $129 = (($bl$i9) + 14|0);
   HEAP8[$129>>0] = 1;
   $130 = (($ls$idx$val) + 42|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = (($bl$i9) + 12|0);
   HEAP8[$132>>0] = $131;
   $133 = (($ls$idx$val) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + 68|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($bl$i9) + 4|0);
   HEAP32[$139>>2] = $138;
   $140 = (($136) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($bl$i9) + 8|0);
   HEAP32[$142>>2] = $141;
   $143 = (($bl$i9) + 13|0);
   HEAP8[$143>>0] = 0;
   $144 = (($ls$idx$val) + 12|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$bl$i9>>2] = $145;
   HEAP32[$144>>2] = $bl$i9;
   _luaX_next($ls);
   $146 = HEAP32[$18>>2]|0;
   $147 = ($146|0)==(292);
   if (!($147)) {
    _error_expected($ls,292);
    // unreachable;
   }
   $148 = (($ls) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   _luaX_next($ls);
   $150 = HEAP32[$18>>2]|0;
   if ((($150|0) == 61)) {
    $151 = HEAP32[$ls$idx>>2]|0;
    $152 = (($151) + 44|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = (_luaX_newstring($ls,8208,11)|0);
    _new_localvar($ls,$155);
    $156 = (_luaX_newstring($ls,8224,11)|0);
    _new_localvar($ls,$156);
    $157 = (_luaX_newstring($ls,8240,10)|0);
    _new_localvar($ls,$157);
    _new_localvar($ls,$149);
    $158 = HEAP32[$18>>2]|0;
    $159 = ($158|0)==(61);
    if (!($159)) {
     _error_expected($ls,61);
     // unreachable;
    }
    _luaX_next($ls);
    (_subexpr($ls,$e$i70,0)|0);
    $160 = HEAP32[$ls$idx>>2]|0;
    _luaK_exp2nextreg($160,$e$i70);
    $161 = HEAP32[$18>>2]|0;
    $162 = ($161|0)==(44);
    if (!($162)) {
     _error_expected($ls,44);
     // unreachable;
    }
    _luaX_next($ls);
    (_subexpr($ls,$e$i71,0)|0);
    $163 = HEAP32[$ls$idx>>2]|0;
    _luaK_exp2nextreg($163,$e$i71);
    $164 = HEAP32[$18>>2]|0;
    $165 = ($164|0)==(44);
    if ($165) {
     _luaX_next($ls);
     (_subexpr($ls,$e$i72,0)|0);
     $166 = HEAP32[$ls$idx>>2]|0;
     _luaK_exp2nextreg($166,$e$i72);
    } else {
     $167 = HEAP8[$152>>0]|0;
     $168 = $167&255;
     $169 = (_luaK_intK($151,1,0)|0);
     (_luaK_codek($151,$168,$169)|0);
     _luaK_reserveregs($151,1);
    }
    _forbody($ls,$154,$1,1,1);
   } else if ((($150|0) == 268) | (($150|0) == 44)) {
    $170 = HEAP32[$ls$idx>>2]|0;
    $171 = (($170) + 44|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = (_luaX_newstring($ls,8160,15)|0);
    _new_localvar($ls,$174);
    $175 = (_luaX_newstring($ls,8176,11)|0);
    _new_localvar($ls,$175);
    $176 = (_luaX_newstring($ls,8192,13)|0);
    _new_localvar($ls,$176);
    _new_localvar($ls,$149);
    $177 = HEAP32[$18>>2]|0;
    $178 = ($177|0)==(44);
    do {
     if ($178) {
      $nvars$0$i$i89 = 4;
      while(1) {
       _luaX_next($ls);
       $179 = HEAP32[$18>>2]|0;
       $180 = ($179|0)==(292);
       if (!($180)) {
        label = 54;
        break;
       }
       $181 = HEAP32[$148>>2]|0;
       _luaX_next($ls);
       _new_localvar($ls,$181);
       $182 = (($nvars$0$i$i89) + 1)|0;
       $183 = HEAP32[$18>>2]|0;
       $184 = ($183|0)==(44);
       if ($184) {
        $nvars$0$i$i89 = $182;
       } else {
        $$lcssa122 = $183;$nvars$0$i$i89$lcssa121 = $nvars$0$i$i89;
        label = 56;
        break;
       }
      }
      if ((label|0) == 54) {
       _error_expected($ls,292);
       // unreachable;
      }
      else if ((label|0) == 56) {
       $phitmp102 = (($nvars$0$i$i89$lcssa121) + -2)|0;
       $185 = $$lcssa122;$nvars$0$i$i$lcssa = $phitmp102;
       break;
      }
     } else {
      $185 = $177;$nvars$0$i$i$lcssa = 1;
     }
    } while(0);
    $186 = ($185|0)==(268);
    if (!($186)) {
     _error_expected($ls,268);
     // unreachable;
    }
    _luaX_next($ls);
    $187 = HEAP32[$0>>2]|0;
    (_subexpr($ls,$e$i$i,0)|0);
    $188 = HEAP32[$18>>2]|0;
    $189 = ($188|0)==(44);
    if ($189) {
     $n$0$i88 = 1;
     while(1) {
      _luaX_next($ls);
      $190 = HEAP32[$ls$idx>>2]|0;
      _luaK_exp2nextreg($190,$e$i$i);
      (_subexpr($ls,$e$i$i,0)|0);
      $191 = (($n$0$i88) + 1)|0;
      $192 = HEAP32[$18>>2]|0;
      $193 = ($192|0)==(44);
      if ($193) {
       $n$0$i88 = $191;
      } else {
       $$lcssa120 = $191;
       break;
      }
     }
     $n$0$i$lcssa = $$lcssa120;
    } else {
     $n$0$i$lcssa = 1;
    }
    $ls$idx$val$i$i12 = HEAP32[$ls$idx>>2]|0;
    $194 = (3 - ($n$0$i$lcssa))|0;
    $195 = HEAP32[$e$i$i>>2]|0;
    if ((($195|0) == 0)) {
     label = 67;
    } else if ((($195|0) == 14) | (($195|0) == 13)) {
     $196 = (($194) + 1)|0;
     $197 = ($196|0)<(0);
     $$$i$i$i = $197 ? 0 : $196;
     _luaK_setreturns($ls$idx$val$i$i12,$e$i$i,$$$i$i$i);
     $198 = ($$$i$i$i|0)>(1);
     if ($198) {
      $199 = (($$$i$i$i) + -1)|0;
      _luaK_reserveregs($ls$idx$val$i$i12,$199);
     }
    } else {
     _luaK_exp2nextreg($ls$idx$val$i$i12,$e$i$i);
     label = 67;
    }
    if ((label|0) == 67) {
     $200 = ($194|0)>(0);
     if ($200) {
      $201 = (($ls$idx$val$i$i12) + 44|0);
      $202 = HEAP8[$201>>0]|0;
      $203 = $202&255;
      _luaK_reserveregs($ls$idx$val$i$i12,$194);
      _luaK_nil($ls$idx$val$i$i12,$203,$194);
     }
    }
    _luaK_checkstack($170,3);
    _forbody($ls,$173,$187,$nvars$0$i$i$lcssa,0);
   } else {
    _luaX_syntaxerror($ls,8136);
    // unreachable;
   }
   $204 = HEAP32[$18>>2]|0;
   $205 = ($204|0)==(262);
   if ($205) {
    _luaX_next($ls);
    _leaveblock($ls$idx$val);
    break L8;
   }
   $206 = HEAP32[$0>>2]|0;
   $207 = ($206|0)==($1|0);
   if ($207) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $208 = HEAP32[$ls$idx1>>2]|0;
    $209 = (_luaX_token2str($ls,262)|0);
    $210 = (_luaX_token2str($ls,264)|0);
    HEAP32[$vararg_buffer21>>2] = $209;
    $vararg_ptr24 = (($vararg_buffer21) + 4|0);
    HEAP32[$vararg_ptr24>>2] = $210;
    $vararg_ptr25 = (($vararg_buffer21) + 8|0);
    HEAP32[$vararg_ptr25>>2] = $1;
    $211 = (_luaO_pushfstring($208,8256,$vararg_buffer21)|0);
    _luaX_syntaxerror($ls,$211);
    // unreachable;
   }
   break;
  }
  case 278:  {
   _luaX_next($ls);
   $49 = (_luaK_getlabel($ls$idx$val)|0);
   (_subexpr($ls,$v$i$i,0)|0);
   $50 = HEAP32[$v$i$i>>2]|0;
   $51 = ($50|0)==(1);
   if ($51) {
    HEAP32[$v$i$i>>2] = 3;
   }
   $52 = HEAP32[$ls$idx>>2]|0;
   _luaK_goiftrue($52,$v$i$i);
   $53 = (($v$i$i) + 20|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($bl$i) + 14|0);
   HEAP8[$55>>0] = 1;
   $56 = (($ls$idx$val) + 42|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = (($bl$i) + 12|0);
   HEAP8[$58>>0] = $57;
   $59 = (($ls$idx$val) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 68|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + 28|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($bl$i) + 4|0);
   HEAP32[$65>>2] = $64;
   $66 = (($62) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($bl$i) + 8|0);
   HEAP32[$68>>2] = $67;
   $69 = (($bl$i) + 13|0);
   HEAP8[$69>>0] = 0;
   $70 = (($ls$idx$val) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$bl$i>>2] = $71;
   HEAP32[$70>>2] = $bl$i;
   $72 = HEAP32[$18>>2]|0;
   $73 = ($72|0)==(259);
   if (!($73)) {
    _error_expected($ls,259);
    // unreachable;
   }
   _luaX_next($ls);
   $74 = HEAP32[$ls$idx>>2]|0;
   $75 = (($bl$i$i2) + 14|0);
   HEAP8[$75>>0] = 0;
   $76 = (($74) + 42|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = (($bl$i$i2) + 12|0);
   HEAP8[$78>>0] = $77;
   $79 = (($74) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 68|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 28|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($bl$i$i2) + 4|0);
   HEAP32[$85>>2] = $84;
   $86 = (($82) + 16|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($bl$i$i2) + 8|0);
   HEAP32[$88>>2] = $87;
   $89 = (($bl$i$i2) + 13|0);
   HEAP8[$89>>0] = 0;
   $90 = (($74) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP32[$bl$i$i2>>2] = $91;
   HEAP32[$90>>2] = $bl$i$i2;
   L161: while(1) {
    $ls$idx$val$i$i$i4 = HEAP32[$18>>2]|0;
    switch ($ls$idx$val$i$i$i4|0) {
    case 277: case 289: case 262: case 261: case 260:  {
     break L161;
     break;
    }
    default: {
    }
    }
    $92 = ($ls$idx$val$i$i$i4|0)==(274);
    _statement($ls);
    if ($92) {
     break;
    }
   }
   _leaveblock($74);
   $93 = (_luaK_jump($ls$idx$val)|0);
   _luaK_patchlist($ls$idx$val,$93,$49);
   $94 = HEAP32[$18>>2]|0;
   $95 = ($94|0)==(262);
   if ($95) {
    _luaX_next($ls);
    _leaveblock($ls$idx$val);
    _luaK_patchtohere($ls$idx$val,$54);
    break L8;
   }
   $96 = HEAP32[$0>>2]|0;
   $97 = ($96|0)==($1|0);
   if ($97) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $98 = HEAP32[$ls$idx1>>2]|0;
    $99 = (_luaX_token2str($ls,262)|0);
    $100 = (_luaX_token2str($ls,278)|0);
    HEAP32[$vararg_buffer11>>2] = $99;
    $vararg_ptr14 = (($vararg_buffer11) + 4|0);
    HEAP32[$vararg_ptr14>>2] = $100;
    $vararg_ptr15 = (($vararg_buffer11) + 8|0);
    HEAP32[$vararg_ptr15>>2] = $1;
    $101 = (_luaO_pushfstring($98,8256,$vararg_buffer11)|0);
    _luaX_syntaxerror($ls,$101);
    // unreachable;
   }
   break;
  }
  case 59:  {
   _luaX_next($ls);
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $253 = HEAP32[$18>>2]|0;
   $254 = ($253|0)==(292);
   if (!($254)) {
    _error_expected($ls,292);
    // unreachable;
   }
   $255 = (($ls) + 24|0);
   $256 = HEAP32[$255>>2]|0;
   _luaX_next($ls);
   $257 = HEAP32[$ls$idx>>2]|0;
   $258 = (_singlevaraux($257,$256,$v$i,1)|0);
   $259 = ($258|0)==(0);
   if ($259) {
    $260 = (($ls) + 76|0);
    $261 = HEAP32[$260>>2]|0;
    (_singlevaraux($257,$261,$v$i,1)|0);
    $ls$idx$val$i$i$i20 = HEAP32[$ls$idx>>2]|0;
    $262 = (_luaK_stringK($ls$idx$val$i$i$i20,$256)|0);
    $263 = (($key$i$i$i) + 16|0);
    HEAP32[$263>>2] = -1;
    $264 = (($key$i$i$i) + 20|0);
    HEAP32[$264>>2] = -1;
    HEAP32[$key$i$i$i>>2] = 4;
    $265 = (($key$i$i$i) + 8|0);
    HEAP32[$265>>2] = $262;
    _luaK_indexed($257,$v$i,$key$i$i$i);
   }
   while(1) {
    $266 = HEAP32[$18>>2]|0;
    if ((($266|0) == 58)) {
     label = 97;
     break;
    } else if (!((($266|0) == 46))) {
     label = 98;
     break;
    }
    _fieldsel($ls,$v$i);
   }
   if ((label|0) == 97) {
    _fieldsel($ls,$v$i);
    $ismethod$0$i$i = 1;
   }
   else if ((label|0) == 98) {
    $ismethod$0$i$i = 0;
   }
   _body($ls,$b$i,$ismethod$0$i$i,$1);
   $267 = HEAP32[$ls$idx>>2]|0;
   _luaK_storevar($267,$v$i,$b$i);
   $268 = HEAP32[$ls$idx>>2]|0;
   _luaK_fixline($268,$1);
   break;
  }
  case 273:  {
   $212 = (_luaK_getlabel($ls$idx$val)|0);
   $213 = (($bl1$i) + 14|0);
   HEAP8[$213>>0] = 1;
   $214 = (($ls$idx$val) + 42|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = (($bl1$i) + 12|0);
   HEAP8[$216>>0] = $215;
   $217 = (($ls$idx$val) + 8|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = (($218) + 68|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = (($220) + 28|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($bl1$i) + 4|0);
   HEAP32[$223>>2] = $222;
   $224 = (($220) + 16|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = (($bl1$i) + 8|0);
   HEAP32[$226>>2] = $225;
   $227 = (($bl1$i) + 13|0);
   HEAP8[$227>>0] = 0;
   $228 = (($ls$idx$val) + 12|0);
   $229 = HEAP32[$228>>2]|0;
   HEAP32[$bl1$i>>2] = $229;
   $230 = (($bl2$i) + 14|0);
   HEAP8[$230>>0] = 0;
   $231 = (($bl2$i) + 12|0);
   HEAP8[$231>>0] = $215;
   $232 = (($bl2$i) + 4|0);
   HEAP32[$232>>2] = $222;
   $233 = (($bl2$i) + 8|0);
   HEAP32[$233>>2] = $225;
   $234 = (($bl2$i) + 13|0);
   HEAP8[$234>>0] = 0;
   HEAP32[$bl2$i>>2] = $bl1$i;
   HEAP32[$228>>2] = $bl2$i;
   _luaX_next($ls);
   L187: while(1) {
    $ls$idx$val$i$i15 = HEAP32[$18>>2]|0;
    switch ($ls$idx$val$i$i15|0) {
    case 277: case 289: case 262: case 261: case 260:  {
     $ls$idx$val$i$i15$lcssa = $ls$idx$val$i$i15;
     label = 80;
     break L187;
     break;
    }
    default: {
    }
    }
    $235 = ($ls$idx$val$i$i15|0)==(274);
    _statement($ls);
    if ($235) {
     label = 79;
     break;
    }
   }
   if ((label|0) == 79) {
    $$pre111 = HEAP32[$18>>2]|0;
    $236 = $$pre111;
   }
   else if ((label|0) == 80) {
    $236 = $ls$idx$val$i$i15$lcssa;
   }
   $237 = ($236|0)==(277);
   if (!($237)) {
    $238 = HEAP32[$0>>2]|0;
    $239 = ($238|0)==($1|0);
    if ($239) {
     _error_expected($ls,277);
     // unreachable;
    } else {
     $240 = HEAP32[$ls$idx1>>2]|0;
     $241 = (_luaX_token2str($ls,277)|0);
     $242 = (_luaX_token2str($ls,273)|0);
     HEAP32[$vararg_buffer26>>2] = $241;
     $vararg_ptr29 = (($vararg_buffer26) + 4|0);
     HEAP32[$vararg_ptr29>>2] = $242;
     $vararg_ptr30 = (($vararg_buffer26) + 8|0);
     HEAP32[$vararg_ptr30>>2] = $1;
     $243 = (_luaO_pushfstring($240,8256,$vararg_buffer26)|0);
     _luaX_syntaxerror($ls,$243);
     // unreachable;
    }
   }
   _luaX_next($ls);
   (_subexpr($ls,$v$i$i13,0)|0);
   $244 = HEAP32[$v$i$i13>>2]|0;
   $245 = ($244|0)==(1);
   if ($245) {
    HEAP32[$v$i$i13>>2] = 3;
   }
   $246 = HEAP32[$ls$idx>>2]|0;
   _luaK_goiftrue($246,$v$i$i13);
   $247 = (($v$i$i13) + 20|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = HEAP8[$234>>0]|0;
   $250 = ($249<<24>>24)==(0);
   if (!($250)) {
    $251 = HEAP8[$231>>0]|0;
    $252 = $251&255;
    _luaK_patchclose($ls$idx$val,$248,$252);
   }
   _leaveblock($ls$idx$val);
   _luaK_patchlist($ls$idx$val,$248,$212);
   _leaveblock($ls$idx$val);
   break;
  }
  case 269:  {
   _luaX_next($ls);
   $269 = HEAP32[$18>>2]|0;
   $270 = ($269|0)==(265);
   if ($270) {
    _luaX_next($ls);
    $271 = HEAP32[$ls$idx>>2]|0;
    $272 = HEAP32[$18>>2]|0;
    $273 = ($272|0)==(292);
    if ($273) {
     $274 = (($ls) + 24|0);
     $275 = HEAP32[$274>>2]|0;
     _luaX_next($ls);
     _new_localvar($ls,$275);
     $ls$idx$val$i = HEAP32[$ls$idx>>2]|0;
     $276 = (($ls$idx$val$i) + 42|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = $277&255;
     $279 = (($278) + 1)|0;
     $280 = $279&255;
     HEAP8[$276>>0] = $280;
     $281 = (($ls$idx$val$i) + 16|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $279 & 255;
     $$idx$val$i$i = HEAP32[$ls$idx$val$i>>2]|0;
     $$idx1$i$i = (($ls$idx$val$i) + 8|0);
     $$idx1$val$i$i = HEAP32[$$idx1$i$i>>2]|0;
     $$idx2$i$i = (($ls$idx$val$i) + 36|0);
     $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
     $$idx$val$idx$i$i = (($$idx$val$i$i) + 60|0);
     $$idx$val$idx$val$i$i = HEAP32[$$idx$val$idx$i$i>>2]|0;
     $$idx1$val$idx$i$i = (($$idx1$val$i$i) + 68|0);
     $$idx1$val$idx$val$i$i = HEAP32[$$idx1$val$idx$i$i>>2]|0;
     $$idx1$val$idx$val$idx$val$i$i = HEAP32[$$idx1$val$idx$val$i$i>>2]|0;
     $284 = (($$idx2$val$i$i) + ($283))|0;
     $285 = (($284) + -1)|0;
     $286 = (($$idx1$val$idx$val$idx$val$i$i) + ($285<<1)|0);
     $287 = HEAP16[$286>>1]|0;
     $288 = $287 << 16 >> 16;
     $289 = ((($$idx$val$idx$val$i$i) + (($288*12)|0)|0) + 4|0);
     HEAP32[$289>>2] = $282;
     $290 = HEAP32[$0>>2]|0;
     _body($ls,$b$i21,0,$290);
     $291 = (($271) + 16|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = (($b$i21) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $$idx$val$i = HEAP32[$271>>2]|0;
     $$idx1$i = (($271) + 8|0);
     $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
     $$idx2$i = (($271) + 36|0);
     $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
     $$idx$val$idx$i = (($$idx$val$i) + 60|0);
     $$idx$val$idx$val$i = HEAP32[$$idx$val$idx$i>>2]|0;
     $$idx1$val$idx$i = (($$idx1$val$i) + 68|0);
     $$idx1$val$idx$val$i = HEAP32[$$idx1$val$idx$i>>2]|0;
     $$idx1$val$idx$val$idx$val$i = HEAP32[$$idx1$val$idx$val$i>>2]|0;
     $295 = (($$idx2$val$i) + ($294))|0;
     $296 = (($$idx1$val$idx$val$idx$val$i) + ($295<<1)|0);
     $297 = HEAP16[$296>>1]|0;
     $298 = $297 << 16 >> 16;
     $299 = ((($$idx$val$idx$val$i) + (($298*12)|0)|0) + 4|0);
     HEAP32[$299>>2] = $292;
     break L8;
    } else {
     _error_expected($ls,292);
     // unreachable;
    }
   }
   $300 = ($269|0)==(292);
   if (!($300)) {
    _error_expected($ls,292);
    // unreachable;
   }
   $301 = (($ls) + 24|0);
   $nvars$0$i96 = 1;
   while(1) {
    $302 = HEAP32[$301>>2]|0;
    _luaX_next($ls);
    _new_localvar($ls,$302);
    $303 = HEAP32[$18>>2]|0;
    if ((($303|0) == 61)) {
     $nvars$0$i96$lcssa125 = $nvars$0$i96;
     label = 110;
     break;
    } else if (!((($303|0) == 44))) {
     $nvars$0$i96$lcssa = $nvars$0$i96;
     label = 113;
     break;
    }
    _luaX_next($ls);
    $phitmp = (($nvars$0$i96) + 1)|0;
    $304 = HEAP32[$18>>2]|0;
    $305 = ($304|0)==(292);
    if ($305) {
     $nvars$0$i96 = $phitmp;
    } else {
     label = 106;
     break;
    }
   }
   do {
    if ((label|0) == 106) {
     _error_expected($ls,292);
     // unreachable;
    }
    else if ((label|0) == 110) {
     _luaX_next($ls);
     (_subexpr($ls,$e$i,0)|0);
     $306 = HEAP32[$18>>2]|0;
     $307 = ($306|0)==(44);
     if ($307) {
      $n$0$i$i92 = 1;
      while(1) {
       _luaX_next($ls);
       $308 = HEAP32[$ls$idx>>2]|0;
       _luaK_exp2nextreg($308,$e$i);
       (_subexpr($ls,$e$i,0)|0);
       $309 = (($n$0$i$i92) + 1)|0;
       $310 = HEAP32[$18>>2]|0;
       $311 = ($310|0)==(44);
       if ($311) {
        $n$0$i$i92 = $309;
       } else {
        $$lcssa124 = $309;
        break;
       }
      }
      $n$0$i$i$lcssa = $$lcssa124;
     } else {
      $n$0$i$i$lcssa = 1;
     }
     $$pre112 = HEAP32[$e$i>>2]|0;
     $ls$idx1$val$i = HEAP32[$ls$idx>>2]|0;
     $312 = (($nvars$0$i96$lcssa125) - ($n$0$i$i$lcssa))|0;
     if ((($$pre112|0) == 0)) {
      $317 = $312;$ls$idx1$val$i116 = $ls$idx1$val$i;$nvars$0$i96128 = $nvars$0$i96$lcssa125;
      label = 119;
      break;
     } else if (!((($$pre112|0) == 14) | (($$pre112|0) == 13))) {
      _luaK_exp2nextreg($ls$idx1$val$i,$e$i);
      $317 = $312;$ls$idx1$val$i116 = $ls$idx1$val$i;$nvars$0$i96128 = $nvars$0$i96$lcssa125;
      label = 119;
      break;
     }
     $313 = (($312) + 1)|0;
     $314 = ($313|0)<(0);
     $$$i$i = $314 ? 0 : $313;
     _luaK_setreturns($ls$idx1$val$i,$e$i,$$$i$i);
     $315 = ($$$i$i|0)>(1);
     if ($315) {
      $316 = (($$$i$i) + -1)|0;
      _luaK_reserveregs($ls$idx1$val$i,$316);
      $nvars$0$i96127 = $nvars$0$i96$lcssa125;
     } else {
      $nvars$0$i96127 = $nvars$0$i96$lcssa125;
     }
    }
    else if ((label|0) == 113) {
     HEAP32[$e$i>>2] = 0;
     $ls$idx1$val$i115 = HEAP32[$ls$idx>>2]|0;
     $317 = $nvars$0$i96$lcssa;$ls$idx1$val$i116 = $ls$idx1$val$i115;$nvars$0$i96128 = $nvars$0$i96$lcssa;
     label = 119;
    }
   } while(0);
   if ((label|0) == 119) {
    $318 = ($317|0)>(0);
    if ($318) {
     $319 = (($ls$idx1$val$i116) + 44|0);
     $320 = HEAP8[$319>>0]|0;
     $321 = $320&255;
     _luaK_reserveregs($ls$idx1$val$i116,$317);
     _luaK_nil($ls$idx1$val$i116,$321,$317);
     $nvars$0$i96127 = $nvars$0$i96128;
    } else {
     $nvars$0$i96127 = $nvars$0$i96128;
    }
   }
   $ls$idx$val$i29 = HEAP32[$ls$idx>>2]|0;
   $322 = (($ls$idx$val$i29) + 42|0);
   $323 = HEAP8[$322>>0]|0;
   $324 = $323&255;
   $325 = (($324) + ($nvars$0$i96127))|0;
   $326 = $325&255;
   HEAP8[$322>>0] = $326;
   $327 = ($nvars$0$i96127|0)==(0);
   if (!($327)) {
    $328 = (($ls$idx$val$i29) + 16|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = $325 & 255;
    $$idx$val$i$i31 = HEAP32[$ls$idx$val$i29>>2]|0;
    $$idx1$i$i32 = (($ls$idx$val$i29) + 8|0);
    $$idx1$val$i$i33 = HEAP32[$$idx1$i$i32>>2]|0;
    $$idx2$i$i34 = (($ls$idx$val$i29) + 36|0);
    $$idx2$val$i$i35 = HEAP32[$$idx2$i$i34>>2]|0;
    $$idx$val$idx$i$i36 = (($$idx$val$i$i31) + 60|0);
    $$idx$val$idx$val$i$i37 = HEAP32[$$idx$val$idx$i$i36>>2]|0;
    $$idx1$val$idx$i$i38 = (($$idx1$val$i$i33) + 68|0);
    $$idx1$val$idx$val$i$i39 = HEAP32[$$idx1$val$idx$i$i38>>2]|0;
    $$idx1$val$idx$val$idx$val$i$i41 = HEAP32[$$idx1$val$idx$val$i$i39>>2]|0;
    $331 = (($$idx2$val$i$i35) + ($330))|0;
    $$01$i$i42 = $nvars$0$i96127;
    while(1) {
     $332 = (($331) - ($$01$i$i42))|0;
     $333 = (($$idx1$val$idx$val$idx$val$i$i41) + ($332<<1)|0);
     $334 = HEAP16[$333>>1]|0;
     $335 = $334 << 16 >> 16;
     $336 = ((($$idx$val$idx$val$i$i37) + (($335*12)|0)|0) + 4|0);
     HEAP32[$336>>2] = $329;
     $337 = (($$01$i$i42) + -1)|0;
     $338 = ($337|0)==(0);
     if ($338) {
      break;
     } else {
      $$01$i$i42 = $337;
     }
    }
   }
   break;
  }
  default: {
   $447 = (($v$i59) + 8|0);
   _suffixedexp($ls,$447);
   $448 = HEAP32[$18>>2]|0;
   if ((($448|0) == 44) | (($448|0) == 61)) {
    HEAP32[$v$i59>>2] = 0;
    _assignment($ls,$v$i59,1);
    break L8;
   }
   $449 = HEAP32[$447>>2]|0;
   $450 = ($449|0)==(13);
   if ($450) {
    $451 = (($v$i59) + 16|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = HEAP32[$ls$idx$val>>2]|0;
    $454 = (($453) + 48|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = (($455) + ($452<<2)|0);
    $457 = HEAP32[$456>>2]|0;
    $458 = $457 & -8372225;
    $459 = $458 | 16384;
    HEAP32[$456>>2] = $459;
    break L8;
   } else {
    _luaX_syntaxerror($ls,7768);
    // unreachable;
   }
  }
  }
 } while(0);
 $460 = HEAP32[$ls$idx>>2]|0;
 $461 = (($460) + 42|0);
 $462 = HEAP8[$461>>0]|0;
 $463 = (($460) + 44|0);
 HEAP8[$463>>0] = $462;
 $464 = HEAP32[$ls$idx1>>2]|0;
 $465 = (($464) + 106|0);
 $466 = HEAP16[$465>>1]|0;
 $467 = (($466) + -1)<<16>>16;
 HEAP16[$465>>1] = $467;
 STACKTOP = sp;return;
}
function _error_expected($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaX_token2str($ls,$token)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (_luaO_pushfstring($1,7752,$vararg_buffer)|0);
 _luaX_syntaxerror($ls,$3);
 // unreachable;
}
function _close_func($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 _luaK_ret($3,0,0);
 _leaveblock($3);
 $5 = (($3) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  _luaM_toobig($1);
  // unreachable;
 }
 $9 = (($4) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($4) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 << 2;
 $14 = $6 << 2;
 $15 = (_luaM_realloc_($1,$10,$13,$14)|0);
 HEAP32[$9>>2] = $15;
 $16 = HEAP32[$5>>2]|0;
 HEAP32[$11>>2] = $16;
 $17 = (($16) + 1)|0;
 $18 = ($17>>>0)>(1073741823);
 if ($18) {
  _luaM_toobig($1);
  // unreachable;
 }
 $19 = (($4) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($4) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 << 2;
 $24 = $16 << 2;
 $25 = (_luaM_realloc_($1,$20,$23,$24)|0);
 HEAP32[$19>>2] = $25;
 $26 = HEAP32[$5>>2]|0;
 HEAP32[$21>>2] = $26;
 $27 = (($3) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 $30 = ($29>>>0)>(268435455);
 if ($30) {
  _luaM_toobig($1);
  // unreachable;
 }
 $31 = (($4) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($4) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 << 4;
 $36 = $28 << 4;
 $37 = (_luaM_realloc_($1,$32,$35,$36)|0);
 HEAP32[$31>>2] = $37;
 $38 = HEAP32[$27>>2]|0;
 HEAP32[$33>>2] = $38;
 $39 = (($3) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 $42 = ($41>>>0)>(1073741823);
 if ($42) {
  _luaM_toobig($1);
  // unreachable;
 }
 $43 = (($4) + 52|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($4) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 << 2;
 $48 = $40 << 2;
 $49 = (_luaM_realloc_($1,$44,$47,$48)|0);
 HEAP32[$43>>2] = $49;
 $50 = HEAP32[$39>>2]|0;
 HEAP32[$45>>2] = $50;
 $51 = (($4) + 60|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($4) + 32|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54*12)|0;
 $56 = (($3) + 40|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57 << 16 >> 16;
 $59 = ($58*12)|0;
 $60 = (_luaM_realloc_($1,$52,$55,$59)|0);
 HEAP32[$51>>2] = $60;
 $61 = HEAP16[$56>>1]|0;
 $62 = $61 << 16 >> 16;
 HEAP32[$53>>2] = $62;
 $63 = (($4) + 64|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($4) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 << 3;
 $68 = (($3) + 43|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $70 << 3;
 $72 = (_luaM_realloc_($1,$64,$67,$71)|0);
 HEAP32[$63>>2] = $72;
 $73 = HEAP8[$68>>0]|0;
 $74 = $73&255;
 HEAP32[$65>>2] = $74;
 $75 = (($3) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 HEAP32[$2>>2] = $76;
 $77 = (($1) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)>(0);
 if (!($81)) {
  return;
 }
 _luaC_step($1);
 return;
}
function _test_then_block($ls,$escapelist) {
 $ls = $ls|0;
 $escapelist = $escapelist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bl = 0, $jf$0 = 0, $ls$idx$val$i = 0, $switch = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl = sp + 24|0;
 $v = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaX_next($ls);
 (_subexpr($ls,$v,0)|0);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(275);
 if (!($4)) {
  _error_expected($ls,275);
  // unreachable;
 }
 _luaX_next($ls);
 $5 = HEAP32[$2>>2]|0;
 do {
  if ((($5|0) == 258) | (($5|0) == 266)) {
   $6 = HEAP32[$0>>2]|0;
   _luaK_goiffalse($6,$v);
   $7 = (($bl) + 14|0);
   HEAP8[$7>>0] = 0;
   $8 = (($1) + 42|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = (($bl) + 12|0);
   HEAP8[$10>>0] = $9;
   $11 = (($1) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 68|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($bl) + 4|0);
   HEAP32[$17>>2] = $16;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($bl) + 8|0);
   HEAP32[$20>>2] = $19;
   $21 = (($bl) + 13|0);
   HEAP8[$21>>0] = 0;
   $22 = (($1) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$bl>>2] = $23;
   HEAP32[$22>>2] = $bl;
   $24 = (($v) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   _gotostat($ls,$25);
   L6: while(1) {
    $26 = HEAP32[$2>>2]|0;
    switch ($26|0) {
    case 288: case 59:  {
     break;
    }
    case 289: case 262: case 261: case 260:  {
     break L6;
     break;
    }
    default: {
     label = 8;
     break L6;
    }
    }
    _statement($ls);
   }
   if ((label|0) == 8) {
    $27 = (_luaK_jump($1)|0);
    $jf$0 = $27;
    break;
   }
   _leaveblock($1);
   STACKTOP = sp;return;
  } else {
   $28 = HEAP32[$0>>2]|0;
   _luaK_goiftrue($28,$v);
   $29 = (($bl) + 14|0);
   HEAP8[$29>>0] = 0;
   $30 = (($1) + 42|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = (($bl) + 12|0);
   HEAP8[$32>>0] = $31;
   $33 = (($1) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 68|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($bl) + 4|0);
   HEAP32[$39>>2] = $38;
   $40 = (($36) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($bl) + 8|0);
   HEAP32[$42>>2] = $41;
   $43 = (($bl) + 13|0);
   HEAP8[$43>>0] = 0;
   $44 = (($1) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$bl>>2] = $45;
   HEAP32[$44>>2] = $bl;
   $46 = (($v) + 20|0);
   $47 = HEAP32[$46>>2]|0;
   $jf$0 = $47;
  }
 } while(0);
 L15: while(1) {
  $ls$idx$val$i = HEAP32[$2>>2]|0;
  switch ($ls$idx$val$i|0) {
  case 277: case 289: case 262: case 261: case 260:  {
   break L15;
   break;
  }
  default: {
  }
  }
  $48 = ($ls$idx$val$i|0)==(274);
  _statement($ls);
  if ($48) {
   break;
  }
 }
 _leaveblock($1);
 $49 = HEAP32[$2>>2]|0;
 $50 = $49 & -2;
 $switch = ($50|0)==(260);
 if ($switch) {
  $51 = (_luaK_jump($1)|0);
  _luaK_concat($1,$escapelist,$51);
 }
 _luaK_patchtohere($1,$jf$0);
 STACKTOP = sp;return;
}
function _leaveblock($fs) {
 $fs = $fs|0;
 var $$0$i$i = 0, $$i$0$i = 0, $$lcssa = 0, $$lcssa19 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i2 = 0, $$pre4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$val$idx$val$i = 0, $fs$idx2$i = 0, $fs$idx2$val$i = 0, $i$0$ph1$i$i = 0, $i$03$i = 0, $i$04$i$i = 0, $i$04$i$i$lcssa = 0, $phitmp$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($fs) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (($1) + 13|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   $9 = (_luaK_jump($fs)|0);
   $10 = (($1) + 12|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   _luaK_patchclose($fs,$9,$12);
   _luaK_patchtohere($fs,$9);
  }
 }
 $13 = (($1) + 14|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if (!($15)) {
   $16 = (($3) + 52|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_luaS_new($17,14624)|0);
   $19 = (($3) + 68|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 24|0);
   $22 = (($3) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($20) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   $29 = (($20) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($27|0)<($30|0);
   if ($31) {
    $$pre$i$i = HEAP32[$21>>2]|0;
    $36 = $$pre$i$i;$39 = $23;$44 = $20;
   } else {
    $32 = HEAP32[$16>>2]|0;
    $33 = HEAP32[$21>>2]|0;
    $34 = (_luaM_growaux_($32,$33,$29,16,32767,7736)|0);
    HEAP32[$21>>2] = $34;
    $$pre$i = HEAP32[$22>>2]|0;
    $$pre4$i = HEAP32[$19>>2]|0;
    $36 = $34;$39 = $$pre$i;$44 = $$pre4$i;
   }
   $35 = (($36) + ($27<<4)|0);
   HEAP32[$35>>2] = $18;
   $37 = ((($36) + ($27<<4)|0) + 8|0);
   HEAP32[$37>>2] = 0;
   $38 = (($39) + 42|0);
   $40 = HEAP8[$38>>0]|0;
   $41 = ((($36) + ($27<<4)|0) + 12|0);
   HEAP8[$41>>0] = $40;
   $42 = ((($36) + ($27<<4)|0) + 4|0);
   HEAP32[$42>>2] = $25;
   HEAP32[$26>>2] = $28;
   $43 = (($44) + 24|0);
   $45 = HEAP32[$43>>2]|0;
   $46 = (($45) + ($27<<4)|0);
   $47 = (($39) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($44) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)<($52|0);
   if ($53) {
    $54 = (($44) + 12|0);
    $169 = $52;$i$0$ph1$i$i = $50;
    L12: while(1) {
     $170 = $169;
     while(1) {
      $55 = HEAP32[$54>>2]|0;
      $56 = (($55) + ($i$0$ph1$i$i<<4)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = HEAP32[$46>>2]|0;
      $59 = ($57|0)==($58|0);
      if (!($59)) {
       $$lcssa19 = $170;
       break;
      }
      _closegoto($3,$i$0$ph1$i$i,$46);
      $60 = HEAP32[$51>>2]|0;
      $61 = ($i$0$ph1$i$i|0)<($60|0);
      if ($61) {
       $170 = $60;
      } else {
       label = 14;
       break L12;
      }
     }
     $62 = (($i$0$ph1$i$i) + 1)|0;
     $63 = ($62|0)<($$lcssa19|0);
     if ($63) {
      $169 = $$lcssa19;$i$0$ph1$i$i = $62;
     } else {
      label = 15;
      break;
     }
    }
    if ((label|0) == 14) {
     break;
    }
    else if ((label|0) == 15) {
     break;
    }
   }
  }
 } while(0);
 $64 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $64;
 $65 = (($1) + 12|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = (($fs) + 42|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = HEAP32[$2>>2]|0;
 $72 = (($71) + 68|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($67) - ($70))|0;
 $77 = (($76) + ($75))|0;
 HEAP32[$74>>2] = $77;
 $78 = ($66&255)<($69&255);
 if ($78) {
  $79 = (($fs) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $fs$idx$val$i = HEAP32[$fs>>2]|0;
  $fs$idx2$i = (($fs) + 36|0);
  $fs$idx2$val$i = HEAP32[$fs$idx2$i>>2]|0;
  $fs$idx$val$idx$i = (($fs$idx$val$i) + 60|0);
  $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
  $fs$idx1$val$idx$val$idx$val$i = HEAP32[$73>>2]|0;
  $82 = $69;
  while(1) {
   $81 = (($82) + -1)<<24>>24;
   $83 = $81&255;
   $84 = (($83) + ($fs$idx2$val$i))|0;
   $85 = (($fs$idx1$val$idx$val$idx$val$i) + ($84<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = $86 << 16 >> 16;
   $88 = ((($fs$idx$val$idx$val$i) + (($87*12)|0)|0) + 8|0);
   HEAP32[$88>>2] = $80;
   $89 = ($81&255)>($66&255);
   if ($89) {
    $82 = $81;
   } else {
    break;
   }
  }
  HEAP8[$68>>0] = $66;
  $91 = $66;
 } else {
  $91 = $69;
 }
 $90 = (($fs) + 44|0);
 HEAP8[$90>>0] = $91;
 $92 = (($1) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($3) + 68|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + 28|0);
 HEAP32[$96>>2] = $93;
 $97 = ($64|0)==(0|0);
 $98 = (($1) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 if ($97) {
  $149 = (($95) + 16|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($99|0)<($150|0);
  if (!($151)) {
   STACKTOP = sp;return;
  }
  $152 = (($95) + 12|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($99<<4)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + 4|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = ($157<<24>>24)==(4);
  if (!($158)) {
   $167 = 7632;
   $162 = (($3) + 52|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($155) + 16|0);
   $165 = ((($153) + ($99<<4)|0) + 8|0);
   $166 = HEAP32[$165>>2]|0;
   HEAP32[$vararg_buffer>>2] = $164;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $166;
   $168 = (_luaO_pushfstring($163,$167,$vararg_buffer)|0);
   _semerror($3,$168);
   // unreachable;
  }
  $159 = (($155) + 6|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = ($160<<24>>24)!=(0);
  $phitmp$i = $161 ? 7592 : 7632;
  $167 = $phitmp$i;
  $162 = (($3) + 52|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($155) + 16|0);
  $165 = ((($153) + ($99<<4)|0) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  HEAP32[$vararg_buffer>>2] = $164;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $166;
  $168 = (_luaO_pushfstring($163,$167,$vararg_buffer)|0);
  _semerror($3,$168);
  // unreachable;
 }
 $100 = (($73) + 16|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($99|0)<($101|0);
 if (!($102)) {
  STACKTOP = sp;return;
 }
 $103 = (($73) + 12|0);
 $104 = (($1) + 13|0);
 $109 = $66;$i$03$i = $99;
 while(1) {
  $105 = HEAP32[$103>>2]|0;
  $106 = ((($105) + ($i$03$i<<4)|0) + 12|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $109&255;
  $110 = ($107&255)>($109&255);
  if ($110) {
   $111 = HEAP8[$104>>0]|0;
   $112 = ($111<<24>>24)==(0);
   if ($112) {
    $115 = $109;
   } else {
    $113 = ((($105) + ($i$03$i<<4)|0) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    _luaK_patchclose($fs,$114,$108);
    $$pre$i2 = HEAP8[$65>>0]|0;
    $115 = $$pre$i2;
   }
   HEAP8[$106>>0] = $115;
  }
  $116 = HEAP32[$2>>2]|0;
  $117 = (($116) + 48|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($116) + 68|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($120) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($122) + 28|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)<($128|0);
  do {
   if ($129) {
    $130 = (($122) + 24|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($124) + ($i$03$i<<4)|0);
    $133 = HEAP32[$132>>2]|0;
    $i$04$i$i = $126;
    while(1) {
     $136 = (($131) + ($i$04$i$i<<4)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($133|0);
     $134 = (($i$04$i$i) + 1)|0;
     if ($138) {
      $$lcssa = $136;$i$04$i$i$lcssa = $i$04$i$i;
      break;
     }
     $135 = ($134|0)<($128|0);
     if ($135) {
      $i$04$i$i = $134;
     } else {
      label = 34;
      break;
     }
    }
    if ((label|0) == 34) {
     label = 0;
     $$0$i$i = 1;
     break;
    }
    $139 = ((($124) + ($i$03$i<<4)|0) + 12|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = ((($131) + ($i$04$i$i$lcssa<<4)|0) + 12|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = ($140&255)>($142&255);
    if ($143) {
     $144 = ((($124) + ($i$03$i<<4)|0) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $142&255;
     _luaK_patchclose($118,$145,$146);
    }
    _closegoto($116,$i$03$i,$$lcssa);
    $$0$i$i = 0;
   } else {
    $$0$i$i = 1;
   }
  } while(0);
  $$i$0$i = (($$0$i$i) + ($i$03$i))|0;
  $147 = HEAP32[$100>>2]|0;
  $148 = ($$i$0$i|0)<($147|0);
  if (!($148)) {
   break;
  }
  $$pre = HEAP8[$65>>0]|0;
  $109 = $$pre;$i$03$i = $$i$0$i;
 }
 STACKTOP = sp;return;
}
function _subexpr($ls,$v,$limit) {
 $ls = $ls|0;
 $v = $v|0;
 $limit = $limit|0;
 var $$0$i2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $op$0$lcssa = 0, $op$0$lcssa$ph = 0, $op$0$ph$ph = 0, $op$04 = 0, $v2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp;
 $v2 = sp + 8|0;
 $ls$idx = (($ls) + 48|0);
 $ls$idx$val = HEAP32[$ls$idx>>2]|0;
 $ls$idx1 = (($ls) + 52|0);
 $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
 $0 = (($ls$idx1$val) + 106|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2&65535)>(200);
 if ($3) {
  $4 = (($ls$idx$val) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$ls$idx$val>>2]|0;
  $9 = (($8) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $13 = 7968;
   HEAP32[$vararg_buffer1>>2] = 7784;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $13;
   $14 = (_luaO_pushfstring($7,8008,$vararg_buffer1)|0);
   $15 = HEAP32[$4>>2]|0;
   _luaX_syntaxerror($15,$14);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $10;
  $12 = (_luaO_pushfstring($7,7984,$vararg_buffer)|0);
  $13 = $12;
  HEAP32[$vararg_buffer1>>2] = 7784;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 200;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $14 = (_luaO_pushfstring($7,8008,$vararg_buffer1)|0);
  $15 = HEAP32[$4>>2]|0;
  _luaX_syntaxerror($15,$14);
  // unreachable;
 }
 $16 = (($ls) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 L8: do {
  switch ($17|0) {
  case 271:  {
   $$0$i2$ph = 2;
   label = 9;
   break;
  }
  case 263:  {
   $53 = (($v) + 16|0);
   HEAP32[$53>>2] = -1;
   $54 = (($v) + 20|0);
   HEAP32[$54>>2] = -1;
   HEAP32[$v>>2] = 3;
   $55 = (($v) + 8|0);
   HEAP32[$55>>2] = 0;
   label = 22;
   break;
  }
  case 123:  {
   _constructor($ls,$v);
   break;
  }
  case 35:  {
   $$0$i2$ph = 3;
   label = 9;
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $64 = (($ls) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   _body($ls,$v,0,$65);
   break;
  }
  case 276:  {
   $50 = (($v) + 16|0);
   HEAP32[$50>>2] = -1;
   $51 = (($v) + 20|0);
   HEAP32[$51>>2] = -1;
   HEAP32[$v>>2] = 2;
   $52 = (($v) + 8|0);
   HEAP32[$52>>2] = 0;
   label = 22;
   break;
  }
  case 290:  {
   $21 = (($v) + 16|0);
   HEAP32[$21>>2] = -1;
   $22 = (($v) + 20|0);
   HEAP32[$22>>2] = -1;
   HEAP32[$v>>2] = 5;
   $23 = (($v) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = (($ls) + 24|0);
   $25 = +HEAPF64[$24>>3];
   $26 = (($v) + 8|0);
   HEAPF64[$26>>3] = $25;
   label = 22;
   break;
  }
  case 281:  {
   $56 = HEAP32[$ls$idx$val>>2]|0;
   $57 = (($56) + 7|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    _luaX_syntaxerror($ls,7848);
    // unreachable;
   } else {
    $60 = (_luaK_codeABC($ls$idx$val,45,0,1,0)|0);
    $61 = (($v) + 16|0);
    HEAP32[$61>>2] = -1;
    $62 = (($v) + 20|0);
    HEAP32[$62>>2] = -1;
    HEAP32[$v>>2] = 14;
    $63 = (($v) + 8|0);
    HEAP32[$63>>2] = $60;
    label = 22;
    break L8;
   }
   break;
  }
  case 270:  {
   $47 = (($v) + 16|0);
   HEAP32[$47>>2] = -1;
   $48 = (($v) + 20|0);
   HEAP32[$48>>2] = -1;
   HEAP32[$v>>2] = 1;
   $49 = (($v) + 8|0);
   HEAP32[$49>>2] = 0;
   label = 22;
   break;
  }
  case 126:  {
   $$0$i2$ph = 1;
   label = 9;
   break;
  }
  case 45:  {
   $$0$i2$ph = 0;
   label = 9;
   break;
  }
  case 293:  {
   $41 = (($ls) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_luaK_stringK($ls$idx$val,$42)|0);
   $44 = (($v) + 16|0);
   HEAP32[$44>>2] = -1;
   $45 = (($v) + 20|0);
   HEAP32[$45>>2] = -1;
   HEAP32[$v>>2] = 4;
   $46 = (($v) + 8|0);
   HEAP32[$46>>2] = $43;
   label = 22;
   break;
  }
  case 291:  {
   $27 = (($v) + 16|0);
   HEAP32[$27>>2] = -1;
   $28 = (($v) + 20|0);
   HEAP32[$28>>2] = -1;
   HEAP32[$v>>2] = 6;
   $29 = (($v) + 8|0);
   HEAP32[$29>>2] = 0;
   $30 = (($ls) + 24|0);
   $31 = $30;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = $29;
   $38 = $37;
   HEAP32[$38>>2] = $33;
   $39 = (($37) + 4)|0;
   $40 = $39;
   HEAP32[$40>>2] = $36;
   label = 22;
   break;
  }
  default: {
   _suffixedexp($ls,$v);
  }
  }
 } while(0);
 if ((label|0) == 9) {
  $18 = (($ls) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _luaX_next($ls);
  (_subexpr($ls,$v,12)|0);
  $20 = HEAP32[$ls$idx>>2]|0;
  _luaK_prefix($20,$$0$i2$ph,$v,$19);
 }
 else if ((label|0) == 22) {
  _luaX_next($ls);
 }
 $66 = HEAP32[$16>>2]|0;
 do {
  switch ($66|0) {
  case 42:  {
   $op$0$ph$ph = 2;
   break;
  }
  case 37:  {
   $op$0$ph$ph = 3;
   break;
  }
  case 94:  {
   $op$0$ph$ph = 4;
   break;
  }
  case 47:  {
   $op$0$ph$ph = 5;
   break;
  }
  case 38:  {
   $op$0$ph$ph = 7;
   break;
  }
  case 126:  {
   $op$0$ph$ph = 9;
   break;
  }
  case 286:  {
   $op$0$ph$ph = 10;
   break;
  }
  case 287:  {
   $op$0$ph$ph = 11;
   break;
  }
  case 285:  {
   $op$0$ph$ph = 16;
   break;
  }
  case 282:  {
   $op$0$ph$ph = 13;
   break;
  }
  case 279:  {
   $op$0$ph$ph = 6;
   break;
  }
  case 284:  {
   $op$0$ph$ph = 15;
   break;
  }
  case 62:  {
   $op$0$ph$ph = 17;
   break;
  }
  case 60:  {
   $op$0$ph$ph = 14;
   break;
  }
  case 283:  {
   $op$0$ph$ph = 18;
   break;
  }
  case 124:  {
   $op$0$ph$ph = 8;
   break;
  }
  case 45:  {
   $op$0$ph$ph = 1;
   break;
  }
  case 257:  {
   $op$0$ph$ph = 19;
   break;
  }
  case 272:  {
   $op$0$ph$ph = 20;
   break;
  }
  case 280:  {
   $op$0$ph$ph = 12;
   break;
  }
  case 43:  {
   $op$0$ph$ph = 0;
   break;
  }
  default: {
   $op$0$lcssa = 21;
   $80 = HEAP32[$ls$idx1>>2]|0;
   $81 = (($80) + 106|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = (($82) + -1)<<16>>16;
   HEAP16[$81>>1] = $83;
   STACKTOP = sp;return ($op$0$lcssa|0);
  }
  }
 } while(0);
 $67 = (($ls) + 4|0);
 $op$04 = $op$0$ph$ph;
 while(1) {
  $68 = (7800 + ($op$04<<1)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)>($limit|0);
  if (!($71)) {
   $op$0$lcssa$ph = $op$04;
   break;
  }
  $72 = HEAP32[$67>>2]|0;
  _luaX_next($ls);
  $73 = HEAP32[$ls$idx>>2]|0;
  _luaK_infix($73,$op$04,$v);
  $74 = ((7800 + ($op$04<<1)|0) + 1|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (_subexpr($ls,$v2,$76)|0);
  $78 = HEAP32[$ls$idx>>2]|0;
  _luaK_posfix($78,$op$04,$v,$v2,$72);
  $79 = ($77|0)==(21);
  if ($79) {
   $op$0$lcssa$ph = 21;
   break;
  } else {
   $op$04 = $77;
  }
 }
 $op$0$lcssa = $op$0$lcssa$ph;
 $80 = HEAP32[$ls$idx1>>2]|0;
 $81 = (($80) + 106|0);
 $82 = HEAP16[$81>>1]|0;
 $83 = (($82) + -1)<<16>>16;
 HEAP16[$81>>1] = $83;
 STACKTOP = sp;return ($op$0$lcssa|0);
}
function _new_localvar($ls,$name) {
 $ls = $ls|0;
 $name = $name|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre1 = 0, $$pre3 = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $oldsize$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 40|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)<($6|0);
 if ($10) {
  $$phi$trans$insert = (($4) + 60|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $17 = $6;$20 = $$pre;
 } else {
  $11 = (($ls) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($4) + 60|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_luaM_growaux_($12,$14,$5,12,32767,7936)|0);
  HEAP32[$13>>2] = $15;
  $$pre$i = HEAP32[$5>>2]|0;
  $17 = $$pre$i;$20 = $15;
 }
 $16 = ($6|0)<($17|0);
 if ($16) {
  $oldsize$01$i = $6;
  while(1) {
   $18 = (($oldsize$01$i) + 1)|0;
   $19 = (($20) + (($oldsize$01$i*12)|0)|0);
   HEAP32[$19>>2] = 0;
   $exitcond = ($18|0)==($17|0);
   if ($exitcond) {
    break;
   } else {
    $oldsize$01$i = $18;
   }
  }
 }
 $21 = HEAP16[$7>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($20) + (($22*12)|0)|0);
 HEAP32[$23>>2] = $name;
 $24 = (($4) + 5|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & 4;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  $35 = $21;
 } else {
  $28 = (($name) + 5|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 & 3;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $35 = $21;
  } else {
   $32 = (($ls) + 52|0);
   $33 = HEAP32[$32>>2]|0;
   _luaC_barrier_($33,$4,$name);
   $$pre3$i = HEAP16[$7>>1]|0;
   $35 = $$pre3$i;
  }
 }
 $34 = (($35) + 1)<<16>>16;
 HEAP16[$7>>1] = $34;
 $36 = (($3) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1)|0;
 $39 = (($1) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) - ($40))|0;
 $42 = ($41|0)>(200);
 if ($42) {
  $43 = (($1) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$1>>2]|0;
  $48 = (($47) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0);
  if ($50) {
   $52 = 7968;
   HEAP32[$vararg_buffer1>>2] = 7936;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $52;
   $53 = (_luaO_pushfstring($46,8008,$vararg_buffer1)|0);
   $54 = HEAP32[$43>>2]|0;
   _luaX_syntaxerror($54,$53);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $49;
  $51 = (_luaO_pushfstring($46,7984,$vararg_buffer)|0);
  $52 = $51;
  HEAP32[$vararg_buffer1>>2] = 7936;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 200;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $52;
  $53 = (_luaO_pushfstring($46,8008,$vararg_buffer1)|0);
  $54 = HEAP32[$43>>2]|0;
  _luaX_syntaxerror($54,$53);
  // unreachable;
 }
 $55 = (($37) + 2)|0;
 $56 = (($3) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($55|0)>($57|0);
 if ($58) {
  $59 = (($ls) + 52|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$3>>2]|0;
  $62 = (_luaM_growaux_($60,$61,$56,2,2147483647,7936)|0);
  HEAP32[$3>>2] = $62;
  $$pre1 = HEAP32[$36>>2]|0;
  $64 = $$pre1;$66 = $62;
  $63 = (($64) + 1)|0;
  HEAP32[$36>>2] = $63;
  $65 = (($66) + ($64<<1)|0);
  HEAP16[$65>>1] = $35;
  STACKTOP = sp;return;
 } else {
  $$pre3 = HEAP32[$3>>2]|0;
  $64 = $37;$66 = $$pre3;
  $63 = (($64) + 1)|0;
  HEAP32[$36>>2] = $63;
  $65 = (($66) + ($64<<1)|0);
  HEAP16[$65>>1] = $35;
  STACKTOP = sp;return;
 }
}
function _forbody($ls,$base,$line,$nvars,$isnum) {
 $ls = $ls|0;
 $base = $base|0;
 $line = $line|0;
 $nvars = $nvars|0;
 $isnum = $isnum|0;
 var $$01$i14 = 0, $$idx$val$i = 0, $$idx$val$i3 = 0, $$idx$val$idx$i = 0, $$idx$val$idx$i8 = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i9 = 0, $$idx1$i = 0, $$idx1$i4 = 0, $$idx1$val$i = 0, $$idx1$val$i5 = 0, $$idx1$val$idx$i = 0, $$idx1$val$idx$i10 = 0, $$idx1$val$idx$val$i = 0, $$idx1$val$idx$val$i11 = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i13 = 0, $$idx2$i = 0, $$idx2$i6 = 0, $$idx2$val$i = 0;
 var $$idx2$val$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $bl = 0, $bl$i = 0, $endfor$0 = 0, $ls$idx$val = 0, $ls$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl$i = sp + 16|0;
 $bl = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 42|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + 3)|0;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 255;
 $$idx$val$i = HEAP32[$1>>2]|0;
 $$idx1$i = (($1) + 8|0);
 $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
 $$idx2$i = (($1) + 36|0);
 $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
 $$idx$val$idx$i = (($$idx$val$i) + 60|0);
 $$idx$val$idx$val$i = HEAP32[$$idx$val$idx$i>>2]|0;
 $$idx1$val$idx$i = (($$idx1$val$i) + 68|0);
 $$idx1$val$idx$val$i = HEAP32[$$idx1$val$idx$i>>2]|0;
 $$idx1$val$idx$val$idx$val$i = HEAP32[$$idx1$val$idx$val$i>>2]|0;
 $10 = (($$idx2$val$i) + ($9))|0;
 $11 = (($10) + -3)|0;
 $12 = (($$idx1$val$idx$val$idx$val$i) + ($11<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = ((($$idx$val$idx$val$i) + (($14*12)|0)|0) + 4|0);
 HEAP32[$15>>2] = $8;
 $16 = (($10) + -2)|0;
 $17 = (($$idx1$val$idx$val$idx$val$i) + ($16<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = ((($$idx$val$idx$val$i) + (($19*12)|0)|0) + 4|0);
 HEAP32[$20>>2] = $8;
 $21 = (($10) + -1)|0;
 $22 = (($$idx1$val$idx$val$idx$val$i) + ($21<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = ((($$idx$val$idx$val$i) + (($24*12)|0)|0) + 4|0);
 HEAP32[$25>>2] = $8;
 $26 = (($ls) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(259);
 if (!($28)) {
  _error_expected($ls,259);
  // unreachable;
 }
 _luaX_next($ls);
 $29 = ($isnum|0)!=(0);
 if ($29) {
  $30 = (_luaK_codeABx($1,40,$base,131070)|0);
  $83 = $30;
 } else {
  $31 = (_luaK_jump($1)|0);
  $83 = $31;
 }
 $32 = (($bl) + 14|0);
 HEAP8[$32>>0] = 0;
 $33 = HEAP8[$2>>0]|0;
 $34 = (($bl) + 12|0);
 HEAP8[$34>>0] = $33;
 $35 = HEAP32[$$idx1$i>>2]|0;
 $36 = (($35) + 68|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($bl) + 4|0);
 HEAP32[$40>>2] = $39;
 $41 = (($37) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($bl) + 8|0);
 HEAP32[$43>>2] = $42;
 $44 = (($bl) + 13|0);
 HEAP8[$44>>0] = 0;
 $45 = (($1) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$bl>>2] = $46;
 HEAP32[$45>>2] = $bl;
 $ls$idx$val = HEAP32[$0>>2]|0;
 $47 = (($ls$idx$val) + 42|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (($49) + ($nvars))|0;
 $51 = $50&255;
 HEAP8[$47>>0] = $51;
 $52 = ($nvars|0)==(0);
 if (!($52)) {
  $53 = (($ls$idx$val) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $50 & 255;
  $$idx$val$i3 = HEAP32[$ls$idx$val>>2]|0;
  $$idx1$i4 = (($ls$idx$val) + 8|0);
  $$idx1$val$i5 = HEAP32[$$idx1$i4>>2]|0;
  $$idx2$i6 = (($ls$idx$val) + 36|0);
  $$idx2$val$i7 = HEAP32[$$idx2$i6>>2]|0;
  $$idx$val$idx$i8 = (($$idx$val$i3) + 60|0);
  $$idx$val$idx$val$i9 = HEAP32[$$idx$val$idx$i8>>2]|0;
  $$idx1$val$idx$i10 = (($$idx1$val$i5) + 68|0);
  $$idx1$val$idx$val$i11 = HEAP32[$$idx1$val$idx$i10>>2]|0;
  $$idx1$val$idx$val$idx$val$i13 = HEAP32[$$idx1$val$idx$val$i11>>2]|0;
  $56 = (($$idx2$val$i7) + ($55))|0;
  $$01$i14 = $nvars;
  while(1) {
   $57 = (($56) - ($$01$i14))|0;
   $58 = (($$idx1$val$idx$val$idx$val$i13) + ($57<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59 << 16 >> 16;
   $61 = ((($$idx$val$idx$val$i9) + (($60*12)|0)|0) + 4|0);
   HEAP32[$61>>2] = $54;
   $62 = (($$01$i14) + -1)|0;
   $63 = ($62|0)==(0);
   if ($63) {
    break;
   } else {
    $$01$i14 = $62;
   }
  }
 }
 _luaK_reserveregs($1,$nvars);
 $64 = HEAP32[$0>>2]|0;
 $65 = (($bl$i) + 14|0);
 HEAP8[$65>>0] = 0;
 $66 = (($64) + 42|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = (($bl$i) + 12|0);
 HEAP8[$68>>0] = $67;
 $69 = (($64) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 68|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($bl$i) + 4|0);
 HEAP32[$75>>2] = $74;
 $76 = (($72) + 16|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($bl$i) + 8|0);
 HEAP32[$78>>2] = $77;
 $79 = (($bl$i) + 13|0);
 HEAP8[$79>>0] = 0;
 $80 = (($64) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$bl$i>>2] = $81;
 HEAP32[$80>>2] = $bl$i;
 L14: while(1) {
  $ls$idx$val$i$i = HEAP32[$26>>2]|0;
  switch ($ls$idx$val$i$i|0) {
  case 277: case 289: case 262: case 261: case 260:  {
   break L14;
   break;
  }
  default: {
  }
  }
  $82 = ($ls$idx$val$i$i|0)==(274);
  _statement($ls);
  if ($82) {
   break;
  }
 }
 _leaveblock($64);
 _leaveblock($1);
 _luaK_patchtohere($1,$83);
 if ($29) {
  $84 = (_luaK_codeABx($1,39,$base,131070)|0);
  $endfor$0 = $84;
  $87 = (($83) + 1)|0;
  _luaK_patchlist($1,$endfor$0,$87);
  _luaK_fixline($1,$line);
  STACKTOP = sp;return;
 } else {
  (_luaK_codeABC($1,41,$base,0,$nvars)|0);
  _luaK_fixline($1,$line);
  $85 = (($base) + 2)|0;
  $86 = (_luaK_codeABx($1,42,$85,131070)|0);
  $endfor$0 = $86;
  $87 = (($83) + 1)|0;
  _luaK_patchlist($1,$endfor$0,$87);
  _luaK_fixline($1,$line);
  STACKTOP = sp;return;
 }
}
function _singlevaraux($fs,$n,$var,$base) {
 $fs = $fs|0;
 $n = $n|0;
 $var = $var|0;
 $base = $base|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bl$0$i = 0, $bl$0$i$lcssa = 0, $bl$0$in$i = 0, $fs$idx$val$i = 0, $fs$idx$val$i$lcssa = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$i = 0, $fs$idx1$val$i = 0, $fs$idx1$val$idx$i = 0, $fs$idx1$val$idx$val$i = 0, $fs$idx1$val$idx$val$idx$val$i = 0, $fs$idx2$i = 0, $fs$idx2$val$i = 0, $i$0$i = 0, $i$0$i$lcssa10 = 0, $i$0$in$i = 0;
 var $i$01$i = 0, $i$01$i$lcssa = 0, $idx$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fs|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($fs) + 42|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $fs$idx1$i = (($fs) + 8|0);
 $fs$idx2$i = (($fs) + 36|0);
 $i$0$in$i = $3;
 while(1) {
  $i$0$i = (($i$0$in$i) + -1)|0;
  $4 = ($i$0$in$i|0)>(0);
  $fs$idx$val$i = HEAP32[$fs>>2]|0;
  if (!($4)) {
   $fs$idx$val$i$lcssa = $fs$idx$val$i;
   break;
  }
  $fs$idx1$val$i = HEAP32[$fs$idx1$i>>2]|0;
  $fs$idx2$val$i = HEAP32[$fs$idx2$i>>2]|0;
  $fs$idx$val$idx$i = (($fs$idx$val$i) + 60|0);
  $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
  $fs$idx1$val$idx$i = (($fs$idx1$val$i) + 68|0);
  $fs$idx1$val$idx$val$i = HEAP32[$fs$idx1$val$idx$i>>2]|0;
  $fs$idx1$val$idx$val$idx$val$i = HEAP32[$fs$idx1$val$idx$val$i>>2]|0;
  $5 = (($fs$idx2$val$i) + ($i$0$i))|0;
  $6 = (($fs$idx1$val$idx$val$idx$val$i) + ($5<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 << 16 >> 16;
  $9 = (($fs$idx$val$idx$val$i) + (($8*12)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($n|0);
  if ($11) {
   $i$0$i$lcssa10 = $i$0$i;
   label = 5;
   break;
  } else {
   $i$0$in$i = $i$0$i;
  }
 }
 if ((label|0) == 5) {
  $12 = (($var) + 16|0);
  HEAP32[$12>>2] = -1;
  $13 = (($var) + 20|0);
  HEAP32[$13>>2] = -1;
  HEAP32[$var>>2] = 8;
  $14 = (($var) + 8|0);
  HEAP32[$14>>2] = $i$0$i$lcssa10;
  $15 = ($base|0)==(0);
  if (!($15)) {
   $$0 = 8;
   return ($$0|0);
  }
  $16 = (($fs) + 12|0);
  $bl$0$in$i = $16;
  while(1) {
   $bl$0$i = HEAP32[$bl$0$in$i>>2]|0;
   $17 = (($bl$0$i) + 12|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)>($i$0$i$lcssa10|0);
   if ($20) {
    $bl$0$in$i = $bl$0$i;
   } else {
    $bl$0$i$lcssa = $bl$0$i;
    break;
   }
  }
  $21 = (($bl$0$i$lcssa) + 13|0);
  HEAP8[$21>>0] = 1;
  $$0 = 8;
  return ($$0|0);
 }
 $$phi$trans$insert = (($fs$idx$val$i$lcssa) + 64|0);
 $$pre8 = HEAP32[$$phi$trans$insert>>2]|0;
 $22 = (($fs) + 43|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 do {
  if ($24) {
   label = 15;
  } else {
   $25 = $23&255;
   $i$01$i = 0;
   while(1) {
    $28 = (($$pre8) + ($i$01$i<<3)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==($n|0);
    $26 = (($i$01$i) + 1)|0;
    if ($30) {
     $i$01$i$lcssa = $i$01$i;
     label = 13;
     break;
    }
    $27 = ($26|0)<($25|0);
    if ($27) {
     $i$01$i = $26;
    } else {
     label = 14;
     break;
    }
   }
   if ((label|0) == 13) {
    $31 = ($i$01$i$lcssa|0)<(0);
    if ($31) {
     label = 15;
     break;
    } else {
     $idx$0 = $i$01$i$lcssa;
     break;
    }
   }
   else if ((label|0) == 14) {
    label = 15;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   $32 = (($fs) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_singlevaraux($33,$n,$var,0)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $36 = (_newupvalue($fs,$n,$var)|0);
    $idx$0 = $36;
    break;
   }
  }
 } while(0);
 $37 = (($var) + 16|0);
 HEAP32[$37>>2] = -1;
 $38 = (($var) + 20|0);
 HEAP32[$38>>2] = -1;
 HEAP32[$var>>2] = 9;
 $39 = (($var) + 8|0);
 HEAP32[$39>>2] = $idx$0;
 $$0 = 9;
 return ($$0|0);
}
function _fieldsel($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $ls$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaK_exp2anyregup($1,$v);
 _luaX_next($ls);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(292);
 if ($4) {
  $5 = (($ls) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  _luaX_next($ls);
  $ls$idx$val$i = HEAP32[$0>>2]|0;
  $7 = (_luaK_stringK($ls$idx$val$i,$6)|0);
  $8 = (($key) + 16|0);
  HEAP32[$8>>2] = -1;
  $9 = (($key) + 20|0);
  HEAP32[$9>>2] = -1;
  HEAP32[$key>>2] = 4;
  $10 = (($key) + 8|0);
  HEAP32[$10>>2] = $7;
  _luaK_indexed($1,$v,$key);
  STACKTOP = sp;return;
 } else {
  _error_expected($ls,292);
  // unreachable;
 }
}
function _body($ls,$e,$ismethod,$line) {
 $ls = $ls|0;
 $e = $e|0;
 $ismethod = $ismethod|0;
 $line = $line|0;
 var $$01$i$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$idx$i = 0, $$idx$val$idx$i$i = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i$i = 0, $$idx1$i = 0, $$idx1$i$i = 0, $$idx1$val$i = 0, $$idx1$val$i$i = 0, $$idx1$val$idx$i = 0, $$idx1$val$idx$i$i = 0, $$idx1$val$idx$val$i = 0, $$idx1$val$idx$val$i$i = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i$i = 0, $$idx2$i = 0, $$idx2$i$i = 0, $$idx2$val$i = 0;
 var $$idx2$val$i$i = 0, $$lcssa = 0, $$pr$i = 0, $$pr1$i = 0, $$pre = 0, $$pre$i = 0, $$pre14 = 0, $$pre15 = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bl = 0, $exitcond = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i7 = 0, $ls$idx$val$i7$lcssa = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $ls$idx2$val = 0, $ls$idx3$val = 0, $ls$idx3$val$idx = 0, $ls$idx3$val$idx$val = 0, $new_fs = 0, $nparams$0$i = 0, $nparams$0$i$lcssa17 = 0, $nparams$2$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $new_fs = sp + 32|0;
 $bl = sp + 16|0;
 $ls$idx = (($ls) + 48|0);
 $ls$idx$val = HEAP32[$ls$idx>>2]|0;
 $ls$idx1 = (($ls) + 52|0);
 $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
 $0 = HEAP32[$ls$idx$val>>2]|0;
 $1 = (($ls$idx$val) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 $$pre3$i = (($0) + 52|0);
 if (!($5)) {
  $6 = HEAP32[$$pre3$i>>2]|0;
  $7 = (_luaM_growaux_($ls$idx1$val,$6,$3,4,262143,7952)|0);
  HEAP32[$$pre3$i>>2] = $7;
  $8 = HEAP32[$3>>2]|0;
  $9 = ($4|0)<($8|0);
  if ($9) {
   $10 = (($4) + 1)|0;
   $11 = (($7) + ($4<<2)|0);
   HEAP32[$11>>2] = 0;
   $12 = ($10|0)<($8|0);
   if ($12) {
    $14 = $10;
    while(1) {
     $$pre$i = HEAP32[$$pre3$i>>2]|0;
     $13 = (($14) + 1)|0;
     $15 = (($$pre$i) + ($14<<2)|0);
     HEAP32[$15>>2] = 0;
     $exitcond = ($13|0)==($8|0);
     if ($exitcond) {
      break;
     } else {
      $14 = $13;
     }
    }
   }
  }
 }
 $16 = (_luaF_newproto($ls$idx1$val)|0);
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$1>>2] = $18;
 $19 = HEAP32[$$pre3$i>>2]|0;
 $20 = (($19) + ($17<<2)|0);
 HEAP32[$20>>2] = $16;
 $21 = (($0) + 5|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 4;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = (($16) + 5|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 & 3;
  $28 = ($27<<24>>24)==(0);
  if (!($28)) {
   _luaC_barrier_($ls$idx1$val,$0,$16);
  }
 }
 HEAP32[$new_fs>>2] = $16;
 $29 = (($16) + 36|0);
 HEAP32[$29>>2] = $line;
 $30 = HEAP32[$ls$idx>>2]|0;
 $31 = (($new_fs) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($new_fs) + 8|0);
 HEAP32[$32>>2] = $ls;
 HEAP32[$ls$idx>>2] = $new_fs;
 $33 = (($new_fs) + 16|0);
 HEAP32[$33>>2] = 0;
 $34 = (($new_fs) + 20|0);
 HEAP32[$34>>2] = 0;
 $35 = (($new_fs) + 24|0);
 HEAP32[$35>>2] = -1;
 $36 = (($new_fs) + 28|0);
 HEAP32[$36>>2] = 0;
 $37 = (($new_fs) + 32|0);
 HEAP32[$37>>2] = 0;
 $38 = (($new_fs) + 40|0);
 $39 = (($ls) + 68|0);
 ;HEAP32[$38+0>>2]=0|0;HEAP8[$38+4>>0]=0|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($new_fs) + 36|0);
 HEAP32[$43>>2] = $42;
 $44 = (($new_fs) + 12|0);
 $45 = (($ls) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($16) + 72|0);
 HEAP32[$47>>2] = $46;
 $48 = (($16) + 8|0);
 HEAP8[$48>>0] = 2;
 $49 = (($bl) + 14|0);
 HEAP8[$49>>0] = 0;
 $50 = (($bl) + 12|0);
 HEAP8[$50>>0] = 0;
 $51 = (($40) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($bl) + 4|0);
 HEAP32[$53>>2] = $52;
 $54 = (($40) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($bl) + 8|0);
 HEAP32[$56>>2] = $55;
 $57 = (($bl) + 13|0);
 HEAP8[$57>>0] = 0;
 HEAP32[$bl>>2] = 0;
 HEAP32[$44>>2] = $bl;
 $58 = (($ls) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(40);
 if (!($60)) {
  _error_expected($ls,40);
  // unreachable;
 }
 _luaX_next($ls);
 $61 = ($ismethod|0)==(0);
 if ($61) {
  $$pre = HEAP32[$ls$idx>>2]|0;
  $$pre14 = HEAP32[$$pre>>2]|0;
  $105 = $$pre;$78 = $$pre14;
 } else {
  $62 = (_luaX_newstring($ls,7896,4)|0);
  _new_localvar($ls,$62);
  $ls$idx2$val = HEAP32[$ls$idx>>2]|0;
  $63 = (($ls$idx2$val) + 42|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (($65) + 1)|0;
  $67 = $66&255;
  HEAP8[$63>>0] = $67;
  $68 = (($ls$idx2$val) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $66 & 255;
  $$idx$val$i = HEAP32[$ls$idx2$val>>2]|0;
  $$idx1$i = (($ls$idx2$val) + 8|0);
  $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
  $$idx2$i = (($ls$idx2$val) + 36|0);
  $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
  $$idx$val$idx$i = (($$idx$val$i) + 60|0);
  $$idx$val$idx$val$i = HEAP32[$$idx$val$idx$i>>2]|0;
  $$idx1$val$idx$i = (($$idx1$val$i) + 68|0);
  $$idx1$val$idx$val$i = HEAP32[$$idx1$val$idx$i>>2]|0;
  $$idx1$val$idx$val$idx$val$i = HEAP32[$$idx1$val$idx$val$i>>2]|0;
  $71 = (($$idx2$val$i) + ($70))|0;
  $72 = (($71) + -1)|0;
  $73 = (($$idx1$val$idx$val$idx$val$i) + ($72<<1)|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74 << 16 >> 16;
  $76 = ((($$idx$val$idx$val$i) + (($75*12)|0)|0) + 4|0);
  HEAP32[$76>>2] = $69;
  $105 = $ls$idx2$val;$78 = $$idx$val$i;
 }
 $77 = (($78) + 7|0);
 HEAP8[$77>>0] = 0;
 $79 = HEAP32[$58>>2]|0;
 $80 = ($79|0)==(41);
 do {
  if ($80) {
   $nparams$2$i = 0;
  } else {
   $81 = (($ls) + 24|0);
   $130 = $79;$nparams$0$i = 0;
   while(1) {
    if ((($130|0) == 281)) {
     $nparams$0$i$lcssa17 = $nparams$0$i;
     label = 19;
     break;
    } else if (!((($130|0) == 292))) {
     label = 20;
     break;
    }
    $82 = HEAP32[$81>>2]|0;
    _luaX_next($ls);
    _new_localvar($ls,$82);
    $83 = (($nparams$0$i) + 1)|0;
    $$pr1$i = HEAP8[$77>>0]|0;
    $84 = ($$pr1$i<<24>>24)==(0);
    if (!($84)) {
     $$lcssa = $83;
     label = 23;
     break;
    }
    $85 = HEAP32[$58>>2]|0;
    $86 = ($85|0)==(44);
    if (!($86)) {
     $$lcssa = $83;
     label = 23;
     break;
    }
    _luaX_next($ls);
    $$pr$i = HEAP32[$58>>2]|0;
    $130 = $$pr$i;$nparams$0$i = $83;
   }
   if ((label|0) == 19) {
    _luaX_next($ls);
    HEAP8[$77>>0] = 1;
    $nparams$2$i = $nparams$0$i$lcssa17;
    break;
   }
   else if ((label|0) == 20) {
    _luaX_syntaxerror($ls,7904);
    // unreachable;
   }
   else if ((label|0) == 23) {
    $nparams$2$i = $$lcssa;
    break;
   }
  }
 } while(0);
 $ls$idx$val$i = HEAP32[$ls$idx>>2]|0;
 $87 = (($ls$idx$val$i) + 42|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = (($89) + ($nparams$2$i))|0;
 $91 = $90&255;
 HEAP8[$87>>0] = $91;
 $92 = ($nparams$2$i|0)==(0);
 if (!($92)) {
  $93 = (($ls$idx$val$i) + 16|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $90 & 255;
  $$idx$val$i$i = HEAP32[$ls$idx$val$i>>2]|0;
  $$idx1$i$i = (($ls$idx$val$i) + 8|0);
  $$idx1$val$i$i = HEAP32[$$idx1$i$i>>2]|0;
  $$idx2$i$i = (($ls$idx$val$i) + 36|0);
  $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
  $$idx$val$idx$i$i = (($$idx$val$i$i) + 60|0);
  $$idx$val$idx$val$i$i = HEAP32[$$idx$val$idx$i$i>>2]|0;
  $$idx1$val$idx$i$i = (($$idx1$val$i$i) + 68|0);
  $$idx1$val$idx$val$i$i = HEAP32[$$idx1$val$idx$i$i>>2]|0;
  $$idx1$val$idx$val$idx$val$i$i = HEAP32[$$idx1$val$idx$val$i$i>>2]|0;
  $96 = (($$idx2$val$i$i) + ($95))|0;
  $$01$i$i = $nparams$2$i;
  while(1) {
   $97 = (($96) - ($$01$i$i))|0;
   $98 = (($$idx1$val$idx$val$idx$val$i$i) + ($97<<1)|0);
   $99 = HEAP16[$98>>1]|0;
   $100 = $99 << 16 >> 16;
   $101 = ((($$idx$val$idx$val$i$i) + (($100*12)|0)|0) + 4|0);
   HEAP32[$101>>2] = $94;
   $102 = (($$01$i$i) + -1)|0;
   $103 = ($102|0)==(0);
   if ($103) {
    break;
   } else {
    $$01$i$i = $102;
   }
  }
 }
 $104 = (($105) + 42|0);
 $106 = HEAP8[$104>>0]|0;
 $107 = (($78) + 6|0);
 HEAP8[$107>>0] = $106;
 $108 = $106&255;
 _luaK_reserveregs($105,$108);
 $109 = HEAP32[$58>>2]|0;
 $110 = ($109|0)==(41);
 if (!($110)) {
  _error_expected($ls,41);
  // unreachable;
 }
 _luaX_next($ls);
 L41: while(1) {
  $ls$idx$val$i7 = HEAP32[$58>>2]|0;
  switch ($ls$idx$val$i7|0) {
  case 277: case 289: case 262: case 261: case 260:  {
   $ls$idx$val$i7$lcssa = $ls$idx$val$i7;
   label = 34;
   break L41;
   break;
  }
  default: {
  }
  }
  $111 = ($ls$idx$val$i7|0)==(274);
  _statement($ls);
  if ($111) {
   label = 33;
   break;
  }
 }
 if ((label|0) == 33) {
  $$pre15 = HEAP32[$58>>2]|0;
  $116 = $$pre15;
 }
 else if ((label|0) == 34) {
  $116 = $ls$idx$val$i7$lcssa;
 }
 $112 = (($ls) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$new_fs>>2]|0;
 $115 = (($114) + 40|0);
 HEAP32[$115>>2] = $113;
 $117 = ($116|0)==(262);
 if ($117) {
  _luaX_next($ls);
  $ls$idx3$val = HEAP32[$ls$idx>>2]|0;
  $ls$idx3$val$idx = (($ls$idx3$val) + 4|0);
  $ls$idx3$val$idx$val = HEAP32[$ls$idx3$val$idx>>2]|0;
  $123 = (($ls$idx3$val$idx$val) + 32|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + -1)|0;
  $126 = (_luaK_codeABx($ls$idx3$val$idx$val,44,0,$125)|0);
  $127 = (($e) + 16|0);
  HEAP32[$127>>2] = -1;
  $128 = (($e) + 20|0);
  HEAP32[$128>>2] = -1;
  HEAP32[$e>>2] = 12;
  $129 = (($e) + 8|0);
  HEAP32[$129>>2] = $126;
  _luaK_exp2nextreg($ls$idx3$val$idx$val,$e);
  _close_func($ls);
  STACKTOP = sp;return;
 }
 $118 = ($113|0)==($line|0);
 if ($118) {
  _error_expected($ls,262);
  // unreachable;
 } else {
  $119 = HEAP32[$ls$idx1>>2]|0;
  $120 = (_luaX_token2str($ls,262)|0);
  $121 = (_luaX_token2str($ls,265)|0);
  HEAP32[$vararg_buffer>>2] = $120;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $121;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $line;
  $122 = (_luaO_pushfstring($119,8256,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$122);
  // unreachable;
 }
}
function _semerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 HEAP32[$0>>2] = 0;
 _luaX_syntaxerror($ls,$msg);
 // unreachable;
}
function _closegoto($ls,$g,$label) {
 $ls = $ls|0;
 $g = $g|0;
 $label = $label|0;
 var $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx1$val$idx = 0, $$idx1$val$idx$val = 0, $$idx1$val$idx$val$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5) + ($g<<4)|0) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($label) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($7&255)<($9&255);
 if ($10) {
  $11 = $7&255;
  $$idx$val = HEAP32[$1>>2]|0;
  $$idx1 = (($1) + 8|0);
  $$idx1$val = HEAP32[$$idx1>>2]|0;
  $$idx2 = (($1) + 36|0);
  $$idx2$val = HEAP32[$$idx2>>2]|0;
  $$idx$val$idx = (($$idx$val) + 60|0);
  $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
  $$idx1$val$idx = (($$idx1$val) + 68|0);
  $$idx1$val$idx$val = HEAP32[$$idx1$val$idx>>2]|0;
  $$idx1$val$idx$val$idx$val = HEAP32[$$idx1$val$idx$val>>2]|0;
  $12 = (($$idx2$val) + ($11))|0;
  $13 = (($$idx1$val$idx$val$idx$val) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = (($$idx$val$idx$val) + (($15*12)|0)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($ls) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($5) + ($g<<4)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 16|0);
  $23 = ((($5) + ($g<<4)|0) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($17) + 16|0);
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $25;
  $26 = (_luaO_pushfstring($19,7680,$vararg_buffer)|0);
  _semerror($ls,$26);
  // unreachable;
 }
 $27 = ((($5) + ($g<<4)|0) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($label) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 _luaK_patchlist($1,$28,$30);
 $31 = (($3) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -1)|0;
 $34 = ($33|0)>($g|0);
 if (!($34)) {
  $$lcssa3 = $33;
  HEAP32[$31>>2] = $$lcssa3;
  STACKTOP = sp;return;
 }
 $i$04 = $g;
 while(1) {
  $35 = HEAP32[$4>>2]|0;
  $36 = (($35) + ($i$04<<4)|0);
  $37 = (($i$04) + 1)|0;
  $38 = (($35) + ($37<<4)|0);
  ;HEAP32[$36+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$36+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$36+12>>2]=HEAP32[$38+12>>2]|0;
  $39 = HEAP32[$31>>2]|0;
  $40 = (($39) + -1)|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   $i$04 = $37;
  } else {
   $$lcssa = $40;
   break;
  }
 }
 $$lcssa3 = $$lcssa;
 HEAP32[$31>>2] = $$lcssa3;
 STACKTOP = sp;return;
}
function _gotostat($ls,$pc) {
 $ls = $ls|0;
 $pc = $pc|0;
 var $$lcssa = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04$i = 0, $i$04$i$lcssa = 0, $label$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(266);
 _luaX_next($ls);
 do {
  if ($4) {
   $5 = HEAP32[$2>>2]|0;
   $6 = ($5|0)==(292);
   if ($6) {
    $7 = (($ls) + 24|0);
    $8 = HEAP32[$7>>2]|0;
    _luaX_next($ls);
    $label$0 = $8;
    break;
   } else {
    _error_expected($ls,292);
    // unreachable;
   }
  } else {
   $9 = (($ls) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_luaS_new($10,14624)|0);
   $label$0 = $11;
  }
 } while(0);
 $12 = (($ls) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 12|0);
 $15 = (($13) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = (($13) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)<($19|0);
 if ($20) {
  $$pre$i = HEAP32[$14>>2]|0;
  $26 = $$pre$i;$37 = $13;
 } else {
  $21 = (($ls) + 52|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$14>>2]|0;
  $24 = (_luaM_growaux_($22,$23,$18,16,32767,7736)|0);
  HEAP32[$14>>2] = $24;
  $$pre = HEAP32[$12>>2]|0;
  $26 = $24;$37 = $$pre;
 }
 $25 = (($26) + ($16<<4)|0);
 HEAP32[$25>>2] = $label$0;
 $27 = ((($26) + ($16<<4)|0) + 8|0);
 HEAP32[$27>>2] = $1;
 $28 = (($ls) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 42|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ((($26) + ($16<<4)|0) + 12|0);
 HEAP8[$32>>0] = $31;
 $33 = ((($26) + ($16<<4)|0) + 4|0);
 HEAP32[$33>>2] = $pc;
 HEAP32[$15>>2] = $17;
 $34 = (($29) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($37) + 12|0);
 $38 = HEAP32[$36>>2]|0;
 $39 = (($35) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($37) + 28|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($40|0)<($42|0);
 if (!($43)) {
  return;
 }
 $44 = (($37) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($38) + ($16<<4)|0);
 $47 = HEAP32[$46>>2]|0;
 $i$04$i = $40;
 while(1) {
  $50 = (($45) + ($i$04$i<<4)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==($47|0);
  $48 = (($i$04$i) + 1)|0;
  if ($52) {
   $$lcssa = $50;$i$04$i$lcssa = $i$04$i;
   break;
  }
  $49 = ($48|0)<($42|0);
  if ($49) {
   $i$04$i = $48;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  return;
 }
 $53 = ((($38) + ($16<<4)|0) + 12|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ((($45) + ($i$04$i$lcssa<<4)|0) + 12|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($54&255)>($56&255);
 if ($57) {
  $58 = ((($38) + ($16<<4)|0) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $56&255;
  _luaK_patchclose($29,$59,$60);
 }
 _closegoto($ls,$16,$$lcssa);
 return;
}
function _suffixedexp($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $$pre = 0, $$pre$phi2Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $key = 0, $key$i$i = 0, $key1 = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $key$i$i = sp;
 $key = sp + 24|0;
 $key1 = sp + 48|0;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ls) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 do {
  if ((($5|0) == 292)) {
   $16 = (($ls) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   _luaX_next($ls);
   $18 = HEAP32[$0>>2]|0;
   $19 = (_singlevaraux($18,$17,$v,1)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $24 = (($ls) + 76|0);
    $25 = HEAP32[$24>>2]|0;
    (_singlevaraux($18,$25,$v,1)|0);
    $ls$idx$val$i$i = HEAP32[$0>>2]|0;
    $26 = (_luaK_stringK($ls$idx$val$i$i,$17)|0);
    $27 = (($key$i$i) + 16|0);
    HEAP32[$27>>2] = -1;
    $28 = (($key$i$i) + 20|0);
    HEAP32[$28>>2] = -1;
    HEAP32[$key$i$i>>2] = 4;
    $29 = (($key$i$i) + 8|0);
    HEAP32[$29>>2] = $26;
    _luaK_indexed($18,$v,$key$i$i);
    $$pre$phi2Z2D = $16;
   } else {
    $$pre$phi2Z2D = $16;
   }
  } else if ((($5|0) == 40)) {
   _luaX_next($ls);
   (_subexpr($ls,$v,0)|0);
   $6 = HEAP32[$4>>2]|0;
   $7 = ($6|0)==(41);
   if ($7) {
    _luaX_next($ls);
    $15 = HEAP32[$0>>2]|0;
    _luaK_dischargevars($15,$v);
    $$pre = (($ls) + 24|0);
    $$pre$phi2Z2D = $$pre;
    break;
   }
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==($3|0);
   if ($9) {
    _error_expected($ls,41);
    // unreachable;
   } else {
    $10 = (($ls) + 52|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_luaX_token2str($ls,41)|0);
    $13 = (_luaX_token2str($ls,40)|0);
    HEAP32[$vararg_buffer>>2] = $12;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $13;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $3;
    $14 = (_luaO_pushfstring($11,8256,$vararg_buffer)|0);
    _luaX_syntaxerror($ls,$14);
    // unreachable;
   }
  } else {
   _luaX_syntaxerror($ls,8072);
   // unreachable;
  }
 } while(0);
 $21 = (($key1) + 16|0);
 $22 = (($key1) + 20|0);
 $23 = (($key1) + 8|0);
 L13: while(1) {
  $30 = HEAP32[$4>>2]|0;
  switch ($30|0) {
  case 91:  {
   _luaK_exp2anyregup($1,$v);
   _luaX_next($ls);
   (_subexpr($ls,$key,0)|0);
   $31 = HEAP32[$0>>2]|0;
   _luaK_exp2val($31,$key);
   $32 = HEAP32[$4>>2]|0;
   $33 = ($32|0)==(93);
   if (!($33)) {
    label = 14;
    break L13;
   }
   _luaX_next($ls);
   _luaK_indexed($1,$v,$key);
   break;
  }
  case 123: case 293: case 40:  {
   _luaK_exp2nextreg($1,$v);
   _funcargs($ls,$v,$3);
   break;
  }
  case 46:  {
   _fieldsel($ls,$v);
   break;
  }
  case 58:  {
   _luaX_next($ls);
   $34 = HEAP32[$4>>2]|0;
   $35 = ($34|0)==(292);
   if (!($35)) {
    label = 17;
    break L13;
   }
   $36 = HEAP32[$$pre$phi2Z2D>>2]|0;
   _luaX_next($ls);
   $ls$idx$val$i = HEAP32[$0>>2]|0;
   $37 = (_luaK_stringK($ls$idx$val$i,$36)|0);
   HEAP32[$21>>2] = -1;
   HEAP32[$22>>2] = -1;
   HEAP32[$key1>>2] = 4;
   HEAP32[$23>>2] = $37;
   _luaK_self($1,$v,$key1);
   _funcargs($ls,$v,$3);
   break;
  }
  default: {
   label = 21;
   break L13;
  }
  }
 }
 if ((label|0) == 14) {
  _error_expected($ls,93);
  // unreachable;
 }
 else if ((label|0) == 17) {
  _error_expected($ls,292);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function _assignment($ls,$lh,$nvars) {
 $ls = $ls|0;
 $lh = $lh|0;
 $nvars = $nvars|0;
 var $$$i = 0, $$02$i = 0, $$02$i$us = 0, $$lcssa = 0, $$off = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $conflict$01$i = 0, $conflict$01$i$us = 0, $conflict$1$i$us = 0, $conflict$2$i = 0, $conflict$2$i$lcssa = 0, $conflict$2$i$lcssa9 = 0, $conflict$2$i$us = 0, $conflict$2$i$us$lcssa = 0;
 var $e = 0, $ls$idx1$val = 0, $n$0$i$lcssa = 0, $n$0$i2 = 0, $nv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp;
 $e = sp + 8|0;
 $nv = sp + 32|0;
 $0 = (($lh) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -8)|0;
 $2 = ($$off>>>0)<(3);
 if (!($2)) {
  _luaX_syntaxerror($ls,7768);
  // unreachable;
 }
 $3 = (($ls) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 do {
  if ((($4|0) == 44)) {
   _luaX_next($ls);
   HEAP32[$nv>>2] = $lh;
   $5 = (($nv) + 8|0);
   _suffixedexp($ls,$5);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(10);
   $$pre4 = (($ls) + 48|0);
   if (!($7)) {
    $ls$idx1$val = HEAP32[$$pre4>>2]|0;
    $8 = (($ls$idx1$val) + 44|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = ($lh|0)==(0|0);
    if (!($11)) {
     $12 = (($nv) + 16|0);
     $13 = $9&255;
     $14 = HEAP32[$12>>2]|0;
     $15 = ($6|0)==(8);
     if ($15) {
      $$02$i$us = $lh;$conflict$01$i$us = 0;
      while(1) {
       $16 = (($$02$i$us) + 8|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($17|0)==(10);
       if ($18) {
        $19 = (($$02$i$us) + 16|0);
        $20 = (($19) + 3|0);
        $21 = HEAP8[$20>>0]|0;
        $22 = ($21<<24>>24)==(8);
        if ($22) {
         $23 = (($19) + 2|0);
         $24 = HEAP8[$23>>0]|0;
         $25 = $24&255;
         $26 = ($25|0)==($14|0);
         if ($26) {
          HEAP8[$20>>0] = 8;
          HEAP8[$23>>0] = $9;
          $conflict$1$i$us = 1;
         } else {
          $conflict$1$i$us = $conflict$01$i$us;
         }
        } else {
         $conflict$1$i$us = $conflict$01$i$us;
        }
        $27 = HEAP16[$19>>1]|0;
        $28 = $27 << 16 >> 16;
        $29 = ($28|0)==($14|0);
        if ($29) {
         HEAP16[$19>>1] = $13;
         $conflict$2$i$us = 1;
        } else {
         $conflict$2$i$us = $conflict$1$i$us;
        }
       } else {
        $conflict$2$i$us = $conflict$01$i$us;
       }
       $30 = HEAP32[$$02$i$us>>2]|0;
       $31 = ($30|0)==(0|0);
       if ($31) {
        $conflict$2$i$us$lcssa = $conflict$2$i$us;
        break;
       } else {
        $$02$i$us = $30;$conflict$01$i$us = $conflict$2$i$us;
       }
      }
      $conflict$2$i$lcssa = $conflict$2$i$us$lcssa;
     } else {
      $$02$i = $lh;$conflict$01$i = 0;
      while(1) {
       $32 = (($$02$i) + 8|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(10);
       if ($34) {
        $35 = (($$02$i) + 16|0);
        $36 = (($35) + 3|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = $37&255;
        $39 = ($38|0)==($6|0);
        if ($39) {
         $40 = (($35) + 2|0);
         $41 = HEAP8[$40>>0]|0;
         $42 = $41&255;
         $43 = ($42|0)==($14|0);
         if ($43) {
          HEAP8[$36>>0] = 8;
          HEAP8[$40>>0] = $9;
          $conflict$2$i = 1;
         } else {
          $conflict$2$i = $conflict$01$i;
         }
        } else {
         $conflict$2$i = $conflict$01$i;
        }
       } else {
        $conflict$2$i = $conflict$01$i;
       }
       $44 = HEAP32[$$02$i>>2]|0;
       $45 = ($44|0)==(0|0);
       if ($45) {
        $conflict$2$i$lcssa9 = $conflict$2$i;
        break;
       } else {
        $$02$i = $44;$conflict$01$i = $conflict$2$i;
       }
      }
      $conflict$2$i$lcssa = $conflict$2$i$lcssa9;
     }
     $46 = ($conflict$2$i$lcssa|0)==(0);
     if (!($46)) {
      $47 = $15 ? 0 : 5;
      (_luaK_codeABC($ls$idx1$val,$47,$10,$14,0)|0);
      _luaK_reserveregs($ls$idx1$val,1);
     }
    }
   }
   $48 = HEAP32[$$pre4>>2]|0;
   $49 = (($ls) + 52|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 106|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $54 = (($53) + ($nvars))|0;
   $55 = ($54|0)>(200);
   if (!($55)) {
    $68 = (($nvars) + 1)|0;
    _assignment($ls,$nv,$68);
    $$pre$phiZ2D = $e;
    break;
   }
   $56 = (($48) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 52|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$48>>2]|0;
   $61 = (($60) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   if ($63) {
    $65 = 7968;
    HEAP32[$vararg_buffer1>>2] = 7784;
    $vararg_ptr4 = (($vararg_buffer1) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 200;
    $vararg_ptr5 = (($vararg_buffer1) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $65;
    $66 = (_luaO_pushfstring($59,8008,$vararg_buffer1)|0);
    $67 = HEAP32[$56>>2]|0;
    _luaX_syntaxerror($67,$66);
    // unreachable;
   }
   HEAP32[$vararg_buffer>>2] = $62;
   $64 = (_luaO_pushfstring($59,7984,$vararg_buffer)|0);
   $65 = $64;
   HEAP32[$vararg_buffer1>>2] = 7784;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $65;
   $66 = (_luaO_pushfstring($59,8008,$vararg_buffer1)|0);
   $67 = HEAP32[$56>>2]|0;
   _luaX_syntaxerror($67,$66);
   // unreachable;
  } else if ((($4|0) == 61)) {
   _luaX_next($ls);
   (_subexpr($ls,$e,0)|0);
   $69 = HEAP32[$3>>2]|0;
   $70 = ($69|0)==(44);
   $71 = (($ls) + 48|0);
   if ($70) {
    $n$0$i2 = 1;
    while(1) {
     _luaX_next($ls);
     $72 = HEAP32[$71>>2]|0;
     _luaK_exp2nextreg($72,$e);
     (_subexpr($ls,$e,0)|0);
     $73 = (($n$0$i2) + 1)|0;
     $74 = HEAP32[$3>>2]|0;
     $75 = ($74|0)==(44);
     if ($75) {
      $n$0$i2 = $73;
     } else {
      $$lcssa = $73;
      break;
     }
    }
    $n$0$i$lcssa = $$lcssa;
   } else {
    $n$0$i$lcssa = 1;
   }
   $76 = ($n$0$i$lcssa|0)==($nvars|0);
   $77 = HEAP32[$71>>2]|0;
   if ($76) {
    _luaK_setoneret($77,$e);
    $95 = HEAP32[$71>>2]|0;
    _luaK_storevar($95,$0,$e);
    STACKTOP = sp;return;
   }
   $78 = (($nvars) - ($n$0$i$lcssa))|0;
   $79 = HEAP32[$e>>2]|0;
   if ((($79|0) == 0)) {
    label = 40;
   } else if ((($79|0) == 14) | (($79|0) == 13)) {
    $80 = (($78) + 1)|0;
    $81 = ($80|0)<(0);
    $$$i = $81 ? 0 : $80;
    _luaK_setreturns($77,$e,$$$i);
    $82 = ($$$i|0)>(1);
    if ($82) {
     $83 = (($$$i) + -1)|0;
     _luaK_reserveregs($77,$83);
    }
   } else {
    _luaK_exp2nextreg($77,$e);
    label = 40;
   }
   if ((label|0) == 40) {
    $84 = ($78|0)>(0);
    if ($84) {
     $85 = (($77) + 44|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     _luaK_reserveregs($77,$78);
     _luaK_nil($77,$87,$78);
    }
   }
   $88 = ($n$0$i$lcssa|0)>($nvars|0);
   if ($88) {
    $89 = HEAP32[$71>>2]|0;
    $90 = (($89) + 44|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = (($78) + ($92))|0;
    $94 = $93&255;
    HEAP8[$90>>0] = $94;
    $$pre$phiZ2D = $e;
   } else {
    $$pre$phiZ2D = $e;
   }
  } else {
   _error_expected($ls,61);
   // unreachable;
  }
 } while(0);
 $96 = (($ls) + 48|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + 44|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = (($100) + -1)|0;
 $102 = (($e) + 16|0);
 HEAP32[$102>>2] = -1;
 $103 = (($e) + 20|0);
 HEAP32[$103>>2] = -1;
 HEAP32[$$pre$phiZ2D>>2] = 7;
 $104 = (($e) + 8|0);
 HEAP32[$104>>2] = $101;
 _luaK_storevar($97,$0,$e);
 STACKTOP = sp;return;
}
function _constructor($ls,$t) {
 $ls = $ls|0;
 $t = $t|0;
 var $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $cc = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 40|0;
 $cc = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaK_codeABC($1,11,0,0,0)|0);
 $5 = (($cc) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = (($cc) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = (($cc) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = (($cc) + 24|0);
 HEAP32[$8>>2] = $t;
 $9 = (($t) + 16|0);
 HEAP32[$9>>2] = -1;
 $10 = (($t) + 20|0);
 HEAP32[$10>>2] = -1;
 HEAP32[$t>>2] = 12;
 $11 = (($t) + 8|0);
 HEAP32[$11>>2] = $4;
 $12 = (($cc) + 16|0);
 HEAP32[$12>>2] = -1;
 $13 = (($cc) + 20|0);
 HEAP32[$13>>2] = -1;
 HEAP32[$cc>>2] = 0;
 $14 = (($cc) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 _luaK_exp2nextreg($15,$t);
 $16 = (($ls) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(123);
 if (!($18)) {
  _error_expected($ls,123);
  // unreachable;
 }
 _luaX_next($ls);
 $19 = HEAP32[$16>>2]|0;
 $20 = ($19|0)==(125);
 do {
  if (!($20)) {
   while(1) {
    $27 = HEAP32[$16>>2]|0;
    do {
     if ((($27|0) == 292)) {
      $28 = (_luaX_lookahead($ls)|0);
      $29 = ($28|0)==(61);
      if ($29) {
       _recfield($ls,$cc);
       break;
      } else {
       (_subexpr($ls,$cc,0)|0);
       $30 = HEAP32[$7>>2]|0;
       $31 = (($30) + 1)|0;
       HEAP32[$7>>2] = $31;
       $32 = HEAP32[$5>>2]|0;
       $33 = (($32) + 1)|0;
       HEAP32[$5>>2] = $33;
       break;
      }
     } else if ((($27|0) == 91)) {
      _recfield($ls,$cc);
     } else {
      (_subexpr($ls,$cc,0)|0);
      $34 = HEAP32[$7>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$7>>2] = $35;
      $36 = HEAP32[$5>>2]|0;
      $37 = (($36) + 1)|0;
      HEAP32[$5>>2] = $37;
     }
    } while(0);
    $38 = HEAP32[$16>>2]|0;
    if ((($38|0) == 44)) {
     _luaX_next($ls);
    } else if ((($38|0) == 125)) {
     label = 22;
     break;
    } else if ((($38|0) == 59)) {
     _luaX_next($ls);
    } else {
     break;
    }
    $39 = HEAP32[$16>>2]|0;
    $40 = ($39|0)==(125);
    if ($40) {
     label = 22;
     break;
    }
    $$pre = HEAP32[$cc>>2]|0;
    $phitmp = ($$pre|0)==(0);
    if (!($phitmp)) {
     _luaK_exp2nextreg($1,$cc);
     HEAP32[$cc>>2] = 0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($21|0)==(50);
     if ($22) {
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 8|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$7>>2]|0;
      _luaK_setlist($1,$25,$26,50);
      HEAP32[$5>>2] = 0;
     }
    }
   }
   if ((label|0) == 22) {
    break;
   }
   $41 = HEAP32[$2>>2]|0;
   $42 = ($41|0)==($3|0);
   if ($42) {
    _error_expected($ls,125);
    // unreachable;
   } else {
    $43 = (($ls) + 52|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_luaX_token2str($ls,125)|0);
    $46 = (_luaX_token2str($ls,123)|0);
    HEAP32[$vararg_buffer>>2] = $45;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $46;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $3;
    $47 = (_luaO_pushfstring($44,8256,$vararg_buffer)|0);
    _luaX_syntaxerror($ls,$47);
    // unreachable;
   }
  }
 } while(0);
 _luaX_next($ls);
 $48 = HEAP32[$5>>2]|0;
 $49 = ($48|0)==(0);
 do {
  if (!($49)) {
   $50 = HEAP32[$cc>>2]|0;
   if ((($50|0) == 0)) {
    $61 = $48;
   } else if ((($50|0) == 14) | (($50|0) == 13)) {
    _luaK_setreturns($1,$cc,-1);
    $51 = HEAP32[$8>>2]|0;
    $52 = (($51) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = HEAP32[$7>>2]|0;
    _luaK_setlist($1,$53,$54,-1);
    $55 = HEAP32[$7>>2]|0;
    $56 = (($55) + -1)|0;
    HEAP32[$7>>2] = $56;
    break;
   } else {
    _luaK_exp2nextreg($1,$cc);
    $$pre$i = HEAP32[$5>>2]|0;
    $61 = $$pre$i;
   }
   $57 = HEAP32[$8>>2]|0;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$7>>2]|0;
   _luaK_setlist($1,$59,$60,$61);
  }
 } while(0);
 $62 = HEAP32[$1>>2]|0;
 $63 = (($62) + 48|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($4<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 8388607;
 $68 = HEAP32[$7>>2]|0;
 $69 = (_luaO_int2fb($68)|0);
 $70 = $69 << 23;
 $71 = $70 | $67;
 $72 = HEAP32[$1>>2]|0;
 $73 = (($72) + 48|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($4<<2)|0);
 HEAP32[$75>>2] = $71;
 $76 = $71 & -8372225;
 $77 = HEAP32[$6>>2]|0;
 $78 = (_luaO_int2fb($77)|0);
 $79 = $78 << 14;
 $80 = $79 & 8372224;
 $81 = $80 | $76;
 $82 = HEAP32[$1>>2]|0;
 $83 = (($82) + 48|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($4<<2)|0);
 HEAP32[$85>>2] = $81;
 STACKTOP = sp;return;
}
function _funcargs($ls,$f,$line) {
 $ls = $ls|0;
 $f = $f|0;
 $line = $line|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $nparams$0 = 0;
 var $phitmp = 0, $phitmp2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $args = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 293)) {
  $19 = (($ls) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_luaK_stringK($1,$20)|0);
  $22 = (($args) + 16|0);
  HEAP32[$22>>2] = -1;
  $23 = (($args) + 20|0);
  HEAP32[$23>>2] = -1;
  HEAP32[$args>>2] = 4;
  $24 = (($args) + 8|0);
  HEAP32[$24>>2] = $21;
  _luaX_next($ls);
 } else if ((($3|0) == 40)) {
  _luaX_next($ls);
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(41);
  if ($5) {
   HEAP32[$args>>2] = 0;
  } else {
   (_subexpr($ls,$args,0)|0);
   $6 = HEAP32[$2>>2]|0;
   $7 = ($6|0)==(44);
   if ($7) {
    while(1) {
     _luaX_next($ls);
     $8 = HEAP32[$0>>2]|0;
     _luaK_exp2nextreg($8,$args);
     (_subexpr($ls,$args,0)|0);
     $9 = HEAP32[$2>>2]|0;
     $10 = ($9|0)==(44);
     if (!($10)) {
      break;
     }
    }
   }
   _luaK_setreturns($1,$args,-1);
   $$pre = HEAP32[$2>>2]|0;
   $phitmp2 = ($$pre|0)==(41);
   if (!($phitmp2)) {
    $11 = (($ls) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($line|0);
    if ($13) {
     _error_expected($ls,41);
     // unreachable;
    } else {
     $14 = (($ls) + 52|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (_luaX_token2str($ls,41)|0);
     $17 = (_luaX_token2str($ls,40)|0);
     HEAP32[$vararg_buffer>>2] = $16;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $17;
     $vararg_ptr2 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $line;
     $18 = (_luaO_pushfstring($15,8256,$vararg_buffer)|0);
     _luaX_syntaxerror($ls,$18);
     // unreachable;
    }
   }
  }
  _luaX_next($ls);
 } else if ((($3|0) == 123)) {
  _constructor($ls,$args);
 } else {
  _luaX_syntaxerror($ls,8040);
  // unreachable;
 }
 $25 = (($f) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$args>>2]|0;
 if ((($27|0) == 14) | (($27|0) == 13)) {
  $nparams$0 = 0;
  $31 = (_luaK_codeABC($1,36,$26,$nparams$0,2)|0);
  $32 = (($f) + 16|0);
  HEAP32[$32>>2] = -1;
  $33 = (($f) + 20|0);
  HEAP32[$33>>2] = -1;
  HEAP32[$f>>2] = 13;
  HEAP32[$25>>2] = $31;
  _luaK_fixline($1,$line);
  $34 = (($26) + 1)|0;
  $35 = $34&255;
  $36 = (($1) + 44|0);
  HEAP8[$36>>0] = $35;
  STACKTOP = sp;return;
 } else if (!((($27|0) == 0))) {
  _luaK_exp2nextreg($1,$args);
 }
 $28 = (($1) + 44|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $phitmp = (($30) - ($26))|0;
 $nparams$0 = $phitmp;
 $31 = (_luaK_codeABC($1,36,$26,$nparams$0,2)|0);
 $32 = (($f) + 16|0);
 HEAP32[$32>>2] = -1;
 $33 = (($f) + 20|0);
 HEAP32[$33>>2] = -1;
 HEAP32[$f>>2] = 13;
 HEAP32[$25>>2] = $31;
 _luaK_fixline($1,$line);
 $34 = (($26) + 1)|0;
 $35 = $34&255;
 $36 = (($1) + 44|0);
 HEAP8[$36>>0] = $35;
 STACKTOP = sp;return;
}
function _recfield($ls,$cc) {
 $ls = $ls|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $ls$idx$val$i = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp + 24|0;
 $val = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($ls) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(292);
 do {
  if ($6) {
   $7 = (($ls) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   _luaX_next($ls);
   $ls$idx$val$i = HEAP32[$0>>2]|0;
   $9 = (_luaK_stringK($ls$idx$val$i,$8)|0);
   $10 = (($key) + 16|0);
   HEAP32[$10>>2] = -1;
   $11 = (($key) + 20|0);
   HEAP32[$11>>2] = -1;
   HEAP32[$key>>2] = 4;
   $12 = (($key) + 8|0);
   HEAP32[$12>>2] = $9;
  } else {
   _luaX_next($ls);
   (_subexpr($ls,$key,0)|0);
   $13 = HEAP32[$0>>2]|0;
   _luaK_exp2val($13,$key);
   $14 = HEAP32[$4>>2]|0;
   $15 = ($14|0)==(93);
   if ($15) {
    _luaX_next($ls);
    break;
   } else {
    _error_expected($ls,93);
    // unreachable;
   }
  }
 } while(0);
 $16 = (($cc) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 $19 = HEAP32[$4>>2]|0;
 $20 = ($19|0)==(61);
 if ($20) {
  _luaX_next($ls);
  $21 = (_luaK_exp2RK($1,$key)|0);
  (_subexpr($ls,$val,0)|0);
  $22 = (($cc) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_luaK_exp2RK($1,$val)|0);
  (_luaK_codeABC($1,10,$25,$21,$26)|0);
  HEAP8[$2>>0] = $3;
  STACKTOP = sp;return;
 } else {
  _error_expected($ls,61);
  // unreachable;
 }
}
function _luaE_setdebt($g,$debt) {
 $g = $g|0;
 $debt = $debt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($g) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($debt))|0;
 $5 = (($4) + ($3))|0;
 HEAP32[$2>>2] = $5;
 HEAP32[$0>>2] = $debt;
 return;
}
function _luaE_extendCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,36)|0);
 $1 = (($L) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = $0;
 $4 = (($0) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = (($0) + 12|0);
 HEAP32[$5>>2] = 0;
 return ($0|0);
}
function _luaE_freeCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $next$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $next$01 = $3;
 while(1) {
  $5 = (($next$01) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  (_luaM_realloc_($L,$next$01,36,0)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   break;
  } else {
   $next$01 = $6;
  }
 }
 return;
}
function _luaE_shrinkCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $6 = $3;$9 = $2;$ci$01 = $1;
 while(1) {
  $5 = (($6) + 12|0);
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   break;
  }
  (_luaM_realloc_($L,$6,36,0)|0);
  HEAP32[$9>>2] = $7;
  $10 = (($7) + 8|0);
  HEAP32[$10>>2] = $ci$01;
  $11 = (($7) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   break;
  } else {
   $6 = $12;$9 = $11;$ci$01 = $7;
  }
 }
 return;
}
function _lua_newthread($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaM_realloc_($L,0,8,116)|0);
 $6 = (($5) + 4|0);
 $7 = (($1) + 60|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $10&255;
 $12 = (($5) + 9|0);
 HEAP8[$12>>0] = $11;
 $13 = (($5) + 8|0);
 HEAP8[$13>>0] = 8;
 $14 = (($1) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$6>>2] = $15;
 HEAP32[$14>>2] = $6;
 $16 = (($L) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$17>>2] = $6;
 $18 = (($17) + 8|0);
 HEAP32[$18>>2] = 72;
 $19 = HEAP32[$16>>2]|0;
 $20 = (($19) + 16|0);
 HEAP32[$16>>2] = $20;
 $21 = (($5) + 16|0);
 HEAP32[$21>>2] = $1;
 $22 = (($5) + 32|0);
 HEAP32[$22>>2] = 0;
 $23 = (($5) + 20|0);
 HEAP32[$23>>2] = 0;
 $24 = (($5) + 96|0);
 HEAP32[$24>>2] = 0;
 $25 = (($5) + 44|0);
 HEAP32[$25>>2] = $6;
 $26 = (($5) + 48|0);
 HEAP32[$26>>2] = 0;
 $27 = (($5) + 110|0);
 HEAP16[$27>>1] = 0;
 $28 = (($5) + 88|0);
 HEAP32[$28>>2] = 0;
 $29 = (($5) + 112|0);
 HEAP8[$29>>0] = 0;
 $30 = (($5) + 100|0);
 HEAP32[$30>>2] = 0;
 $31 = (($5) + 113|0);
 HEAP8[$31>>0] = 1;
 $32 = (($5) + 104|0);
 $33 = (($5) + 36|0);
 HEAP32[$33>>2] = 0;
 $34 = (($5) + 108|0);
 HEAP16[$34>>1] = 1;
 $35 = (($5) + 10|0);
 HEAP8[$35>>0] = 0;
 $36 = (($5) + 92|0);
 HEAP32[$36>>2] = 0;
 $37 = (($L) + 108|0);
 $38 = HEAP8[$37>>0]|0;
 HEAP8[$29>>0] = $38;
 $39 = (($L) + 96|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$30>>2] = $40;
 $41 = (($L) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$28>>2] = $42;
 HEAP32[$32>>2] = $40;
 $43 = (($1) + 136|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + -4|0);
 $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8)|(HEAPU8[$45+2>>0]<<16)|(HEAPU8[$45+3>>0]<<24);
 HEAP8[$5>>0]=$46&255;HEAP8[$5+1>>0]=($46>>8)&255;HEAP8[$5+2>>0]=($46>>16)&255;HEAP8[$5+3>>0]=$46>>24;
 $47 = (_luaM_realloc_($L,0,0,640)|0);
 HEAP32[$22>>2] = $47;
 HEAP32[$24>>2] = 40;
 $i$01$i = 0;
 while(1) {
  $48 = ((($47) + ($i$01$i<<4)|0) + 8|0);
  HEAP32[$48>>2] = 0;
  $49 = (($i$01$i) + 1)|0;
  $exitcond$i = ($49|0)==(40);
  if ($exitcond$i) {
   break;
  } else {
   $i$01$i = $49;
  }
 }
 $50 = (($5) + 12|0);
 $51 = (($47) + 560|0);
 $52 = (($5) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = (($5) + 52|0);
 $54 = (($5) + 60|0);
 HEAP32[$54>>2] = 0;
 $55 = (($5) + 64|0);
 HEAP32[$55>>2] = 0;
 $56 = (($5) + 86|0);
 HEAP8[$56>>0] = 0;
 HEAP32[$53>>2] = $47;
 $57 = (($47) + 16|0);
 HEAP32[$50>>2] = $57;
 $58 = (($47) + 8|0);
 HEAP32[$58>>2] = 0;
 $59 = (($47) + 336|0);
 $60 = (($5) + 56|0);
 HEAP32[$60>>2] = $59;
 HEAP32[$23>>2] = $53;
 return ($6|0);
}
function _luaE_freethread($L,$L1) {
 $L = $L|0;
 $L1 = $L1|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next$01$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L1) + -4|0);
 $1 = (($L1) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 _luaF_close($L1,$2);
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_luaM_realloc_($L,$0,116,0)|0);
  return;
 }
 $5 = (($L1) + 48|0);
 $6 = (($L1) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($L1) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$7>>2] = 0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $16 = $3;
 } else {
  $next$01$i$i = $8;
  while(1) {
   $10 = (($next$01$i$i) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   (_luaM_realloc_($L1,$next$01$i$i,36,0)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   } else {
    $next$01$i$i = $11;
   }
  }
  $$pre$i = HEAP32[$1>>2]|0;
  $16 = $$pre$i;
 }
 $13 = (($L1) + 92|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 4;
 (_luaM_realloc_($L1,$16,$15,0)|0);
 (_luaM_realloc_($L,$0,116,0)|0);
 return;
}
function _lua_newstate($f,$ud) {
 $f = $f|0;
 $ud = $ud|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff$i = 0, $h$i = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buff$i = sp + 8|0;
 $h$i = sp;
 $0 = (FUNCTION_TABLE_iiiii[$f & 255]($ud,0,8,912)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) + 4|0);
 $3 = (($0) + 120|0);
 HEAP32[$2>>2] = 0;
 $4 = (($0) + 8|0);
 HEAP8[$4>>0] = 8;
 $5 = (($0) + 180|0);
 HEAP8[$5>>0] = 1;
 $6 = (($0) + 9|0);
 HEAP8[$6>>0] = 1;
 $7 = (($0) + 16|0);
 HEAP32[$7>>2] = $3;
 $8 = (($0) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = (($0) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = (($0) + 96|0);
 HEAP32[$10>>2] = 0;
 $11 = (($0) + 44|0);
 HEAP32[$11>>2] = $2;
 $12 = (($0) + 48|0);
 HEAP32[$12>>2] = 0;
 $13 = (($0) + 110|0);
 HEAP16[$13>>1] = 0;
 $14 = (($0) + 88|0);
 HEAP32[$14>>2] = 0;
 $15 = (($0) + 112|0);
 HEAP8[$15>>0] = 0;
 $16 = (($0) + 100|0);
 HEAP32[$16>>2] = 0;
 $17 = (($0) + 113|0);
 HEAP8[$17>>0] = 1;
 $18 = (($0) + 104|0);
 HEAP32[$18>>2] = 0;
 $19 = (($0) + 36|0);
 HEAP32[$19>>2] = 0;
 $20 = (($0) + 108|0);
 HEAP16[$20>>1] = 1;
 $21 = (($0) + 10|0);
 HEAP8[$21>>0] = 0;
 $22 = (($0) + 92|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$3>>2] = $f;
 $23 = (($0) + 124|0);
 HEAP32[$23>>2] = $ud;
 $24 = (($0) + 256|0);
 HEAP32[$24>>2] = $2;
 $25 = (_time((0|0))|0);
 HEAP32[$h$i>>2] = $25;
 $26 = $2;
 HEAP32[$buff$i>>2] = $26;
 $27 = $h$i;
 $28 = (($buff$i) + 4|0);
 HEAP32[$28>>2] = $27;
 $29 = (($buff$i) + 8|0);
 HEAP32[$29>>2] = (6528);
 $30 = (($buff$i) + 12|0);
 HEAP32[$30>>2] = (223);
 $31 = (_luaS_hash($buff$i,16,$25)|0);
 $32 = (($0) + 176|0);
 HEAP32[$32>>2] = $31;
 $33 = (($0) + 183|0);
 HEAP8[$33>>0] = 0;
 $34 = (($0) + 140|0);
 $35 = (($0) + 168|0);
 HEAP32[$35>>2] = 0;
 $36 = (($0) + 228|0);
 HEAP32[$36>>2] = 0;
 $37 = (($0) + 236|0);
 HEAP32[$37>>2] = 0;
 $38 = (($0) + 252|0);
 HEAP32[$38>>2] = 0;
 $39 = (($0) + 260|0);
 HEAP32[$39>>2] = 0;
 $40 = (($0) + 181|0);
 ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;HEAP32[$34+12>>2]=0|0;
 HEAP8[$40>>0] = 7;
 $41 = (($0) + 182|0);
 HEAP8[$41>>0] = 0;
 $42 = (($0) + 184|0);
 $43 = (($0) + 128|0);
 dest=$42+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$43>>2] = 912;
 $44 = (($0) + 132|0);
 HEAP32[$44>>2] = 0;
 $45 = (($0) + 240|0);
 HEAP32[$45>>2] = 0;
 $46 = (($0) + 244|0);
 HEAP32[$46>>2] = 200;
 $47 = (($0) + 248|0);
 HEAP32[$47>>2] = 200;
 $scevgep = (($0) + 364|0);
 dest=$scevgep+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $48 = (_luaD_rawrunprotected($2,224,0)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 _close_state($2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lua_close($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 _close_state($3);
 return;
}
function _f_luaopen($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i = 0, $temp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp$i = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaM_realloc_($L,0,0,640)|0);
 $3 = (($L) + 28|0);
 HEAP32[$3>>2] = $2;
 $4 = (($L) + 92|0);
 HEAP32[$4>>2] = 40;
 $i$01$i = 0;
 while(1) {
  $5 = ((($2) + ($i$01$i<<4)|0) + 8|0);
  HEAP32[$5>>2] = 0;
  $6 = (($i$01$i) + 1)|0;
  $exitcond$i = ($6|0)==(40);
  if ($exitcond$i) {
   break;
  } else {
   $i$01$i = $6;
  }
 }
 $7 = (($L) + 8|0);
 $8 = (($2) + 560|0);
 $9 = (($L) + 24|0);
 HEAP32[$9>>2] = $8;
 $10 = (($L) + 48|0);
 $11 = (($L) + 56|0);
 HEAP32[$11>>2] = 0;
 $12 = (($L) + 60|0);
 HEAP32[$12>>2] = 0;
 $13 = (($L) + 82|0);
 HEAP8[$13>>0] = 0;
 HEAP32[$10>>2] = $2;
 $14 = (($2) + 16|0);
 HEAP32[$7>>2] = $14;
 $15 = (($2) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = (($2) + 336|0);
 $17 = (($L) + 52|0);
 HEAP32[$17>>2] = $16;
 $18 = (($L) + 16|0);
 HEAP32[$18>>2] = $10;
 $19 = (_luaH_new($L)|0);
 $20 = (($1) + 40|0);
 HEAP32[$20>>2] = $19;
 $21 = (($1) + 48|0);
 HEAP32[$21>>2] = 69;
 _luaH_resize($L,$19,2,0);
 HEAP32[$temp$i>>2] = $L;
 $22 = (($temp$i) + 8|0);
 HEAP32[$22>>2] = 72;
 _luaH_setint($L,$19,1,0,$temp$i);
 $23 = (_luaH_new($L)|0);
 HEAP32[$temp$i>>2] = $23;
 HEAP32[$22>>2] = 69;
 _luaH_setint($L,$19,2,0,$temp$i);
 _luaS_init($L);
 _luaT_init($L);
 _luaX_init($L);
 $24 = (($1) + 63|0);
 HEAP8[$24>>0] = 1;
 $25 = (_lua_version(0)|0);
 $26 = (($1) + 140|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function _close_state($L) {
 $L = $L|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _luaF_close($L,$3);
 _luaC_freeallobjects($L);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = (($1) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + 116|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_luaM_realloc_($L,$11,$13,0)|0);
 HEAP32[$10>>2] = $14;
 HEAP32[$12>>2] = 0;
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $29 = HEAP32[$1>>2]|0;
  $30 = (($1) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($L) + -4|0);
  (FUNCTION_TABLE_iiiii[$29 & 255]($31,$32,912,0)|0);
  return;
 }
 $17 = (($L) + 48|0);
 $18 = (($L) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = (($L) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$19>>2] = 0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $28 = $15;
 } else {
  $next$01$i$i = $20;
  while(1) {
   $22 = (($next$01$i$i) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   (_luaM_realloc_($L,$next$01$i$i,36,0)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    break;
   } else {
    $next$01$i$i = $23;
   }
  }
  $$pre$i = HEAP32[$2>>2]|0;
  $28 = $$pre$i;
 }
 $25 = (($L) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 << 4;
 (_luaM_realloc_($L,$28,$27,0)|0);
 $29 = HEAP32[$1>>2]|0;
 $30 = (($1) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($L) + -4|0);
 (FUNCTION_TABLE_iiiii[$29 & 255]($31,$32,912,0)|0);
 return;
}
function _luaS_eqlngstr($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($a|0)==($b|0);
 if ($2) {
  $11 = 1;
 } else {
  $3 = (($b) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)==($4|0);
  if ($5) {
   $6 = (($a) + 16|0);
   $7 = (($b) + 16|0);
   $8 = (_memcmp($6,$7,$1)|0);
   $9 = ($8|0)==(0);
   $11 = $9;
  } else {
   $11 = 0;
  }
 }
 $10 = $11&1;
 return ($10|0);
}
function _luaS_hash($str,$l,$seed) {
 $str = $str|0;
 $l = $l|0;
 $seed = $seed|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0$lcssa = 0, $h$02 = 0, $l1$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $seed ^ $l;
 $1 = $l >>> 5;
 $2 = (($1) + 1)|0;
 $3 = ($2>>>0)>($l>>>0);
 if ($3) {
  $h$0$lcssa = $0;
  return ($h$0$lcssa|0);
 }
 $h$02 = $0;$l1$01 = $l;
 while(1) {
  $4 = $h$02 << 5;
  $5 = $h$02 >>> 2;
  $6 = (($4) + ($5))|0;
  $7 = (($l1$01) + -1)|0;
  $8 = (($str) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($6) + ($10))|0;
  $12 = $11 ^ $h$02;
  $13 = (($l1$01) - ($2))|0;
  $14 = ($13>>>0)<($2>>>0);
  if ($14) {
   $$lcssa = $12;
   break;
  } else {
   $h$02 = $12;$l1$01 = $13;
  }
 }
 $h$0$lcssa = $$lcssa;
 return ($h$0$lcssa|0);
}
function _luaS_resize($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$c = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$05 = 0, $i$12 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 24|0);
 $3 = (($1) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($newsize|0);
 if ($5) {
  $9 = (($newsize) + 1)|0;
  $10 = ($9>>>0)>(1073741823);
  if ($10) {
   _luaM_toobig($L);
   // unreachable;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = $4 << 2;
  $13 = $newsize << 2;
  $14 = (_luaM_realloc_($L,$11,$12,$13)|0);
  HEAP32[$2>>2] = $14;
  $15 = HEAP32[$3>>2]|0;
  $16 = ($15|0)<($newsize|0);
  if ($16) {
   $18 = $14;$i$05 = $15;
   while(1) {
    $17 = (($18) + ($i$05<<2)|0);
    HEAP32[$17>>2] = 0;
    $19 = (($i$05) + 1)|0;
    $exitcond = ($19|0)==($newsize|0);
    if ($exitcond) {
     break;
    }
    $$pre = HEAP32[$2>>2]|0;
    $18 = $$pre;$i$05 = $19;
   }
   $6 = $15;
  } else {
   $6 = $15;
  }
 } else {
  $6 = $4;
 }
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = (($newsize) + -1)|0;
  $i$12 = 0;
  while(1) {
   $20 = HEAP32[$2>>2]|0;
   $21 = (($20) + ($i$12<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$21>>2] = 0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $p$01 = $22;
    while(1) {
     $24 = (($p$01) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($p$01) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 & $8;
     $29 = HEAP32[$2>>2]|0;
     $30 = (($29) + ($28<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $$c = $31;
     HEAP32[$24>>2] = $$c;
     $32 = HEAP32[$2>>2]|0;
     $33 = (($32) + ($28<<2)|0);
     HEAP32[$33>>2] = $p$01;
     $34 = ($25|0)==(0|0);
     if ($34) {
      break;
     } else {
      $p$01 = $25;
     }
    }
   }
   $35 = (($i$12) + 1)|0;
   $36 = ($35|0)<($6|0);
   if ($36) {
    $i$12 = $35;
   } else {
    break;
   }
  }
 }
 $37 = ($6|0)>($newsize|0);
 if (!($37)) {
  HEAP32[$3>>2] = $newsize;
  return;
 }
 $38 = (($newsize) + 1)|0;
 $39 = ($38>>>0)>(1073741823);
 if ($39) {
  _luaM_toobig($L);
  // unreachable;
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = $6 << 2;
 $42 = $newsize << 2;
 $43 = (_luaM_realloc_($L,$40,$41,$42)|0);
 HEAP32[$2>>2] = $43;
 HEAP32[$3>>2] = $newsize;
 return;
}
function _luaS_clearcache($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 144|0);
 $i$01 = 0;
 while(1) {
  $1 = ((($g) + ($i$01<<2)|0) + 280|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $7 = HEAP32[$0>>2]|0;
   HEAP32[$1>>2] = $7;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==(127);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 return;
}
function _luaS_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _luaS_resize($L,128);
 $2 = (_luaS_newlstr($L,8312,17)|0);
 $3 = (($1) + 144|0);
 HEAP32[$3>>2] = $2;
 _luaC_fix($L,$2);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($1) + ($i$01<<2)|0) + 280|0);
  HEAP32[$5>>2] = $4;
  $6 = (($i$01) + 1)|0;
  $exitcond = ($6|0)==(127);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $6;
  }
 }
 return;
}
function _luaS_newlstr($L,$str,$l) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 var $$0 = 0, $$c$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $h$0$lcssa$i$i = 0, $h$02$i$i = 0, $h$c$i = 0, $h$c$i$i = 0, $l1$01$i$i = 0, $list$0$i = 0, $or$cond$i = 0, $ts$0$i = 0, $ts$02$i = 0, $ts$03$i = 0, $ts$03$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l>>>0)<(41);
 if (!($0)) {
  $70 = (($l) + 1)|0;
  $71 = ($70>>>0)>(4294967279);
  if ($71) {
   _luaM_toobig($L);
   // unreachable;
  }
  $72 = (($L) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 56|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($l) + 17)|0;
  $77 = (_luaC_newobj($L,20,$76)|0);
  $78 = (($77) + 8|0);
  $h$c$i = $75;
  HEAP32[$78>>2] = $h$c$i;
  $79 = (($77) + 6|0);
  HEAP8[$79>>0] = 0;
  $80 = (($77) + 16|0);
  _memcpy(($80|0),($str|0),($l|0))|0;
  $81 = (($80) + ($l)|0);
  HEAP8[$81>>0] = 0;
  $82 = (($77) + 12|0);
  HEAP32[$82>>2] = $l;
  $$0 = $77;
  return ($$0|0);
 }
 $1 = (($L) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 ^ $l;
 $6 = $l >>> 5;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>($l>>>0);
 if ($8) {
  $h$0$lcssa$i$i = $5;
 } else {
  $h$02$i$i = $5;$l1$01$i$i = $l;
  while(1) {
   $9 = $h$02$i$i << 5;
   $10 = $h$02$i$i >>> 2;
   $11 = (($9) + ($10))|0;
   $12 = (($l1$01$i$i) + -1)|0;
   $13 = (($str) + ($12)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = (($11) + ($15))|0;
   $17 = $16 ^ $h$02$i$i;
   $18 = (($l1$01$i$i) - ($7))|0;
   $19 = ($18>>>0)<($7>>>0);
   if ($19) {
    $$lcssa = $17;
    break;
   } else {
    $h$02$i$i = $17;$l1$01$i$i = $18;
   }
  }
  $h$0$lcssa$i$i = $$lcssa;
 }
 $20 = (($2) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = $22 & $h$0$lcssa$i$i;
 $24 = (($2) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23<<2)|0);
 $ts$02$i = HEAP32[$26>>2]|0;
 $27 = ($ts$02$i|0)==(0|0);
 do {
  if (!($27)) {
   $ts$03$i = $ts$02$i;
   while(1) {
    $28 = (($ts$03$i) + 7|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = ($30|0)==($l|0);
    if ($31) {
     $32 = (($ts$03$i) + 16|0);
     $33 = (_memcmp($str,$32,$l)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      $ts$03$i$lcssa = $ts$03$i;
      break;
     }
    }
    $46 = (($ts$03$i) + 12|0);
    $ts$0$i = HEAP32[$46>>2]|0;
    $47 = ($ts$0$i|0)==(0|0);
    if ($47) {
     label = 13;
     break;
    } else {
     $ts$03$i = $ts$0$i;
    }
   }
   if ((label|0) == 13) {
    break;
   }
   $35 = (($ts$03$i$lcssa) + 5|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 ^ 3;
   $39 = (($2) + 60|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 ^ 3;
   $43 = $42 & $38;
   $44 = ($43|0)==(0);
   if (!($44)) {
    $$0 = $ts$03$i$lcssa;
    return ($$0|0);
   }
   $45 = $38&255;
   HEAP8[$35>>0] = $45;
   $$0 = $ts$03$i$lcssa;
   return ($$0|0);
  }
 } while(0);
 $48 = (($2) + 28|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)>=($21|0);
 $51 = ($21|0)<(1073741824);
 $or$cond$i = $50 & $51;
 if ($or$cond$i) {
  $52 = $21 << 1;
  _luaS_resize($L,$52);
  $53 = HEAP32[$20>>2]|0;
  $54 = (($53) + -1)|0;
  $55 = $54 & $h$0$lcssa$i$i;
  $56 = HEAP32[$24>>2]|0;
  $57 = (($56) + ($55<<2)|0);
  $list$0$i = $57;
 } else {
  $list$0$i = $26;
 }
 $58 = (($l) + 17)|0;
 $59 = (_luaC_newobj($L,4,$58)|0);
 $60 = (($59) + 8|0);
 $h$c$i$i = $h$0$lcssa$i$i;
 HEAP32[$60>>2] = $h$c$i$i;
 $61 = (($59) + 6|0);
 HEAP8[$61>>0] = 0;
 $62 = (($59) + 16|0);
 _memcpy(($62|0),($str|0),($l|0))|0;
 $63 = (($62) + ($l)|0);
 HEAP8[$63>>0] = 0;
 $64 = $l&255;
 $65 = (($59) + 7|0);
 HEAP8[$65>>0] = $64;
 $66 = HEAP32[$list$0$i>>2]|0;
 $67 = (($59) + 12|0);
 $$c$i = $66;
 HEAP32[$67>>2] = $$c$i;
 HEAP32[$list$0$i>>2] = $59;
 $68 = HEAP32[$48>>2]|0;
 $69 = (($68) + 1)|0;
 HEAP32[$48>>2] = $69;
 $$0 = $59;
 return ($$0|0);
}
function _luaS_remove($L,$ts) {
 $L = $L|0;
 $ts = $ts|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0;
 var $p$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ts) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = $6 & $3;
 $8 = (($1) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<2)|0);
 $p$0 = $10;
 while(1) {
  $11 = HEAP32[$p$0>>2]|0;
  $12 = ($11|0)==($ts|0);
  $13 = (($11) + 12|0);
  if ($12) {
   $$lcssa = $13;$p$0$lcssa = $p$0;
   break;
  } else {
   $p$0 = $13;
  }
 }
 $14 = HEAP32[$$lcssa>>2]|0;
 HEAP32[$p$0$lcssa>>2] = $14;
 $15 = (($1) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -1)|0;
 HEAP32[$15>>2] = $17;
 return;
}
function _luaS_new($L,$str) {
 $L = $L|0;
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $str;
 $1 = (($0>>>0) % 127)&-1;
 $2 = (($L) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3) + ($1<<2)|0) + 280|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 16|0);
 $7 = (_strcmp($str,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $5;
  return ($$0|0);
 }
 $9 = (_strlen(($str|0))|0);
 $10 = (_luaS_newlstr($L,$str,$9)|0);
 HEAP32[$4>>2] = $10;
 $$0 = $10;
 return ($$0|0);
}
function _luaS_newudata($L,$s) {
 $L = $L|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($s>>>0)>(4294967271);
 if ($0) {
  _luaM_toobig($L);
  // unreachable;
 } else {
  $1 = (($s) + 24)|0;
  $2 = (_luaC_newobj($L,7,$1)|0);
  $3 = (($2) + 12|0);
  HEAP32[$3>>2] = $s;
  $4 = (($2) + 8|0);
  HEAP32[$4>>2] = 0;
  $5 = (($2) + 16|0);
  $6 = 6528;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  $13 = $12;
  HEAP32[$13>>2] = $8;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = $11;
  $16 = HEAP32[((6528 + 8|0))>>2]|0;
  $17 = $16&255;
  $18 = (($2) + 6|0);
  HEAP8[$18>>0] = $17;
  return ($2|0);
 }
 return (0)|0;
}
function _luaopen_string($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,17);
 _luaL_setfuncs($L,8336,0);
 _lua_createtable($L,0,1);
 (_lua_pushstring($L,9952)|0);
 _lua_pushvalue($L,-2);
 (_lua_setmetatable($L,-2)|0);
 _lua_settop($L,-2);
 _lua_pushvalue($L,-2);
 _lua_setfield($L,-2,12368);
 _lua_settop($L,-2);
 return 1;
}
function _str_byte($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i$03 = 0, $l = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_optinteger($L,2,1,0)|0);
 $2 = tempRet0;
 $3 = HEAP32[$l>>2]|0;
 $4 = ($2|0)>(-1);
 $5 = ($1>>>0)>(4294967295);
 $6 = ($2|0)==(-1);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $15 = $1;$16 = $2;
 } else {
  $9 = (0 - ($1))|0;
  $10 = ($3>>>0)<($9>>>0);
  if ($10) {
   $15 = 0;$16 = 0;
  } else {
   $11 = (_i64Add(($1|0),($2|0),1,0)|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($3|0),0)|0);
   $14 = tempRet0;
   $15 = $13;$16 = $14;
  }
 }
 $17 = (_luaL_optinteger($L,3,$15,$16)|0);
 $18 = tempRet0;
 $19 = HEAP32[$l>>2]|0;
 $20 = ($18|0)>(-1);
 $21 = ($17>>>0)>(4294967295);
 $22 = ($18|0)==(-1);
 $23 = $22 & $21;
 $24 = $20 | $23;
 if ($24) {
  $38 = $18;$40 = $17;
 } else {
  $25 = (0 - ($17))|0;
  $26 = ($19>>>0)<($25>>>0);
  if ($26) {
   $38 = 0;$40 = 0;
  } else {
   $27 = (_i64Add(($17|0),($18|0),1,0)|0);
   $28 = tempRet0;
   $29 = (_i64Add(($27|0),($28|0),($19|0),0)|0);
   $30 = tempRet0;
   $38 = $30;$40 = $29;
  }
 }
 $31 = ($16|0)<(0);
 $32 = ($15>>>0)<(1);
 $33 = ($16|0)==(0);
 $34 = $33 & $32;
 $35 = $31 | $34;
 $36 = $35 ? 1 : $15;
 $37 = $35 ? 0 : $16;
 $39 = ($38|0)>(0);
 $41 = ($40>>>0)>($19>>>0);
 $42 = ($38|0)==(0);
 $43 = $42 & $41;
 $44 = $39 | $43;
 $45 = $44 ? $19 : $40;
 $46 = $44 ? 0 : $38;
 $47 = ($46|0)<($37|0);
 $48 = ($45>>>0)<($36>>>0);
 $49 = ($46|0)==($37|0);
 $50 = $49 & $48;
 $51 = $47 | $50;
 if ($51) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = (_i64Subtract(($45|0),($46|0),($36|0),($37|0))|0);
 $53 = tempRet0;
 $54 = ($53|0)>(0);
 $55 = ($52>>>0)>(2147483646);
 $56 = ($53|0)==(0);
 $57 = $56 & $55;
 $58 = $54 | $57;
 if ($58) {
  $59 = (_luaL_error($L,11264,$vararg_buffer)|0);
  $$0 = $59;
  STACKTOP = sp;return ($$0|0);
 }
 $60 = (($52) + 1)|0;
 _luaL_checkstack($L,$60,11264);
 $61 = ($52|0)>(-1);
 if (!($61)) {
  $$0 = $60;
  STACKTOP = sp;return ($$0|0);
 }
 $62 = (_i64Add(($36|0),($37|0),-1,0)|0);
 $63 = tempRet0;
 $i$03 = 0;
 while(1) {
  $64 = (_i64Add(($62|0),($63|0),($i$03|0),0)|0);
  $65 = tempRet0;
  $66 = (($0) + ($64)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  _lua_pushinteger($L,$68,0);
  $69 = (($i$03) + 1)|0;
  $70 = ($69|0)<($60|0);
  if ($70) {
   $i$03 = $69;
  } else {
   break;
  }
 }
 $$0 = $60;
 STACKTOP = sp;return ($$0|0);
}
function _str_char($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp;
 $0 = (_lua_gettop($L)|0);
 $1 = (_luaL_buffinitsize($L,$b,$0)|0);
 $2 = ($0|0)<(1);
 if ($2) {
  _luaL_pushresultsize($b,$0);
  STACKTOP = sp;return 1;
 }
 $i$01 = 1;
 while(1) {
  $3 = (_luaL_checkinteger($L,$i$01)|0);
  $4 = tempRet0;
  $5 = $3&255;
  $6 = $3 & 255;
  $7 = ($6|0)==($3|0);
  $8 = (0)==($4|0);
  $9 = $7 & $8;
  if (!($9)) {
   (_luaL_argerror($L,$i$01,11216)|0);
  }
  $10 = (($i$01) + -1)|0;
  $11 = (($1) + ($10)|0);
  HEAP8[$11>>0] = $5;
  $12 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;
  }
 }
 _luaL_pushresultsize($b,$0);
 STACKTOP = sp;return 1;
}
function _str_dump($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $b = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $b = sp + 8|0;
 $0 = (_lua_toboolean($L,2)|0);
 _luaL_checktype($L,1,6);
 _lua_settop($L,1);
 _luaL_buffinit($L,$b);
 $1 = (_lua_dump($L,225,$b,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _luaL_pushresult($b);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_luaL_error($L,9680,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _str_find($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_find_aux($L,1)|0);
 return ($0|0);
}
function _str_format($L) {
 $L = $L|0;
 var $$$i = 0, $$0 = 0, $$lcssa = 0, $$lcssa19 = 0, $$p$0$i = 0, $$p$2$i = 0, $$ph = 0, $$pre = 0, $$pre$i = 0, $$pre$i2 = 0, $$pre14 = 0, $$pre14$i = 0, $$pre15 = 0, $$pre16 = 0, $$pre3$i = 0, $$pre4$i = 0, $$pre6$i = 0, $$pre7$i = 0, $$pre8$i = 0, $$sum$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $43$phi = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $arg$0$ph10 = 0, $b = 0, $buff$i = 0, $form = 0, $isdigit$i = 0, $isdigit$i5 = 0, $isdigit2$i = 0, $isdigit4$i = 0, $isdigit6$i = 0, $isdigit8$i = 0, $isdigittmp$i = 0, $isdigittmp$i4 = 0, $isdigittmp1$i = 0, $isdigittmp3$i = 0, $isdigittmp5$i = 0, $isdigittmp7$i = 0;
 var $l = 0, $l$i = 0, $memchr$i = 0, $nb$0 = 0, $or$cond = 0, $p$0$lcssa$i = 0, $p$0$lcssa$i$ph = 0, $p$09$i = 0, $p$2$i = 0, $p$4$i = 0, $s$01$i = 0, $sfl = 0, $strfrmt$0$be = 0, $strfrmt$0$ph9 = 0, $strfrmt$08 = 0, $strfrmt$08$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 8|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer14 = sp + 16|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer3 = sp + 48|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp;
 $l$i = sp + 8296|0;
 $buff$i = sp + 8336|0;
 $sfl = sp + 80|0;
 $b = sp + 88|0;
 $form = sp + 8304|0;
 $l = sp + 76|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (_luaL_checklstring($L,1,$sfl)|0);
 $2 = HEAP32[$sfl>>2]|0;
 $3 = (($1) + ($2)|0);
 _luaL_buffinit($L,$b);
 $4 = ($2|0)>(0);
 do {
  if ($4) {
   $5 = (($b) + 8|0);
   $6 = (($b) + 4|0);
   $7 = (($form) + 1|0);
   $arg$0$ph10 = 1;$strfrmt$0$ph9 = $1;
   L3: while(1) {
    $strfrmt$08 = $strfrmt$0$ph9;
    while(1) {
     $8 = HEAP8[$strfrmt$08>>0]|0;
     $9 = ($8<<24>>24)==(37);
     if ($9) {
      $19 = (($strfrmt$08) + 1|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)==(37);
      if (!($21)) {
       $$lcssa = $19;$strfrmt$08$lcssa = $strfrmt$08;
       break;
      }
      $22 = HEAP32[$5>>2]|0;
      $23 = HEAP32[$6>>2]|0;
      $24 = ($22>>>0)<($23>>>0);
      if ($24) {
       $27 = $22;$30 = 37;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre = HEAP8[$19>>0]|0;
       $$pre14 = HEAP32[$5>>2]|0;
       $27 = $$pre14;$30 = $$pre;
      }
      $25 = (($strfrmt$08) + 2|0);
      $26 = (($27) + 1)|0;
      HEAP32[$5>>2] = $26;
      $28 = HEAP32[$b>>2]|0;
      $29 = (($28) + ($27)|0);
      HEAP8[$29>>0] = $30;
      $strfrmt$0$be = $25;
     } else {
      $10 = HEAP32[$5>>2]|0;
      $11 = HEAP32[$6>>2]|0;
      $12 = ($10>>>0)<($11>>>0);
      if ($12) {
       $15 = $10;$18 = $8;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre15 = HEAP8[$strfrmt$08>>0]|0;
       $$pre16 = HEAP32[$5>>2]|0;
       $15 = $$pre16;$18 = $$pre15;
      }
      $13 = (($strfrmt$08) + 1|0);
      $14 = (($15) + 1)|0;
      HEAP32[$5>>2] = $14;
      $16 = HEAP32[$b>>2]|0;
      $17 = (($16) + ($15)|0);
      HEAP8[$17>>0] = $18;
      $strfrmt$0$be = $13;
     }
     $31 = ($strfrmt$0$be>>>0)<($3>>>0);
     if ($31) {
      $strfrmt$08 = $strfrmt$0$be;
     } else {
      label = 61;
      break L3;
     }
    }
    $32 = (_luaL_prepbuffsize($b,428)|0);
    $33 = (($arg$0$ph10) + 1)|0;
    $34 = ($arg$0$ph10|0)<($0|0);
    if (!($34)) {
     (_luaL_argerror($L,$33,10216)|0);
    }
    $35 = HEAP8[$$lcssa>>0]|0;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $162 = 0;$p$0$lcssa$i = $$lcssa;
    } else {
     $41 = $35;$43 = $strfrmt$08$lcssa;$p$09$i = $$lcssa;
     while(1) {
      $40 = $41 << 24 >> 24;
      $memchr$i = (_memchr(9592,$40,6)|0);
      $42 = ($memchr$i|0)==(0|0);
      $38 = (($43) + 2|0);
      if ($42) {
       $$ph = $41;$p$0$lcssa$i$ph = $p$09$i;
       break;
      }
      $37 = HEAP8[$38>>0]|0;
      $39 = ($37<<24>>24)==(0);
      if ($39) {
       $$ph = 0;$p$0$lcssa$i$ph = $38;
       break;
      } else {
       $43$phi = $p$09$i;$41 = $37;$p$09$i = $38;$43 = $43$phi;
      }
     }
     $162 = $$ph;$p$0$lcssa$i = $p$0$lcssa$i$ph;
    }
    $44 = $p$0$lcssa$i;
    $45 = $$lcssa;
    $46 = (($44) - ($45))|0;
    $47 = ($46>>>0)>(5);
    if ($47) {
     (_luaL_error($L,9600,$vararg_buffer)|0);
     $$pre$i = HEAP8[$p$0$lcssa$i>>0]|0;
     $49 = $$pre$i;
    } else {
     $49 = $162;
    }
    $48 = $49&255;
    $isdigittmp$i = (($48) + -48)|0;
    $isdigit$i = ($isdigittmp$i>>>0)<(10);
    $50 = (($p$0$lcssa$i) + 1|0);
    $$p$0$i = $isdigit$i ? $50 : $p$0$lcssa$i;
    $51 = HEAP8[$$p$0$i>>0]|0;
    $52 = $51&255;
    $isdigittmp1$i = (($52) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    $53 = (($$p$0$i) + 1|0);
    $p$2$i = $isdigit2$i ? $53 : $$p$0$i;
    $54 = HEAP8[$p$2$i>>0]|0;
    $55 = ($54<<24>>24)==(46);
    if ($55) {
     $56 = (($p$2$i) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $isdigittmp5$i = (($58) + -48)|0;
     $isdigit6$i = ($isdigittmp5$i>>>0)<(10);
     $59 = (($p$2$i) + 2|0);
     $$$i = $isdigit6$i ? $59 : $56;
     $60 = HEAP8[$$$i>>0]|0;
     $61 = $60&255;
     $isdigittmp7$i = (($61) + -48)|0;
     $isdigit8$i = ($isdigittmp7$i>>>0)<(10);
     if ($isdigit8$i) {
      $$p$2$i = $isdigit6$i ? $56 : $p$2$i;
      $62 = (($$p$2$i) + 2|0);
      $$pre14$i = HEAP8[$62>>0]|0;
      $64 = $$pre14$i;$p$4$i = $62;
     } else {
      $64 = $60;$p$4$i = $$$i;
     }
    } else {
     $64 = $54;$p$4$i = $p$2$i;
    }
    $63 = $64&255;
    $isdigittmp3$i = (($63) + -48)|0;
    $isdigit4$i = ($isdigittmp3$i>>>0)<(10);
    if ($isdigit4$i) {
     (_luaL_error($L,9632,$vararg_buffer1)|0);
    }
    HEAP8[$form>>0] = 37;
    $65 = $p$4$i;
    $66 = (($65) - ($45))|0;
    $67 = (($66) + 1)|0;
    _memcpy(($7|0),($$lcssa|0),($67|0))|0;
    $$sum$i = (($66) + 2)|0;
    $68 = (($form) + ($$sum$i)|0);
    HEAP8[$68>>0] = 0;
    $69 = (($p$4$i) + 1|0);
    $70 = HEAP8[$p$4$i>>0]|0;
    $71 = $70 << 24 >> 24;
    L39: do {
     switch ($71|0) {
     case 115:  {
      $152 = (_luaL_tolstring($L,$33,$l)|0);
      $153 = (_strchr($form,46)|0);
      $154 = ($153|0)==(0|0);
      $155 = HEAP32[$l>>2]|0;
      $156 = ($155>>>0)>(99);
      $or$cond = $154 & $156;
      if ($or$cond) {
       _luaL_addvalue($b);
       $nb$0 = 0;
       break L39;
      } else {
       HEAP32[$vararg_buffer20>>2] = $152;
       $157 = (_sprintf($32,$form,$vararg_buffer20)|0);
       _lua_settop($L,-2);
       $nb$0 = $157;
       break L39;
      }
      break;
     }
     case 113:  {
      $98 = (_luaL_checklstring($L,$33,$l$i)|0);
      $99 = HEAP32[$5>>2]|0;
      $100 = HEAP32[$6>>2]|0;
      $101 = ($99>>>0)<($100>>>0);
      if ($101) {
       $103 = $99;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre$i2 = HEAP32[$5>>2]|0;
       $103 = $$pre$i2;
      }
      $102 = (($103) + 1)|0;
      HEAP32[$5>>2] = $102;
      $104 = HEAP32[$b>>2]|0;
      $105 = (($104) + ($103)|0);
      HEAP8[$105>>0] = 34;
      $106 = HEAP32[$l$i>>2]|0;
      $107 = (($106) + -1)|0;
      HEAP32[$l$i>>2] = $107;
      $108 = ($106|0)==(0);
      if (!($108)) {
       $s$01$i = $98;
       while(1) {
        $109 = HEAP8[$s$01$i>>0]|0;
        do {
         if ((($109<<24>>24) == 10) | (($109<<24>>24) == 92) | (($109<<24>>24) == 34)) {
          $110 = HEAP32[$5>>2]|0;
          $111 = HEAP32[$6>>2]|0;
          $112 = ($110>>>0)<($111>>>0);
          if ($112) {
           $114 = $110;
          } else {
           (_luaL_prepbuffsize($b,1)|0);
           $$pre7$i = HEAP32[$5>>2]|0;
           $114 = $$pre7$i;
          }
          $113 = (($114) + 1)|0;
          HEAP32[$5>>2] = $113;
          $115 = HEAP32[$b>>2]|0;
          $116 = (($115) + ($114)|0);
          HEAP8[$116>>0] = 92;
          $117 = HEAP32[$5>>2]|0;
          $118 = HEAP32[$6>>2]|0;
          $119 = ($117>>>0)<($118>>>0);
          if ($119) {
           $122 = $117;
          } else {
           (_luaL_prepbuffsize($b,1)|0);
           $$pre8$i = HEAP32[$5>>2]|0;
           $122 = $$pre8$i;
          }
          $120 = HEAP8[$s$01$i>>0]|0;
          $121 = (($122) + 1)|0;
          HEAP32[$5>>2] = $121;
          $123 = HEAP32[$b>>2]|0;
          $124 = (($123) + ($122)|0);
          HEAP8[$124>>0] = $120;
         } else if ((($109<<24>>24) == 0)) {
          $132 = 0;
          label = 44;
         } else {
          $125 = $109&255;
          $126 = (_iscntrl($125)|0);
          $127 = ($126|0)==(0);
          if (!($127)) {
           $$pre6$i = HEAP8[$s$01$i>>0]|0;
           $132 = $$pre6$i;
           label = 44;
           break;
          }
          $133 = HEAP32[$5>>2]|0;
          $134 = HEAP32[$6>>2]|0;
          $135 = ($133>>>0)<($134>>>0);
          if ($135) {
           $138 = $133;
          } else {
           (_luaL_prepbuffsize($b,1)|0);
           $$pre4$i = HEAP32[$5>>2]|0;
           $138 = $$pre4$i;
          }
          $136 = HEAP8[$s$01$i>>0]|0;
          $137 = (($138) + 1)|0;
          HEAP32[$5>>2] = $137;
          $139 = HEAP32[$b>>2]|0;
          $140 = (($139) + ($138)|0);
          HEAP8[$140>>0] = $136;
         }
        } while(0);
        if ((label|0) == 44) {
         label = 0;
         $128 = (($s$01$i) + 1|0);
         $129 = HEAP8[$128>>0]|0;
         $130 = $129&255;
         $isdigittmp$i4 = (($130) + -48)|0;
         $isdigit$i5 = ($isdigittmp$i4>>>0)<(10);
         $131 = $132&255;
         if ($isdigit$i5) {
          HEAP32[$vararg_buffer17>>2] = $131;
          (_sprintf($buff$i,9584,$vararg_buffer17)|0);
         } else {
          HEAP32[$vararg_buffer14>>2] = $131;
          (_sprintf($buff$i,9576,$vararg_buffer14)|0);
         }
         _luaL_addstring($b,$buff$i);
        }
        $141 = (($s$01$i) + 1|0);
        $142 = HEAP32[$l$i>>2]|0;
        $143 = (($142) + -1)|0;
        HEAP32[$l$i>>2] = $143;
        $144 = ($142|0)==(0);
        if ($144) {
         break;
        } else {
         $s$01$i = $141;
        }
       }
      }
      $145 = HEAP32[$5>>2]|0;
      $146 = HEAP32[$6>>2]|0;
      $147 = ($145>>>0)<($146>>>0);
      if ($147) {
       $149 = $145;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre3$i = HEAP32[$5>>2]|0;
       $149 = $$pre3$i;
      }
      $148 = (($149) + 1)|0;
      HEAP32[$5>>2] = $148;
      $150 = HEAP32[$b>>2]|0;
      $151 = (($150) + ($149)|0);
      HEAP8[$151>>0] = 34;
      $nb$0 = 0;
      break;
     }
     case 71: case 103: case 102: case 69: case 101:  {
      $94 = (_strlen(($form|0))|0);
      $95 = (($form) + ($94)|0);
      HEAP8[$95>>0] = 0;
      $96 = (+_luaL_checknumber($L,$33));
      HEAPF64[tempDoublePtr>>3]=$96;HEAP32[$vararg_buffer11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer11+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $97 = (_sprintf($32,$form,$vararg_buffer11)|0);
      $nb$0 = $97;
      break;
     }
     case 99:  {
      $72 = (_luaL_checkinteger($L,$33)|0);
      $73 = tempRet0;
      HEAP32[$vararg_buffer3>>2] = $72;
      $74 = (_sprintf($32,$form,$vararg_buffer3)|0);
      $nb$0 = $74;
      break;
     }
     case 88: case 120: case 117: case 111: case 105: case 100:  {
      $75 = (_luaL_checkinteger($L,$33)|0);
      $76 = tempRet0;
      $77 = (_strlen(($form|0))|0);
      $78 = (($77) + -1)|0;
      $79 = (($form) + ($78)|0);
      $80 = HEAP8[$79>>0]|0;
      ;HEAP8[$79+0>>0]=HEAP8[9528+0>>0]|0;HEAP8[$79+1>>0]=HEAP8[9528+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[9528+2>>0]|0;
      $81 = (($77) + 2)|0;
      $82 = (($77) + 1)|0;
      $83 = (($form) + ($82)|0);
      HEAP8[$83>>0] = $80;
      $84 = (($form) + ($81)|0);
      HEAP8[$84>>0] = 0;
      $85 = $vararg_buffer5;
      $86 = $85;
      HEAP32[$86>>2] = $75;
      $87 = (($85) + 4)|0;
      $88 = $87;
      HEAP32[$88>>2] = $76;
      $89 = (_sprintf($32,$form,$vararg_buffer5)|0);
      $nb$0 = $89;
      break;
     }
     case 65: case 97:  {
      $90 = (_strlen(($form|0))|0);
      $91 = (($form) + ($90)|0);
      HEAP8[$91>>0] = 0;
      $92 = (+_luaL_checknumber($L,$33));
      HEAPF64[tempDoublePtr>>3]=$92;HEAP32[$vararg_buffer8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer8+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $93 = (_sprintf($32,$form,$vararg_buffer8)|0);
      $nb$0 = $93;
      break;
     }
     default: {
      $$lcssa19 = $71;
      label = 59;
      break L3;
     }
     }
    } while(0);
    $159 = HEAP32[$5>>2]|0;
    $160 = (($159) + ($nb$0))|0;
    HEAP32[$5>>2] = $160;
    $161 = ($69>>>0)<($3>>>0);
    if ($161) {
     $arg$0$ph10 = $33;$strfrmt$0$ph9 = $69;
    } else {
     label = 62;
     break;
    }
   }
   if ((label|0) == 59) {
    HEAP32[$vararg_buffer23>>2] = $$lcssa19;
    $158 = (_luaL_error($L,9536,$vararg_buffer23)|0);
    $$0 = $158;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 61) {
    break;
   }
   else if ((label|0) == 62) {
    break;
   }
  }
 } while(0);
 _luaL_pushresult($b);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _gmatch($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_checklstring($L,1,0)|0);
 (_luaL_checklstring($L,2,0)|0);
 _lua_settop($L,2);
 _lua_pushinteger($L,0,0);
 _lua_pushcclosure($L,226,3);
 return 1;
}
function _str_gsub($L) {
 $L = $L|0;
 var $$$i$i = 0, $$off = 0, $$pre = 0, $$pre$i$i = 0, $$pre2$i$i = 0, $$pre3$i$i = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $exitcond$i$i = 0, $i$01$i$i = 0;
 var $i$02$i$i = 0, $i$1$i$i = 0, $isdigit$i$i = 0, $isdigittmp$i$i = 0, $l$i$i = 0, $lp = 0, $ms = 0, $or$cond$i$i = 0, $p$0 = 0, $src$0 = 0, $src$1 = 0, $src$2 = 0, $srcl = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $l$i$i = sp + 8520|0;
 $srcl = sp + 20|0;
 $lp = sp + 24|0;
 $ms = sp + 32|0;
 $b = sp + 312|0;
 $0 = (_luaL_checklstring($L,1,$srcl)|0);
 $1 = (_luaL_checklstring($L,2,$lp)|0);
 $2 = (_lua_type($L,3)|0);
 $3 = HEAP32[$srcl>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (_luaL_optinteger($L,4,$4,0)|0);
 $6 = tempRet0;
 $7 = HEAP8[$1>>0]|0;
 $8 = ($7<<24>>24)==(94);
 $$off = (($2) + -3)|0;
 $switch = ($$off>>>0)<(4);
 if (!($switch)) {
  (_luaL_argerror($L,3,9408)|0);
 }
 _luaL_buffinit($L,$b);
 if ($8) {
  $9 = (($1) + 1|0);
  $10 = HEAP32[$lp>>2]|0;
  $11 = (($10) + -1)|0;
  HEAP32[$lp>>2] = $11;
  $18 = $11;$p$0 = $9;
 } else {
  $$pre = HEAP32[$lp>>2]|0;
  $18 = $$pre;$p$0 = $1;
 }
 $12 = (($ms) + 16|0);
 HEAP32[$12>>2] = $L;
 HEAP32[$ms>>2] = 200;
 $13 = (($ms) + 4|0);
 HEAP32[$13>>2] = $0;
 $14 = HEAP32[$srcl>>2]|0;
 $15 = (($0) + ($14)|0);
 $16 = (($ms) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = (($p$0) + ($18)|0);
 $19 = (($ms) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = (($ms) + 20|0);
 $21 = (($b) + 8|0);
 $22 = (($b) + 4|0);
 $23 = (($ms) + 28|0);
 $24 = (($ms) + 24|0);
 $25 = 0;$27 = 0;$src$0 = $0;
 while(1) {
  $26 = ($25|0)<($6|0);
  $28 = ($27>>>0)<($5>>>0);
  $29 = ($25|0)==($6|0);
  $30 = $29 & $28;
  $31 = $26 | $30;
  if (!($31)) {
   $124 = $27;$125 = $25;$src$2 = $src$0;
   label = 51;
   break;
  }
  HEAP32[$20>>2] = 0;
  $32 = (_match($ms,$src$0,$p$0)|0);
  $33 = ($32|0)==(0|0);
  if ($33) {
   $126 = $27;$127 = $25;
   label = 46;
  } else {
   $34 = (_i64Add(($27|0),($25|0),1,0)|0);
   $35 = tempRet0;
   $36 = HEAP32[$12>>2]|0;
   if ((($2|0) == 6)) {
    _lua_pushvalue($36,3);
    $37 = HEAP32[$20>>2]|0;
    $38 = ($37|0)==(0);
    $39 = ($src$0|0)!=(0|0);
    $or$cond$i$i = $38 & $39;
    $$$i$i = $or$cond$i$i ? 1 : $37;
    $40 = HEAP32[$12>>2]|0;
    _luaL_checkstack($40,$$$i$i,9104);
    $41 = ($$$i$i|0)>(0);
    if ($41) {
     $i$02$i$i = 0;
     while(1) {
      _push_onecapture($ms,$i$02$i$i,$src$0,$32);
      $42 = (($i$02$i$i) + 1)|0;
      $exitcond$i$i = ($42|0)==($$$i$i|0);
      if ($exitcond$i$i) {
       break;
      } else {
       $i$02$i$i = $42;
      }
     }
    }
    _lua_callk($36,$$$i$i,1,0,0);
    label = 39;
   } else if ((($2|0) == 5)) {
    $43 = HEAP32[$20>>2]|0;
    $44 = ($43|0)>(0);
    do {
     if ($44) {
      $48 = HEAP32[$23>>2]|0;
      $49 = ($48|0)==(-1);
      if ($49) {
       (_luaL_error($36,9160,$vararg_buffer)|0);
       $50 = HEAP32[$12>>2]|0;
       $51 = HEAP32[$24>>2]|0;
       $61 = $50;$62 = $51;
      } else {
       $52 = ($48|0)==(-2);
       $53 = HEAP32[$24>>2]|0;
       if ($52) {
        $54 = HEAP32[$13>>2]|0;
        $55 = $53;
        $56 = $54;
        $57 = (($55) + 1)|0;
        $58 = (($57) - ($56))|0;
        $59 = ($58|0)<(0);
        $60 = $59 << 31 >> 31;
        _lua_pushinteger($36,$58,$60);
        break;
       } else {
        $61 = $36;$62 = $53;
       }
      }
      (_lua_pushlstring($61,$62,$48)|0);
     } else {
      $45 = $32;
      $46 = $src$0;
      $47 = (($45) - ($46))|0;
      (_lua_pushlstring($36,$src$0,$47)|0);
     }
    } while(0);
    (_lua_gettable($36,3)|0);
    label = 39;
   } else {
    $63 = (_lua_tolstring($36,3,$l$i$i)|0);
    $64 = HEAP32[$l$i$i>>2]|0;
    $65 = ($64|0)==(0);
    if (!($65)) {
     $66 = $32;
     $67 = $src$0;
     $68 = (($66) - ($67))|0;
     $i$01$i$i = 0;
     while(1) {
      $69 = (($63) + ($i$01$i$i)|0);
      $70 = HEAP8[$69>>0]|0;
      $71 = ($70<<24>>24)==(37);
      do {
       if ($71) {
        $80 = (($i$01$i$i) + 1)|0;
        $81 = (($63) + ($80)|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp$i$i = (($83) + -48)|0;
        $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
        $84 = $82 << 24 >> 24;
        if ($isdigit$i$i) {
         $94 = ($82<<24>>24)==(48);
         if ($94) {
          _luaL_addlstring($b,$src$0,$68);
          $i$1$i$i = $80;
          break;
         } else {
          $95 = (($84) + -49)|0;
          _push_onecapture($ms,$95,$src$0,$32);
          (_luaL_tolstring($36,-1,0)|0);
          _lua_rotate($36,-2,-1);
          _lua_settop($36,-2);
          _luaL_addvalue($b);
          $i$1$i$i = $80;
          break;
         }
        }
        $85 = ($82<<24>>24)==(37);
        if (!($85)) {
         HEAP32[$vararg_buffer1>>2] = 37;
         (_luaL_error($36,9480,$vararg_buffer1)|0);
        }
        $86 = HEAP32[$21>>2]|0;
        $87 = HEAP32[$22>>2]|0;
        $88 = ($86>>>0)<($87>>>0);
        if ($88) {
         $91 = $86;
        } else {
         (_luaL_prepbuffsize($b,1)|0);
         $$pre$i$i = HEAP32[$21>>2]|0;
         $91 = $$pre$i$i;
        }
        $89 = HEAP8[$81>>0]|0;
        $90 = (($91) + 1)|0;
        HEAP32[$21>>2] = $90;
        $92 = HEAP32[$b>>2]|0;
        $93 = (($92) + ($91)|0);
        HEAP8[$93>>0] = $89;
        $i$1$i$i = $80;
       } else {
        $72 = HEAP32[$21>>2]|0;
        $73 = HEAP32[$22>>2]|0;
        $74 = ($72>>>0)<($73>>>0);
        if ($74) {
         $76 = $72;$79 = $70;
        } else {
         (_luaL_prepbuffsize($b,1)|0);
         $$pre2$i$i = HEAP8[$69>>0]|0;
         $$pre3$i$i = HEAP32[$21>>2]|0;
         $76 = $$pre3$i$i;$79 = $$pre2$i$i;
        }
        $75 = (($76) + 1)|0;
        HEAP32[$21>>2] = $75;
        $77 = HEAP32[$b>>2]|0;
        $78 = (($77) + ($76)|0);
        HEAP8[$78>>0] = $79;
        $i$1$i$i = $i$01$i$i;
       }
      } while(0);
      $96 = (($i$1$i$i) + 1)|0;
      $97 = HEAP32[$l$i$i>>2]|0;
      $98 = ($96>>>0)<($97>>>0);
      if ($98) {
       $i$01$i$i = $96;
      } else {
       break;
      }
     }
    }
   }
   if ((label|0) == 39) {
    label = 0;
    $99 = (_lua_toboolean($36,-1)|0);
    $100 = ($99|0)==(0);
    if ($100) {
     _lua_settop($36,-2);
     $101 = $32;
     $102 = $src$0;
     $103 = (($101) - ($102))|0;
     (_lua_pushlstring($36,$src$0,$103)|0);
    } else {
     $104 = (_lua_isstring($36,-1)|0);
     $105 = ($104|0)==(0);
     if ($105) {
      $106 = (_lua_type($36,-1)|0);
      $107 = (_lua_typename($36,$106)|0);
      HEAP32[$vararg_buffer3>>2] = $107;
      (_luaL_error($36,9440,$vararg_buffer3)|0);
     }
    }
    _luaL_addvalue($b);
   }
   $108 = ($32>>>0)>($src$0>>>0);
   if ($108) {
    $128 = $34;$129 = $35;$src$1 = $32;
   } else {
    $126 = $34;$127 = $35;
    label = 46;
   }
  }
  if ((label|0) == 46) {
   label = 0;
   $109 = HEAP32[$16>>2]|0;
   $110 = ($src$0>>>0)<($109>>>0);
   if (!($110)) {
    $124 = $126;$125 = $127;$src$2 = $src$0;
    label = 51;
    break;
   }
   $111 = HEAP32[$21>>2]|0;
   $112 = HEAP32[$22>>2]|0;
   $113 = ($111>>>0)<($112>>>0);
   if ($113) {
    $117 = $111;
   } else {
    (_luaL_prepbuffsize($b,1)|0);
    $$pre9 = HEAP32[$21>>2]|0;
    $117 = $$pre9;
   }
   $114 = (($src$0) + 1|0);
   $115 = HEAP8[$src$0>>0]|0;
   $116 = (($117) + 1)|0;
   HEAP32[$21>>2] = $116;
   $118 = HEAP32[$b>>2]|0;
   $119 = (($118) + ($117)|0);
   HEAP8[$119>>0] = $115;
   $128 = $126;$129 = $127;$src$1 = $114;
  }
  if ($8) {
   $124 = $128;$125 = $129;$src$2 = $src$1;
   label = 51;
   break;
  } else {
   $25 = $129;$27 = $128;$src$0 = $src$1;
  }
 }
 if ((label|0) == 51) {
  $120 = HEAP32[$16>>2]|0;
  $121 = $120;
  $122 = $src$2;
  $123 = (($121) - ($122))|0;
  _luaL_addlstring($b,$src$2,$123);
  _luaL_pushresult($b);
  _lua_pushinteger($L,$124,$125);
  STACKTOP = sp;return 2;
 }
 return (0)|0;
}
function _str_len($L) {
 $L = $L|0;
 var $0 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 (_luaL_checklstring($L,1,$l)|0);
 $0 = HEAP32[$l>>2]|0;
 _lua_pushinteger($L,$0,0);
 STACKTOP = sp;return 1;
}
function _str_lower($L) {
 $L = $L|0;
 var $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 8208|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 }
 $i$01 = 0;
 while(1) {
  $5 = (($0) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_tolower($7)|0);
  $9 = $8&255;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$01 = $11;
  } else {
   $$lcssa3 = $12;
   break;
  }
 }
 $$lcssa = $$lcssa3;
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_match($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_find_aux($L,0)|0);
 return ($0|0);
}
function _str_rep($L) {
 $L = $L|0;
 var $$0 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $l = 0, $lsep = 0, $p$0$be = 0, $p$01 = 0, $uadd$arith = 0, $uadd$overflow = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 8216|0;
 $lsep = sp + 4|0;
 $b = sp + 8|0;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = tempRet0;
 $3 = (_luaL_optlstring($L,3,9952,$lsep)|0);
 $4 = ($2|0)<(0);
 $5 = ($1>>>0)<(1);
 $6 = ($2|0)==(0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  (_lua_pushstring($L,9952)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$l>>2]|0;
 $10 = HEAP32[$lsep>>2]|0;
 $uadd$arith = (($9) + ($10))|0;
 $uadd$overflow = ($uadd$arith>>>0)<($9>>>0);
 if (!($uadd$overflow)) {
  $11 = (___divdi3(2147483647,0,($1|0),($2|0))|0);
  $12 = tempRet0;
  $13 = (0)>($12|0);
  $14 = ($uadd$arith>>>0)>($11>>>0);
  $15 = (0)==($12|0);
  $16 = $15 & $14;
  $17 = $13 | $16;
  if (!($17)) {
   $19 = Math_imul($9, $1)|0;
   $20 = (_i64Add(($1|0),($2|0),-1,0)|0);
   $21 = tempRet0;
   $22 = Math_imul($10, $20)|0;
   $23 = (($22) + ($19))|0;
   $24 = (_luaL_buffinitsize($L,$b,$23)|0);
   $25 = ($2|0)>(0);
   $26 = ($1>>>0)>(1);
   $27 = ($2|0)==(0);
   $28 = $27 & $26;
   $29 = $25 | $28;
   $30 = HEAP32[$l>>2]|0;
   _memcpy(($24|0),($0|0),($30|0))|0;
   if ($29) {
    $31 = $1;$32 = $2;$p$01 = $24;
    while(1) {
     $33 = (_i64Add(($31|0),($32|0),-1,-1)|0);
     $34 = tempRet0;
     $35 = HEAP32[$l>>2]|0;
     $36 = (($p$01) + ($35)|0);
     $37 = HEAP32[$lsep>>2]|0;
     $38 = ($37|0)==(0);
     if ($38) {
      $46 = $35;$p$0$be = $36;
     } else {
      _memcpy(($36|0),($3|0),($37|0))|0;
      $39 = HEAP32[$lsep>>2]|0;
      $$sum = (($39) + ($35))|0;
      $40 = (($p$01) + ($$sum)|0);
      $$pre = HEAP32[$l>>2]|0;
      $46 = $$pre;$p$0$be = $40;
     }
     $41 = ($34|0)>(0);
     $42 = ($33>>>0)>(1);
     $43 = ($34|0)==(0);
     $44 = $43 & $42;
     $45 = $41 | $44;
     _memcpy(($p$0$be|0),($0|0),($46|0))|0;
     if ($45) {
      $31 = $33;$32 = $34;$p$01 = $p$0$be;
     } else {
      break;
     }
    }
   }
   _luaL_pushresultsize($b,$23);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = (_luaL_error($L,9072,$vararg_buffer)|0);
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function _str_reverse($L) {
 $L = $L|0;
 var $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 8208|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 }
 $7 = $3;$i$01 = 0;
 while(1) {
  $5 = $i$01 ^ -1;
  $6 = (($7) + ($5))|0;
  $8 = (($0) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($12>>>0)>($11>>>0);
  if ($13) {
   $7 = $12;$i$01 = $11;
  } else {
   $$lcssa3 = $12;
   break;
  }
 }
 $$lcssa = $$lcssa3;
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_sub($L) {
 $L = $L|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = tempRet0;
 $3 = HEAP32[$l>>2]|0;
 $4 = ($2|0)>(-1);
 $5 = ($1>>>0)>(4294967295);
 $6 = ($2|0)==(-1);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $29 = $2;$31 = $1;
 } else {
  $9 = (0 - ($1))|0;
  $10 = ($3>>>0)<($9>>>0);
  if ($10) {
   $29 = 0;$31 = 0;
  } else {
   $11 = (_i64Add(($1|0),($2|0),1,0)|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($3|0),0)|0);
   $14 = tempRet0;
   $29 = $14;$31 = $13;
  }
 }
 $15 = (_luaL_optinteger($L,3,-1,-1)|0);
 $16 = tempRet0;
 $17 = HEAP32[$l>>2]|0;
 $18 = ($16|0)>(-1);
 $19 = ($15>>>0)>(4294967295);
 $20 = ($16|0)==(-1);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  $38 = $16;$40 = $15;
 } else {
  $23 = (0 - ($15))|0;
  $24 = ($17>>>0)<($23>>>0);
  if ($24) {
   $38 = 0;$40 = 0;
  } else {
   $25 = (_i64Add(($15|0),($16|0),1,0)|0);
   $26 = tempRet0;
   $27 = (_i64Add(($25|0),($26|0),($17|0),0)|0);
   $28 = tempRet0;
   $38 = $28;$40 = $27;
  }
 }
 $30 = ($29|0)<(0);
 $32 = ($31>>>0)<(1);
 $33 = ($29|0)==(0);
 $34 = $33 & $32;
 $35 = $30 | $34;
 $36 = $35 ? 1 : $31;
 $37 = $35 ? 0 : $29;
 $39 = ($38|0)>(0);
 $41 = ($40>>>0)>($17>>>0);
 $42 = ($38|0)==(0);
 $43 = $42 & $41;
 $44 = $39 | $43;
 $45 = $44 ? $17 : $40;
 $46 = $44 ? 0 : $38;
 $47 = ($46|0)<($37|0);
 $48 = ($45>>>0)<($36>>>0);
 $49 = ($46|0)==($37|0);
 $50 = $49 & $48;
 $51 = $47 | $50;
 if ($51) {
  (_lua_pushstring($L,9952)|0);
  STACKTOP = sp;return 1;
 } else {
  $$sum = (($36) + -1)|0;
  $52 = (($0) + ($$sum)|0);
  $53 = (_i64Subtract(($45|0),($46|0),($36|0),($37|0))|0);
  $54 = tempRet0;
  $55 = (($53) + 1)|0;
  (_lua_pushlstring($L,$52,$55)|0);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _str_upper($L) {
 $L = $L|0;
 var $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 8208|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 }
 $i$01 = 0;
 while(1) {
  $5 = (($0) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_toupper($7)|0);
  $9 = $8&255;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$01 = $11;
  } else {
   $$lcssa3 = $12;
   break;
  }
 }
 $$lcssa = $$lcssa3;
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_pack($L) {
 $L = $L|0;
 var $$$i = 0, $$$i1 = 0, $$$i13 = 0, $$017$i = 0, $$036$i = 0, $$08$i = 0, $$111$i = 0, $$1210$i = 0, $$149$i = 0, $$op = 0, $$pr35 = 0, $$pre = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arg$0$be = 0, $arg$037 = 0, $b = 0, $exitcond$i = 0, $exitcond6$i = 0, $exitcond6$i21 = 0, $exitcond6$i9 = 0, $exitcond8$i = 0, $exitcond8$i17 = 0;
 var $exitcond8$i5 = 0, $fmt = 0, $h = 0, $i$04$i = 0, $i$04$i19 = 0, $i$04$i7 = 0, $i$04$us$i = 0, $i$04$us$i15 = 0, $i$04$us$i3 = 0, $i$12$i = 0, $len = 0, $len3 = 0, $len5 = 0, $ntoalign = 0, $or$cond = 0, $or$cond$i = 0, $scevgep$i = 0, $size = 0, $totalsize$0$be = 0, $totalsize$036 = 0;
 var $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 80|0;
 $h = sp + 64|0;
 $fmt = sp + 60|0;
 $size = sp + 56|0;
 $ntoalign = sp + 52|0;
 $u = sp;
 $len = sp + 40|0;
 $len3 = sp + 44|0;
 $len5 = sp + 48|0;
 $0 = (_luaL_checklstring($L,1,0)|0);
 HEAP32[$fmt>>2] = $0;
 HEAP32[$h>>2] = $L;
 $1 = (($h) + 4|0);
 HEAP32[$1>>2] = 1;
 $2 = (($h) + 8|0);
 HEAP32[$2>>2] = 1;
 _lua_pushnil($L);
 _luaL_buffinit($L,$b);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  _luaL_pushresult($b);
  STACKTOP = sp;return 1;
 }
 $5 = (($b) + 8|0);
 $6 = (($b) + 4|0);
 $arg$037 = 1;$totalsize$036 = 0;
 while(1) {
  $7 = (_getdetails($h,$totalsize$036,$fmt,$size,$ntoalign)|0);
  $8 = HEAP32[$ntoalign>>2]|0;
  $9 = HEAP32[$size>>2]|0;
  $10 = (($8) + ($totalsize$036))|0;
  $11 = (($10) + ($9))|0;
  $12 = (($8) + -1)|0;
  HEAP32[$ntoalign>>2] = $12;
  $13 = ($8|0)>(0);
  if ($13) {
   $14 = (0 - ($8))|0;
   $15 = ($14|0)>(-1);
   $$pr35 = $12;
   while(1) {
    $16 = HEAP32[$5>>2]|0;
    $17 = HEAP32[$6>>2]|0;
    $18 = ($16>>>0)<($17>>>0);
    if ($18) {
     $20 = $16;
    } else {
     (_luaL_prepbuffsize($b,1)|0);
     $$pre = HEAP32[$5>>2]|0;
     $20 = $$pre;
    }
    $19 = (($20) + 1)|0;
    HEAP32[$5>>2] = $19;
    $21 = HEAP32[$b>>2]|0;
    $22 = (($21) + ($20)|0);
    HEAP8[$22>>0] = 0;
    $23 = (($$pr35) + -1)|0;
    $24 = ($$pr35|0)>(0);
    if ($24) {
     $$pr35 = $23;
    } else {
     break;
    }
   }
   $$op = (($8) + -2)|0;
   $25 = $15 ? $$op : -1;
   HEAP32[$ntoalign>>2] = $25;
  }
  $26 = (($arg$037) + 1)|0;
  switch ($7|0) {
  case 5:  {
   $171 = (_luaL_checklstring($L,$26,$len5)|0);
   $172 = (_strlen(($171|0))|0);
   $173 = HEAP32[$len5>>2]|0;
   $174 = ($172|0)==($173|0);
   if ($174) {
    $175 = $172;
   } else {
    (_luaL_argerror($L,$26,9048)|0);
    $$pre41 = HEAP32[$len5>>2]|0;
    $175 = $$pre41;
   }
   _luaL_addlstring($b,$171,$175);
   $176 = HEAP32[$5>>2]|0;
   $177 = HEAP32[$6>>2]|0;
   $178 = ($176>>>0)<($177>>>0);
   if ($178) {
    $180 = $176;
   } else {
    (_luaL_prepbuffsize($b,1)|0);
    $$pre42 = HEAP32[$5>>2]|0;
    $180 = $$pre42;
   }
   $179 = (($180) + 1)|0;
   HEAP32[$5>>2] = $179;
   $181 = HEAP32[$b>>2]|0;
   $182 = (($181) + ($180)|0);
   HEAP8[$182>>0] = 0;
   $183 = HEAP32[$len5>>2]|0;
   $184 = (($11) + 1)|0;
   $185 = (($184) + ($183))|0;
   $arg$0$be = $26;$totalsize$0$be = $185;
   break;
  }
  case 6:  {
   $186 = HEAP32[$5>>2]|0;
   $187 = HEAP32[$6>>2]|0;
   $188 = ($186>>>0)<($187>>>0);
   if ($188) {
    $190 = $186;
   } else {
    (_luaL_prepbuffsize($b,1)|0);
    $$pre43 = HEAP32[$5>>2]|0;
    $190 = $$pre43;
   }
   $189 = (($190) + 1)|0;
   HEAP32[$5>>2] = $189;
   $191 = HEAP32[$b>>2]|0;
   $192 = (($191) + ($190)|0);
   HEAP8[$192>>0] = 0;
   label = 76;
   break;
  }
  case 8: case 7:  {
   label = 76;
   break;
  }
  case 1:  {
   $76 = (_luaL_checkinteger($L,$26)|0);
   $77 = tempRet0;
   $78 = ($9|0)<(8);
   if ($78) {
    $79 = $9 << 3;
    $80 = (_bitshift64Shl(1,0,($79|0))|0);
    $81 = tempRet0;
    $82 = ($77>>>0)<($81>>>0);
    $83 = ($76>>>0)<($80>>>0);
    $84 = ($77|0)==($81|0);
    $85 = $84 & $83;
    $86 = $82 | $85;
    if (!($86)) {
     (_luaL_argerror($L,$26,8960)|0);
    }
   }
   $87 = HEAP32[$1>>2]|0;
   $88 = (_luaL_prepbuffsize($b,$9)|0);
   $89 = $76&255;
   $90 = ($87|0)!=(0);
   $91 = (($9) + -1)|0;
   $$$i13 = $90 ? 0 : $91;
   $92 = (($88) + ($$$i13)|0);
   HEAP8[$92>>0] = $89;
   $93 = ($9|0)>(1);
   do {
    if ($93) {
     if ($90) {
      $94 = $76;$95 = $77;$i$04$us$i15 = 1;
      while(1) {
       $96 = (_bitshift64Lshr(($94|0),($95|0),8)|0);
       $97 = tempRet0;
       $98 = $96&255;
       $99 = (($88) + ($i$04$us$i15)|0);
       HEAP8[$99>>0] = $98;
       $100 = (($i$04$us$i15) + 1)|0;
       $exitcond8$i17 = ($100|0)==($9|0);
       if ($exitcond8$i17) {
        break;
       } else {
        $94 = $96;$95 = $97;$i$04$us$i15 = $100;
       }
      }
      break;
     } else {
      $101 = $76;$102 = $77;$i$04$i19 = 1;
      while(1) {
       $103 = (_bitshift64Lshr(($101|0),($102|0),8)|0);
       $104 = tempRet0;
       $105 = $103&255;
       $106 = (($91) - ($i$04$i19))|0;
       $107 = (($88) + ($106)|0);
       HEAP8[$107>>0] = $105;
       $108 = (($i$04$i19) + 1)|0;
       $exitcond6$i21 = ($108|0)==($9|0);
       if ($exitcond6$i21) {
        break;
       } else {
        $101 = $103;$102 = $104;$i$04$i19 = $108;
       }
      }
      break;
     }
    }
   } while(0);
   $109 = HEAP32[$5>>2]|0;
   $110 = (($109) + ($9))|0;
   HEAP32[$5>>2] = $110;
   $arg$0$be = $26;$totalsize$0$be = $11;
   break;
  }
  case 4:  {
   $137 = (_luaL_checklstring($L,$26,$len3)|0);
   $138 = ($9|0)>(3);
   if (!($138)) {
    $139 = HEAP32[$len3>>2]|0;
    $140 = $9 << 3;
    $141 = 1 << $140;
    $142 = ($139>>>0)<($141>>>0);
    if (!($142)) {
     (_luaL_argerror($L,$26,9000)|0);
    }
   }
   $143 = HEAP32[$len3>>2]|0;
   $144 = HEAP32[$1>>2]|0;
   $145 = (_luaL_prepbuffsize($b,$9)|0);
   $146 = $143&255;
   $147 = ($144|0)!=(0);
   $148 = (($9) + -1)|0;
   $$$i = $147 ? 0 : $148;
   $149 = (($145) + ($$$i)|0);
   HEAP8[$149>>0] = $146;
   $150 = ($9|0)>(1);
   do {
    if ($150) {
     if ($147) {
      $151 = $143;$152 = 0;$i$04$us$i = 1;
      while(1) {
       $153 = (_bitshift64Lshr(($151|0),($152|0),8)|0);
       $154 = tempRet0;
       $155 = $153&255;
       $156 = (($145) + ($i$04$us$i)|0);
       HEAP8[$156>>0] = $155;
       $157 = (($i$04$us$i) + 1)|0;
       $exitcond8$i = ($157|0)==($9|0);
       if ($exitcond8$i) {
        break;
       } else {
        $151 = $153;$152 = $154;$i$04$us$i = $157;
       }
      }
      break;
     } else {
      $158 = $143;$159 = 0;$i$04$i = 1;
      while(1) {
       $160 = (_bitshift64Lshr(($158|0),($159|0),8)|0);
       $161 = tempRet0;
       $162 = $160&255;
       $163 = (($148) - ($i$04$i))|0;
       $164 = (($145) + ($163)|0);
       HEAP8[$164>>0] = $162;
       $165 = (($i$04$i) + 1)|0;
       $exitcond6$i = ($165|0)==($9|0);
       if ($exitcond6$i) {
        break;
       } else {
        $158 = $160;$159 = $161;$i$04$i = $165;
       }
      }
      break;
     }
    }
   } while(0);
   $166 = HEAP32[$5>>2]|0;
   $167 = (($166) + ($9))|0;
   HEAP32[$5>>2] = $167;
   $168 = HEAP32[$len3>>2]|0;
   _luaL_addlstring($b,$137,$168);
   $169 = HEAP32[$len3>>2]|0;
   $170 = (($169) + ($11))|0;
   $arg$0$be = $26;$totalsize$0$be = $170;
   break;
  }
  case 3:  {
   $134 = (_luaL_checklstring($L,$26,$len)|0);
   $135 = HEAP32[$len>>2]|0;
   $136 = ($135|0)==($9|0);
   if (!($136)) {
    (_luaL_argerror($L,$26,8984)|0);
   }
   _luaL_addlstring($b,$134,$9);
   $arg$0$be = $26;$totalsize$0$be = $11;
   break;
  }
  case 2:  {
   $111 = (_luaL_prepbuffsize($b,$9)|0);
   $112 = (+_luaL_checknumber($L,$26));
   $113 = ($9|0)==(4);
   if ($113) {
    $114 = $112;
    HEAPF32[$u>>2] = $114;
   } else {
    HEAPF64[$u>>3] = $112;
   }
   $115 = HEAP32[$size>>2]|0;
   $116 = HEAP32[$1>>2]|0;
   $117 = ($116|0)==(1);
   $118 = ($115|0)==(0);
   if ($117) {
    if (!($118)) {
     $$017$i = $115;$$036$i = $u;$$08$i = $111;
     while(1) {
      $119 = (($$017$i) + -1)|0;
      $120 = (($$036$i) + 1|0);
      $121 = HEAP8[$$036$i>>0]|0;
      $122 = (($$08$i) + 1|0);
      HEAP8[$$08$i>>0] = $121;
      $123 = ($119|0)==(0);
      if ($123) {
       break;
      } else {
       $$017$i = $119;$$036$i = $120;$$08$i = $122;
      }
     }
    }
   } else {
    if (!($118)) {
     $124 = (($115) + -1)|0;
     $125 = (($111) + ($124)|0);
     $$111$i = $125;$$1210$i = $115;$$149$i = $u;
     while(1) {
      $126 = (($$1210$i) + -1)|0;
      $127 = (($$149$i) + 1|0);
      $128 = HEAP8[$$149$i>>0]|0;
      $129 = (($$111$i) + -1|0);
      HEAP8[$$111$i>>0] = $128;
      $130 = ($126|0)==(0);
      if ($130) {
       break;
      } else {
       $$111$i = $129;$$1210$i = $126;$$149$i = $127;
      }
     }
    }
   }
   $131 = HEAP32[$size>>2]|0;
   $132 = HEAP32[$5>>2]|0;
   $133 = (($132) + ($131))|0;
   HEAP32[$5>>2] = $133;
   $arg$0$be = $26;$totalsize$0$be = $11;
   break;
  }
  case 0:  {
   $27 = (_luaL_checkinteger($L,$26)|0);
   $28 = tempRet0;
   $29 = ($9|0)<(8);
   if ($29) {
    $30 = $9 << 3;
    $31 = (($30) + -1)|0;
    $32 = (_bitshift64Shl(1,0,($31|0))|0);
    $33 = tempRet0;
    $34 = (_i64Subtract(0,0,($32|0),($33|0))|0);
    $35 = tempRet0;
    $36 = ($28|0)>($35|0);
    $37 = ($27>>>0)>=($34>>>0);
    $38 = ($28|0)==($35|0);
    $39 = $38 & $37;
    $40 = $36 | $39;
    $41 = ($28|0)<($33|0);
    $42 = ($27>>>0)<($32>>>0);
    $43 = ($28|0)==($33|0);
    $44 = $43 & $42;
    $45 = $41 | $44;
    $or$cond = $40 & $45;
    if (!($or$cond)) {
     (_luaL_argerror($L,$26,8936)|0);
    }
   }
   $46 = HEAP32[$1>>2]|0;
   $47 = (_luaL_prepbuffsize($b,$9)|0);
   $48 = $27&255;
   $49 = ($46|0)!=(0);
   $50 = (($9) + -1)|0;
   $$$i1 = $49 ? 0 : $50;
   $51 = (($47) + ($$$i1)|0);
   HEAP8[$51>>0] = $48;
   $52 = ($9|0)>(1);
   do {
    if ($52) {
     if ($49) {
      $53 = $27;$54 = $28;$i$04$us$i3 = 1;
      while(1) {
       $55 = (_bitshift64Lshr(($53|0),($54|0),8)|0);
       $56 = tempRet0;
       $57 = $55&255;
       $58 = (($47) + ($i$04$us$i3)|0);
       HEAP8[$58>>0] = $57;
       $59 = (($i$04$us$i3) + 1)|0;
       $exitcond8$i5 = ($59|0)==($9|0);
       if ($exitcond8$i5) {
        break;
       } else {
        $53 = $55;$54 = $56;$i$04$us$i3 = $59;
       }
      }
     } else {
      $60 = $27;$61 = $28;$i$04$i7 = 1;
      while(1) {
       $62 = (_bitshift64Lshr(($60|0),($61|0),8)|0);
       $63 = tempRet0;
       $64 = $62&255;
       $65 = (($50) - ($i$04$i7))|0;
       $66 = (($47) + ($65)|0);
       HEAP8[$66>>0] = $64;
       $67 = (($i$04$i7) + 1)|0;
       $exitcond6$i9 = ($67|0)==($9|0);
       if ($exitcond6$i9) {
        break;
       } else {
        $60 = $62;$61 = $63;$i$04$i7 = $67;
       }
      }
     }
     $68 = ($28|0)<(0);
     $69 = ($9|0)>(8);
     $or$cond$i = $68 & $69;
     if ($or$cond$i) {
      if ($49) {
       $scevgep$i = (($47) + 8|0);
       $70 = (($9) + -8)|0;
       _memset(($scevgep$i|0),-1,($70|0))|0;
       break;
      }
      $i$12$i = 8;
      while(1) {
       $71 = (($50) - ($i$12$i))|0;
       $72 = (($47) + ($71)|0);
       HEAP8[$72>>0] = -1;
       $73 = (($i$12$i) + 1)|0;
       $exitcond$i = ($73|0)==($9|0);
       if ($exitcond$i) {
        break;
       } else {
        $i$12$i = $73;
       }
      }
     }
    }
   } while(0);
   $74 = HEAP32[$5>>2]|0;
   $75 = (($74) + ($9))|0;
   HEAP32[$5>>2] = $75;
   $arg$0$be = $26;$totalsize$0$be = $11;
   break;
  }
  default: {
   $arg$0$be = $26;$totalsize$0$be = $11;
  }
  }
  if ((label|0) == 76) {
   label = 0;
   $arg$0$be = $arg$037;$totalsize$0$be = $11;
  }
  $193 = HEAP32[$fmt>>2]|0;
  $194 = HEAP8[$193>>0]|0;
  $195 = ($194<<24>>24)==(0);
  if ($195) {
   break;
  } else {
   $arg$037 = $arg$0$be;$totalsize$036 = $totalsize$0$be;
  }
 }
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _str_packsize($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0;
 var $h = 0, $ntoalign = 0, $size = 0, $switch = 0, $totalsize$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h = sp + 12|0;
 $fmt = sp;
 $size = sp + 4|0;
 $ntoalign = sp + 8|0;
 $0 = (_luaL_checklstring($L,1,0)|0);
 HEAP32[$fmt>>2] = $0;
 HEAP32[$h>>2] = $L;
 $1 = (($h) + 4|0);
 HEAP32[$1>>2] = 1;
 $2 = (($h) + 8|0);
 HEAP32[$2>>2] = 1;
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $16 = 0;$17 = 0;
  _lua_pushinteger($L,$16,$17);
  STACKTOP = sp;return 1;
 }
 $totalsize$01 = 0;
 while(1) {
  $5 = (_getdetails($h,$totalsize$01,$fmt,$size,$ntoalign)|0);
  $6 = HEAP32[$ntoalign>>2]|0;
  $7 = HEAP32[$size>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[$size>>2] = $8;
  $9 = (2147483647 - ($8))|0;
  $10 = ($totalsize$01>>>0)>($9>>>0);
  if ($10) {
   (_luaL_argerror($L,1,8888)|0);
  }
  $11 = (($8) + ($totalsize$01))|0;
  $12 = $5 & -2;
  $switch = ($12|0)==(4);
  if ($switch) {
   (_luaL_argerror($L,1,8912)|0);
  }
  $13 = HEAP32[$fmt>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $$lcssa = $11;
   break;
  } else {
   $totalsize$01 = $11;
  }
 }
 $16 = $$lcssa;$17 = 0;
 _lua_pushinteger($L,$16,$17);
 STACKTOP = sp;return 1;
}
function _str_unpack($L) {
 $L = $L|0;
 var $$0$i$off0 = 0, $$017$i = 0, $$036$i = 0, $$08$i = 0, $$111$i = 0, $$1210$i = 0, $$149$i = 0, $$lcssa = 0, $$pre = 0, $$pre6$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $fmt = 0, $h = 0, $ld = 0, $n$0$lcssa = 0, $n$03 = 0, $n$1 = 0, $n$1$lcssa = 0, $ntoalign = 0, $num$0 = 0.0;
 var $pos$0$lcssa = 0, $pos$04 = 0, $pos$1 = 0, $size = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h = sp + 56|0;
 $fmt = sp + 52|0;
 $ld = sp + 40|0;
 $size = sp + 44|0;
 $ntoalign = sp + 48|0;
 $u = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 HEAP32[$fmt>>2] = $0;
 $1 = (_luaL_checklstring($L,2,$ld)|0);
 $2 = (_luaL_optinteger($L,3,1,0)|0);
 $3 = tempRet0;
 $4 = HEAP32[$ld>>2]|0;
 $5 = ($3|0)>(-1);
 $6 = ($2>>>0)>(4294967295);
 $7 = ($3|0)==(-1);
 $8 = $7 & $6;
 $9 = $5 | $8;
 if ($9) {
  $$0$i$off0 = $2;
 } else {
  $10 = (0 - ($2))|0;
  $11 = ($4>>>0)<($10>>>0);
  if ($11) {
   $$0$i$off0 = 0;
  } else {
   $12 = (_i64Add(($2|0),($3|0),1,0)|0);
   $13 = tempRet0;
   $14 = (_i64Add(($12|0),($13|0),($4|0),0)|0);
   $15 = tempRet0;
   $$0$i$off0 = $14;
  }
 }
 $16 = (($$0$i$off0) + -1)|0;
 $17 = ($16>>>0)>($4>>>0);
 if ($17) {
  (_luaL_argerror($L,3,11152)|0);
 }
 HEAP32[$h>>2] = $L;
 $18 = (($h) + 4|0);
 HEAP32[$18>>2] = 1;
 $19 = (($h) + 8|0);
 HEAP32[$19>>2] = 1;
 $20 = HEAP8[$0>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $n$0$lcssa = 0;$pos$0$lcssa = $16;
  $78 = (($pos$0$lcssa) + 1)|0;
  _lua_pushinteger($L,$78,0);
  $79 = (($n$0$lcssa) + 1)|0;
  STACKTOP = sp;return ($79|0);
 }
 $n$03 = 0;$pos$04 = $16;
 while(1) {
  $22 = (_getdetails($h,$pos$04,$fmt,$size,$ntoalign)|0);
  $23 = HEAP32[$ntoalign>>2]|0;
  $24 = HEAP32[$size>>2]|0;
  $25 = (($24) + ($23))|0;
  $26 = $pos$04 ^ -1;
  $27 = ($25>>>0)>($26>>>0);
  $$pre6$pre = (($23) + ($pos$04))|0;
  if ($27) {
   label = 10;
  } else {
   $28 = (($$pre6$pre) + ($24))|0;
   $29 = HEAP32[$ld>>2]|0;
   $30 = ($28>>>0)>($29>>>0);
   if ($30) {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   (_luaL_argerror($L,2,8592)|0);
  }
  _luaL_checkstack($L,2,8616);
  $31 = (($n$03) + 1)|0;
  switch ($22|0) {
  case 2:  {
   $38 = (($1) + ($$pre6$pre)|0);
   $39 = HEAP32[$18>>2]|0;
   $40 = ($39|0)==(1);
   $41 = ($24|0)==(0);
   if ($40) {
    if (!($41)) {
     $$017$i = $24;$$036$i = $38;$$08$i = $u;
     while(1) {
      $42 = (($$017$i) + -1)|0;
      $43 = (($$036$i) + 1|0);
      $44 = HEAP8[$$036$i>>0]|0;
      $45 = (($$08$i) + 1|0);
      HEAP8[$$08$i>>0] = $44;
      $46 = ($42|0)==(0);
      if ($46) {
       break;
      } else {
       $$017$i = $42;$$036$i = $43;$$08$i = $45;
      }
     }
    }
   } else {
    if (!($41)) {
     $47 = (($24) + -1)|0;
     $48 = (($u) + ($47)|0);
     $$111$i = $48;$$1210$i = $24;$$149$i = $38;
     while(1) {
      $49 = (($$1210$i) + -1)|0;
      $50 = (($$149$i) + 1|0);
      $51 = HEAP8[$$149$i>>0]|0;
      $52 = (($$111$i) + -1|0);
      HEAP8[$$111$i>>0] = $51;
      $53 = ($49|0)==(0);
      if ($53) {
       break;
      } else {
       $$111$i = $52;$$1210$i = $49;$$149$i = $50;
      }
     }
    }
   }
   $54 = HEAP32[$size>>2]|0;
   $55 = ($54|0)==(4);
   if ($55) {
    $56 = +HEAPF32[$u>>2];
    $57 = $56;
    $num$0 = $57;
   } else {
    $58 = +HEAPF64[$u>>3];
    $num$0 = $58;
   }
   _lua_pushnumber($L,$num$0);
   $$pre = HEAP32[$size>>2]|0;
   $74 = $$pre;$n$1 = $31;$pos$1 = $$pre6$pre;
   break;
  }
  case 3:  {
   $59 = (($1) + ($$pre6$pre)|0);
   (_lua_pushlstring($L,$59,$24)|0);
   $74 = $24;$n$1 = $31;$pos$1 = $$pre6$pre;
   break;
  }
  case 5:  {
   $69 = (($1) + ($$pre6$pre)|0);
   $70 = (_strlen(($69|0))|0);
   (_lua_pushlstring($L,$69,$70)|0);
   $71 = (($$pre6$pre) + 1)|0;
   $72 = (($71) + ($70))|0;
   $74 = $24;$n$1 = $31;$pos$1 = $72;
   break;
  }
  case 1: case 0:  {
   $32 = (($1) + ($$pre6$pre)|0);
   $33 = HEAP32[$18>>2]|0;
   $34 = ($22|0)==(0);
   $35 = $34&1;
   $36 = (_unpackint($L,$32,$33,$24,$35)|0);
   $37 = tempRet0;
   _lua_pushinteger($L,$36,$37);
   $74 = $24;$n$1 = $31;$pos$1 = $$pre6$pre;
   break;
  }
  case 8: case 6: case 7:  {
   $74 = $24;$n$1 = $n$03;$pos$1 = $$pre6$pre;
   break;
  }
  case 4:  {
   $60 = (($1) + ($$pre6$pre)|0);
   $61 = HEAP32[$18>>2]|0;
   $62 = (_unpackint($L,$60,$61,$24,0)|0);
   $63 = tempRet0;
   $64 = (($62) + ($$pre6$pre))|0;
   $65 = (($64) + ($24))|0;
   $66 = HEAP32[$ld>>2]|0;
   $67 = ($65>>>0)>($66>>>0);
   if ($67) {
    (_luaL_argerror($L,2,8592)|0);
   }
   $$sum = (($24) + ($$pre6$pre))|0;
   $68 = (($1) + ($$sum)|0);
   (_lua_pushlstring($L,$68,$62)|0);
   $74 = $24;$n$1 = $31;$pos$1 = $64;
   break;
  }
  default: {
   $74 = $24;$n$1 = $31;$pos$1 = $$pre6$pre;
  }
  }
  $73 = (($74) + ($pos$1))|0;
  $75 = HEAP32[$fmt>>2]|0;
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $$lcssa = $73;$n$1$lcssa = $n$1;
   break;
  } else {
   $n$03 = $n$1;$pos$04 = $73;
  }
 }
 $n$0$lcssa = $n$1$lcssa;$pos$0$lcssa = $$lcssa;
 $78 = (($pos$0$lcssa) + 1)|0;
 _lua_pushinteger($L,$78,0);
 $79 = (($n$0$lcssa) + 1)|0;
 STACKTOP = sp;return ($79|0);
}
function _writer($L,$b,$size,$B) {
 $L = $L|0;
 $b = $b|0;
 $size = $size|0;
 $B = $B|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_addlstring($B,$b,$size);
 return 0;
}
function _str_find_aux($L,$find) {
 $L = $L|0;
 $find = $find|0;
 var $$$i = 0, $$0$i512 = 0, $$014$i = 0, $$023$i = 0, $$1 = 0, $$lcssa = 0, $$lcssa17 = 0, $$lcssa28 = 0, $$pre26 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i7 = 0, $i$02$i = 0, $i$02$i6 = 0, $init$0$off0 = 0, $lp = 0, $ls = 0, $ms = 0, $or$cond$i = 0, $p$0 = 0, $s1$0 = 0, $s1$0$lcssa = 0, $s1$0$lcssa29 = 0, $upto$0$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ls = sp + 288|0;
 $lp = sp;
 $ms = sp + 8|0;
 $0 = (_luaL_checklstring($L,1,$ls)|0);
 $1 = (_luaL_checklstring($L,2,$lp)|0);
 $2 = (_luaL_optinteger($L,3,1,0)|0);
 $3 = tempRet0;
 $4 = HEAP32[$ls>>2]|0;
 $5 = ($3|0)>(-1);
 $6 = ($2>>>0)>(4294967295);
 $7 = ($3|0)==(-1);
 $8 = $7 & $6;
 $9 = $5 | $8;
 if ($9) {
  $16 = $3;$18 = $2;
  label = 4;
 } else {
  $10 = (0 - ($2))|0;
  $11 = ($4>>>0)<($10>>>0);
  if ($11) {
   $init$0$off0 = 1;
  } else {
   $12 = (_i64Add(($2|0),($3|0),1,0)|0);
   $13 = tempRet0;
   $14 = (_i64Add(($12|0),($13|0),($4|0),0)|0);
   $15 = tempRet0;
   $16 = $15;$18 = $14;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $17 = ($16|0)<(0);
  $19 = ($18>>>0)<(1);
  $20 = ($16|0)==(0);
  $21 = $20 & $19;
  $22 = $17 | $21;
  if ($22) {
   $init$0$off0 = 1;
  } else {
   $23 = (_i64Add(($4|0),0,1,0)|0);
   $24 = tempRet0;
   $25 = ($16|0)>($24|0);
   $26 = ($18>>>0)>($23>>>0);
   $27 = ($16|0)==($24|0);
   $28 = $27 & $26;
   $29 = $25 | $28;
   if ($29) {
    _lua_pushnil($L);
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   } else {
    $init$0$off0 = $18;
   }
  }
 }
 $30 = ($find|0)!=(0);
 L10: do {
  if ($30) {
   $31 = (_lua_toboolean($L,4)|0);
   $32 = ($31|0)==(0);
   $33 = HEAP32[$lp>>2]|0;
   do {
    if ($32) {
     $upto$0$i = 0;
     while(1) {
      $34 = (($1) + ($upto$0$i)|0);
      $35 = (_strpbrk($34,9392)|0);
      $36 = ($35|0)==(0|0);
      if (!($36)) {
       label = 23;
       break;
      }
      $37 = (_strlen(($34|0))|0);
      $38 = (($upto$0$i) + 1)|0;
      $39 = (($38) + ($37))|0;
      $40 = ($39>>>0)>($33>>>0);
      if ($40) {
       label = 12;
       break;
      } else {
       $upto$0$i = $39;
      }
     }
     if ((label|0) == 12) {
      break;
     }
     else if ((label|0) == 23) {
      label = 24;
      break L10;
     }
    }
   } while(0);
   $$sum2 = (($init$0$off0) + -1)|0;
   $41 = (($0) + ($$sum2)|0);
   $42 = HEAP32[$ls>>2]|0;
   $43 = (($42) - ($init$0$off0))|0;
   $44 = (($43) + 1)|0;
   $45 = ($33|0)==(0);
   do {
    if ($45) {
     $63 = ($41|0)==(0|0);
     if ($63) {
      break L10;
     } else {
      $$0$i512 = $41;
     }
    } else {
     $46 = ($33>>>0)>($44>>>0);
     if ($46) {
      break L10;
     }
     $47 = (($33) + -1)|0;
     $48 = ($44|0)==($47|0);
     if ($48) {
      break L10;
     }
     $49 = (($44) - ($47))|0;
     $50 = HEAP8[$1>>0]|0;
     $51 = $50 << 24 >> 24;
     $52 = (($1) + 1|0);
     $$014$i = $49;$$023$i = $41;
     while(1) {
      $53 = (_memchr($$023$i,$51,$$014$i)|0);
      $54 = ($53|0)==(0|0);
      if ($54) {
       label = 43;
       break;
      }
      $55 = (($53) + 1|0);
      $56 = (_memcmp($55,$52,$47)|0);
      $57 = ($56|0)==(0);
      if ($57) {
       $$lcssa28 = $53;
       label = 21;
       break;
      }
      $58 = $55;
      $59 = $$023$i;
      $60 = (($59) + ($$014$i))|0;
      $61 = (($60) - ($58))|0;
      $62 = ($60|0)==($58|0);
      if ($62) {
       label = 43;
       break;
      } else {
       $$014$i = $61;$$023$i = $55;
      }
     }
     if ((label|0) == 21) {
      $$0$i512 = $$lcssa28;
      break;
     }
     else if ((label|0) == 43) {
      break L10;
     }
    }
   } while(0);
   $64 = $$0$i512;
   $65 = $0;
   $66 = (($64) - ($65))|0;
   $67 = (($66) + 1)|0;
   $68 = ($67|0)<(0);
   $69 = $68 << 31 >> 31;
   _lua_pushinteger($L,$67,$69);
   $70 = HEAP32[$lp>>2]|0;
   $71 = (($66) + ($70))|0;
   _lua_pushinteger($L,$71,0);
   $$1 = 2;
   STACKTOP = sp;return ($$1|0);
  } else {
   label = 24;
  }
 } while(0);
 L35: do {
  if ((label|0) == 24) {
   $$sum = (($init$0$off0) + -1)|0;
   $72 = (($0) + ($$sum)|0);
   $73 = HEAP8[$1>>0]|0;
   $74 = ($73<<24>>24)==(94);
   if ($74) {
    $75 = (($1) + 1|0);
    $76 = HEAP32[$lp>>2]|0;
    $77 = (($76) + -1)|0;
    HEAP32[$lp>>2] = $77;
    $84 = $77;$p$0 = $75;
   } else {
    $$pre26 = HEAP32[$lp>>2]|0;
    $84 = $$pre26;$p$0 = $1;
   }
   $78 = (($ms) + 16|0);
   HEAP32[$78>>2] = $L;
   HEAP32[$ms>>2] = 200;
   $79 = (($ms) + 4|0);
   HEAP32[$79>>2] = $0;
   $80 = HEAP32[$ls>>2]|0;
   $81 = (($0) + ($80)|0);
   $82 = (($ms) + 8|0);
   HEAP32[$82>>2] = $81;
   $83 = (($p$0) + ($84)|0);
   $85 = (($ms) + 12|0);
   HEAP32[$85>>2] = $83;
   $86 = (($ms) + 20|0);
   do {
    if ($74) {
     HEAP32[$86>>2] = 0;
     $87 = (_match($ms,$72,$p$0)|0);
     $88 = ($87|0)==(0|0);
     if ($88) {
      break L35;
     } else {
      $$lcssa17 = $87;$s1$0$lcssa = $72;
     }
    } else {
     $s1$0 = $72;
     while(1) {
      HEAP32[$86>>2] = 0;
      $89 = (_match($ms,$s1$0,$p$0)|0);
      $90 = ($89|0)==(0|0);
      if (!($90)) {
       $$lcssa = $89;$s1$0$lcssa29 = $s1$0;
       label = 31;
       break;
      }
      $112 = HEAP32[$82>>2]|0;
      $113 = ($s1$0>>>0)<($112>>>0);
      if (!($113)) {
       label = 44;
       break;
      }
      $114 = (($s1$0) + 1|0);
      $s1$0 = $114;
     }
     if ((label|0) == 31) {
      $$lcssa17 = $$lcssa;$s1$0$lcssa = $s1$0$lcssa29;
      break;
     }
     else if ((label|0) == 44) {
      break L35;
     }
    }
   } while(0);
   if ($30) {
    $91 = $s1$0$lcssa;
    $92 = $0;
    $93 = (1 - ($92))|0;
    $94 = (($93) + ($91))|0;
    $95 = ($94|0)<(0);
    $96 = $95 << 31 >> 31;
    _lua_pushinteger($L,$94,$96);
    $97 = $$lcssa17;
    $98 = (($97) - ($92))|0;
    $99 = ($98|0)<(0);
    $100 = $99 << 31 >> 31;
    _lua_pushinteger($L,$98,$100);
    $101 = HEAP32[$86>>2]|0;
    $102 = HEAP32[$78>>2]|0;
    _luaL_checkstack($102,$101,9104);
    $103 = ($101|0)>(0);
    if ($103) {
     $i$02$i6 = 0;
     while(1) {
      _push_onecapture($ms,$i$02$i6,0,0);
      $104 = (($i$02$i6) + 1)|0;
      $exitcond$i7 = ($104|0)==($101|0);
      if ($exitcond$i7) {
       break;
      } else {
       $i$02$i6 = $104;
      }
     }
    }
    $105 = (($101) + 2)|0;
    $$1 = $105;
    STACKTOP = sp;return ($$1|0);
   } else {
    $106 = HEAP32[$86>>2]|0;
    $107 = ($106|0)==(0);
    $108 = ($s1$0$lcssa|0)!=(0|0);
    $or$cond$i = $107 & $108;
    $$$i = $or$cond$i ? 1 : $106;
    $109 = HEAP32[$78>>2]|0;
    _luaL_checkstack($109,$$$i,9104);
    $110 = ($$$i|0)>(0);
    if (!($110)) {
     $$1 = $$$i;
     STACKTOP = sp;return ($$1|0);
    }
    $i$02$i = 0;
    while(1) {
     _push_onecapture($ms,$i$02$i,$s1$0$lcssa,$$lcssa17);
     $111 = (($i$02$i) + 1)|0;
     $exitcond$i = ($111|0)==($$$i|0);
     if ($exitcond$i) {
      break;
     } else {
      $i$02$i = $111;
     }
    }
    $$1 = $$$i;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 _lua_pushnil($L);
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _gmatch_aux($L) {
 $L = $L|0;
 var $$$i = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$02$i = 0;
 var $lp = 0, $ls = 0, $ms = 0, $or$cond$i = 0, $src$04 = 0, $src$04$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ms = sp + 8|0;
 $ls = sp;
 $lp = sp + 4|0;
 $0 = (_lua_tolstring($L,-1001001,$ls)|0);
 $1 = (_lua_tolstring($L,-1001002,$lp)|0);
 $2 = (($ms) + 16|0);
 HEAP32[$2>>2] = $L;
 HEAP32[$ms>>2] = 200;
 $3 = (($ms) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[$ls>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = (($ms) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$lp>>2]|0;
 $8 = (($1) + ($7)|0);
 $9 = (($ms) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = (_lua_tointegerx($L,-1001003,0)|0);
 $11 = tempRet0;
 $12 = ($10|0)>($4|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($0) + ($10)|0);
 $14 = (($ms) + 20|0);
 $src$04 = $13;
 while(1) {
  HEAP32[$14>>2] = 0;
  $18 = (_match($ms,$src$04,$1)|0);
  $19 = ($18|0)==(0|0);
  $16 = (($src$04) + 1|0);
  if (!($19)) {
   $$lcssa = $18;$src$04$lcssa = $src$04;
   break;
  }
  $15 = HEAP32[$6>>2]|0;
  $17 = ($16>>>0)>($15>>>0);
  if ($17) {
   label = 9;
   break;
  } else {
   $src$04 = $16;
  }
 }
 if ((label|0) == 9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $$lcssa;
 $21 = $0;
 $22 = (($20) - ($21))|0;
 $23 = ($22|0)<(0);
 $24 = $23 << 31 >> 31;
 $25 = ($$lcssa|0)==($src$04$lcssa|0);
 $26 = $25&1;
 $27 = (_i64Add(($22|0),($24|0),($26|0),0)|0);
 $28 = tempRet0;
 _lua_pushinteger($L,$27,$28);
 _lua_copy($L,-1,-1001003);
 _lua_settop($L,-2);
 $29 = HEAP32[$14>>2]|0;
 $30 = ($29|0)==(0);
 $31 = ($src$04$lcssa|0)!=(0|0);
 $or$cond$i = $30 & $31;
 $$$i = $or$cond$i ? 1 : $29;
 $32 = HEAP32[$2>>2]|0;
 _luaL_checkstack($32,$$$i,9104);
 $33 = ($$$i|0)>(0);
 if (!($33)) {
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $i$02$i = 0;
 while(1) {
  _push_onecapture($ms,$i$02$i,$src$04$lcssa,$$lcssa);
  $34 = (($i$02$i) + 1)|0;
  $exitcond$i = ($34|0)==($$$i|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$02$i = $34;
  }
 }
 $$0 = $$$i;
 STACKTOP = sp;return ($$0|0);
}
function _match($ms,$s,$p) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 var $$$i = 0, $$$i14 = 0, $$$i34 = 0, $$$i4 = 0, $$$i42 = 0, $$$i50 = 0, $$$i7 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i23 = 0, $$0$i$i25 = 0, $$0$i$i25$ph = 0, $$0$i$i30 = 0, $$0$i$i30$ph = 0, $$0$i$ph = 0, $$0$i12 = 0, $$0$i12$ph = 0, $$0$i15 = 0, $$0$i2 = 0, $$0$i5 = 0;
 var $$0$i5$ph = 0, $$0$ph$be = 0, $$0$ph136 = 0, $$0$ph136$lcssa = 0, $$0$ph136$lcssa250 = 0, $$0$ph136$lcssa254 = 0, $$0$ph136$lcssa256 = 0, $$0$ph136$lcssa257 = 0, $$01$be = 0, $$01$be$i = 0, $$01$be$i10 = 0, $$01$be$i37 = 0, $$01$be$i45 = 0, $$01$be$i53 = 0, $$01$i = 0, $$01$i$lcssa = 0, $$01$i$lcssa245 = 0, $$01$i$lcssa246 = 0, $$01$i$lcssa247 = 0, $$01$i18 = 0;
 var $$01$i248 = 0, $$01$i27119 = 0, $$01$ph$be = 0, $$01$ph135 = 0, $$01125 = 0, $$01125$lcssa = 0, $$01125$lcssa230 = 0, $$01125$lcssa231 = 0, $$01125$lcssa232 = 0, $$01125$lcssa236 = 0, $$01125$lcssa237 = 0, $$01125$lcssa238 = 0, $$01125239 = 0, $$012$i = 0, $$012$i35 = 0, $$012$i43 = 0, $$012$i51 = 0, $$012$i8 = 0, $$1 = 0, $$1$i = 0;
 var $$1$i$lcssa = 0, $$1$i17 = 0, $$1$i17$lcssa = 0, $$2 = 0, $$2$i = 0, $$2$i16 = 0, $$2$ph = 0, $$2$ph213 = 0, $$2$ph216 = 0, $$2$ph219 = 0, $$cont$0$i = 0, $$lcssa = 0, $$lcssa222 = 0, $$lcssa240 = 0, $$lcssa264 = 0, $$p$i = 0, $$p$i33 = 0, $$p$i41 = 0, $$p$i49 = 0, $$p$i6 = 0;
 var $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi208$lcssa241Z2D = 0, $$pre$phi208$lcssa242Z2D = 0, $$pre$phi208$lcssa243Z2D = 0, $$pre$phi208244Z2D = 0, $$pre$phi208Z2D = 0, $$pre205 = 0, $$pre207 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $81$phi = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cont$0$be$i = 0, $cont$04$i = 0, $i$0$i$lcssa = 0;
 var $i$0$i$lcssa211 = 0, $i$0$i112 = 0, $i$1$i109 = 0, $level$0$i$i = 0, $level$0$i$i$lcssa220 = 0, $level$0$in$i$i = 0, $ms$idx = 0, $ms$idx$val = 0, $ms$idx$val$i = 0, $ms$idx$val$i$pre = 0, $ms$idx$val$i111 = 0, $ms$idx$val$i203 = 0, $ms$idx$val$i29 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 32|0;
 $0 = HEAP32[$ms>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[$ms>>2] = $1;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (($ms) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  (_luaL_error($4,9184,$vararg_buffer)|0);
 }
 $5 = (($ms) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($p|0);
 if ($7) {
  $$2 = $s;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 $ms$idx = (($ms) + 8|0);
 $8 = (($ms) + 16|0);
 $9 = (($ms) + 4|0);
 $10 = (($ms) + 20|0);
 $$0$ph136 = $s;$$01$ph135 = $p;$343 = $6;
 L7: while(1) {
  $11 = (($$0$ph136) + 1|0);
  $12 = (($$0$ph136) + -1|0);
  $$01125 = $$01$ph135;$57 = $343;
  L9: while(1) {
   $13 = HEAP8[$$01125>>0]|0;
   $14 = $13 << 24 >> 24;
   L11: do {
    if ((($14|0) == 40)) {
     $$0$ph136$lcssa = $$0$ph136;$$01125$lcssa = $$01125;
     label = 7;
     break L7;
    } else if ((($14|0) == 41)) {
     $$0$ph136$lcssa250 = $$0$ph136;$$01125$lcssa230 = $$01125;
     label = 16;
     break L7;
    } else if ((($14|0) == 37)) {
     $61 = (($$01125) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     switch ($63|0) {
     case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $$01125$lcssa232 = $$01125;$$lcssa240 = $62;
      label = 75;
      break L9;
      break;
     }
     case 102:  {
      break;
     }
     case 98:  {
      $$01125$lcssa231 = $$01125;$$lcssa222 = $57;
      label = 26;
      break L9;
      break;
     }
     default: {
      $191 = ($61|0)==($57|0);
      if ($191) {
       $192 = HEAP32[$8>>2]|0;
       (_luaL_error($192,9248,$vararg_buffer17)|0);
      }
      $193 = (($$01125) + 2|0);
      $$01$i = $193;$$pre$phi208Z2D = $61;
      label = 95;
      break L11;
     }
     }
     $87 = (($$01125) + 2|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)==(91);
     if ($89) {
      $93 = 91;
     } else {
      $90 = HEAP32[$8>>2]|0;
      (_luaL_error($90,9208,$vararg_buffer9)|0);
      $$pre205 = HEAP8[$87>>0]|0;
      $93 = $$pre205;
     }
     $91 = (($$01125) + 3|0);
     $92 = $93 << 24 >> 24;
     if ((($92|0) == 91)) {
      $98 = HEAP8[$91>>0]|0;
      $99 = ($98<<24>>24)==(94);
      $100 = (($$01125) + 4|0);
      $$$i14 = $99 ? $100 : $91;
      $$0$i15 = $$$i14;
      while(1) {
       $101 = HEAP32[$5>>2]|0;
       $102 = ($$0$i15|0)==($101|0);
       if ($102) {
        $103 = HEAP32[$8>>2]|0;
        (_luaL_error($103,9288,$vararg_buffer13)|0);
       }
       $104 = (($$0$i15) + 1|0);
       $105 = HEAP8[$$0$i15>>0]|0;
       $106 = ($105<<24>>24)==(37);
       if ($106) {
        $107 = HEAP32[$5>>2]|0;
        $108 = ($104>>>0)<($107>>>0);
        $109 = (($$0$i15) + 2|0);
        $$2$i16 = $108 ? $109 : $104;
        $$1$i17 = $$2$i16;
       } else {
        $$1$i17 = $104;
       }
       $110 = HEAP8[$$1$i17>>0]|0;
       $111 = ($110<<24>>24)==(93);
       if ($111) {
        $$1$i17$lcssa = $$1$i17;
        break;
       } else {
        $$0$i15 = $$1$i17;
       }
      }
      $112 = (($$1$i17$lcssa) + 1|0);
      $$01$i18 = $112;
     } else if ((($92|0) == 37)) {
      $94 = HEAP32[$5>>2]|0;
      $95 = ($91|0)==($94|0);
      if ($95) {
       $96 = HEAP32[$8>>2]|0;
       (_luaL_error($96,9248,$vararg_buffer11)|0);
      }
      $97 = (($$01125) + 4|0);
      $$01$i18 = $97;
     } else {
      $$01$i18 = $91;
     }
     $113 = HEAP32[$9>>2]|0;
     $114 = ($$0$ph136|0)==($113|0);
     if ($114) {
      $117 = 0;
     } else {
      $115 = HEAP8[$12>>0]|0;
      $117 = $115;
     }
     $116 = $117&255;
     $118 = (($$01$i18) + -1|0);
     $119 = HEAP8[$91>>0]|0;
     $120 = ($119<<24>>24)==(94);
     $$p$i6 = $120 ? $91 : $87;
     $121 = $120&1;
     $$$i7 = $121 ^ 1;
     $122 = (($$p$i6) + 1|0);
     $123 = ($122>>>0)<($118>>>0);
     if ($123) {
      $$012$i8 = $$p$i6;$125 = $122;
      L55: while(1) {
       $124 = HEAP8[$125>>0]|0;
       $126 = ($124<<24>>24)==(37);
       $127 = (($$012$i8) + 2|0);
       $128 = HEAP8[$127>>0]|0;
       do {
        if ($126) {
         $129 = $128&255;
         $130 = (_match_class($116,$129)|0);
         $131 = ($130|0)==(0);
         if ($131) {
          $$01$be$i10 = $127;
         } else {
          $$0$i12$ph = $$$i7;
          break L55;
         }
        } else {
         $132 = ($128<<24>>24)==(45);
         if ($132) {
          $133 = (($$012$i8) + 3|0);
          $134 = ($133>>>0)<($118>>>0);
          if ($134) {
           $135 = ($124&255)>($117&255);
           if ($135) {
            $$01$be$i10 = $133;
            break;
           }
           $136 = HEAP8[$133>>0]|0;
           $137 = ($136&255)<($117&255);
           if ($137) {
            $$01$be$i10 = $133;
            break;
           } else {
            $$0$i12$ph = $$$i7;
            break L55;
           }
          }
         }
         $138 = ($124<<24>>24)==($117<<24>>24);
         if ($138) {
          $$0$i12$ph = $$$i7;
          break L55;
         } else {
          $$01$be$i10 = $125;
         }
        }
       } while(0);
       $139 = (($$01$be$i10) + 1|0);
       $140 = ($139>>>0)<($118>>>0);
       if ($140) {
        $$012$i8 = $$01$be$i10;$125 = $139;
       } else {
        $$0$i12$ph = $121;
        break;
       }
      }
      $$0$i12 = $$0$i12$ph;
     } else {
      $$0$i12 = $121;
     }
     $141 = ($$0$i12|0)==(0);
     if (!($141)) {
      $$2$ph216 = 0;
      label = 167;
      break L7;
     }
     $142 = HEAP8[$$0$ph136>>0]|0;
     $143 = $142&255;
     $144 = HEAP8[$91>>0]|0;
     $145 = ($144<<24>>24)==(94);
     $$p$i = $145 ? $91 : $87;
     $146 = $145&1;
     $$$i4 = $146 ^ 1;
     $147 = (($$p$i) + 1|0);
     $148 = ($147>>>0)<($118>>>0);
     if ($148) {
      $$012$i = $$p$i;$150 = $147;
      L71: while(1) {
       $149 = HEAP8[$150>>0]|0;
       $151 = ($149<<24>>24)==(37);
       $152 = (($$012$i) + 2|0);
       $153 = HEAP8[$152>>0]|0;
       do {
        if ($151) {
         $154 = $153&255;
         $155 = (_match_class($143,$154)|0);
         $156 = ($155|0)==(0);
         if ($156) {
          $$01$be$i = $152;
         } else {
          $$0$i5$ph = $$$i4;
          break L71;
         }
        } else {
         $157 = ($153<<24>>24)==(45);
         if ($157) {
          $158 = (($$012$i) + 3|0);
          $159 = ($158>>>0)<($118>>>0);
          if ($159) {
           $160 = ($149&255)>($142&255);
           if ($160) {
            $$01$be$i = $158;
            break;
           }
           $161 = HEAP8[$158>>0]|0;
           $162 = ($161&255)<($142&255);
           if ($162) {
            $$01$be$i = $158;
            break;
           } else {
            $$0$i5$ph = $$$i4;
            break L71;
           }
          }
         }
         $163 = ($149<<24>>24)==($142<<24>>24);
         if ($163) {
          $$0$i5$ph = $$$i4;
          break L71;
         } else {
          $$01$be$i = $150;
         }
        }
       } while(0);
       $164 = (($$01$be$i) + 1|0);
       $165 = ($164>>>0)<($118>>>0);
       if ($165) {
        $$012$i = $$01$be$i;$150 = $164;
       } else {
        $$0$i5$ph = $146;
        break;
       }
      }
      $$0$i5 = $$0$i5$ph;
     } else {
      $$0$i5 = $146;
     }
     $166 = ($$0$i5|0)==(0);
     if ($166) {
      $$2$ph216 = 0;
      label = 167;
      break L7;
     } else {
      $$01$be = $$01$i18;
     }
    } else if ((($14|0) == 36)) {
     $55 = (($$01125) + 1|0);
     $56 = ($55|0)==($57|0);
     if ($56) {
      $$0$ph136$lcssa254 = $$0$ph136;
      label = 24;
      break L7;
     } else {
      $$01$i = $55;$$pre$phi208Z2D = $55;
      label = 95;
     }
    } else {
     $$pre207 = (($$01125) + 1|0);
     $cond = ($13<<24>>24)==(91);
     if ($cond) {
      $194 = HEAP8[$$pre207>>0]|0;
      $195 = ($194<<24>>24)==(94);
      $196 = (($$01125) + 2|0);
      $$$i = $195 ? $196 : $$pre207;
      $$0$i2 = $$$i;$198 = $57;
      while(1) {
       $197 = ($$0$i2|0)==($198|0);
       if ($197) {
        $199 = HEAP32[$8>>2]|0;
        (_luaL_error($199,9288,$vararg_buffer19)|0);
       }
       $200 = (($$0$i2) + 1|0);
       $201 = HEAP8[$$0$i2>>0]|0;
       $202 = ($201<<24>>24)==(37);
       if ($202) {
        $203 = HEAP32[$5>>2]|0;
        $204 = ($200>>>0)<($203>>>0);
        $205 = (($$0$i2) + 2|0);
        $$2$i = $204 ? $205 : $200;
        $$1$i = $$2$i;
       } else {
        $$1$i = $200;
       }
       $206 = HEAP8[$$1$i>>0]|0;
       $207 = ($206<<24>>24)==(93);
       if ($207) {
        $$1$i$lcssa = $$1$i;
        break;
       }
       $$pre = HEAP32[$5>>2]|0;
       $$0$i2 = $$1$i;$198 = $$pre;
      }
      $208 = (($$1$i$lcssa) + 1|0);
      $$01$i = $208;$$pre$phi208Z2D = $$pre207;
      label = 95;
     } else {
      $$01$i = $$pre207;$$pre$phi208Z2D = $$pre207;
      label = 95;
     }
    }
   } while(0);
   L85: do {
    if ((label|0) == 95) {
     label = 0;
     $ms$idx$val = HEAP32[$ms$idx>>2]|0;
     $209 = ($ms$idx$val>>>0)>($$0$ph136>>>0);
     do {
      if ($209) {
       $211 = HEAP8[$$0$ph136>>0]|0;
       $212 = $211&255;
       $213 = HEAP8[$$01125>>0]|0;
       $214 = $213 << 24 >> 24;
       if ((($214|0) == 46)) {
        $215 = HEAP8[$$01$i>>0]|0;
        $250 = $215;
       } else if ((($214|0) == 91)) {
        $219 = (($$01$i) + -1|0);
        $220 = HEAP8[$$pre$phi208Z2D>>0]|0;
        $221 = ($220<<24>>24)==(94);
        $$p$i33 = $221 ? $$pre$phi208Z2D : $$01125;
        $222 = $221&1;
        $$$i34 = $222 ^ 1;
        $223 = (($$p$i33) + 1|0);
        $224 = ($223>>>0)<($219>>>0);
        if ($224) {
         $$012$i35 = $$p$i33;$226 = $223;
         L95: while(1) {
          $225 = HEAP8[$226>>0]|0;
          $227 = ($225<<24>>24)==(37);
          $228 = (($$012$i35) + 2|0);
          $229 = HEAP8[$228>>0]|0;
          do {
           if ($227) {
            $230 = $229&255;
            $231 = (_match_class($212,$230)|0);
            $232 = ($231|0)==(0);
            if ($232) {
             $$01$be$i37 = $228;
            } else {
             $$0$i$ph = $$$i34;
             break L95;
            }
           } else {
            $233 = ($229<<24>>24)==(45);
            if ($233) {
             $234 = (($$012$i35) + 3|0);
             $235 = ($234>>>0)<($219>>>0);
             if ($235) {
              $236 = ($225&255)>($211&255);
              if ($236) {
               $$01$be$i37 = $234;
               break;
              }
              $237 = HEAP8[$234>>0]|0;
              $238 = ($237&255)<($211&255);
              if ($238) {
               $$01$be$i37 = $234;
               break;
              } else {
               $$0$i$ph = $$$i34;
               break L95;
              }
             }
            }
            $239 = ($225<<24>>24)==($211<<24>>24);
            if ($239) {
             $$0$i$ph = $$$i34;
             break L95;
            } else {
             $$01$be$i37 = $226;
            }
           }
          } while(0);
          $240 = (($$01$be$i37) + 1|0);
          $241 = ($240>>>0)<($219>>>0);
          if ($241) {
           $$012$i35 = $$01$be$i37;$226 = $240;
          } else {
           $$0$i$ph = $222;
           break;
          }
         }
         $$0$i = $$0$i$ph;
         label = 112;
        } else {
         $$0$i = $222;
         label = 112;
        }
       } else if ((($214|0) == 37)) {
        $216 = HEAP8[$$pre$phi208Z2D>>0]|0;
        $217 = $216&255;
        $218 = (_match_class($212,$217)|0);
        $$0$i = $218;
        label = 112;
       } else {
        $242 = ($213<<24>>24)==($211<<24>>24);
        $243 = $242&1;
        $$0$i = $243;
        label = 112;
       }
       if ((label|0) == 112) {
        label = 0;
        $244 = ($$0$i|0)==(0);
        $245 = HEAP8[$$01$i>>0]|0;
        if ($244) {
         $344 = $245;
         break;
        } else {
         $250 = $245;
        }
       }
       $249 = $250 << 24 >> 24;
       if ((($249|0) == 43)) {
        $$01$i$lcssa245 = $$01$i;$$01125$lcssa236 = $$01125;$$lcssa264 = $11;$$pre$phi208$lcssa241Z2D = $$pre$phi208Z2D;
        label = 121;
        break L7;
       } else if ((($249|0) == 45)) {
        $$0$ph136$lcssa257 = $$0$ph136;$$01$i$lcssa247 = $$01$i;$$01125$lcssa238 = $$01125;$$pre$phi208$lcssa243Z2D = $$pre$phi208Z2D;
        label = 117;
        break L7;
       } else if ((($249|0) == 42)) {
        $$0$ph136$lcssa256 = $$0$ph136;$$01$i$lcssa246 = $$01$i;$$01125$lcssa237 = $$01125;$$pre$phi208$lcssa242Z2D = $$pre$phi208Z2D;
        label = 120;
        break L7;
       } else if (!((($249|0) == 63))) {
        $$01$i$lcssa = $$01$i;
        label = 162;
        break L9;
       }
       $255 = (($$01$i) + 1|0);
       $256 = (_match($ms,$11,$255)|0);
       $257 = ($256|0)==(0|0);
       if ($257) {
        $$01$be = $255;
        break L85;
       } else {
        $$2$ph216 = $256;
        label = 167;
        break L7;
       }
      } else {
       $210 = HEAP8[$$01$i>>0]|0;
       $344 = $210;
      }
     } while(0);
     if (!((($344<<24>>24) == 45) | (($344<<24>>24) == 63) | (($344<<24>>24) == 42))) {
      $$2$ph216 = 0;
      label = 167;
      break L7;
     }
     $246 = (($$01$i) + 1|0);
     $$01$be = $246;
    }
   } while(0);
   $247 = HEAP32[$5>>2]|0;
   $248 = ($$01$be|0)==($247|0);
   if ($248) {
    $$2$ph216 = $$0$ph136;
    label = 167;
    break L7;
   } else {
    $$01125 = $$01$be;$57 = $247;
   }
  }
  if ((label|0) == 26) {
   label = 0;
   $64 = (($$01125$lcssa231) + 2|0);
   $65 = (($$lcssa222) + -1|0);
   $66 = ($65>>>0)>($64>>>0);
   if (!($66)) {
    $67 = HEAP32[$8>>2]|0;
    (_luaL_error($67,9320,$vararg_buffer7)|0);
   }
   $68 = HEAP8[$$0$ph136>>0]|0;
   $69 = HEAP8[$64>>0]|0;
   $70 = ($68<<24>>24)==($69<<24>>24);
   if (!($70)) {
    $$2$ph219 = 0;
    label = 168;
    break;
   }
   $71 = (($$01125$lcssa231) + 3|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = HEAP32[$ms$idx>>2]|0;
   $74 = ($11>>>0)<($73>>>0);
   if (!($74)) {
    $$2$ph219 = 0;
    label = 168;
    break;
   }
   $76 = $11;$81 = $$0$ph136;$cont$04$i = 1;
   while(1) {
    $75 = HEAP8[$76>>0]|0;
    $77 = ($75<<24>>24)==($72<<24>>24);
    if ($77) {
     $78 = (($cont$04$i) + -1)|0;
     $79 = ($78|0)==(0);
     if ($79) {
      $$lcssa = $81;
      break;
     } else {
      $cont$0$be$i = $78;
     }
    } else {
     $83 = ($75<<24>>24)==($68<<24>>24);
     $84 = $83&1;
     $$cont$0$i = (($84) + ($cont$04$i))|0;
     $cont$0$be$i = $$cont$0$i;
    }
    $80 = (($81) + 2|0);
    $82 = ($80>>>0)<($73>>>0);
    if ($82) {
     $81$phi = $76;$76 = $80;$cont$04$i = $cont$0$be$i;$81 = $81$phi;
    } else {
     label = 166;
     break L7;
    }
   }
   $85 = (($$lcssa) + 2|0);
   $86 = (($$01125$lcssa231) + 4|0);
   $$0$ph$be = $85;$$01$ph$be = $86;
  }
  else if ((label|0) == 75) {
   label = 0;
   $167 = $$lcssa240&255;
   $168 = (($167) + -49)|0;
   $169 = ($168|0)<(0);
   if ($169) {
    label = 78;
   } else {
    $170 = HEAP32[$10>>2]|0;
    $171 = ($168|0)<($170|0);
    if ($171) {
     $172 = ((($ms) + ($168<<3)|0) + 28|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(-1);
     if ($174) {
      label = 78;
     } else {
      $$0$i$i = $168;$183 = $173;
     }
    } else {
     label = 78;
    }
   }
   if ((label|0) == 78) {
    label = 0;
    $175 = HEAP32[$8>>2]|0;
    $176 = (($167) + -48)|0;
    HEAP32[$vararg_buffer15>>2] = $176;
    $177 = (_luaL_error($175,9128,$vararg_buffer15)|0);
    $$phi$trans$insert$i = ((($ms) + ($177<<3)|0) + 28|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $$0$i$i = $177;$183 = $$pre$i;
   }
   $178 = HEAP32[$ms$idx>>2]|0;
   $179 = $178;
   $180 = $$0$ph136;
   $181 = (($179) - ($180))|0;
   $182 = ($181>>>0)<($183>>>0);
   if ($182) {
    $$2$ph219 = 0;
    label = 168;
    break;
   }
   $184 = ((($ms) + ($$0$i$i<<3)|0) + 24|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (_memcmp($185,$$0$ph136,$183)|0);
   $187 = ($186|0)==(0);
   if (!($187)) {
    $$2$ph219 = 0;
    label = 168;
    break;
   }
   $188 = (($$0$ph136) + ($183)|0);
   $189 = ($188|0)==(0|0);
   if ($189) {
    $$2$ph219 = 0;
    label = 168;
    break;
   }
   $190 = (($$01125$lcssa232) + 2|0);
   $$0$ph$be = $188;$$01$ph$be = $190;
  }
  else if ((label|0) == 162) {
   label = 0;
   $$0$ph$be = $11;$$01$ph$be = $$01$i$lcssa;
  }
  $339 = HEAP32[$5>>2]|0;
  $340 = ($$01$ph$be|0)==($339|0);
  if ($340) {
   $$2$ph219 = $$0$ph$be;
   label = 168;
   break;
  } else {
   $$0$ph136 = $$0$ph$be;$$01$ph135 = $$01$ph$be;$343 = $339;
  }
 }
 if ((label|0) == 7) {
  $15 = (($$01125$lcssa) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(41);
  if ($17) {
   $18 = (($$01125$lcssa) + 2|0);
   $19 = HEAP32[$10>>2]|0;
   $20 = ($19|0)>(31);
   if ($20) {
    $21 = HEAP32[$8>>2]|0;
    (_luaL_error($21,9104,$vararg_buffer1)|0);
   }
   $22 = ((($ms) + ($19<<3)|0) + 24|0);
   HEAP32[$22>>2] = $$0$ph136$lcssa;
   $23 = ((($ms) + ($19<<3)|0) + 28|0);
   HEAP32[$23>>2] = -2;
   $24 = (($19) + 1)|0;
   HEAP32[$10>>2] = $24;
   $25 = (_match($ms,$$0$ph136$lcssa,$18)|0);
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $$2 = $25;
    $341 = HEAP32[$ms>>2]|0;
    $342 = (($341) + 1)|0;
    HEAP32[$ms>>2] = $342;
    STACKTOP = sp;return ($$2|0);
   }
   $27 = HEAP32[$10>>2]|0;
   $28 = (($27) + -1)|0;
   HEAP32[$10>>2] = $28;
   $$2 = 0;
   $341 = HEAP32[$ms>>2]|0;
   $342 = (($341) + 1)|0;
   HEAP32[$ms>>2] = $342;
   STACKTOP = sp;return ($$2|0);
  } else {
   $29 = HEAP32[$10>>2]|0;
   $30 = ($29|0)>(31);
   if ($30) {
    $31 = HEAP32[$8>>2]|0;
    (_luaL_error($31,9104,$vararg_buffer3)|0);
   }
   $32 = ((($ms) + ($29<<3)|0) + 24|0);
   HEAP32[$32>>2] = $$0$ph136$lcssa;
   $33 = ((($ms) + ($29<<3)|0) + 28|0);
   HEAP32[$33>>2] = -1;
   $34 = (($29) + 1)|0;
   HEAP32[$10>>2] = $34;
   $35 = (_match($ms,$$0$ph136$lcssa,$15)|0);
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    $$2 = $35;
    $341 = HEAP32[$ms>>2]|0;
    $342 = (($341) + 1)|0;
    HEAP32[$ms>>2] = $342;
    STACKTOP = sp;return ($$2|0);
   }
   $37 = HEAP32[$10>>2]|0;
   $38 = (($37) + -1)|0;
   HEAP32[$10>>2] = $38;
   $$2 = 0;
   $341 = HEAP32[$ms>>2]|0;
   $342 = (($341) + 1)|0;
   HEAP32[$ms>>2] = $342;
   STACKTOP = sp;return ($$2|0);
  }
 }
 else if ((label|0) == 16) {
  $39 = (($$01125$lcssa230) + 1|0);
  $40 = HEAP32[$10>>2]|0;
  $level$0$in$i$i = $40;
  while(1) {
   $level$0$i$i = (($level$0$in$i$i) + -1)|0;
   $41 = ($level$0$in$i$i|0)>(0);
   if (!($41)) {
    label = 19;
    break;
   }
   $42 = ((($ms) + ($level$0$i$i<<3)|0) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(-1);
   if ($44) {
    $level$0$i$i$lcssa220 = $level$0$i$i;
    label = 20;
    break;
   } else {
    $level$0$in$i$i = $level$0$i$i;
   }
  }
  if ((label|0) == 19) {
   $45 = HEAP32[$8>>2]|0;
   $46 = (_luaL_error($45,9368,$vararg_buffer5)|0);
   $$0$i$i23 = $46;
  }
  else if ((label|0) == 20) {
   $$0$i$i23 = $level$0$i$i$lcssa220;
  }
  $47 = ((($ms) + ($$0$i$i23<<3)|0) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $$0$ph136$lcssa250;
  $50 = $48;
  $51 = (($49) - ($50))|0;
  $52 = ((($ms) + ($$0$i$i23<<3)|0) + 28|0);
  HEAP32[$52>>2] = $51;
  $53 = (_match($ms,$$0$ph136$lcssa250,$39)|0);
  $54 = ($53|0)==(0|0);
  if (!($54)) {
   $$2 = $53;
   $341 = HEAP32[$ms>>2]|0;
   $342 = (($341) + 1)|0;
   HEAP32[$ms>>2] = $342;
   STACKTOP = sp;return ($$2|0);
  }
  HEAP32[$52>>2] = -1;
  $$2 = 0;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 24) {
  $58 = HEAP32[$ms$idx>>2]|0;
  $59 = ($$0$ph136$lcssa254|0)==($58|0);
  $60 = $59 ? $$0$ph136$lcssa254 : 0;
  $$2 = $60;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 117) {
  $251 = (($$01$i$lcssa247) + 1|0);
  $252 = (_match($ms,$$0$ph136$lcssa257,$251)|0);
  $253 = ($252|0)==(0|0);
  if (!($253)) {
   $$2 = $252;
   $341 = HEAP32[$ms>>2]|0;
   $342 = (($341) + 1)|0;
   HEAP32[$ms>>2] = $342;
   STACKTOP = sp;return ($$2|0);
  }
  $254 = (($$01$i$lcssa247) + -1|0);
  $$01$i27119 = $$0$ph136$lcssa257;
  while(1) {
   $ms$idx$val$i29 = HEAP32[$ms$idx>>2]|0;
   $303 = ($ms$idx$val$i29>>>0)>($$01$i27119>>>0);
   if (!($303)) {
    $$2$ph213 = 0;
    break;
   }
   $304 = HEAP8[$$01$i27119>>0]|0;
   $305 = $304&255;
   $306 = HEAP8[$$01125$lcssa238>>0]|0;
   $307 = $306 << 24 >> 24;
   if ((($307|0) == 91)) {
    $311 = HEAP8[$$pre$phi208$lcssa243Z2D>>0]|0;
    $312 = ($311<<24>>24)==(94);
    $$p$i49 = $312 ? $$pre$phi208$lcssa243Z2D : $$01125$lcssa238;
    $313 = $312&1;
    $$$i50 = $313 ^ 1;
    $314 = (($$p$i49) + 1|0);
    $315 = ($314>>>0)<($254>>>0);
    if ($315) {
     $$012$i51 = $$p$i49;$317 = $314;
     L153: while(1) {
      $316 = HEAP8[$317>>0]|0;
      $318 = ($316<<24>>24)==(37);
      $319 = (($$012$i51) + 2|0);
      $320 = HEAP8[$319>>0]|0;
      do {
       if ($318) {
        $321 = $320&255;
        $322 = (_match_class($305,$321)|0);
        $323 = ($322|0)==(0);
        if ($323) {
         $$01$be$i53 = $319;
        } else {
         $$0$i$i30$ph = $$$i50;
         break L153;
        }
       } else {
        $324 = ($320<<24>>24)==(45);
        if ($324) {
         $325 = (($$012$i51) + 3|0);
         $326 = ($325>>>0)<($254>>>0);
         if ($326) {
          $327 = ($316&255)>($304&255);
          if ($327) {
           $$01$be$i53 = $325;
           break;
          }
          $328 = HEAP8[$325>>0]|0;
          $329 = ($328&255)<($304&255);
          if ($329) {
           $$01$be$i53 = $325;
           break;
          } else {
           $$0$i$i30$ph = $$$i50;
           break L153;
          }
         }
        }
        $330 = ($316<<24>>24)==($304<<24>>24);
        if ($330) {
         $$0$i$i30$ph = $$$i50;
         break L153;
        } else {
         $$01$be$i53 = $317;
        }
       }
      } while(0);
      $331 = (($$01$be$i53) + 1|0);
      $332 = ($331>>>0)<($254>>>0);
      if ($332) {
       $$012$i51 = $$01$be$i53;$317 = $331;
      } else {
       $$0$i$i30$ph = $313;
       break;
      }
     }
     $$0$i$i30 = $$0$i$i30$ph;
     label = 160;
    } else {
     $$0$i$i30 = $313;
     label = 160;
    }
   } else if ((($307|0) == 37)) {
    $308 = HEAP8[$$pre$phi208$lcssa243Z2D>>0]|0;
    $309 = $308&255;
    $310 = (_match_class($305,$309)|0);
    $$0$i$i30 = $310;
    label = 160;
   } else if (!((($307|0) == 46))) {
    $333 = ($306<<24>>24)==($304<<24>>24);
    $334 = $333&1;
    $$0$i$i30 = $334;
    label = 160;
   }
   if ((label|0) == 160) {
    label = 0;
    $335 = ($$0$i$i30|0)==(0);
    if ($335) {
     $$2$ph213 = 0;
     break;
    }
   }
   $336 = (($$01$i27119) + 1|0);
   $337 = (_match($ms,$336,$251)|0);
   $338 = ($337|0)==(0|0);
   if ($338) {
    $$01$i27119 = $336;
   } else {
    $$2$ph213 = $337;
    break;
   }
  }
  $$2 = $$2$ph213;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 120) {
  $$01$i248 = $$01$i$lcssa246;$$01125239 = $$01125$lcssa237;$$1 = $$0$ph136$lcssa256;$$pre$phi208244Z2D = $$pre$phi208$lcssa242Z2D;
 }
 else if ((label|0) == 121) {
  $$01$i248 = $$01$i$lcssa245;$$01125239 = $$01125$lcssa236;$$1 = $$lcssa264;$$pre$phi208244Z2D = $$pre$phi208$lcssa241Z2D;
 }
 else if ((label|0) == 166) {
  $$2 = 0;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 167) {
  $$2 = $$2$ph216;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 168) {
  $$2 = $$2$ph219;
  $341 = HEAP32[$ms>>2]|0;
  $342 = (($341) + 1)|0;
  HEAP32[$ms>>2] = $342;
  STACKTOP = sp;return ($$2|0);
 }
 $ms$idx$val$i111 = HEAP32[$ms$idx>>2]|0;
 $258 = ($ms$idx$val$i111>>>0)>($$1>>>0);
 if ($258) {
  $259 = (($$01$i248) + -1|0);
  $263 = $$1;$i$0$i112 = 0;$ms$idx$val$i203 = $ms$idx$val$i111;
  while(1) {
   $262 = HEAP8[$263>>0]|0;
   $264 = $262&255;
   $265 = HEAP8[$$01125239>>0]|0;
   $266 = $265 << 24 >> 24;
   if ((($266|0) == 46)) {
    $ms$idx$val$i = $ms$idx$val$i203;
   } else if ((($266|0) == 37)) {
    $267 = HEAP8[$$pre$phi208244Z2D>>0]|0;
    $268 = $267&255;
    $269 = (_match_class($264,$268)|0);
    $$0$i$i25 = $269;
    label = 140;
   } else if ((($266|0) == 91)) {
    $270 = HEAP8[$$pre$phi208244Z2D>>0]|0;
    $271 = ($270<<24>>24)==(94);
    $$p$i41 = $271 ? $$pre$phi208244Z2D : $$01125239;
    $272 = $271&1;
    $$$i42 = $272 ^ 1;
    $273 = (($$p$i41) + 1|0);
    $274 = ($273>>>0)<($259>>>0);
    if ($274) {
     $$012$i43 = $$p$i41;$276 = $273;
     L221: while(1) {
      $275 = HEAP8[$276>>0]|0;
      $277 = ($275<<24>>24)==(37);
      $278 = (($$012$i43) + 2|0);
      $279 = HEAP8[$278>>0]|0;
      do {
       if ($277) {
        $280 = $279&255;
        $281 = (_match_class($264,$280)|0);
        $282 = ($281|0)==(0);
        if ($282) {
         $$01$be$i45 = $278;
        } else {
         $$0$i$i25$ph = $$$i42;
         break L221;
        }
       } else {
        $283 = ($279<<24>>24)==(45);
        if ($283) {
         $284 = (($$012$i43) + 3|0);
         $285 = ($284>>>0)<($259>>>0);
         if ($285) {
          $286 = ($275&255)>($262&255);
          if ($286) {
           $$01$be$i45 = $284;
           break;
          }
          $287 = HEAP8[$284>>0]|0;
          $288 = ($287&255)<($262&255);
          if ($288) {
           $$01$be$i45 = $284;
           break;
          } else {
           $$0$i$i25$ph = $$$i42;
           break L221;
          }
         }
        }
        $289 = ($275<<24>>24)==($262<<24>>24);
        if ($289) {
         $$0$i$i25$ph = $$$i42;
         break L221;
        } else {
         $$01$be$i45 = $276;
        }
       }
      } while(0);
      $290 = (($$01$be$i45) + 1|0);
      $291 = ($290>>>0)<($259>>>0);
      if ($291) {
       $$012$i43 = $$01$be$i45;$276 = $290;
      } else {
       $$0$i$i25$ph = $272;
       break;
      }
     }
     $$0$i$i25 = $$0$i$i25$ph;
     label = 140;
    } else {
     $$0$i$i25 = $272;
     label = 140;
    }
   } else {
    $292 = ($265<<24>>24)==($262<<24>>24);
    $293 = $292&1;
    $$0$i$i25 = $293;
    label = 140;
   }
   if ((label|0) == 140) {
    label = 0;
    $294 = ($$0$i$i25|0)==(0);
    if ($294) {
     $i$0$i$lcssa = $i$0$i112;
     break;
    }
    $ms$idx$val$i$pre = HEAP32[$ms$idx>>2]|0;
    $ms$idx$val$i = $ms$idx$val$i$pre;
   }
   $295 = (($i$0$i112) + 1)|0;
   $296 = (($$1) + ($295)|0);
   $297 = ($ms$idx$val$i>>>0)>($296>>>0);
   if ($297) {
    $263 = $296;$i$0$i112 = $295;$ms$idx$val$i203 = $ms$idx$val$i;
   } else {
    $i$0$i$lcssa = $295;
    break;
   }
  }
  $260 = ($i$0$i$lcssa|0)>(-1);
  if ($260) {
   $i$0$i$lcssa211 = $i$0$i$lcssa;
  } else {
   $$2 = 0;
   $341 = HEAP32[$ms>>2]|0;
   $342 = (($341) + 1)|0;
   HEAP32[$ms>>2] = $342;
   STACKTOP = sp;return ($$2|0);
  }
 } else {
  $i$0$i$lcssa211 = 0;
 }
 $261 = (($$01$i248) + 1|0);
 $i$1$i109 = $i$0$i$lcssa211;
 while(1) {
  $300 = (($$1) + ($i$1$i109)|0);
  $301 = (_match($ms,$300,$261)|0);
  $302 = ($301|0)==(0|0);
  if (!($302)) {
   $$2$ph = $301;
   break;
  }
  $298 = (($i$1$i109) + -1)|0;
  $299 = ($i$1$i109|0)>(0);
  if ($299) {
   $i$1$i109 = $298;
  } else {
   $$2$ph = 0;
   break;
  }
 }
 $$2 = $$2$ph;
 $341 = HEAP32[$ms>>2]|0;
 $342 = (($341) + 1)|0;
 HEAP32[$ms>>2] = $342;
 STACKTOP = sp;return ($$2|0);
}
function _push_onecapture($ms,$i,$s,$e) {
 $ms = $ms|0;
 $i = $i|0;
 $s = $s|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($ms) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($i|0);
 if (!($2)) {
  $3 = ($i|0)==(0);
  $4 = (($ms) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  if ($3) {
   $6 = $e;
   $7 = $s;
   $8 = (($6) - ($7))|0;
   (_lua_pushlstring($5,$s,$8)|0);
   STACKTOP = sp;return;
  } else {
   $9 = (($i) + 1)|0;
   HEAP32[$vararg_buffer>>2] = $9;
   (_luaL_error($5,9128,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
 }
 $10 = ((($ms) + ($i<<3)|0) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(-1);
 if ($12) {
  $13 = (($ms) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  (_luaL_error($14,9160,$vararg_buffer1)|0);
  $15 = HEAP32[$13>>2]|0;
  $16 = ((($ms) + ($i<<3)|0) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $31 = $15;$32 = $17;
 } else {
  $18 = ($11|0)==(-2);
  $19 = (($ms) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($ms) + ($i<<3)|0) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  if ($18) {
   $23 = (($ms) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $22;
   $26 = $24;
   $27 = (($25) + 1)|0;
   $28 = (($27) - ($26))|0;
   $29 = ($28|0)<(0);
   $30 = $29 << 31 >> 31;
   _lua_pushinteger($20,$28,$30);
   STACKTOP = sp;return;
  } else {
   $31 = $20;$32 = $22;
  }
 }
 (_lua_pushlstring($31,$32,$11)|0);
 STACKTOP = sp;return;
}
function _getdetails($h,$totalsize,$fmt,$psize,$ntoalign) {
 $h = $h|0;
 $totalsize = $totalsize|0;
 $fmt = $fmt|0;
 $psize = $psize|0;
 $ntoalign = $ntoalign|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $or$cond = 0, $or$cond3 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $align = sp;
 $0 = (_getoption($h,$fmt,$psize)|0);
 $1 = HEAP32[$psize>>2]|0;
 HEAP32[$align>>2] = $1;
 $2 = ($0|0)==(7);
 do {
  if ($2) {
   $3 = HEAP32[$fmt>>2]|0;
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $25 = $1;
   } else {
    $6 = (_getoption($h,$fmt,$align)|0);
    $7 = ($6|0)==(3);
    $8 = HEAP32[$align>>2]|0;
    $9 = ($8|0)==(0);
    $or$cond = $7 | $9;
    if ($or$cond) {
     $25 = $8;
    } else {
     $11 = $8;
     break;
    }
   }
   $10 = HEAP32[$h>>2]|0;
   (_luaL_argerror($10,1,8688)|0);
   $11 = $25;
  } else {
   $11 = $1;
  }
 } while(0);
 $12 = ($11|0)<(2);
 $13 = ($0|0)==(3);
 $or$cond3 = $12 | $13;
 if ($or$cond3) {
  $storemerge = 0;
  HEAP32[$ntoalign>>2] = $storemerge;
  STACKTOP = sp;return ($0|0);
 }
 $14 = (($h) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($11|0)>($15|0);
 if ($16) {
  HEAP32[$align>>2] = $15;
  $18 = $15;
 } else {
  $18 = $11;
 }
 $17 = (($18) + -1)|0;
 $19 = $17 & $18;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = HEAP32[$h>>2]|0;
  (_luaL_argerror($21,1,8728)|0);
 }
 $22 = $17 & $totalsize;
 $23 = (($18) - ($22))|0;
 $24 = $23 & $17;
 $storemerge = $24;
 HEAP32[$ntoalign>>2] = $storemerge;
 STACKTOP = sp;return ($0|0);
}
function _unpackint($L,$str,$islittle,$size,$issigned) {
 $L = $L|0;
 $str = $str|0;
 $islittle = $islittle|0;
 $size = $size|0;
 $issigned = $issigned|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$us = 0, $i$02 = 0, $i$04 = 0, $i$04$us = 0, $i$11 = 0, $i$11$us = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($size|0)>(8);
 $1 = $0 ? 8 : $size;
 $i$02 = (($1) + -1)|0;
 $2 = ($1|0)>(0);
 do {
  if ($2) {
   $3 = ($islittle|0)==(0);
   $4 = (($size) + -1)|0;
   if ($3) {
    $5 = 0;$6 = 0;$i$04$us = $i$02;
    while(1) {
     $7 = (_bitshift64Shl(($5|0),($6|0),8)|0);
     $8 = tempRet0;
     $9 = (($4) - ($i$04$us))|0;
     $$phi$trans$insert = (($str) + ($9)|0);
     $$pre = HEAP8[$$phi$trans$insert>>0]|0;
     $10 = $$pre&255;
     $11 = $10 | $7;
     $i$0$us = (($i$04$us) + -1)|0;
     $12 = ($i$04$us|0)>(0);
     if ($12) {
      $5 = $11;$6 = $8;$i$04$us = $i$0$us;
     } else {
      $56 = $11;$57 = $8;
      break;
     }
    }
    $29 = $56;$31 = $57;
    break;
   } else {
    $13 = 0;$14 = 0;$i$04 = $i$02;
    while(1) {
     $15 = (_bitshift64Shl(($13|0),($14|0),8)|0);
     $16 = tempRet0;
     $17 = (($str) + ($i$04)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18&255;
     $20 = $19 | $15;
     $i$0 = (($i$04) + -1)|0;
     $21 = ($i$04|0)>(0);
     if ($21) {
      $13 = $20;$14 = $16;$i$04 = $i$0;
     } else {
      $58 = $20;$59 = $16;
      break;
     }
    }
    $29 = $58;$31 = $59;
    break;
   }
  } else {
   $29 = 0;$31 = 0;
  }
 } while(0);
 $22 = ($size|0)<(8);
 if ($22) {
  $23 = ($issigned|0)==(0);
  if ($23) {
   $54 = $31;$55 = $29;
   tempRet0 = $54;
   STACKTOP = sp;return ($55|0);
  }
  $24 = $size << 3;
  $25 = (($24) + -1)|0;
  $26 = (_bitshift64Shl(1,0,($25|0))|0);
  $27 = tempRet0;
  $28 = $29 ^ $26;
  $30 = $31 ^ $27;
  $32 = (_i64Subtract(($28|0),($30|0),($26|0),($27|0))|0);
  $33 = tempRet0;
  $54 = $33;$55 = $32;
  tempRet0 = $54;
  STACKTOP = sp;return ($55|0);
 }
 if (!($0)) {
  $54 = $31;$55 = $29;
  tempRet0 = $54;
  STACKTOP = sp;return ($55|0);
 }
 $34 = ($issigned|0)==(0);
 if ($34) {
  $45 = 0;
 } else {
  $35 = ($31|0)>(-1);
  $36 = ($29>>>0)>(4294967295);
  $37 = ($31|0)==(-1);
  $38 = $37 & $36;
  $39 = $35 | $38;
  $phitmp = $39 ? 0 : 255;
  $45 = $phitmp;
 }
 $40 = ($islittle|0)==(0);
 $41 = (($size) + -1)|0;
 if ($40) {
  $i$11$us = $1;
  while(1) {
   $42 = (($41) - ($i$11$us))|0;
   $$phi$trans$insert10 = (($str) + ($42)|0);
   $$pre11 = HEAP8[$$phi$trans$insert10>>0]|0;
   $43 = $$pre11&255;
   $44 = ($43|0)==($45|0);
   if (!($44)) {
    HEAP32[$vararg_buffer>>2] = $size;
    (_luaL_error($L,8640,$vararg_buffer)|0);
   }
   $46 = (($i$11$us) + 1)|0;
   $47 = ($46|0)<($size|0);
   if ($47) {
    $i$11$us = $46;
   } else {
    break;
   }
  }
  $54 = $31;$55 = $29;
  tempRet0 = $54;
  STACKTOP = sp;return ($55|0);
 } else {
  $i$11 = $1;
  while(1) {
   $48 = (($str) + ($i$11)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==($45|0);
   if (!($51)) {
    HEAP32[$vararg_buffer1>>2] = $size;
    (_luaL_error($L,8640,$vararg_buffer1)|0);
   }
   $52 = (($i$11) + 1)|0;
   $53 = ($52|0)<($size|0);
   if ($53) {
    $i$11 = $52;
   } else {
    break;
   }
  }
  $54 = $31;$55 = $29;
  tempRet0 = $54;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _match_class($c,$cl) {
 $c = $c|0;
 $cl = $cl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $isdigit = 0, $isdigittmp = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tolower($cl)|0);
 do {
  switch ($0|0) {
  case 97:  {
   $1 = (_isalpha($c)|0);
   $res$0 = $1;
   break;
  }
  case 103:  {
   $4 = (_isgraph($c)|0);
   $res$0 = $4;
   break;
  }
  case 100:  {
   $isdigittmp = (($c) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $3 = $isdigit&1;
   $res$0 = $3;
   break;
  }
  case 99:  {
   $2 = (_iscntrl($c)|0);
   $res$0 = $2;
   break;
  }
  case 117:  {
   $8 = (_isupper($c)|0);
   $res$0 = $8;
   break;
  }
  case 120:  {
   $10 = (_isxdigit($c)|0);
   $res$0 = $10;
   break;
  }
  case 122:  {
   $11 = ($c|0)==(0);
   $12 = $11&1;
   $res$0 = $12;
   break;
  }
  case 112:  {
   $6 = (_ispunct($c)|0);
   $res$0 = $6;
   break;
  }
  case 108:  {
   $5 = (_islower($c)|0);
   $res$0 = $5;
   break;
  }
  case 115:  {
   $7 = (_isspace($c)|0);
   $res$0 = $7;
   break;
  }
  case 119:  {
   $9 = (_isalnum($c)|0);
   $res$0 = $9;
   break;
  }
  default: {
   $13 = ($cl|0)==($c|0);
   $14 = $13&1;
   $$0 = $14;
   return ($$0|0);
  }
  }
 } while(0);
 $15 = (_islower($cl)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $res$0;
  return ($$0|0);
 }
 $17 = ($res$0|0)==(0);
 $18 = $17&1;
 $$0 = $18;
 return ($$0|0);
}
function _getoption($h,$fmt,$size) {
 $h = $h|0;
 $fmt = $fmt|0;
 $size = $size|0;
 var $$0 = 0, $$0$i$i1533 = 0, $$0$i$i2435 = 0, $$0$i$i29 = 0, $$0$i$i631 = 0, $$lcssa = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$off$i = 0, $$off$i16 = 0, $$off$i25 = 0, $$off$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $26$phi = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $43$phi = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $60$phi = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $80$phi = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $9$phi = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $a$0$i = 0, $a$0$i$i = 0, $a$0$i$i11 = 0, $a$0$i$i2 = 0, $a$0$i$i20 = 0, $c$off$i$i = 0, $c$off$i$i$i = 0;
 var $c$off$i$i$i1 = 0, $c$off$i$i$i10 = 0, $c$off$i$i$i19 = 0, $c$off$i2$i = 0, $c$off$i2$i$i = 0, $c$off$i2$i$i12 = 0, $c$off$i2$i$i21 = 0, $c$off$i2$i$i3 = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i13 = 0, $or$cond$i$i22 = 0, $or$cond$i$i4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $0 = HEAP32[$fmt>>2]|0;
 $1 = (($0) + 1|0);
 HEAP32[$fmt>>2] = $1;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2 << 24 >> 24;
 HEAP32[$size>>2] = 0;
 do {
  switch ($3|0) {
  case 110:  {
   HEAP32[$size>>2] = 8;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 102:  {
   HEAP32[$size>>2] = 4;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 100:  {
   HEAP32[$size>>2] = 8;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 105:  {
   $4 = HEAP8[$1>>0]|0;
   $5 = $4 << 24 >> 24;
   $c$off$i$i$i = (($5) + -48)|0;
   $6 = ($c$off$i$i$i>>>0)<(10);
   if ($6) {
    $11 = $1;$9 = $0;$a$0$i$i = 0;
    while(1) {
     $7 = ($a$0$i$i*10)|0;
     $8 = (($9) + 2|0);
     HEAP32[$fmt>>2] = $8;
     $10 = HEAP8[$11>>0]|0;
     $12 = $10 << 24 >> 24;
     $13 = (($7) + -48)|0;
     $14 = (($13) + ($12))|0;
     $15 = HEAP8[$8>>0]|0;
     $16 = $15 << 24 >> 24;
     $c$off$i2$i$i = (($16) + -48)|0;
     $17 = ($c$off$i2$i$i>>>0)<(10);
     $18 = ($14|0)<(214748364);
     $or$cond$i$i = $17 & $18;
     if ($or$cond$i$i) {
      $9$phi = $11;$11 = $8;$a$0$i$i = $14;$9 = $9$phi;
     } else {
      $$lcssa = $14;
      break;
     }
    }
    $$off$i = (($$lcssa) + -1)|0;
    $19 = ($$off$i>>>0)>(15);
    if ($19) {
     $20 = HEAP32[$h>>2]|0;
     HEAP32[$vararg_buffer>>2] = $$lcssa;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = 16;
     (_luaL_error($20,8848,$vararg_buffer)|0);
     $$0$i$i29 = $$lcssa;
    } else {
     $$0$i$i29 = $$lcssa;
    }
   } else {
    $$0$i$i29 = 4;
   }
   HEAP32[$size>>2] = $$0$i$i29;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 73:  {
   $21 = HEAP8[$1>>0]|0;
   $22 = $21 << 24 >> 24;
   $c$off$i$i$i1 = (($22) + -48)|0;
   $23 = ($c$off$i$i$i1>>>0)<(10);
   if ($23) {
    $26 = $0;$28 = $1;$a$0$i$i2 = 0;
    while(1) {
     $24 = ($a$0$i$i2*10)|0;
     $25 = (($26) + 2|0);
     HEAP32[$fmt>>2] = $25;
     $27 = HEAP8[$28>>0]|0;
     $29 = $27 << 24 >> 24;
     $30 = (($24) + -48)|0;
     $31 = (($30) + ($29))|0;
     $32 = HEAP8[$25>>0]|0;
     $33 = $32 << 24 >> 24;
     $c$off$i2$i$i3 = (($33) + -48)|0;
     $34 = ($c$off$i2$i$i3>>>0)<(10);
     $35 = ($31|0)<(214748364);
     $or$cond$i$i4 = $34 & $35;
     if ($or$cond$i$i4) {
      $26$phi = $28;$28 = $25;$a$0$i$i2 = $31;$26 = $26$phi;
     } else {
      $$lcssa44 = $31;
      break;
     }
    }
    $$off$i7 = (($$lcssa44) + -1)|0;
    $36 = ($$off$i7>>>0)>(15);
    if ($36) {
     $37 = HEAP32[$h>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $$lcssa44;
     $vararg_ptr5 = (($vararg_buffer2) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 16;
     (_luaL_error($37,8848,$vararg_buffer2)|0);
     $$0$i$i631 = $$lcssa44;
    } else {
     $$0$i$i631 = $$lcssa44;
    }
   } else {
    $$0$i$i631 = 4;
   }
   HEAP32[$size>>2] = $$0$i$i631;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 115:  {
   $38 = HEAP8[$1>>0]|0;
   $39 = $38 << 24 >> 24;
   $c$off$i$i$i10 = (($39) + -48)|0;
   $40 = ($c$off$i$i$i10>>>0)<(10);
   if ($40) {
    $43 = $0;$45 = $1;$a$0$i$i11 = 0;
    while(1) {
     $41 = ($a$0$i$i11*10)|0;
     $42 = (($43) + 2|0);
     HEAP32[$fmt>>2] = $42;
     $44 = HEAP8[$45>>0]|0;
     $46 = $44 << 24 >> 24;
     $47 = (($41) + -48)|0;
     $48 = (($47) + ($46))|0;
     $49 = HEAP8[$42>>0]|0;
     $50 = $49 << 24 >> 24;
     $c$off$i2$i$i12 = (($50) + -48)|0;
     $51 = ($c$off$i2$i$i12>>>0)<(10);
     $52 = ($48|0)<(214748364);
     $or$cond$i$i13 = $51 & $52;
     if ($or$cond$i$i13) {
      $43$phi = $45;$45 = $42;$a$0$i$i11 = $48;$43 = $43$phi;
     } else {
      $$lcssa45 = $48;
      break;
     }
    }
    $$off$i16 = (($$lcssa45) + -1)|0;
    $53 = ($$off$i16>>>0)>(15);
    if ($53) {
     $54 = HEAP32[$h>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $$lcssa45;
     $vararg_ptr9 = (($vararg_buffer6) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 16;
     (_luaL_error($54,8848,$vararg_buffer6)|0);
     $$0$i$i1533 = $$lcssa45;
    } else {
     $$0$i$i1533 = $$lcssa45;
    }
   } else {
    $$0$i$i1533 = 4;
   }
   HEAP32[$size>>2] = $$0$i$i1533;
   $$0 = 4;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 99:  {
   $55 = HEAP8[$1>>0]|0;
   $56 = $55 << 24 >> 24;
   $c$off$i$i = (($56) + -48)|0;
   $57 = ($c$off$i$i>>>0)<(10);
   if ($57) {
    $60 = $0;$62 = $1;$a$0$i = 0;
    while(1) {
     $58 = ($a$0$i*10)|0;
     $59 = (($60) + 2|0);
     HEAP32[$fmt>>2] = $59;
     $61 = HEAP8[$62>>0]|0;
     $63 = $61 << 24 >> 24;
     $64 = (($58) + -48)|0;
     $65 = (($64) + ($63))|0;
     $66 = HEAP8[$59>>0]|0;
     $67 = $66 << 24 >> 24;
     $c$off$i2$i = (($67) + -48)|0;
     $68 = ($c$off$i2$i>>>0)<(10);
     $69 = ($65|0)<(214748364);
     $or$cond$i = $68 & $69;
     if ($or$cond$i) {
      $60$phi = $62;$62 = $59;$a$0$i = $65;$60 = $60$phi;
     } else {
      $$lcssa46 = $65;
      break;
     }
    }
    HEAP32[$size>>2] = $$lcssa46;
    $70 = ($$lcssa46|0)==(-1);
    if (!($70)) {
     $$0 = 3;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    HEAP32[$size>>2] = -1;
   }
   $71 = HEAP32[$h>>2]|0;
   (_luaL_error($71,8776,$vararg_buffer10)|0);
   $$0 = 3;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 108:  {
   HEAP32[$size>>2] = 4;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 66:  {
   HEAP32[$size>>2] = 1;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 74:  {
   HEAP32[$size>>2] = 8;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 72:  {
   HEAP32[$size>>2] = 2;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 76:  {
   HEAP32[$size>>2] = 4;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 104:  {
   HEAP32[$size>>2] = 2;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 106:  {
   HEAP32[$size>>2] = 8;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 84:  {
   HEAP32[$size>>2] = 4;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 98:  {
   HEAP32[$size>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 120:  {
   HEAP32[$size>>2] = 1;
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 60:  {
   $72 = (($h) + 4|0);
   HEAP32[$72>>2] = 1;
   break;
  }
  case 122:  {
   $$0 = 5;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 32:  {
   break;
  }
  case 61:  {
   $74 = (($h) + 4|0);
   HEAP32[$74>>2] = 1;
   break;
  }
  case 88:  {
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 62:  {
   $73 = (($h) + 4|0);
   HEAP32[$73>>2] = 0;
   break;
  }
  case 33:  {
   $75 = HEAP8[$1>>0]|0;
   $76 = $75 << 24 >> 24;
   $c$off$i$i$i19 = (($76) + -48)|0;
   $77 = ($c$off$i$i$i19>>>0)<(10);
   if ($77) {
    $80 = $0;$82 = $1;$a$0$i$i20 = 0;
    while(1) {
     $78 = ($a$0$i$i20*10)|0;
     $79 = (($80) + 2|0);
     HEAP32[$fmt>>2] = $79;
     $81 = HEAP8[$82>>0]|0;
     $83 = $81 << 24 >> 24;
     $84 = (($78) + -48)|0;
     $85 = (($84) + ($83))|0;
     $86 = HEAP8[$79>>0]|0;
     $87 = $86 << 24 >> 24;
     $c$off$i2$i$i21 = (($87) + -48)|0;
     $88 = ($c$off$i2$i$i21>>>0)<(10);
     $89 = ($85|0)<(214748364);
     $or$cond$i$i22 = $88 & $89;
     if ($or$cond$i$i22) {
      $80$phi = $82;$82 = $79;$a$0$i$i20 = $85;$80 = $80$phi;
     } else {
      $$lcssa47 = $85;
      break;
     }
    }
    $$off$i25 = (($$lcssa47) + -1)|0;
    $90 = ($$off$i25>>>0)>(15);
    if ($90) {
     $91 = HEAP32[$h>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $$lcssa47;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAP32[$vararg_ptr15>>2] = 16;
     (_luaL_error($91,8848,$vararg_buffer12)|0);
     $$0$i$i2435 = $$lcssa47;
    } else {
     $$0$i$i2435 = $$lcssa47;
    }
   } else {
    $$0$i$i2435 = 8;
   }
   $92 = (($h) + 8|0);
   HEAP32[$92>>2] = $$0$i$i2435;
   break;
  }
  default: {
   $93 = HEAP32[$h>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $3;
   (_luaL_error($93,8816,$vararg_buffer16)|0);
  }
  }
 } while(0);
 $$0 = 8;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_next($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa13 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$0$lcssa12 = 0, $i$0$ph = 0, $i$18 = 0, $i$18$lcssa = 0, $n$0$lcssa$i = 0, $n$0$lcssa$i$ph = 0, $n$02$i = 0, $or$cond$i = 0, $or$cond$i$not$i = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 19)) {
  $2 = $key;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)<(0);
  $9 = ($4>>>0)<(1);
  $10 = ($7|0)==(0);
  $11 = $10 & $9;
  $12 = $8 | $11;
  $13 = ($7>>>0)>(0);
  $14 = ($4>>>0)>(2147483648);
  $15 = ($7|0)==(0);
  $16 = $15 & $14;
  $17 = $13 | $16;
  $or$cond$i$not$i = $17 | $12;
  $18 = ($4|0)==(0);
  $or$cond$i = $or$cond$i$not$i | $18;
  if ($or$cond$i) {
   label = 5;
  } else {
   $19 = (($t) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($4>>>0)>($20>>>0);
   if ($21) {
    label = 5;
   } else {
    $55 = $20;$i$0$ph = $4;
   }
  }
 } else if ((($1|0) == 0)) {
  $$phi$trans$insert = (($t) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $55 = $$pre;$i$0$ph = 0;
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $22 = (_mainposition($t,$key)|0);
  $23 = (($22) + 16|0);
  $24 = (_luaV_equalobj(0,$23,$key)|0);
  $25 = ($24|0)==(0);
  do {
   if ($25) {
    $33 = $23;$n$02$i = $22;
    while(1) {
     $26 = (($n$02$i) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(10);
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = $29 & 64;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $32 = HEAP32[$33>>2]|0;
       $34 = HEAP32[$key>>2]|0;
       $35 = ($32|0)==($34|0);
       if ($35) {
        $n$0$lcssa$i$ph = $n$02$i;
        label = 10;
        break;
       }
      }
     }
     $47 = (($n$02$i) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==(0);
     if ($49) {
      label = 14;
      break;
     }
     $50 = (($n$02$i) + ($48<<5)|0);
     $51 = ((($n$02$i) + ($48<<5)|0) + 16|0);
     $52 = (_luaV_equalobj(0,$51,$key)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $33 = $51;$n$02$i = $50;
     } else {
      $n$0$lcssa$i$ph = $50;
      label = 10;
      break;
     }
    }
    if ((label|0) == 10) {
     $n$0$lcssa$i = $n$0$lcssa$i$ph;
     break;
    }
    else if ((label|0) == 14) {
     _luaG_runerror($L,9808,$vararg_buffer);
     // unreachable;
    }
   } else {
    $n$0$lcssa$i = $22;
   }
  } while(0);
  $36 = (($t) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $n$0$lcssa$i;
  $39 = $37;
  $40 = (($38) - ($39))|0;
  $41 = $40 >> 5;
  $42 = (($t) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 1)|0;
  $45 = (($44) + ($41))|0;
  $55 = $43;$i$0$ph = $45;
 }
 $46 = (($t) + 12|0);
 $i$0 = $i$0$ph;
 while(1) {
  $54 = ($i$0>>>0)<($55>>>0);
  if (!($54)) {
   $i$0$lcssa = $i$0;
   break;
  }
  $56 = HEAP32[$46>>2]|0;
  $57 = ((($56) + ($i$0<<4)|0) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0);
  $60 = (($i$0) + 1)|0;
  if ($59) {
   $i$0 = $60;
  } else {
   $$lcssa = $56;$$lcssa13 = $60;$i$0$lcssa12 = $i$0;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  $61 = $key;
  $62 = $61;
  HEAP32[$62>>2] = $$lcssa13;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = 0;
  HEAP32[$0>>2] = 19;
  $65 = (($key) + 16|0);
  $66 = (($$lcssa) + ($i$0$lcssa12<<4)|0);
  ;HEAP32[$65+0>>2]=HEAP32[$66+0>>2]|0;HEAP32[$65+4>>2]=HEAP32[$66+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$66+8>>2]|0;HEAP32[$65+12>>2]=HEAP32[$66+12>>2]|0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $67 = (($i$0$lcssa) - ($55))|0;
 $68 = (($t) + 7|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = 1 << $70;
 $72 = ($67|0)<($71|0);
 if (!($72)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = (($t) + 16|0);
 $74 = HEAP32[$73>>2]|0;
 $i$18 = $67;
 while(1) {
  $77 = ((($74) + ($i$18<<5)|0) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==(0);
  $75 = (($i$18) + 1)|0;
  if (!($79)) {
   $i$18$lcssa = $i$18;
   label = 23;
   break;
  }
  $76 = ($75|0)<($71|0);
  if ($76) {
   $i$18 = $75;
  } else {
   label = 24;
   break;
  }
 }
 if ((label|0) == 23) {
  $80 = ((($74) + ($i$18$lcssa<<5)|0) + 16|0);
  ;HEAP32[$key+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$key+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$key+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$key+12>>2]=HEAP32[$80+12>>2]|0;
  $81 = (($key) + 16|0);
  $82 = HEAP32[$73>>2]|0;
  $83 = (($82) + ($i$18$lcssa<<5)|0);
  ;HEAP32[$81+0>>2]=HEAP32[$83+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$83+12>>2]|0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaH_resize($L,$t,$nasize,$nhsize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 $nhsize = $nhsize|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cell$0$i = 0, $exitcond = 0, $exitcond$i = 0, $i$01$i = 0, $i$01$i1 = 0, $i$07 = 0, $j$06 = 0, $j$06$in = 0, $k$i = 0, $lsize$0$i = 0, $n$0$i$i = 0, $n$0$i$i$lcssa = 0;
 var $phitmp$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $k$i = sp;
 $0 = (($t) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($t) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($1>>>0)<($nasize>>>0);
 if ($7) {
  $8 = (($nasize) + 1)|0;
  $9 = ($8>>>0)>(268435455);
  if ($9) {
   _luaM_toobig($L);
   // unreachable;
  }
  $10 = (($t) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1 << 4;
  $13 = $nasize << 4;
  $14 = (_luaM_realloc_($L,$11,$12,$13)|0);
  HEAP32[$10>>2] = $14;
  $15 = HEAP32[$0>>2]|0;
  $16 = ($15>>>0)<($nasize>>>0);
  if ($16) {
   $i$01$i1 = $15;
   while(1) {
    $17 = ((($14) + ($i$01$i1<<4)|0) + 8|0);
    HEAP32[$17>>2] = 0;
    $18 = (($i$01$i1) + 1)|0;
    $exitcond$i = ($18|0)==($nasize|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i1 = $18;
    }
   }
  }
  HEAP32[$0>>2] = $nasize;
 }
 $19 = ($nhsize|0)==(0);
 if ($19) {
  HEAP32[$5>>2] = 9760;
  $$0$i = 0;$33 = 9760;$lsize$0$i = 0;
 } else {
  $20 = (_luaO_ceillog2($nhsize)|0);
  $21 = ($20|0)>(30);
  if ($21) {
   _luaG_runerror($L,9792,$vararg_buffer);
   // unreachable;
  }
  $22 = 1 << $20;
  $23 = (($22) + 1)|0;
  $24 = ($23>>>0)>(134217727);
  if ($24) {
   _luaM_toobig($L);
   // unreachable;
  }
  $25 = $22 << 5;
  $26 = (_luaM_realloc_($L,0,0,$25)|0);
  HEAP32[$5>>2] = $26;
  $i$01$i = 0;
  while(1) {
   $27 = ((($26) + ($i$01$i<<5)|0) + 28|0);
   HEAP32[$27>>2] = 0;
   $28 = ((($26) + ($i$01$i<<5)|0) + 24|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($26) + ($i$01$i<<5)|0) + 8|0);
   HEAP32[$29>>2] = 0;
   $30 = (($i$01$i) + 1)|0;
   $31 = ($30|0)<($22|0);
   if ($31) {
    $i$01$i = $30;
   } else {
    break;
   }
  }
  $phitmp$i = $20&255;
  $$0$i = $22;$33 = $26;$lsize$0$i = $phitmp$i;
 }
 HEAP8[$2>>0] = $lsize$0$i;
 $32 = (($33) + ($$0$i<<5)|0);
 $34 = (($t) + 20|0);
 HEAP32[$34>>2] = $32;
 $35 = ($1>>>0)>($nasize>>>0);
 do {
  if ($35) {
   HEAP32[$0>>2] = $nasize;
   $36 = (($t) + 12|0);
   $37 = (($k$i) + 8|0);
   $i$07 = $nasize;
   while(1) {
    $38 = HEAP32[$36>>2]|0;
    $39 = ((($38) + ($i$07<<4)|0) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    if ($41) {
     $$pre = (($i$07) + 1)|0;
     $$pre$phiZ2D = $$pre;
    } else {
     $42 = (($38) + ($i$07<<4)|0);
     $43 = (($i$07) + 1)|0;
     $44 = (_i64Add(($43|0),0,-1,-1)|0);
     $45 = tempRet0;
     $46 = HEAP32[$0>>2]|0;
     $47 = ($45>>>0)<(0);
     $48 = ($44>>>0)<($46>>>0);
     $49 = ($45|0)==(0);
     $50 = $49 & $48;
     $51 = $47 | $50;
     do {
      if ($51) {
       $52 = (($38) + ($44<<4)|0);
       $$0$i$i = $52;
       label = 30;
      } else {
       $53 = HEAP8[$2>>0]|0;
       $54 = $53&255;
       $55 = 1 << $54;
       $56 = (($55) + -1)|0;
       $57 = $56 & $43;
       $58 = HEAP32[$5>>2]|0;
       $59 = (($58) + ($57<<5)|0);
       $n$0$i$i = $59;
       while(1) {
        $60 = (($n$0$i$i) + 24|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = ($61|0)==(19);
        if ($62) {
         $63 = (($n$0$i$i) + 16|0);
         $64 = $63;
         $65 = $64;
         $66 = HEAP32[$65>>2]|0;
         $67 = (($64) + 4)|0;
         $68 = $67;
         $69 = HEAP32[$68>>2]|0;
         $70 = ($66|0)==($43|0);
         $71 = ($69|0)==(0);
         $72 = $70 & $71;
         if ($72) {
          $n$0$i$i$lcssa = $n$0$i$i;
          label = 27;
          break;
         }
        }
        $73 = (($n$0$i$i) + 28|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = ($74|0)==(0);
        if ($75) {
         label = 31;
         break;
        }
        $76 = (($n$0$i$i) + ($74<<5)|0);
        $n$0$i$i = $76;
       }
       if ((label|0) == 27) {
        label = 0;
        $$0$i$i = $n$0$i$i$lcssa;
        label = 30;
        break;
       }
       else if ((label|0) == 31) {
        label = 0;
        label = 32;
        break;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $77 = ($$0$i$i|0)==(6528|0);
      if ($77) {
       label = 32;
      } else {
       $cell$0$i = $$0$i$i;
      }
     }
     if ((label|0) == 32) {
      label = 0;
      $78 = $k$i;
      $79 = $78;
      HEAP32[$79>>2] = $43;
      $80 = (($78) + 4)|0;
      $81 = $80;
      HEAP32[$81>>2] = 0;
      HEAP32[$37>>2] = 19;
      $82 = (_luaH_newkey($L,$t,$k$i)|0);
      $cell$0$i = $82;
     }
     ;HEAP32[$cell$0$i+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$cell$0$i+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$cell$0$i+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$cell$0$i+12>>2]=HEAP32[$42+12>>2]|0;
     $$pre$phiZ2D = $43;
    }
    $exitcond = ($$pre$phiZ2D|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $i$07 = $$pre$phiZ2D;
    }
   }
   $83 = (($nasize) + 1)|0;
   $84 = ($83>>>0)>(268435455);
   if ($84) {
    _luaM_toobig($L);
    // unreachable;
   } else {
    $85 = (($t) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $1 << 4;
    $88 = $nasize << 4;
    $89 = (_luaM_realloc_($L,$86,$87,$88)|0);
    HEAP32[$85>>2] = $89;
    break;
   }
  }
 } while(0);
 $90 = 1 << $4;
 $91 = ($3<<24>>24)==(31);
 if (!($91)) {
  $j$06$in = $90;
  while(1) {
   $j$06 = (($j$06$in) + -1)|0;
   $92 = ((($6) + ($j$06<<5)|0) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(0);
   if (!($94)) {
    $96 = (($6) + ($j$06<<5)|0);
    $97 = ((($6) + ($j$06<<5)|0) + 16|0);
    $98 = (_luaH_get($t,$97)|0);
    $99 = ($98|0)==(6528|0);
    if ($99) {
     $100 = (_luaH_newkey($L,$t,$97)|0);
     $$0$i3 = $100;
    } else {
     $$0$i3 = $98;
    }
    ;HEAP32[$$0$i3+0>>2]=HEAP32[$96+0>>2]|0;HEAP32[$$0$i3+4>>2]=HEAP32[$96+4>>2]|0;HEAP32[$$0$i3+8>>2]=HEAP32[$96+8>>2]|0;HEAP32[$$0$i3+12>>2]=HEAP32[$96+12>>2]|0;
   }
   $95 = ($j$06|0)>(0);
   if ($95) {
    $j$06$in = $j$06;
   } else {
    break;
   }
  }
 }
 $101 = ($6|0)==(9760|0);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = $90 << 5;
 (_luaM_realloc_($L,$6,$102,0)|0);
 STACKTOP = sp;return;
}
function _luaH_setint($L,$t,$0,$1,$value) {
 $L = $L|0;
 $t = $t|0;
 $0 = $0|0;
 $1 = $1|0;
 $value = $value|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell$0 = 0, $k = 0, $n$0$i = 0, $n$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp;
 $2 = (_i64Add(($0|0),($1|0),-1,-1)|0);
 $3 = tempRet0;
 $4 = (($t) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<($5>>>0);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 do {
  if ($10) {
   $11 = (($t) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($2<<4)|0);
   $$0$i = $13;
   label = 9;
  } else {
   $14 = (($t) + 7|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = 1 << $16;
   $18 = (($17) + -1)|0;
   $19 = $18 & $0;
   $20 = (($t) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($19<<5)|0);
   $n$0$i = $22;
   while(1) {
    $23 = (($n$0$i) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(19);
    if ($25) {
     $26 = (($n$0$i) + 16|0);
     $27 = $26;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = (($27) + 4)|0;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = ($29|0)==($0|0);
     $34 = ($32|0)==($1|0);
     $35 = $33 & $34;
     if ($35) {
      $n$0$i$lcssa = $n$0$i;
      label = 6;
      break;
     }
    }
    $36 = (($n$0$i) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0);
    if ($38) {
     label = 10;
     break;
    }
    $39 = (($n$0$i) + ($37<<5)|0);
    $n$0$i = $39;
   }
   if ((label|0) == 6) {
    $$0$i = $n$0$i$lcssa;
    label = 9;
    break;
   }
   else if ((label|0) == 10) {
    break;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $40 = ($$0$i|0)==(6528|0);
  if (!($40)) {
   $cell$0 = $$0$i;
   ;HEAP32[$cell$0+0>>2]=HEAP32[$value+0>>2]|0;HEAP32[$cell$0+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$cell$0+8>>2]=HEAP32[$value+8>>2]|0;HEAP32[$cell$0+12>>2]=HEAP32[$value+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $41 = $k;
 $42 = $41;
 HEAP32[$42>>2] = $0;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $1;
 $45 = (($k) + 8|0);
 HEAP32[$45>>2] = 19;
 $46 = (_luaH_newkey($L,$t,$k)|0);
 $cell$0 = $46;
 ;HEAP32[$cell$0+0>>2]=HEAP32[$value+0>>2]|0;HEAP32[$cell$0+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$cell$0+8>>2]=HEAP32[$value+8>>2]|0;HEAP32[$cell$0+12>>2]=HEAP32[$value+12>>2]|0;
 STACKTOP = sp;return;
}
function _luaH_set($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_get($t,$key)|0);
 $1 = ($0|0)==(6528|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (_luaH_newkey($L,$t,$key)|0);
 $$0 = $2;
 return ($$0|0);
}
function _luaH_resizearray($L,$t,$nasize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9760|0);
 if ($2) {
  $7 = 0;
 } else {
  $3 = (($t) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 1 << $5;
  $7 = $6;
 }
 _luaH_resize($L,$t,$nasize,$7);
 return;
}
function _luaH_new($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,5,32)|0);
 $1 = (($0) + 24|0);
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 6|0);
 HEAP8[$2>>0] = -1;
 $3 = (($0) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($0) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($0) + 16|0);
 HEAP32[$5>>2] = 9760;
 $6 = (($0) + 7|0);
 HEAP8[$6>>0] = 0;
 $7 = (($0) + 20|0);
 HEAP32[$7>>2] = 9760;
 return ($0|0);
}
function _luaH_free($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9760|0);
 if (!($2)) {
  $3 = (($t) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 32 << $5;
  (_luaM_realloc_($L,$1,$6,0)|0);
 }
 $7 = (($t) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($t) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 (_luaM_realloc_($L,$8,$11,0)|0);
 (_luaM_realloc_($L,$t,32,0)|0);
 return;
}
function _luaH_newkey($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$02 = 0, $$lcssa = 0, $$lcssa22 = 0, $$lcssa23 = 0, $$lcssa24 = 0, $$lcssa26 = 0, $$lcssa27 = 0, $$na$0$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$03$i$i = 0, $a$1$i$i = 0, $ause$0$lcssa$i$i = 0, $ause$0$ph$i$i = 0, $ause$0$ph$i$i$lcssa = 0, $ause$06$i$i = 0, $aux = 0, $i$0$i$i = 0, $i$0$ph$i$i = 0, $i$01$i$i = 0, $i$07$i$i = 0, $i$1$lcssa$i$i = 0, $i$11$i$i = 0, $k = 0, $lc$0$$i$i = 0, $lc$0$$i$i$lcssa = 0, $lc$0$lcssa$i$i = 0, $lc$02$i$i = 0;
 var $lg$04$i$i = 0, $lim$0$ph$i$i = 0, $mp$0 = 0, $na$0$lcssa$i$i = 0, $na$04$i$i = 0, $na$1$i$i = 0, $na$1$i$i$lcssa = 0, $not$$i$i = 0, $nums$i = 0, $optimal$0$lcssa$i$i = 0, $optimal$05$i$i = 0, $optimal$1$i$i = 0, $optimal$1$i$i$lcssa = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$not$i$i = 0, $or$cond$i$not$i$i$i = 0, $othern$0 = 0, $othern$0$lcssa = 0;
 var $totaluse$0$ph$i$i = 0, $totaluse$0$ph$i$i$lcssa = 0, $ttlg$05$i$i = 0, $twotoi$0$optimal$0$i$i = 0, $twotoi$02$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp;
 $nums$i = sp + 40|0;
 $aux = sp + 16|0;
 $k = sp + 8|0;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 0)) {
  _luaG_runerror($L,9712,$vararg_buffer);
  // unreachable;
 } else if ((($1|0) == 3)) {
  label = 3;
 } else {
  $$02 = $key;
 }
 do {
  if ((label|0) == 3) {
   $2 = (_luaV_tointeger($key,$k,0)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = $k;
    $5 = $4;
    $6 = HEAP32[$5>>2]|0;
    $7 = (($4) + 4)|0;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = $aux;
    $11 = $10;
    HEAP32[$11>>2] = $6;
    $12 = (($10) + 4)|0;
    $13 = $12;
    HEAP32[$13>>2] = $9;
    $14 = (($aux) + 8|0);
    HEAP32[$14>>2] = 19;
    $$02 = $aux;
    break;
   }
   $15 = +HEAPF64[$key>>3];
   $16 = ($15 == $15) & (0.0 == 0.0);
   if ($16) {
    $$02 = $key;
   } else {
    _luaG_runerror($L,9736,$vararg_buffer1);
    // unreachable;
   }
  }
 } while(0);
 $17 = (_mainposition($t,$$02)|0);
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 $21 = ($17|0)==(9760|0);
 $or$cond = $20 | $21;
 do {
  if ($or$cond) {
   $22 = (($t) + 20|0);
   $23 = (($t) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $$pre$i = HEAP32[$22>>2]|0;
   $25 = $$pre$i;
   while(1) {
    $26 = ($25>>>0)>($24>>>0);
    if (!($26)) {
     break;
    }
    $27 = (($25) + -32|0);
    HEAP32[$22>>2] = $27;
    $28 = (($25) + -8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0);
    if ($30) {
     $$lcssa26 = $25;$$lcssa27 = $27;
     label = 38;
     break;
    } else {
     $25 = $27;
    }
   }
   if ((label|0) == 38) {
    $131 = (($17) + 16|0);
    $132 = (_mainposition($t,$131)|0);
    $133 = ($132|0)==($17|0);
    if ($133) {
     $151 = (($17) + 28|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0);
     if ($153) {
      $$pre = $$lcssa27;
      $$pre$phiZ2D = $$pre;
     } else {
      $154 = (($17) + ($152<<5)|0);
      $155 = $154;
      $156 = $$lcssa27;
      $157 = (($155) - ($156))|0;
      $158 = $157 >> 5;
      $159 = (($$lcssa26) + -4|0);
      HEAP32[$159>>2] = $158;
      $$pre$phiZ2D = $156;
     }
     $160 = $17;
     $161 = (($$pre$phiZ2D) - ($160))|0;
     $162 = $161 >> 5;
     HEAP32[$151>>2] = $162;
     $mp$0 = $$lcssa27;
     break;
    }
    $othern$0 = $132;
    while(1) {
     $134 = (($othern$0) + 28|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($othern$0) + ($135<<5)|0);
     $137 = ($136|0)==($17|0);
     if ($137) {
      $$lcssa = $134;$othern$0$lcssa = $othern$0;
      break;
     } else {
      $othern$0 = $136;
     }
    }
    $138 = $$lcssa27;
    $139 = $othern$0$lcssa;
    $140 = (($138) - ($139))|0;
    $141 = $140 >> 5;
    HEAP32[$$lcssa>>2] = $141;
    ;HEAP32[$$lcssa27+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$$lcssa27+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$lcssa27+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$lcssa27+12>>2]=HEAP32[$17+12>>2]|0;HEAP32[$$lcssa27+16>>2]=HEAP32[$17+16>>2]|0;HEAP32[$$lcssa27+20>>2]=HEAP32[$17+20>>2]|0;HEAP32[$$lcssa27+24>>2]=HEAP32[$17+24>>2]|0;HEAP32[$$lcssa27+28>>2]=HEAP32[$17+28>>2]|0;
    $142 = (($17) + 28|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0);
    if (!($144)) {
     $145 = $17;
     $146 = (($145) - ($138))|0;
     $147 = $146 >> 5;
     $148 = (($$lcssa26) + -4|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($149) + ($147))|0;
     HEAP32[$148>>2] = $150;
     HEAP32[$142>>2] = 0;
    }
    HEAP32[$18>>2] = 0;
    $mp$0 = $17;
    break;
   }
   dest=$nums$i+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $31 = (($t) + 8|0);
   $32 = (($t) + 12|0);
   $33 = HEAP32[$31>>2]|0;
   $ause$06$i$i = 0;$i$07$i$i = 1;$lg$04$i$i = 0;$ttlg$05$i$i = 1;
   while(1) {
    $34 = ($ttlg$05$i$i>>>0)>($33>>>0);
    if ($34) {
     $35 = ($i$07$i$i>>>0)>($33>>>0);
     if ($35) {
      $ause$0$lcssa$i$i = $ause$06$i$i;
      break;
     } else {
      $lim$0$ph$i$i = $33;
     }
    } else {
     $lim$0$ph$i$i = $ttlg$05$i$i;
    }
    $36 = ($i$07$i$i>>>0)>($lim$0$ph$i$i>>>0);
    if ($36) {
     $i$1$lcssa$i$i = $i$07$i$i;$lc$0$lcssa$i$i = 0;
    } else {
     $37 = HEAP32[$32>>2]|0;
     $i$11$i$i = $i$07$i$i;$lc$02$i$i = 0;
     while(1) {
      $38 = (($i$11$i$i) + -1)|0;
      $39 = ((($37) + ($38<<4)|0) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      $not$$i$i = ($40|0)!=(0);
      $41 = $not$$i$i&1;
      $lc$0$$i$i = (($41) + ($lc$02$i$i))|0;
      $42 = (($i$11$i$i) + 1)|0;
      $43 = ($42>>>0)>($lim$0$ph$i$i>>>0);
      if ($43) {
       $$lcssa24 = $42;$lc$0$$i$i$lcssa = $lc$0$$i$i;
       break;
      } else {
       $i$11$i$i = $42;$lc$02$i$i = $lc$0$$i$i;
      }
     }
     $i$1$lcssa$i$i = $$lcssa24;$lc$0$lcssa$i$i = $lc$0$$i$i$lcssa;
    }
    $44 = (($nums$i) + ($lg$04$i$i<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($lc$0$lcssa$i$i))|0;
    HEAP32[$44>>2] = $46;
    $47 = (($lc$0$lcssa$i$i) + ($ause$06$i$i))|0;
    $48 = (($lg$04$i$i) + 1)|0;
    $49 = $ttlg$05$i$i << 1;
    $50 = ($48|0)<(32);
    if ($50) {
     $ause$06$i$i = $47;$i$07$i$i = $i$1$lcssa$i$i;$lg$04$i$i = $48;$ttlg$05$i$i = $49;
    } else {
     $ause$0$lcssa$i$i = $47;
     break;
    }
   }
   $51 = (($t) + 7|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = 1 << $53;
   $ause$0$ph$i$i = 0;$i$0$ph$i$i = $54;$totaluse$0$ph$i$i = 0;
   L43: while(1) {
    $i$0$i$i = $i$0$ph$i$i;
    while(1) {
     $55 = (($i$0$i$i) + -1)|0;
     $56 = ($i$0$i$i|0)==(0);
     if ($56) {
      $ause$0$ph$i$i$lcssa = $ause$0$ph$i$i;$totaluse$0$ph$i$i$lcssa = $totaluse$0$ph$i$i;
      break L43;
     }
     $57 = HEAP32[$23>>2]|0;
     $58 = ((($57) + ($55<<5)|0) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)==(0);
     if ($60) {
      $i$0$i$i = $55;
     } else {
      $$lcssa22 = $55;$$lcssa23 = $57;
      break;
     }
    }
    $61 = ((($$lcssa23) + ($$lcssa22<<5)|0) + 24|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(19);
    if ($63) {
     $64 = ((($$lcssa23) + ($$lcssa22<<5)|0) + 16|0);
     $65 = $64;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $68 = (($65) + 4)|0;
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)<(0);
     $72 = ($67>>>0)<(1);
     $73 = ($70|0)==(0);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = ($70>>>0)>(0);
     $77 = ($67>>>0)>(2147483648);
     $78 = ($70|0)==(0);
     $79 = $78 & $77;
     $80 = $76 | $79;
     $or$cond$i$not$i$i$i = $80 | $75;
     $81 = ($67|0)==(0);
     $or$cond$i$i$i = $or$cond$i$not$i$i$i | $81;
     if ($or$cond$i$i$i) {
      $$0$i$i$i = 0;
     } else {
      $82 = (_luaO_ceillog2($67)|0);
      $83 = (($nums$i) + ($82<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + 1)|0;
      HEAP32[$83>>2] = $85;
      $$0$i$i$i = 1;
     }
    } else {
     $$0$i$i$i = 0;
    }
    $86 = (($$0$i$i$i) + ($ause$0$ph$i$i))|0;
    $87 = (($totaluse$0$ph$i$i) + 1)|0;
    $ause$0$ph$i$i = $86;$i$0$ph$i$i = $$lcssa22;$totaluse$0$ph$i$i = $87;
   }
   $88 = (($ause$0$ph$i$i$lcssa) + ($ause$0$lcssa$i$i))|0;
   $89 = (($$02) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)==(19);
   if ($91) {
    $92 = $$02;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($92) + 4)|0;
    $96 = $95;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)<(0);
    $99 = ($94>>>0)<(1);
    $100 = ($97|0)==(0);
    $101 = $100 & $99;
    $102 = $98 | $101;
    $103 = ($97>>>0)>(0);
    $104 = ($94>>>0)>(2147483648);
    $105 = ($97|0)==(0);
    $106 = $105 & $104;
    $107 = $103 | $106;
    $or$cond$i$not$i$i = $107 | $102;
    $108 = ($94|0)==(0);
    $or$cond$i$i = $or$cond$i$not$i$i | $108;
    if ($or$cond$i$i) {
     $$0$i$i = 0;
    } else {
     $109 = (_luaO_ceillog2($94)|0);
     $110 = (($nums$i) + ($109<<2)|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (($111) + 1)|0;
     HEAP32[$110>>2] = $112;
     $$0$i$i = 1;
    }
   } else {
    $$0$i$i = 0;
   }
   $113 = (($88) + ($$0$i$i))|0;
   $114 = ($113|0)==(0);
   if ($114) {
    $na$0$lcssa$i$i = 0;$optimal$0$lcssa$i$i = 0;
   } else {
    $120 = 0;$a$03$i$i = 0;$i$01$i$i = 0;$na$04$i$i = 0;$optimal$05$i$i = 0;$twotoi$02$i$i = 1;
    while(1) {
     $115 = (($nums$i) + ($i$01$i$i<<2)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0);
     if ($117) {
      $a$1$i$i = $a$03$i$i;$na$1$i$i = $na$04$i$i;$optimal$1$i$i = $optimal$05$i$i;
     } else {
      $118 = (($116) + ($a$03$i$i))|0;
      $119 = ($118>>>0)>($120>>>0);
      $$na$0$i$i = $119 ? $118 : $na$04$i$i;
      $twotoi$0$optimal$0$i$i = $119 ? $twotoi$02$i$i : $optimal$05$i$i;
      $a$1$i$i = $118;$na$1$i$i = $$na$0$i$i;$optimal$1$i$i = $twotoi$0$optimal$0$i$i;
     }
     $121 = (($i$01$i$i) + 1)|0;
     $122 = $twotoi$02$i$i << 1;
     $123 = $twotoi$02$i$i & 2147483647;
     $124 = ($113>>>0)>($123>>>0);
     if ($124) {
      $120 = $123;$a$03$i$i = $a$1$i$i;$i$01$i$i = $121;$na$04$i$i = $na$1$i$i;$optimal$05$i$i = $optimal$1$i$i;$twotoi$02$i$i = $122;
     } else {
      $na$1$i$i$lcssa = $na$1$i$i;$optimal$1$i$i$lcssa = $optimal$1$i$i;
      break;
     }
    }
    $na$0$lcssa$i$i = $na$1$i$i$lcssa;$optimal$0$lcssa$i$i = $optimal$1$i$i$lcssa;
   }
   $125 = (($ause$0$lcssa$i$i) + 1)|0;
   $126 = (($125) + ($totaluse$0$ph$i$i$lcssa))|0;
   $127 = (($126) - ($na$0$lcssa$i$i))|0;
   _luaH_resize($L,$t,$optimal$0$lcssa$i$i,$127);
   $128 = (_luaH_get($t,$$02)|0);
   $129 = ($128|0)==(6528|0);
   if (!($129)) {
    $$0 = $128;
    STACKTOP = sp;return ($$0|0);
   }
   $130 = (_luaH_newkey($L,$t,$$02)|0);
   $$0 = $130;
   STACKTOP = sp;return ($$0|0);
  } else {
   $mp$0 = $17;
  }
 } while(0);
 $163 = $$02;
 $164 = $163;
 $165 = HEAP32[$164>>2]|0;
 $166 = (($163) + 4)|0;
 $167 = $166;
 $168 = HEAP32[$167>>2]|0;
 $169 = (($mp$0) + 16|0);
 $170 = $169;
 $171 = $170;
 HEAP32[$171>>2] = $165;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = $168;
 $174 = (($$02) + 8|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (($mp$0) + 24|0);
 HEAP32[$176>>2] = $175;
 $177 = $175 & 64;
 $178 = ($177|0)==(0);
 if (!($178)) {
  $179 = (($t) + 5|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180 & 4;
  $182 = ($181<<24>>24)==(0);
  if (!($182)) {
   $183 = HEAP32[$$02>>2]|0;
   $184 = (($183) + 5|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185 & 3;
   $187 = ($186<<24>>24)==(0);
   if (!($187)) {
    _luaC_barrierback_($L,$t);
   }
  }
 }
 $$0 = $mp$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getint($t,$0,$1) {
 $t = $t|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0;
 var $n$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_i64Add(($0|0),($1|0),-1,-1)|0);
 $3 = tempRet0;
 $4 = (($t) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<($5>>>0);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $11 = (($t) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($2<<4)|0);
  $$0 = $13;
  return ($$0|0);
 }
 $14 = (($t) + 7|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = 1 << $16;
 $18 = (($17) + -1)|0;
 $19 = $18 & $0;
 $20 = (($t) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19<<5)|0);
 $n$0 = $22;
 while(1) {
  $23 = (($n$0) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(19);
  if ($25) {
   $26 = (($n$0) + 16|0);
   $27 = $26;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29|0)==($0|0);
   $34 = ($32|0)==($1|0);
   $35 = $33 & $34;
   if ($35) {
    $n$0$lcssa = $n$0;
    label = 6;
    break;
   }
  }
  $36 = (($n$0) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if ($38) {
   label = 9;
   break;
  }
  $39 = (($n$0) + ($37<<5)|0);
  $n$0 = $39;
 }
 if ((label|0) == 6) {
  $$0 = $n$0$lcssa;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $$0 = 6528;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaH_getstr($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $n$0 = 0, $n$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = (($5) + -1)|0;
 $7 = $6 & $1;
 $8 = (($t) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<5)|0);
 $n$0 = $10;
 while(1) {
  $11 = (($n$0) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(68);
  if ($13) {
   $14 = (($n$0) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($key|0);
   if ($16) {
    $n$0$lcssa = $n$0;
    label = 4;
    break;
   }
  }
  $17 = (($n$0) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 7;
   break;
  }
  $20 = (($n$0) + ($18<<5)|0);
  $n$0 = $20;
 }
 if ((label|0) == 4) {
  $$0 = $n$0$lcssa;
  return ($$0|0);
 }
 else if ((label|0) == 7) {
  $$0 = 6528;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaH_get($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $n$0$i1 = 0, $n$0$i1$lcssa = 0, $n$0$i3 = 0, $n$0$i3$lcssa = 0, $n$0$lcssa = 0, $n$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 if ((($2|0) == 4)) {
  $3 = HEAP32[$key>>2]|0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($t) + 7|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = 1 << $8;
  $10 = (($9) + -1)|0;
  $11 = $10 & $5;
  $12 = (($t) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<5)|0);
  $n$0$i = $14;
  while(1) {
   $15 = (($n$0$i) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(68);
   if ($17) {
    $18 = (($n$0$i) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==($3|0);
    if ($20) {
     $n$0$i$lcssa = $n$0$i;
     label = 5;
     break;
    }
   }
   $21 = (($n$0$i) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    label = 32;
    break;
   }
   $24 = (($n$0$i) + ($22<<5)|0);
   $n$0$i = $24;
  }
  if ((label|0) == 5) {
   $$0 = $n$0$i$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 32) {
   $$0 = 6528;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($2|0) == 3)) {
  $69 = (_luaV_tointeger($key,$k,0)|0);
  $70 = ($69|0)==(0);
  if (!($70)) {
   $71 = $k;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) + 4)|0;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = (_i64Add(($73|0),($76|0),-1,-1)|0);
   $78 = tempRet0;
   $79 = (($t) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($78>>>0)<(0);
   $82 = ($77>>>0)<($80>>>0);
   $83 = ($78|0)==(0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $86 = (($t) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + ($77<<4)|0);
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   $89 = (($t) + 7|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = 1 << $91;
   $93 = (($92) + -1)|0;
   $94 = $93 & $73;
   $95 = (($t) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + ($94<<5)|0);
   $n$0$i3 = $97;
   while(1) {
    $98 = (($n$0$i3) + 24|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(19);
    if ($100) {
     $101 = (($n$0$i3) + 16|0);
     $102 = $101;
     $103 = $102;
     $104 = HEAP32[$103>>2]|0;
     $105 = (($102) + 4)|0;
     $106 = $105;
     $107 = HEAP32[$106>>2]|0;
     $108 = ($104|0)==($73|0);
     $109 = ($107|0)==($76|0);
     $110 = $108 & $109;
     if ($110) {
      $n$0$i3$lcssa = $n$0$i3;
      label = 22;
      break;
     }
    }
    $111 = (($n$0$i3) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(0);
    if ($113) {
     label = 34;
     break;
    }
    $114 = (($n$0$i3) + ($112<<5)|0);
    $n$0$i3 = $114;
   }
   if ((label|0) == 22) {
    $$0 = $n$0$i3$lcssa;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $$0 = 6528;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else if ((($2|0) == 0)) {
  $$0 = 6528;
  STACKTOP = sp;return ($$0|0);
 } else if ((($2|0) == 19)) {
  $25 = $key;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_i64Add(($27|0),($30|0),-1,-1)|0);
  $32 = tempRet0;
  $33 = (($t) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32>>>0)<(0);
  $36 = ($31>>>0)<($34>>>0);
  $37 = ($32|0)==(0);
  $38 = $37 & $36;
  $39 = $35 | $38;
  if ($39) {
   $40 = (($t) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($31<<4)|0);
   $$0 = $42;
   STACKTOP = sp;return ($$0|0);
  }
  $43 = (($t) + 7|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = 1 << $45;
  $47 = (($46) + -1)|0;
  $48 = $47 & $27;
  $49 = (($t) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($48<<5)|0);
  $n$0$i1 = $51;
  while(1) {
   $52 = (($n$0$i1) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(19);
   if ($54) {
    $55 = (($n$0$i1) + 16|0);
    $56 = $55;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = (($56) + 4)|0;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($58|0)==($27|0);
    $63 = ($61|0)==($30|0);
    $64 = $62 & $63;
    if ($64) {
     $n$0$i1$lcssa = $n$0$i1;
     label = 13;
     break;
    }
   }
   $65 = (($n$0$i1) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0);
   if ($67) {
    label = 33;
    break;
   }
   $68 = (($n$0$i1) + ($66<<5)|0);
   $n$0$i1 = $68;
  }
  if ((label|0) == 13) {
   $$0 = $n$0$i1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 33) {
   $$0 = 6528;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $115 = (_mainposition($t,$key)|0);
 $116 = (($115) + 16|0);
 $117 = (_luaV_equalobj(0,$116,$key)|0);
 $118 = ($117|0)==(0);
 do {
  if ($118) {
   $n$013 = $115;
   while(1) {
    $119 = (($n$013) + 28|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120|0)==(0);
    if ($121) {
     break;
    }
    $122 = (($n$013) + ($120<<5)|0);
    $123 = ((($n$013) + ($120<<5)|0) + 16|0);
    $124 = (_luaV_equalobj(0,$123,$key)|0);
    $125 = ($124|0)==(0);
    if ($125) {
     $n$013 = $122;
    } else {
     $$lcssa = $122;
     label = 27;
     break;
    }
   }
   if ((label|0) == 27) {
    $n$0$lcssa = $$lcssa;
    break;
   }
   $$0 = 6528;
   STACKTOP = sp;return ($$0|0);
  } else {
   $n$0$lcssa = $115;
  }
 } while(0);
 $$0 = $n$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getn($t) {
 $t = $t|0;
 var $$$1$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i3$i = 0, $$0$i6$i = 0, $$01$i = 0, $$01$i$lcssa = 0, $$115$i = 0, $$j$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$ = 0, $i$0$$lcssa = 0, $i$0$i = 0, $i$0$i$lcssa = 0, $i$0$i$phi = 0, $i$08 = 0, $i$1$i = 0, $i$1$i$lcssa = 0, $i$2$$i = 0, $i$2$$i$lcssa = 0, $i$216$i = 0, $j$07 = 0;
 var $n$0$i$i = 0, $n$0$i$i$lcssa = 0, $n$0$i2$i = 0, $n$0$i2$i$lcssa = 0, $n$0$i5$i = 0, $n$0$i5$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  $4 = (($t) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5) + ($3<<4)|0) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ($1>>>0)>(1);
   if (!($9)) {
    $$0 = 0;
    return ($$0|0);
   }
   $i$08 = 0;$j$07 = $1;
   while(1) {
    $10 = (($i$08) + ($j$07))|0;
    $11 = $10 >>> 1;
    $12 = (($11) + -1)|0;
    $13 = ((($5) + ($12<<4)|0) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    $$j$0 = $15 ? $11 : $j$07;
    $i$0$ = $15 ? $i$08 : $11;
    $16 = (($$j$0) - ($i$0$))|0;
    $17 = ($16>>>0)>(1);
    if ($17) {
     $i$08 = $i$0$;$j$07 = $$j$0;
    } else {
     $i$0$$lcssa = $i$0$;
     break;
    }
   }
   $$0 = $i$0$$lcssa;
   return ($$0|0);
  }
 }
 $18 = (($t) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(9760|0);
 if ($20) {
  $$0 = $1;
  return ($$0|0);
 }
 $21 = (($1) + 1)|0;
 $22 = (($t) + 12|0);
 $23 = (($t) + 7|0);
 $$01$i = $21;$i$0$i = $1;
 while(1) {
  $24 = (_i64Add(($$01$i|0),0,-1,-1)|0);
  $25 = tempRet0;
  $26 = ($25>>>0)<(0);
  $27 = ($24>>>0)<($1>>>0);
  $28 = ($25|0)==(0);
  $29 = $28 & $27;
  $30 = $26 | $29;
  do {
   if ($30) {
    $31 = HEAP32[$22>>2]|0;
    $32 = (($31) + ($24<<4)|0);
    $$0$i$i = $32;
   } else {
    $33 = HEAP8[$23>>0]|0;
    $34 = $33&255;
    $35 = 1 << $34;
    $36 = (($35) + -1)|0;
    $37 = $36 & $$01$i;
    $38 = (($19) + ($37<<5)|0);
    $n$0$i$i = $38;
    while(1) {
     $39 = (($n$0$i$i) + 24|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(19);
     if ($41) {
      $42 = (($n$0$i$i) + 16|0);
      $43 = $42;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $46 = (($43) + 4)|0;
      $47 = $46;
      $48 = HEAP32[$47>>2]|0;
      $49 = ($45|0)==($$01$i|0);
      $50 = ($48|0)==(0);
      $51 = $49 & $50;
      if ($51) {
       $n$0$i$i$lcssa = $n$0$i$i;
       label = 13;
       break;
      }
     }
     $52 = (($n$0$i$i) + 28|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0);
     if ($54) {
      label = 16;
      break;
     }
     $55 = (($n$0$i$i) + ($53<<5)|0);
     $n$0$i$i = $55;
    }
    if ((label|0) == 13) {
     label = 0;
     $$0$i$i = $n$0$i$i$lcssa;
     break;
    }
    else if ((label|0) == 16) {
     label = 0;
     $$0$i$i = 6528;
     break;
    }
   }
  } while(0);
  $56 = (($$0$i$i) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0);
  if ($58) {
   $$01$i$lcssa = $$01$i;$i$0$i$lcssa = $i$0$i;
   break;
  }
  $61 = ($$01$i>>>0)>(1073741823);
  $62 = $$01$i << 1;
  if ($61) {
   label = 21;
   break;
  } else {
   $i$0$i$phi = $$01$i;$$01$i = $62;$i$0$i = $i$0$i$phi;
  }
 }
 if ((label|0) == 21) {
  $i$1$i = 1;
  while(1) {
   $63 = (_i64Add(($i$1$i|0),0,-1,-1)|0);
   $64 = tempRet0;
   $65 = ($64>>>0)<(0);
   $66 = ($63>>>0)<($1>>>0);
   $67 = ($64|0)==(0);
   $68 = $67 & $66;
   $69 = $65 | $68;
   do {
    if ($69) {
     $70 = HEAP32[$22>>2]|0;
     $71 = (($70) + ($63<<4)|0);
     $$0$i6$i = $71;
    } else {
     $72 = HEAP8[$23>>0]|0;
     $73 = $72&255;
     $74 = 1 << $73;
     $75 = (($74) + -1)|0;
     $76 = $75 & $i$1$i;
     $77 = (($19) + ($76<<5)|0);
     $n$0$i5$i = $77;
     while(1) {
      $78 = (($n$0$i5$i) + 24|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(19);
      if ($80) {
       $81 = (($n$0$i5$i) + 16|0);
       $82 = $81;
       $83 = $82;
       $84 = HEAP32[$83>>2]|0;
       $85 = (($82) + 4)|0;
       $86 = $85;
       $87 = HEAP32[$86>>2]|0;
       $88 = ($84|0)==($i$1$i|0);
       $89 = ($87|0)==(0);
       $90 = $88 & $89;
       if ($90) {
        $n$0$i5$i$lcssa = $n$0$i5$i;
        label = 27;
        break;
       }
      }
      $91 = (($n$0$i5$i) + 28|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==(0);
      if ($93) {
       label = 30;
       break;
      }
      $94 = (($n$0$i5$i) + ($92<<5)|0);
      $n$0$i5$i = $94;
     }
     if ((label|0) == 27) {
      label = 0;
      $$0$i6$i = $n$0$i5$i$lcssa;
      break;
     }
     else if ((label|0) == 30) {
      label = 0;
      $$0$i6$i = 6528;
      break;
     }
    }
   } while(0);
   $95 = (($$0$i6$i) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(0);
   $98 = (($i$1$i) + 1)|0;
   if ($97) {
    $i$1$i$lcssa = $i$1$i;
    break;
   } else {
    $i$1$i = $98;
   }
  }
  $99 = (($i$1$i$lcssa) + -1)|0;
  $$0 = $99;
  return ($$0|0);
 }
 $59 = (($$01$i$lcssa) - ($i$0$i$lcssa))|0;
 $60 = ($59>>>0)>(1);
 if (!($60)) {
  $$0 = $i$0$i$lcssa;
  return ($$0|0);
 }
 $$115$i = $$01$i$lcssa;$i$216$i = $i$0$i$lcssa;
 while(1) {
  $100 = (($$115$i) + ($i$216$i))|0;
  $101 = $100 >>> 1;
  $102 = (_i64Add(($101|0),0,-1,-1)|0);
  $103 = tempRet0;
  $104 = ($103>>>0)<(0);
  $105 = ($102>>>0)<($1>>>0);
  $106 = ($103|0)==(0);
  $107 = $106 & $105;
  $108 = $104 | $107;
  do {
   if ($108) {
    $109 = HEAP32[$22>>2]|0;
    $110 = (($109) + ($102<<4)|0);
    $$0$i3$i = $110;
   } else {
    $111 = HEAP8[$23>>0]|0;
    $112 = $111&255;
    $113 = 1 << $112;
    $114 = (($113) + 2147483647)|0;
    $115 = $114 & $101;
    $116 = (($19) + ($115<<5)|0);
    $n$0$i2$i = $116;
    while(1) {
     $117 = (($n$0$i2$i) + 24|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)==(19);
     if ($119) {
      $120 = (($n$0$i2$i) + 16|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ($123|0)==($101|0);
      $128 = ($126|0)==(0);
      $129 = $127 & $128;
      if ($129) {
       $n$0$i2$i$lcssa = $n$0$i2$i;
       label = 38;
       break;
      }
     }
     $130 = (($n$0$i2$i) + 28|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($131|0)==(0);
     if ($132) {
      label = 41;
      break;
     }
     $133 = (($n$0$i2$i) + ($131<<5)|0);
     $n$0$i2$i = $133;
    }
    if ((label|0) == 38) {
     label = 0;
     $$0$i3$i = $n$0$i2$i$lcssa;
     break;
    }
    else if ((label|0) == 41) {
     label = 0;
     $$0$i3$i = 6528;
     break;
    }
   }
  } while(0);
  $134 = (($$0$i3$i) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)==(0);
  $$$1$i = $136 ? $101 : $$115$i;
  $i$2$$i = $136 ? $i$216$i : $101;
  $137 = (($$$1$i) - ($i$2$$i))|0;
  $138 = ($137>>>0)>(1);
  if ($138) {
   $$115$i = $$$1$i;$i$216$i = $i$2$$i;
  } else {
   $i$2$$i$lcssa = $i$2$$i;
   break;
  }
 }
 $$0 = $i$2$$i$lcssa;
 return ($$0|0);
}
function _mainposition($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$0$i = 0, $$c = 0, $$lobit$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i$i = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 switch ($2|0) {
 case 2:  {
  $82 = HEAP32[$key>>2]|0;
  $83 = $82;
  $84 = (($t) + 7|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = 1 << $86;
  $88 = (($87) + -1)|0;
  $89 = $88 | 1;
  $90 = (($83>>>0) % ($89>>>0))&-1;
  $91 = (($t) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($90<<5)|0);
  $$0 = $93;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $72 = HEAP32[$key>>2]|0;
  $73 = (($t) + 7|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = 1 << $75;
  $77 = (($76) + -1)|0;
  $78 = $77 & $72;
  $79 = (($t) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + ($78<<5)|0);
  $$0 = $81;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $38 = HEAP32[$key>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($t) + 7|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = 1 << $43;
  $45 = (($44) + -1)|0;
  $46 = $45 & $40;
  $47 = (($t) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($46<<5)|0);
  $$0 = $49;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 20:  {
  $50 = HEAP32[$key>>2]|0;
  $51 = (($50) + 6|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $54 = (($50) + 16|0);
   $55 = (($50) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($50) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_luaS_hash($54,$56,$58)|0);
   $$c = $59;
   HEAP32[$57>>2] = $$c;
   HEAP8[$51>>0] = 1;
   $$pre = HEAP32[$key>>2]|0;
   $61 = $$pre;
  } else {
   $61 = $50;
  }
  $60 = (($61) + 8|0);
  $62 = HEAP32[$60>>2]|0;
  $63 = (($t) + 7|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = 1 << $65;
  $67 = (($66) + -1)|0;
  $68 = $67 & $62;
  $69 = (($t) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($68<<5)|0);
  $$0 = $71;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $18 = +HEAPF64[$key>>3];
  $19 = (+_frexp($18,$i$i));
  $20 = $19 * 2147483648.0;
  $21 = $20 >= -9.2233720368547758E+18;
  $22 = $20 < 9.2233720368547758E+18;
  $or$cond$i = $21 & $22;
  if ($or$cond$i) {
   $23 = (~~$20)>>>0;
   $24 = +Math_abs($20) >= 1.0 ? $20 > 0.0 ? (~~+Math_min(+Math_floor($20 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($20 - +(~~$20 >>> 0)) / 4294967296.0) >>> 0 : 0;
   $25 = HEAP32[$i$i>>2]|0;
   $26 = (($25) + ($23))|0;
   $$lobit$i = $26 >> 31;
   $27 = $$lobit$i ^ $26;
   $$0$i = $27;
  } else {
   $$0$i = 0;
  }
  $28 = (($t) + 7|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = 1 << $30;
  $32 = (($31) + -1)|0;
  $33 = $32 | 1;
  $34 = (($$0$i|0) % ($33|0))&-1;
  $35 = (($t) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<5)|0);
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 22:  {
  $94 = HEAP32[$key>>2]|0;
  $95 = $94;
  $96 = (($t) + 7|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = 1 << $98;
  $100 = (($99) + -1)|0;
  $101 = $100 | 1;
  $102 = (($95>>>0) % ($101>>>0))&-1;
  $103 = (($t) + 16|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + ($102<<5)|0);
  $$0 = $105;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 19:  {
  $3 = $key;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($t) + 7|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = 1 << $11;
  $13 = (($12) + -1)|0;
  $14 = $13 & $5;
  $15 = (($t) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<5)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $106 = HEAP32[$key>>2]|0;
  $107 = $106;
  $108 = (($t) + 7|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = 1 << $110;
  $112 = (($111) + -1)|0;
  $113 = $112 | 1;
  $114 = (($107>>>0) % ($113>>>0))&-1;
  $115 = (($t) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + ($114<<5)|0);
  $$0 = $117;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _luaopen_table($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,7);
 _luaL_setfuncs($L,9832,0);
 return 1;
}
function _tconcat($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $lsep = 0, $ta = 0, $ta$idx$val = 0, $ta$idx1$val = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $ta = sp + 8248|0;
 $b = sp + 32|0;
 $lsep = sp + 8240|0;
 $0 = (_luaL_optlstring($L,2,9952,$lsep)|0);
 _checktab($L,$ta);
 $1 = (_luaL_optinteger($L,3,1,0)|0);
 $2 = tempRet0;
 $3 = (_lua_type($L,4)|0);
 $4 = ($3|0)<(1);
 if ($4) {
  $5 = (_luaL_len($L,1)|0);
  $6 = tempRet0;
  $10 = $6;$12 = $5;
 } else {
  $7 = (_luaL_checkinteger($L,4)|0);
  $8 = tempRet0;
  $10 = $8;$12 = $7;
 }
 _luaL_buffinit($L,$b);
 $9 = ($2|0)<($10|0);
 $11 = ($1>>>0)<($12>>>0);
 $13 = ($2|0)==($10|0);
 $14 = $13 & $11;
 $15 = $9 | $14;
 if ($15) {
  $ta$idx1$val = HEAP32[$ta>>2]|0;
  $16 = $1;$17 = $2;
  while(1) {
   (FUNCTION_TABLE_iiiii[$ta$idx1$val & 255]($L,1,$16,$17)|0);
   $18 = (_lua_isstring($L,-1)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = (_lua_type($L,-1)|0);
    $21 = (_lua_typename($L,$20)|0);
    HEAP32[$vararg_buffer>>2] = $21;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    $22 = $vararg_ptr1;
    $23 = $22;
    HEAP32[$23>>2] = $16;
    $24 = (($22) + 4)|0;
    $25 = $24;
    HEAP32[$25>>2] = $17;
    (_luaL_error($L,10160,$vararg_buffer)|0);
   }
   _luaL_addvalue($b);
   $26 = HEAP32[$lsep>>2]|0;
   _luaL_addlstring($b,$0,$26);
   $27 = (_i64Add(($16|0),($17|0),1,0)|0);
   $28 = tempRet0;
   $29 = ($28|0)<($10|0);
   $30 = ($27>>>0)<($12>>>0);
   $31 = ($28|0)==($10|0);
   $32 = $31 & $30;
   $33 = $29 | $32;
   if ($33) {
    $16 = $27;$17 = $28;
   } else {
    break;
   }
  }
 } else {
  $34 = ($1|0)==($12|0);
  $35 = ($2|0)==($10|0);
  $36 = $34 & $35;
  if (!($36)) {
   _luaL_pushresult($b);
   STACKTOP = sp;return 1;
  }
 }
 $ta$idx$val = HEAP32[$ta>>2]|0;
 (FUNCTION_TABLE_iiiii[$ta$idx$val & 255]($L,1,$12,$10)|0);
 $37 = (_lua_isstring($L,-1)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = (_lua_type($L,-1)|0);
  $40 = (_lua_typename($L,$39)|0);
  HEAP32[$vararg_buffer2>>2] = $40;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  $41 = $vararg_ptr5;
  $42 = $41;
  HEAP32[$42>>2] = $12;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $10;
  (_luaL_error($L,10160,$vararg_buffer2)|0);
 }
 _luaL_addvalue($b);
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _tinsert($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $ta = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ta = sp + 8|0;
 _checktab($L,$ta);
 $0 = (_luaL_len($L,1)|0);
 $1 = tempRet0;
 $2 = (_i64Add(($0|0),($1|0),1,0)|0);
 $3 = tempRet0;
 $4 = (_lua_gettop($L)|0);
 if ((($4|0) == 2)) {
  $37 = $2;$38 = $3;
 } else if ((($4|0) == 3)) {
  label = 2;
 } else {
  $34 = (_luaL_error($L,10120,$vararg_buffer)|0);
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 2) {
  $5 = (_luaL_checkinteger($L,2)|0);
  $6 = tempRet0;
  $7 = ($6|0)<(0);
  $8 = ($5>>>0)<(1);
  $9 = ($6|0)==(0);
  $10 = $9 & $8;
  $11 = $7 | $10;
  $12 = ($6|0)>($3|0);
  $13 = ($5>>>0)>($2>>>0);
  $14 = ($6|0)==($3|0);
  $15 = $14 & $13;
  $16 = $12 | $15;
  $or$cond = $11 | $16;
  if ($or$cond) {
   (_luaL_argerror($L,2,10056)|0);
  }
  $17 = ($1|0)<($6|0);
  $18 = ($0>>>0)<($5>>>0);
  $19 = ($1|0)==($6|0);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if ($21) {
   $37 = $5;$38 = $6;
  } else {
   $22 = HEAP32[$ta>>2]|0;
   $23 = (($ta) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $2;$26 = $3;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    (FUNCTION_TABLE_iiiii[$22 & 255]($L,1,$27,$28)|0);
    FUNCTION_TABLE_viiii[$24 & 255]($L,1,$25,$26);
    $29 = ($28|0)>($6|0);
    $30 = ($27>>>0)>($5>>>0);
    $31 = ($28|0)==($6|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if ($33) {
     $25 = $27;$26 = $28;
    } else {
     break;
    }
   }
   $37 = $5;$38 = $6;
  }
 }
 $35 = (($ta) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_viiii[$36 & 255]($L,1,$37,$38);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pack($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 _lua_createtable($L,$0,1);
 _lua_rotate($L,1,1);
 $1 = ($0|0)>(0);
 if ($1) {
  $i$01 = $0;
  while(1) {
   $2 = ($i$01|0)<(0);
   $3 = $2 << 31 >> 31;
   _lua_rawseti($L,1,$i$01,$3);
   $4 = (($i$01) + -1)|0;
   $5 = ($4|0)>(0);
   if ($5) {
    $i$01 = $4;
   } else {
    break;
   }
  }
 }
 $6 = ($0|0)<(0);
 $7 = $6 << 31 >> 31;
 _lua_pushinteger($L,$0,$7);
 _lua_setfield($L,1,10112);
 return 1;
}
function _unpack($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ta = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ta = sp + 8|0;
 _checktab($L,$ta);
 $0 = (_luaL_optinteger($L,2,1,0)|0);
 $1 = tempRet0;
 $2 = (_lua_type($L,3)|0);
 $3 = ($2|0)<(1);
 if ($3) {
  $4 = (_luaL_len($L,1)|0);
  $5 = tempRet0;
  $10 = $4;$8 = $5;
 } else {
  $6 = (_luaL_checkinteger($L,3)|0);
  $7 = tempRet0;
  $10 = $6;$8 = $7;
 }
 $9 = ($8|0)<($1|0);
 $11 = ($10>>>0)<($0>>>0);
 $12 = ($8|0)==($1|0);
 $13 = $12 & $11;
 $14 = $9 | $13;
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (_i64Subtract(($10|0),($8|0),($0|0),($1|0))|0);
 $16 = tempRet0;
 $17 = ($16>>>0)>(0);
 $18 = ($15>>>0)>(2147483646);
 $19 = ($16|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 if (!($21)) {
  $22 = (_i64Add(($15|0),($16|0),1,0)|0);
  $23 = tempRet0;
  $24 = (_lua_checkstack($L,$22)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $26 = HEAP32[$ta>>2]|0;
   $28 = $0;$29 = $1;
   while(1) {
    (FUNCTION_TABLE_iiiii[$26 & 255]($L,1,$28,$29)|0);
    $30 = (_i64Add(($28|0),($29|0),1,0)|0);
    $31 = tempRet0;
    $32 = ($29|0)<($8|0);
    $33 = ($28>>>0)<($10>>>0);
    $34 = ($29|0)==($8|0);
    $35 = $34 & $33;
    $36 = $32 | $35;
    if ($36) {
     $28 = $30;$29 = $31;
    } else {
     break;
    }
   }
   $$0 = $22;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $27 = (_luaL_error($L,10080,$vararg_buffer)|0);
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _tremove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ta = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ta = sp;
 _checktab($L,$ta);
 $0 = (_luaL_len($L,1)|0);
 $1 = tempRet0;
 $2 = (_luaL_optinteger($L,2,$0,$1)|0);
 $3 = tempRet0;
 $4 = ($2|0)==($0|0);
 $5 = ($3|0)==($1|0);
 $6 = $4 & $5;
 if (!($6)) {
  $7 = ($3|0)<(0);
  $8 = ($2>>>0)<(1);
  $9 = ($3|0)==(0);
  $10 = $9 & $8;
  $11 = $7 | $10;
  $12 = (_i64Add(($0|0),($1|0),1,0)|0);
  $13 = tempRet0;
  $14 = ($3|0)>($13|0);
  $15 = ($2>>>0)>($12>>>0);
  $16 = ($3|0)==($13|0);
  $17 = $16 & $15;
  $18 = $14 | $17;
  $or$cond = $11 | $18;
  if ($or$cond) {
   (_luaL_argerror($L,1,10056)|0);
  }
 }
 $19 = HEAP32[$ta>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 255]($L,1,$2,$3)|0);
 $20 = ($3|0)<($1|0);
 $21 = ($2>>>0)<($0>>>0);
 $22 = ($3|0)==($1|0);
 $23 = $22 & $21;
 $24 = $20 | $23;
 $25 = (($ta) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 if (!($24)) {
  $36 = $2;$37 = $3;
  _lua_pushnil($L);
  FUNCTION_TABLE_viiii[$26 & 255]($L,1,$36,$37);
  STACKTOP = sp;return 1;
 }
 $27 = $2;$28 = $3;
 while(1) {
  $29 = (_i64Add(($27|0),($28|0),1,0)|0);
  $30 = tempRet0;
  (FUNCTION_TABLE_iiiii[$19 & 255]($L,1,$29,$30)|0);
  FUNCTION_TABLE_viiii[$26 & 255]($L,1,$27,$28);
  $31 = ($30|0)<($1|0);
  $32 = ($29>>>0)<($0>>>0);
  $33 = ($30|0)==($1|0);
  $34 = $33 & $32;
  $35 = $31 | $34;
  if ($35) {
   $27 = $29;$28 = $30;
  } else {
   break;
  }
 }
 $36 = $0;$37 = $1;
 _lua_pushnil($L);
 FUNCTION_TABLE_viiii[$26 & 255]($L,1,$36,$37);
 STACKTOP = sp;return 1;
}
function _tmove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 $2 = (_luaL_checkinteger($L,3)|0);
 $3 = tempRet0;
 $4 = (_luaL_checkinteger($L,4)|0);
 $5 = tempRet0;
 $6 = (_lua_type($L,5)|0);
 $7 = ($6|0)>(0);
 $8 = $7 ? 5 : 1;
 $9 = ($3|0)<($1|0);
 $10 = ($2>>>0)<($0>>>0);
 $11 = ($3|0)==($1|0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 if ($13) {
  _lua_pushvalue($L,$8);
  return 1;
 }
 $14 = (_luaL_getmetafield($L,1,12368)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _luaL_checktype($L,1,5);
  $53 = 228;
 } else {
  $53 = 227;
 }
 $16 = (_luaL_getmetafield($L,$8,10432)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  _luaL_checktype($L,$8,5);
  $56 = 230;
 } else {
  $56 = 229;
 }
 $18 = ($1|0)>(0);
 $19 = ($0>>>0)>(0);
 $20 = ($1|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 $23 = (_i64Add(($0|0),($1|0),-1,2147483647)|0);
 $24 = tempRet0;
 $25 = ($3|0)<($24|0);
 $26 = ($2>>>0)<($23>>>0);
 $27 = ($3|0)==($24|0);
 $28 = $27 & $26;
 $29 = $25 | $28;
 $or$cond = $22 | $29;
 if (!($or$cond)) {
  (_luaL_argerror($L,3,10000)|0);
 }
 $30 = (_i64Subtract(($2|0),($3|0),($0|0),($1|0))|0);
 $31 = tempRet0;
 $32 = (_i64Subtract(-1,2147483647,($30|0),($31|0))|0);
 $33 = tempRet0;
 $34 = ($5|0)>($33|0);
 $35 = ($4>>>0)>($32>>>0);
 $36 = ($5|0)==($33|0);
 $37 = $36 & $35;
 $38 = $34 | $37;
 if ($38) {
  (_luaL_argerror($L,4,10032)|0);
 }
 $39 = ($5|0)>($1|0);
 $40 = ($4>>>0)>($0>>>0);
 $41 = ($5|0)==($1|0);
 $42 = $41 & $40;
 $43 = $39 | $42;
 $44 = ($31|0)>(-1);
 $45 = ($30>>>0)>(4294967295);
 $46 = ($31|0)==(-1);
 $47 = $46 & $45;
 $48 = $44 | $47;
 if ($43) {
  if (!($48)) {
   _lua_pushvalue($L,$8);
   return 1;
  }
  $49 = $30;$50 = $31;
  while(1) {
   $51 = (_i64Add(($49|0),($50|0),($0|0),($1|0))|0);
   $52 = tempRet0;
   (FUNCTION_TABLE_iiiii[$53 & 255]($L,1,$51,$52)|0);
   $54 = (_i64Add(($49|0),($50|0),($4|0),($5|0))|0);
   $55 = tempRet0;
   FUNCTION_TABLE_viiii[$56 & 255]($L,$8,$54,$55);
   $57 = (_i64Add(($49|0),($50|0),-1,-1)|0);
   $58 = tempRet0;
   $59 = ($50|0)>(0);
   $60 = ($49>>>0)>(0);
   $61 = ($50|0)==(0);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $49 = $57;$50 = $58;
   } else {
    break;
   }
  }
  _lua_pushvalue($L,$8);
  return 1;
 } else {
  if (!($48)) {
   _lua_pushvalue($L,$8);
   return 1;
  }
  $64 = 0;$65 = 0;
  while(1) {
   $66 = (_i64Add(($64|0),($65|0),($0|0),($1|0))|0);
   $67 = tempRet0;
   (FUNCTION_TABLE_iiiii[$53 & 255]($L,1,$66,$67)|0);
   $68 = (_i64Add(($64|0),($65|0),($4|0),($5|0))|0);
   $69 = tempRet0;
   FUNCTION_TABLE_viiii[$56 & 255]($L,$8,$68,$69);
   $70 = (_i64Add(($64|0),($65|0),1,0)|0);
   $71 = tempRet0;
   $72 = ($65|0)<($31|0);
   $73 = ($64>>>0)<($30>>>0);
   $74 = ($65|0)==($31|0);
   $75 = $74 & $73;
   $76 = $72 | $75;
   if ($76) {
    $64 = $70;$65 = $71;
   } else {
    break;
   }
  }
  _lua_pushvalue($L,$8);
  return 1;
 }
 return (0)|0;
}
function _sort($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ta = sp;
 _checktab($L,$ta);
 $0 = (_luaL_len($L,1)|0);
 $1 = tempRet0;
 _luaL_checkstack($L,50,9952);
 $2 = (_lua_type($L,2)|0);
 $3 = ($2|0)<(1);
 if (!($3)) {
  _luaL_checktype($L,2,6);
 }
 _lua_settop($L,2);
 _auxsort($L,$ta,1,$0);
 STACKTOP = sp;return 0;
}
function _checktab($L,$ta) {
 $L = $L|0;
 $ta = $ta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$ta>>2] = 0;
 $0 = (($ta) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (_lua_getmetatable($L,1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  (_lua_pushstring($L,12368)|0);
  $3 = (_lua_rawget($L,-2)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP32[$ta>>2] = 227;
  }
  (_lua_pushstring($L,10432)|0);
  $5 = (_lua_rawget($L,-3)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   HEAP32[$0>>2] = 229;
  }
  _lua_settop($L,-4);
 }
 $7 = HEAP32[$ta>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   return;
  }
 }
 _luaL_checktype($L,1,5);
 $11 = HEAP32[$ta>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$ta>>2] = 228;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  return;
 }
 HEAP32[$0>>2] = 230;
 return;
}
function _auxsort($L,$ta,$l,$u) {
 $L = $L|0;
 $ta = $ta|0;
 $l = $l|0;
 $u = $u|0;
 var $$$01 = 0, $$0$i$0 = 0, $$01$ = 0, $$0112 = 0, $$013 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa25 = 0, $$lcssa26 = 0, $$lcssa28 = 0, $$lcssa29 = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $i$0$$0 = 0;
 var $i$0$lcssa = 0, $i$0$lcssa$lcssa = 0, $i$0$ph = 0, $j$0$ph = 0, $j$1$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($u|0)>($l|0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($ta) + 4|0);
 $$0112 = $l;$$013 = $u;
 while(1) {
  $2 = HEAP32[$ta>>2]|0;
  $3 = ($$0112|0)<(0);
  $4 = $3 << 31 >> 31;
  (FUNCTION_TABLE_iiiii[$2 & 255]($L,1,$$0112,$4)|0);
  $5 = HEAP32[$ta>>2]|0;
  $6 = ($$013|0)<(0);
  $7 = $6 << 31 >> 31;
  (FUNCTION_TABLE_iiiii[$5 & 255]($L,1,$$013,$7)|0);
  $8 = (_sort_comp($L,-1,-2)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   _lua_settop($L,-3);
  } else {
   $10 = HEAP32[$1>>2]|0;
   FUNCTION_TABLE_viiii[$10 & 255]($L,1,$$0112,$4);
   $11 = HEAP32[$1>>2]|0;
   FUNCTION_TABLE_viiii[$11 & 255]($L,1,$$013,$7);
  }
  $12 = (($$013) - ($$0112))|0;
  $13 = ($12|0)==(1);
  if ($13) {
   break;
  }
  $14 = (($$013) + ($$0112))|0;
  $15 = (($14|0) / 2)&-1;
  $16 = HEAP32[$ta>>2]|0;
  $17 = ($15|0)<(0);
  $18 = $17 << 31 >> 31;
  (FUNCTION_TABLE_iiiii[$16 & 255]($L,1,$15,$18)|0);
  $19 = HEAP32[$ta>>2]|0;
  (FUNCTION_TABLE_iiiii[$19 & 255]($L,1,$$0112,$4)|0);
  $20 = (_sort_comp($L,-2,-1)|0);
  $21 = ($20|0)==(0);
  do {
   if ($21) {
    _lua_settop($L,-2);
    $24 = HEAP32[$ta>>2]|0;
    (FUNCTION_TABLE_iiiii[$24 & 255]($L,1,$$013,$7)|0);
    $25 = (_sort_comp($L,-1,-2)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     _lua_settop($L,-3);
     break;
    } else {
     $27 = HEAP32[$1>>2]|0;
     FUNCTION_TABLE_viiii[$27 & 255]($L,1,$15,$18);
     $28 = HEAP32[$1>>2]|0;
     FUNCTION_TABLE_viiii[$28 & 255]($L,1,$$013,$7);
     break;
    }
   } else {
    $22 = HEAP32[$1>>2]|0;
    FUNCTION_TABLE_viiii[$22 & 255]($L,1,$15,$18);
    $23 = HEAP32[$1>>2]|0;
    FUNCTION_TABLE_viiii[$23 & 255]($L,1,$$0112,$4);
   }
  } while(0);
  $29 = ($12|0)==(2);
  if ($29) {
   break;
  }
  $30 = HEAP32[$ta>>2]|0;
  (FUNCTION_TABLE_iiiii[$30 & 255]($L,1,$15,$18)|0);
  _lua_pushvalue($L,-1);
  $31 = HEAP32[$ta>>2]|0;
  $32 = (($$013) + -1)|0;
  $33 = ($32|0)<(0);
  $34 = $33 << 31 >> 31;
  (FUNCTION_TABLE_iiiii[$31 & 255]($L,1,$32,$34)|0);
  $35 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_viiii[$35 & 255]($L,1,$15,$18);
  $36 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_viiii[$36 & 255]($L,1,$32,$34);
  $i$0$ph = $$0112;$j$0$ph = $32;
  while(1) {
   $37 = HEAP32[$ta>>2]|0;
   $38 = (($i$0$ph) + 1)|0;
   $39 = ($38|0)<(0);
   $40 = $39 << 31 >> 31;
   (FUNCTION_TABLE_iiiii[$37 & 255]($L,1,$38,$40)|0);
   $41 = (_sort_comp($L,-1,-2)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $$lcssa = $38;$78 = $38;$79 = $40;$i$0$lcssa = $i$0$ph;
   } else {
    $50 = $38;
    while(1) {
     $49 = ($$013|0)>($50|0);
     if (!($49)) {
      (_luaL_error($L,9960,$vararg_buffer)|0);
     }
     _lua_settop($L,-2);
     $51 = HEAP32[$ta>>2]|0;
     $52 = (($50) + 1)|0;
     $53 = ($52|0)<(0);
     $54 = $53 << 31 >> 31;
     (FUNCTION_TABLE_iiiii[$51 & 255]($L,1,$52,$54)|0);
     $55 = (_sort_comp($L,-1,-2)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      $$lcssa25 = $50;$$lcssa26 = $52;$83 = $52;$84 = $54;
      break;
     } else {
      $50 = $52;
     }
    }
    $$lcssa = $$lcssa26;$78 = $83;$79 = $84;$i$0$lcssa = $$lcssa25;
   }
   $43 = HEAP32[$ta>>2]|0;
   $44 = (($j$0$ph) + -1)|0;
   $45 = ($44|0)<(0);
   $46 = $45 << 31 >> 31;
   (FUNCTION_TABLE_iiiii[$43 & 255]($L,1,$44,$46)|0);
   $47 = (_sort_comp($L,-3,-1)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $$lcssa4 = $44;$81 = $44;$82 = $46;$j$1$lcssa = $j$0$ph;
   } else {
    $57 = $44;
    while(1) {
     $58 = ($57|0)>($$0112|0);
     if (!($58)) {
      (_luaL_error($L,9960,$vararg_buffer1)|0);
     }
     _lua_settop($L,-2);
     $59 = HEAP32[$ta>>2]|0;
     $60 = (($57) + -1)|0;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     (FUNCTION_TABLE_iiiii[$59 & 255]($L,1,$60,$62)|0);
     $63 = (_sort_comp($L,-3,-1)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      $$lcssa28 = $57;$$lcssa29 = $60;$85 = $60;$86 = $62;
      break;
     } else {
      $57 = $60;
     }
    }
    $$lcssa4 = $$lcssa29;$81 = $85;$82 = $86;$j$1$lcssa = $$lcssa28;
   }
   $65 = ($j$1$lcssa|0)>($$lcssa|0);
   if (!($65)) {
    $$lcssa$lcssa = $$lcssa;$68 = $78;$69 = $79;$i$0$lcssa$lcssa = $i$0$lcssa;
    break;
   }
   $77 = HEAP32[$1>>2]|0;
   FUNCTION_TABLE_viiii[$77 & 255]($L,1,$78,$79);
   $80 = HEAP32[$1>>2]|0;
   FUNCTION_TABLE_viiii[$80 & 255]($L,1,$81,$82);
   $i$0$ph = $$lcssa;$j$0$ph = $$lcssa4;
  }
  _lua_settop($L,-4);
  $66 = HEAP32[$ta>>2]|0;
  (FUNCTION_TABLE_iiiii[$66 & 255]($L,1,$32,$34)|0);
  $67 = HEAP32[$ta>>2]|0;
  (FUNCTION_TABLE_iiiii[$67 & 255]($L,1,$68,$69)|0);
  $70 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_viiii[$70 & 255]($L,1,$32,$34);
  $71 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_viiii[$71 & 255]($L,1,$68,$69);
  $72 = (($$lcssa$lcssa) - ($$0112))|0;
  $73 = (($$013) - ($$lcssa$lcssa))|0;
  $74 = ($72|0)<($73|0);
  $75 = (($i$0$lcssa$lcssa) + 2)|0;
  $$$01 = $74 ? $75 : $$0112;
  $$0$i$0 = $74 ? $$013 : $i$0$lcssa$lcssa;
  $i$0$$0 = $74 ? $i$0$lcssa$lcssa : $$013;
  $$01$ = $74 ? $$0112 : $75;
  _auxsort($L,$ta,$$01$,$i$0$$0);
  $76 = ($$0$i$0|0)>($$$01|0);
  if ($76) {
   $$0112 = $$$01;$$013 = $$0$i$0;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sort_comp($L,$a,$b) {
 $L = $L|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,2)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = (_lua_compare($L,$a,$b,1)|0);
  $$0 = $5;
  return ($$0|0);
 } else {
  _lua_pushvalue($L,2);
  $2 = (($a) + -1)|0;
  _lua_pushvalue($L,$2);
  $3 = (($b) + -2)|0;
  _lua_pushvalue($L,$3);
  _lua_callk($L,2,1,0,0);
  $4 = (_lua_toboolean($L,-1)|0);
  _lua_settop($L,-2);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaT_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $i$01 = 0;
 while(1) {
  $1 = (10336 + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_luaS_new($L,$2)|0);
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4) + ($i$01<<2)|0) + 148|0);
  HEAP32[$5>>2] = $3;
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6) + ($i$01<<2)|0) + 148|0);
  $8 = HEAP32[$7>>2]|0;
  _luaC_fix($L,$8);
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==(24);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 return;
}
function _luaT_gettm($events,$event,$ename) {
 $events = $events|0;
 $event = $event|0;
 $ename = $ename|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_getstr($events,$ename)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $0;
  return ($$0|0);
 }
 $4 = 1 << $event;
 $5 = (($events) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 | $4;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 $$0 = 0;
 return ($$0|0);
}
function _luaT_gettmbyobj($L,$o,$event) {
 $L = $L|0;
 $o = $o|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0, $mt$0$in = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 if ((($2|0) == 5)) {
  $3 = HEAP32[$o>>2]|0;
  $4 = (($3) + 24|0);
  $mt$0$in = $4;
 } else if ((($2|0) == 7)) {
  $5 = HEAP32[$o>>2]|0;
  $6 = (($5) + 8|0);
  $mt$0$in = $6;
 } else {
  $7 = (($L) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8) + ($2<<2)|0) + 244|0);
  $mt$0$in = $9;
 }
 $mt$0 = HEAP32[$mt$0$in>>2]|0;
 $10 = ($mt$0|0)==(0|0);
 if ($10) {
  $16 = 6528;
  return ($16|0);
 }
 $11 = (($L) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12) + ($event<<2)|0) + 148|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_luaH_getstr($mt$0,$14)|0);
 $16 = $15;
 return ($16|0);
}
function _luaT_callTM($L,$f,$p1,$p2,$p3,$hasres) {
 $L = $L|0;
 $f = $f|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 $hasres = $hasres|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$2>>2] = $4;
 ;HEAP32[$3+0>>2]=HEAP32[$f+0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$f+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$f+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$f+12>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$2>>2] = $6;
 ;HEAP32[$5+0>>2]=HEAP32[$p1+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$p1+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$p1+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$p1+12>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$2>>2] = $8;
 ;HEAP32[$7+0>>2]=HEAP32[$p2+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$p2+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$p2+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$p2+12>>2]|0;
 $9 = ($hasres|0)==(0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 16|0);
  HEAP32[$2>>2] = $11;
  ;HEAP32[$10+0>>2]=HEAP32[$p3+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$p3+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$p3+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$p3+12>>2]|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) + -64|0);
  $14 = (($L) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 34|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 & 2;
  _luaD_call($L,$13,0,$19);
  return;
 } else {
  $20 = $p3;
  $21 = $1;
  $22 = (($20) - ($21))|0;
  $23 = HEAP32[$2>>2]|0;
  $24 = (($hasres) + -4)|0;
  $25 = (($23) + ($24<<4)|0);
  $26 = (($L) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 34|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 & 2;
  _luaD_call($L,$25,$hasres,$31);
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + ($22)|0);
  $34 = HEAP32[$2>>2]|0;
  $35 = (($34) + -16|0);
  HEAP32[$2>>2] = $35;
  ;HEAP32[$33+0>>2]=HEAP32[$35+0>>2]|0;HEAP32[$33+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$33+12>>2]=HEAP32[$35+12>>2]|0;
  return;
 }
}
function _luaT_callbinTM($L,$p1,$p2,$res,$event) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $res = $res|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0$i = 0, $mt$0$i2 = 0, $mt$0$in$i = 0, $mt$0$in$i1 = 0, $tm$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 if ((($2|0) == 7)) {
  $5 = HEAP32[$p1>>2]|0;
  $6 = (($5) + 8|0);
  $mt$0$in$i = $6;
 } else if ((($2|0) == 5)) {
  $3 = HEAP32[$p1>>2]|0;
  $4 = (($3) + 24|0);
  $mt$0$in$i = $4;
 } else {
  $7 = (($L) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8) + ($2<<2)|0) + 244|0);
  $mt$0$in$i = $9;
 }
 $mt$0$i = HEAP32[$mt$0$in$i>>2]|0;
 $10 = ($mt$0$i|0)==(0|0);
 if ($10) {
  $17 = 6528;
 } else {
  $11 = (($L) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12) + ($event<<2)|0) + 148|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_luaH_getstr($mt$0$i,$14)|0);
  $17 = $15;
 }
 $16 = (($17) + 8|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = (($p2) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 15;
  if ((($22|0) == 7)) {
   $25 = HEAP32[$p2>>2]|0;
   $26 = (($25) + 8|0);
   $mt$0$in$i1 = $26;
  } else if ((($22|0) == 5)) {
   $23 = HEAP32[$p2>>2]|0;
   $24 = (($23) + 24|0);
   $mt$0$in$i1 = $24;
  } else {
   $27 = (($L) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28) + ($22<<2)|0) + 244|0);
   $mt$0$in$i1 = $29;
  }
  $mt$0$i2 = HEAP32[$mt$0$in$i1>>2]|0;
  $30 = ($mt$0$i2|0)==(0|0);
  if ($30) {
   $tm$0 = 6528;
  } else {
   $31 = (($L) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32) + ($event<<2)|0) + 148|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_luaH_getstr($mt$0$i2,$34)|0);
   $tm$0 = $35;
  }
 } else {
  $tm$0 = $17;
 }
 $36 = (($tm$0) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  return ($$0|0);
 }
 $39 = (($L) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($L) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 16|0);
 HEAP32[$41>>2] = $43;
 ;HEAP32[$42+0>>2]=HEAP32[$tm$0+0>>2]|0;HEAP32[$42+4>>2]=HEAP32[$tm$0+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$tm$0+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$tm$0+12>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = (($44) + 16|0);
 HEAP32[$41>>2] = $45;
 ;HEAP32[$44+0>>2]=HEAP32[$p1+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$p1+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$p1+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$p1+12>>2]|0;
 $46 = HEAP32[$41>>2]|0;
 $47 = (($46) + 16|0);
 HEAP32[$41>>2] = $47;
 ;HEAP32[$46+0>>2]=HEAP32[$p2+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$p2+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$p2+8>>2]|0;HEAP32[$46+12>>2]=HEAP32[$p2+12>>2]|0;
 $48 = $res;
 $49 = $40;
 $50 = (($48) - ($49))|0;
 $51 = HEAP32[$41>>2]|0;
 $52 = (($51) + -48|0);
 $53 = (($L) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 34|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $57 & 2;
 _luaD_call($L,$52,1,$58);
 $59 = HEAP32[$39>>2]|0;
 $60 = (($59) + ($50)|0);
 $61 = HEAP32[$41>>2]|0;
 $62 = (($61) + -16|0);
 HEAP32[$41>>2] = $62;
 ;HEAP32[$60+0>>2]=HEAP32[$62+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$62+8>>2]|0;HEAP32[$60+12>>2]=HEAP32[$62+12>>2]|0;
 $$0 = 1;
 return ($$0|0);
}
function _luaT_trybinTM($L,$p1,$p2,$res,$event) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $res = $res|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = (_luaT_callbinTM($L,$p1,$p2,$res,$event)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 switch ($event|0) {
 case 22:  {
  _luaG_concaterror($L,$p1,$p2);
  // unreachable;
  break;
 }
 case 19: case 17: case 16: case 15: case 14: case 13:  {
  $2 = (($p1) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(3);
  if ($4) {
   $5 = +HEAPF64[$p1>>3];
   HEAPF64[$dummy>>3] = $5;
  } else {
   $6 = (_luaV_tonumber_($p1,$dummy)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    _luaG_opinterror($L,$p1,$p2,10624);
    // unreachable;
   }
  }
  $8 = (($p2) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(3);
  if ($10) {
   $11 = +HEAPF64[$p2>>3];
   HEAPF64[$dummy>>3] = $11;
   _luaG_tointerror($L,$p1,$p2);
   // unreachable;
  }
  $12 = (_luaV_tonumber_($p2,$dummy)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   _luaG_opinterror($L,$p1,$p2,10624);
   // unreachable;
  } else {
   _luaG_tointerror($L,$p1,$p2);
   // unreachable;
  }
  break;
 }
 default: {
  _luaG_opinterror($L,$p1,$p2,10656);
  // unreachable;
 }
 }
}
function _luaT_callorderTM($L,$p1,$p2,$event) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaT_callbinTM($L,$p1,$p2,$1,$event)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = 0;
 } else {
  $8 = ($6|0)==(1);
  if ($8) {
   $9 = HEAP32[$4>>2]|0;
   $phitmp = ($9|0)!=(0);
   $11 = $phitmp;
  } else {
   $11 = 1;
  }
 }
 $10 = $11&1;
 $$0 = $10;
 return ($$0|0);
}
function _luaU_undump($L,$Z,$buff,$name) {
 $L = $L|0;
 $Z = $Z|0;
 $buff = $buff|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $S = 0, $buff$i$i = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $x$i = 0, $x$i$i = 0, $x$i$i$i = 0, $x$i$i11$i = 0, $x$i$i14$i = 0, $x$i$i17$i = 0, $x$i$i8$i = 0, $x$i2$i = 0, $x$i20$i = 0, $x$i22$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $x$i = sp + 91|0;
 $x$i22$i = sp + 40|0;
 $x$i20$i = sp + 32|0;
 $x$i$i17$i = sp + 86|0;
 $x$i$i14$i = sp + 90|0;
 $x$i$i11$i = sp + 89|0;
 $x$i$i8$i = sp + 88|0;
 $x$i$i$i = sp + 87|0;
 $x$i2$i = sp + 85|0;
 $x$i$i = sp + 84|0;
 $buff$i$i = sp + 72|0;
 $S = sp + 56|0;
 $0 = HEAP8[$name>>0]|0;
 if ((($0<<24>>24) == 27)) {
  $3 = (($S) + 12|0);
  HEAP32[$3>>2] = 10688;
 } else if ((($0<<24>>24) == 61) | (($0<<24>>24) == 64)) {
  $1 = (($name) + 1|0);
  $2 = (($S) + 12|0);
  HEAP32[$2>>2] = $1;
 } else {
  $4 = (($S) + 12|0);
  HEAP32[$4>>2] = $name;
 }
 HEAP32[$S>>2] = $L;
 $5 = (($S) + 4|0);
 HEAP32[$5>>2] = $Z;
 $6 = (($S) + 8|0);
 HEAP32[$6>>2] = $buff;
 $7 = (_luaZ_read($Z,$buff$i$i,3)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  _error($S,10704);
  // unreachable;
 }
 $9 = (_memcmp(((10680 + 1|0)),$buff$i$i,3)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  _error($S,10752);
  // unreachable;
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = (_luaZ_read($11,$x$i$i,1)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  _error($S,10704);
  // unreachable;
 }
 $14 = HEAP8[$x$i$i>>0]|0;
 $15 = ($14<<24>>24)==(83);
 if (!($15)) {
  _error($S,10760);
  // unreachable;
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = (_luaZ_read($16,$x$i2$i,1)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  _error($S,10704);
  // unreachable;
 }
 $19 = HEAP8[$x$i2$i>>0]|0;
 $20 = ($19<<24>>24)==(0);
 if (!($20)) {
  _error($S,10784);
  // unreachable;
 }
 $21 = HEAP32[$5>>2]|0;
 $22 = (_luaZ_read($21,$buff$i$i,6)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  _error($S,10704);
  // unreachable;
 }
 $24 = (_memcmp(10808,$buff$i$i,6)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  _error($S,10816);
  // unreachable;
 }
 $26 = HEAP32[$5>>2]|0;
 $27 = (_luaZ_read($26,$x$i$i$i,1)|0);
 $28 = ($27|0)==(0);
 if (!($28)) {
  _error($S,10704);
  // unreachable;
 }
 $29 = HEAP8[$x$i$i$i>>0]|0;
 $30 = ($29<<24>>24)==(4);
 if (!($30)) {
  $31 = HEAP32[$S>>2]|0;
  HEAP32[$vararg_buffer>>2] = 10832;
  $32 = (_luaO_pushfstring($31,10952,$vararg_buffer)|0);
  _error($S,$32);
  // unreachable;
 }
 $33 = HEAP32[$5>>2]|0;
 $34 = (_luaZ_read($33,$x$i$i8$i,1)|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  _error($S,10704);
  // unreachable;
 }
 $36 = HEAP8[$x$i$i8$i>>0]|0;
 $37 = ($36<<24>>24)==(4);
 if (!($37)) {
  $38 = HEAP32[$S>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 10840;
  $39 = (_luaO_pushfstring($38,10952,$vararg_buffer1)|0);
  _error($S,$39);
  // unreachable;
 }
 $40 = HEAP32[$5>>2]|0;
 $41 = (_luaZ_read($40,$x$i$i11$i,1)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  _error($S,10704);
  // unreachable;
 }
 $43 = HEAP8[$x$i$i11$i>>0]|0;
 $44 = ($43<<24>>24)==(4);
 if (!($44)) {
  $45 = HEAP32[$S>>2]|0;
  HEAP32[$vararg_buffer4>>2] = 10848;
  $46 = (_luaO_pushfstring($45,10952,$vararg_buffer4)|0);
  _error($S,$46);
  // unreachable;
 }
 $47 = HEAP32[$5>>2]|0;
 $48 = (_luaZ_read($47,$x$i$i14$i,1)|0);
 $49 = ($48|0)==(0);
 if (!($49)) {
  _error($S,10704);
  // unreachable;
 }
 $50 = HEAP8[$x$i$i14$i>>0]|0;
 $51 = ($50<<24>>24)==(8);
 if (!($51)) {
  $52 = HEAP32[$S>>2]|0;
  HEAP32[$vararg_buffer7>>2] = 10864;
  $53 = (_luaO_pushfstring($52,10952,$vararg_buffer7)|0);
  _error($S,$53);
  // unreachable;
 }
 $54 = HEAP32[$5>>2]|0;
 $55 = (_luaZ_read($54,$x$i$i17$i,1)|0);
 $56 = ($55|0)==(0);
 if (!($56)) {
  _error($S,10704);
  // unreachable;
 }
 $57 = HEAP8[$x$i$i17$i>>0]|0;
 $58 = ($57<<24>>24)==(8);
 if (!($58)) {
  $59 = HEAP32[$S>>2]|0;
  HEAP32[$vararg_buffer10>>2] = 10880;
  $60 = (_luaO_pushfstring($59,10952,$vararg_buffer10)|0);
  _error($S,$60);
  // unreachable;
 }
 $61 = HEAP32[$5>>2]|0;
 $62 = (_luaZ_read($61,$x$i20$i,8)|0);
 $63 = ($62|0)==(0);
 if (!($63)) {
  _error($S,10704);
  // unreachable;
 }
 $64 = $x$i20$i;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = ($66|0)==(22136);
 $71 = ($69|0)==(0);
 $72 = $70 & $71;
 if (!($72)) {
  _error($S,10896);
  // unreachable;
 }
 $73 = HEAP32[$5>>2]|0;
 $74 = (_luaZ_read($73,$x$i22$i,8)|0);
 $75 = ($74|0)==(0);
 if (!($75)) {
  _error($S,10704);
  // unreachable;
 }
 $76 = +HEAPF64[$x$i22$i>>3];
 $77 = $76 != 370.5;
 if ($77) {
  _error($S,10920);
  // unreachable;
 }
 $78 = HEAP32[$5>>2]|0;
 $79 = (_luaZ_read($78,$x$i,1)|0);
 $80 = ($79|0)==(0);
 if (!($80)) {
  _error($S,10704);
  // unreachable;
 }
 $81 = HEAP8[$x$i>>0]|0;
 $82 = $81&255;
 $83 = (_luaF_newLclosure($L,$82)|0);
 $84 = (($L) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$85>>2] = $83;
 $86 = (($85) + 8|0);
 HEAP32[$86>>2] = 70;
 $87 = HEAP32[$84>>2]|0;
 $88 = (($87) + 16|0);
 HEAP32[$84>>2] = $88;
 $89 = (($L) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90;
 $92 = $88;
 $93 = (($91) - ($92))|0;
 $94 = ($93|0)<(16);
 if (!($94)) {
  $95 = (_luaF_newproto($L)|0);
  $96 = (($83) + 12|0);
  HEAP32[$96>>2] = $95;
  _LoadFunction($S,$95,0);
  STACKTOP = sp;return ($83|0);
 }
 _luaD_growstack($L,0);
 $95 = (_luaF_newproto($L)|0);
 $96 = (($83) + 12|0);
 HEAP32[$96>>2] = $95;
 _LoadFunction($S,$95,0);
 STACKTOP = sp;return ($83|0);
}
function _error($S,$why) {
 $S = $S|0;
 $why = $why|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$S>>2]|0;
 $1 = (($S) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $why;
 (_luaO_pushfstring($0,10720,$vararg_buffer)|0);
 $3 = HEAP32[$S>>2]|0;
 _luaD_throw($3,3);
 // unreachable;
}
function _LoadFunction($S,$f,$psource) {
 $S = $S|0;
 $f = $f|0;
 $psource = $psource|0;
 var $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i22 = 0, $exitcond$i28 = 0, $exitcond16$i = 0, $exitcond38 = 0, $i$0$i35 = 0, $i$013$i = 0, $i$05$i = 0, $i$08$i = 0;
 var $i$1$i34 = 0, $i$110$i = 0, $i$14$i = 0, $i$16$i37 = 0, $i$29$i = 0, $psource$ = 0, $x$i = 0, $x$i$i = 0, $x$i$i13 = 0, $x$i$i18 = 0, $x$i$i25 = 0, $x$i$i32 = 0, $x$i1$i = 0, $x$i1$i17 = 0, $x$i1$i24 = 0, $x$i10 = 0, $x$i2 = 0, $x$i2$i = 0, $x$i2$i23 = 0, $x$i3$i = 0;
 var $x$i4$i = 0, $x$i5 = 0, $x$i5$i = 0, $x$i5$i16 = 0, $x$i7 = 0, $x$i7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i$i32 = sp + 44|0;
 $x$i2$i23 = sp + 62|0;
 $x$i1$i24 = sp + 60|0;
 $x$i$i25 = sp + 56|0;
 $x$i5$i16 = sp + 8|0;
 $x$i4$i = sp;
 $x$i2$i = sp + 61|0;
 $x$i1$i17 = sp + 64|0;
 $x$i$i18 = sp + 52|0;
 $x$i$i13 = sp + 48|0;
 $x$i10 = sp + 63|0;
 $x$i7 = sp + 66|0;
 $x$i5 = sp + 65|0;
 $x$i2 = sp + 24|0;
 $x$i = sp + 20|0;
 $x$i7$i = sp + 16|0;
 $x$i5$i = sp + 28|0;
 $x$i3$i = sp + 32|0;
 $x$i1$i = sp + 36|0;
 $x$i$i = sp + 40|0;
 $0 = (_LoadString($S)|0);
 $1 = (($f) + 72|0);
 $2 = ($0|0)==(0|0);
 $psource$ = $2 ? $psource : $0;
 HEAP32[$1>>2] = $psource$;
 $3 = (($S) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_luaZ_read($4,$x$i,4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _error($S,10704);
  // unreachable;
 }
 $7 = HEAP32[$x$i>>2]|0;
 $8 = (($f) + 36|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = (_luaZ_read($9,$x$i2,4)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  _error($S,10704);
  // unreachable;
 }
 $12 = HEAP32[$x$i2>>2]|0;
 $13 = (($f) + 40|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$3>>2]|0;
 $15 = (_luaZ_read($14,$x$i5,1)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  _error($S,10704);
  // unreachable;
 }
 $17 = HEAP8[$x$i5>>0]|0;
 $18 = (($f) + 6|0);
 HEAP8[$18>>0] = $17;
 $19 = HEAP32[$3>>2]|0;
 $20 = (_luaZ_read($19,$x$i7,1)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  _error($S,10704);
  // unreachable;
 }
 $22 = HEAP8[$x$i7>>0]|0;
 $23 = (($f) + 7|0);
 HEAP8[$23>>0] = $22;
 $24 = HEAP32[$3>>2]|0;
 $25 = (_luaZ_read($24,$x$i10,1)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  _error($S,10704);
  // unreachable;
 }
 $27 = HEAP8[$x$i10>>0]|0;
 $28 = (($f) + 8|0);
 HEAP8[$28>>0] = $27;
 $29 = HEAP32[$3>>2]|0;
 $30 = (_luaZ_read($29,$x$i$i13,4)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  _error($S,10704);
  // unreachable;
 }
 $32 = HEAP32[$x$i$i13>>2]|0;
 $33 = (($32) + 1)|0;
 $34 = ($33>>>0)>(1073741823);
 $35 = HEAP32[$S>>2]|0;
 if ($34) {
  _luaM_toobig($35);
  // unreachable;
 }
 $36 = $32 << 2;
 $37 = (_luaM_realloc_($35,0,0,$36)|0);
 $38 = (($f) + 48|0);
 HEAP32[$38>>2] = $37;
 $39 = (($f) + 20|0);
 HEAP32[$39>>2] = $32;
 $40 = HEAP32[$3>>2]|0;
 $41 = (_luaZ_read($40,$37,$36)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  _error($S,10704);
  // unreachable;
 }
 $43 = HEAP32[$3>>2]|0;
 $44 = (_luaZ_read($43,$x$i$i18,4)|0);
 $45 = ($44|0)==(0);
 if (!($45)) {
  _error($S,10704);
  // unreachable;
 }
 $46 = HEAP32[$x$i$i18>>2]|0;
 $47 = (($46) + 1)|0;
 $48 = ($47>>>0)>(268435455);
 $49 = HEAP32[$S>>2]|0;
 if ($48) {
  _luaM_toobig($49);
  // unreachable;
 }
 $50 = $46 << 4;
 $51 = (_luaM_realloc_($49,0,0,$50)|0);
 $52 = (($f) + 44|0);
 HEAP32[$52>>2] = $51;
 $53 = (($f) + 16|0);
 HEAP32[$53>>2] = $46;
 $54 = ($46|0)>(0);
 do {
  if ($54) {
   $i$08$i = 0;
   while(1) {
    $58 = ((($51) + ($i$08$i<<4)|0) + 8|0);
    HEAP32[$58>>2] = 0;
    $59 = (($i$08$i) + 1)|0;
    $exitcond$i22 = ($59|0)==($46|0);
    if ($exitcond$i22) {
     break;
    } else {
     $i$08$i = $59;
    }
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = (_luaZ_read($55,$x$i1$i17,1)|0);
   $57 = ($56|0)==(0);
   if (!($57)) {
    _error($S,10704);
    // unreachable;
   }
   $63 = $51;$69 = $51;$i$16$i37 = 0;
   L39: while(1) {
    $60 = HEAP8[$x$i1$i17>>0]|0;
    $61 = $60&255;
    switch ($61|0) {
    case 20: case 4:  {
     $90 = (_LoadString($S)|0);
     HEAP32[$69>>2] = $90;
     $91 = (($90) + 4|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 | 64;
     $95 = ((($63) + ($i$16$i37<<4)|0) + 8|0);
     HEAP32[$95>>2] = $94;
     break;
    }
    case 0:  {
     $62 = ((($63) + ($i$16$i37<<4)|0) + 8|0);
     HEAP32[$62>>2] = 0;
     break;
    }
    case 1:  {
     $64 = HEAP32[$3>>2]|0;
     $65 = (_luaZ_read($64,$x$i2$i,1)|0);
     $66 = ($65|0)==(0);
     if (!($66)) {
      label = 31;
      break L39;
     }
     $67 = HEAP8[$x$i2$i>>0]|0;
     $68 = $67&255;
     HEAP32[$69>>2] = $68;
     $70 = ((($63) + ($i$16$i37<<4)|0) + 8|0);
     HEAP32[$70>>2] = 1;
     break;
    }
    case 19:  {
     $76 = HEAP32[$3>>2]|0;
     $77 = (_luaZ_read($76,$x$i5$i16,8)|0);
     $78 = ($77|0)==(0);
     if (!($78)) {
      label = 37;
      break L39;
     }
     $79 = $x$i5$i16;
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 4)|0;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $85 = $69;
     $86 = $85;
     HEAP32[$86>>2] = $81;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     $89 = ((($63) + ($i$16$i37<<4)|0) + 8|0);
     HEAP32[$89>>2] = 19;
     break;
    }
    case 3:  {
     $71 = HEAP32[$3>>2]|0;
     $72 = (_luaZ_read($71,$x$i4$i,8)|0);
     $73 = ($72|0)==(0);
     if (!($73)) {
      label = 34;
      break L39;
     }
     $74 = +HEAPF64[$x$i4$i>>3];
     HEAPF64[$69>>3] = $74;
     $75 = ((($63) + ($i$16$i37<<4)|0) + 8|0);
     HEAP32[$75>>2] = 3;
     break;
    }
    default: {
    }
    }
    $96 = (($i$16$i37) + 1)|0;
    $97 = ($96|0)<($46|0);
    if (!($97)) {
     label = 42;
     break;
    }
    $$pre$i = HEAP32[$52>>2]|0;
    $98 = (($$pre$i) + ($96<<4)|0);
    $99 = HEAP32[$3>>2]|0;
    $100 = (_luaZ_read($99,$x$i1$i17,1)|0);
    $101 = ($100|0)==(0);
    if ($101) {
     $63 = $$pre$i;$69 = $98;$i$16$i37 = $96;
    } else {
     label = 26;
     break;
    }
   }
   if ((label|0) == 26) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 31) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 34) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 37) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 42) {
    break;
   }
  }
 } while(0);
 $102 = HEAP32[$3>>2]|0;
 $103 = (_luaZ_read($102,$x$i$i25,4)|0);
 $104 = ($103|0)==(0);
 if (!($104)) {
  _error($S,10704);
  // unreachable;
 }
 $105 = HEAP32[$x$i$i25>>2]|0;
 $106 = (($105) + 1)|0;
 $107 = ($106>>>0)>(536870911);
 $108 = HEAP32[$S>>2]|0;
 if ($107) {
  _luaM_toobig($108);
  // unreachable;
 }
 $109 = $105 << 3;
 $110 = (_luaM_realloc_($108,0,0,$109)|0);
 $111 = (($f) + 64|0);
 HEAP32[$111>>2] = $110;
 $112 = (($f) + 12|0);
 HEAP32[$112>>2] = $105;
 $113 = ($105|0)>(0);
 do {
  if ($113) {
   $i$05$i = 0;
   while(1) {
    $114 = (($110) + ($i$05$i<<3)|0);
    HEAP32[$114>>2] = 0;
    $115 = (($i$05$i) + 1)|0;
    $exitcond$i28 = ($115|0)==($105|0);
    if ($exitcond$i28) {
     break;
    } else {
     $i$05$i = $115;
    }
   }
   $i$14$i = 0;
   while(1) {
    $116 = HEAP32[$3>>2]|0;
    $117 = (_luaZ_read($116,$x$i1$i24,1)|0);
    $118 = ($117|0)==(0);
    if (!($118)) {
     label = 52;
     break;
    }
    $119 = HEAP8[$x$i1$i24>>0]|0;
    $120 = HEAP32[$111>>2]|0;
    $121 = ((($120) + ($i$14$i<<3)|0) + 4|0);
    HEAP8[$121>>0] = $119;
    $122 = HEAP32[$3>>2]|0;
    $123 = (_luaZ_read($122,$x$i2$i23,1)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     label = 54;
     break;
    }
    $125 = HEAP8[$x$i2$i23>>0]|0;
    $126 = HEAP32[$111>>2]|0;
    $127 = ((($126) + ($i$14$i<<3)|0) + 5|0);
    HEAP8[$127>>0] = $125;
    $128 = (($i$14$i) + 1)|0;
    $129 = ($128|0)<($105|0);
    if ($129) {
     $i$14$i = $128;
    } else {
     label = 56;
     break;
    }
   }
   if ((label|0) == 52) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 54) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 56) {
    break;
   }
  }
 } while(0);
 $130 = HEAP32[$3>>2]|0;
 $131 = (_luaZ_read($130,$x$i$i32,4)|0);
 $132 = ($131|0)==(0);
 if (!($132)) {
  _error($S,10704);
  // unreachable;
 }
 $133 = HEAP32[$x$i$i32>>2]|0;
 $134 = (($133) + 1)|0;
 $135 = ($134>>>0)>(1073741823);
 $136 = HEAP32[$S>>2]|0;
 if ($135) {
  _luaM_toobig($136);
  // unreachable;
 }
 $137 = $133 << 2;
 $138 = (_luaM_realloc_($136,0,0,$137)|0);
 $139 = (($f) + 52|0);
 HEAP32[$139>>2] = $138;
 $140 = (($f) + 28|0);
 HEAP32[$140>>2] = $133;
 $141 = ($133|0)>(0);
 if ($141) {
  $143 = $138;$i$0$i35 = 0;
  while(1) {
   $142 = (($143) + ($i$0$i35<<2)|0);
   HEAP32[$142>>2] = 0;
   $144 = (($i$0$i35) + 1)|0;
   $exitcond38 = ($144|0)==($133|0);
   if ($exitcond38) {
    break;
   }
   $$pre = HEAP32[$139>>2]|0;
   $143 = $$pre;$i$0$i35 = $144;
  }
  if ($141) {
   $i$1$i34 = 0;
   while(1) {
    $145 = HEAP32[$S>>2]|0;
    $146 = (_luaF_newproto($145)|0);
    $147 = HEAP32[$139>>2]|0;
    $148 = (($147) + ($i$1$i34<<2)|0);
    HEAP32[$148>>2] = $146;
    $149 = HEAP32[$139>>2]|0;
    $150 = (($149) + ($i$1$i34<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = HEAP32[$1>>2]|0;
    _LoadFunction($S,$151,$152);
    $153 = (($i$1$i34) + 1)|0;
    $exitcond = ($153|0)==($133|0);
    if ($exitcond) {
     break;
    } else {
     $i$1$i34 = $153;
    }
   }
  }
 }
 $154 = HEAP32[$3>>2]|0;
 $155 = (_luaZ_read($154,$x$i$i,4)|0);
 $156 = ($155|0)==(0);
 if (!($156)) {
  _error($S,10704);
  // unreachable;
 }
 $157 = HEAP32[$x$i$i>>2]|0;
 $158 = (($157) + 1)|0;
 $159 = ($158>>>0)>(1073741823);
 $160 = HEAP32[$S>>2]|0;
 if ($159) {
  _luaM_toobig($160);
  // unreachable;
 }
 $161 = $157 << 2;
 $162 = (_luaM_realloc_($160,0,0,$161)|0);
 $163 = (($f) + 56|0);
 HEAP32[$163>>2] = $162;
 $164 = (($f) + 24|0);
 HEAP32[$164>>2] = $157;
 $165 = HEAP32[$3>>2]|0;
 $166 = (_luaZ_read($165,$162,$161)|0);
 $167 = ($166|0)==(0);
 if (!($167)) {
  _error($S,10704);
  // unreachable;
 }
 $168 = HEAP32[$3>>2]|0;
 $169 = (_luaZ_read($168,$x$i1$i,4)|0);
 $170 = ($169|0)==(0);
 if (!($170)) {
  _error($S,10704);
  // unreachable;
 }
 $171 = HEAP32[$x$i1$i>>2]|0;
 $172 = (($171) + 1)|0;
 $173 = ($172>>>0)>(357913941);
 $174 = HEAP32[$S>>2]|0;
 if ($173) {
  _luaM_toobig($174);
  // unreachable;
 }
 $175 = ($171*12)|0;
 $176 = (_luaM_realloc_($174,0,0,$175)|0);
 $177 = (($f) + 60|0);
 HEAP32[$177>>2] = $176;
 $178 = (($f) + 32|0);
 HEAP32[$178>>2] = $171;
 $179 = ($171|0)>(0);
 do {
  if ($179) {
   $i$013$i = 0;
   while(1) {
    $180 = (($176) + (($i$013$i*12)|0)|0);
    HEAP32[$180>>2] = 0;
    $181 = (($i$013$i) + 1)|0;
    $exitcond16$i = ($181|0)==($171|0);
    if ($exitcond16$i) {
     break;
    } else {
     $i$013$i = $181;
    }
   }
   $i$110$i = 0;
   while(1) {
    $182 = (_LoadString($S)|0);
    $183 = HEAP32[$177>>2]|0;
    $184 = (($183) + (($i$110$i*12)|0)|0);
    HEAP32[$184>>2] = $182;
    $185 = HEAP32[$3>>2]|0;
    $186 = (_luaZ_read($185,$x$i3$i,4)|0);
    $187 = ($186|0)==(0);
    if (!($187)) {
     label = 84;
     break;
    }
    $188 = HEAP32[$x$i3$i>>2]|0;
    $189 = HEAP32[$177>>2]|0;
    $190 = ((($189) + (($i$110$i*12)|0)|0) + 4|0);
    HEAP32[$190>>2] = $188;
    $191 = HEAP32[$3>>2]|0;
    $192 = (_luaZ_read($191,$x$i5$i,4)|0);
    $193 = ($192|0)==(0);
    if (!($193)) {
     label = 86;
     break;
    }
    $194 = HEAP32[$x$i5$i>>2]|0;
    $195 = HEAP32[$177>>2]|0;
    $196 = ((($195) + (($i$110$i*12)|0)|0) + 8|0);
    HEAP32[$196>>2] = $194;
    $197 = (($i$110$i) + 1)|0;
    $198 = ($197|0)<($171|0);
    if ($198) {
     $i$110$i = $197;
    } else {
     label = 88;
     break;
    }
   }
   if ((label|0) == 84) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 86) {
    _error($S,10704);
    // unreachable;
   }
   else if ((label|0) == 88) {
    break;
   }
  }
 } while(0);
 $199 = HEAP32[$3>>2]|0;
 $200 = (_luaZ_read($199,$x$i7$i,4)|0);
 $201 = ($200|0)==(0);
 if (!($201)) {
  _error($S,10704);
  // unreachable;
 }
 $202 = HEAP32[$x$i7$i>>2]|0;
 $203 = ($202|0)>(0);
 if (!($203)) {
  STACKTOP = sp;return;
 }
 $i$29$i = 0;
 while(1) {
  $204 = (_LoadString($S)|0);
  $205 = HEAP32[$111>>2]|0;
  $206 = (($205) + ($i$29$i<<3)|0);
  HEAP32[$206>>2] = $204;
  $207 = (($i$29$i) + 1)|0;
  $exitcond$i = ($207|0)==($202|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$29$i = $207;
  }
 }
 STACKTOP = sp;return;
}
function _LoadString($S) {
 $S = $S|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, $x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp + 4|0;
 $size = sp;
 $0 = (($S) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaZ_read($1,$x$i,1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  _error($S,10704);
  // unreachable;
 }
 $4 = HEAP8[$x$i>>0]|0;
 $5 = $4&255;
 HEAP32[$size>>2] = $5;
 $6 = ($4<<24>>24)==(-1);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = (_luaZ_read($7,$size,4)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$pr = HEAP32[$size>>2]|0;
    $10 = $$pr;
    break;
   } else {
    _error($S,10704);
    // unreachable;
   }
  } else {
   $10 = $5;
  }
 } while(0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$S>>2]|0;
 $13 = (($S) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($10) + -1)|0;
 HEAP32[$size>>2] = $15;
 $16 = (_luaZ_openspace($12,$14,$15)|0);
 $17 = HEAP32[$size>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (_luaZ_read($18,$16,$17)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  _error($S,10704);
  // unreachable;
 }
 $21 = HEAP32[$S>>2]|0;
 $22 = HEAP32[$size>>2]|0;
 $23 = (_luaS_newlstr($21,$16,$22)|0);
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _luaopen_utf8($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,6);
 _luaL_setfuncs($L,10976,0);
 (_lua_pushlstring($L,11032,14)|0);
 _lua_setfield($L,-2,11048);
 return 1;
}
function _byteoffset($L) {
 $L = $L|0;
 var $$lcssa42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0;
 var $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $len = sp + 4|0;
 $0 = (_luaL_checklstring($L,1,$len)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = tempRet0;
 $3 = ($2|0)>(-1);
 $4 = ($1>>>0)>(4294967295);
 $5 = ($2|0)==(-1);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $10 = 1;$11 = 0;
 } else {
  $8 = HEAP32[$len>>2]|0;
  $9 = (($8) + 1)|0;
  $10 = $9;$11 = 0;
 }
 $12 = (_luaL_optinteger($L,3,$10,$11)|0);
 $13 = tempRet0;
 $14 = HEAP32[$len>>2]|0;
 $15 = ($13|0)>(-1);
 $16 = ($12>>>0)>(4294967295);
 $17 = ($13|0)==(-1);
 $18 = $17 & $16;
 $19 = $15 | $18;
 if ($19) {
  $26 = $13;$28 = $12;
  label = 6;
 } else {
  $20 = (0 - ($12))|0;
  $21 = ($14>>>0)<($20>>>0);
  if ($21) {
   $136 = 0;$137 = 0;
   label = 8;
  } else {
   $22 = (_i64Add(($12|0),($13|0),1,0)|0);
   $23 = tempRet0;
   $24 = (_i64Add(($22|0),($23|0),($14|0),0)|0);
   $25 = tempRet0;
   $26 = $25;$28 = $24;
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $27 = ($26|0)>(0);
  $29 = ($28>>>0)>(0);
  $30 = ($26|0)==(0);
  $31 = $30 & $29;
  $32 = $27 | $31;
  if ($32) {
   $33 = (_i64Add(($28|0),($26|0),-1,-1)|0);
   $34 = tempRet0;
   $35 = ($34|0)>(0);
   $36 = ($33>>>0)>($14>>>0);
   $37 = ($34|0)==(0);
   $38 = $37 & $36;
   $39 = $35 | $38;
   if ($39) {
    $136 = $33;$137 = $34;
    label = 8;
   } else {
    $43 = $34;$45 = $33;
   }
  } else {
   $136 = $28;$137 = $26;
   label = 8;
  }
 }
 if ((label|0) == 8) {
  (_luaL_argerror($L,3,11288)|0);
  $43 = $137;$45 = $136;
 }
 $40 = ($1|0)==(0);
 $41 = ($2|0)==(0);
 $42 = $40 & $41;
 do {
  if ($42) {
   $44 = ($43|0)>(0);
   $46 = ($45>>>0)>(0);
   $47 = ($43|0)==(0);
   $48 = $47 & $46;
   $49 = $44 | $48;
   if ($49) {
    $58 = $45;$62 = $43;
    while(1) {
     $57 = (($0) + ($58)|0);
     $59 = HEAP8[$57>>0]|0;
     $60 = $59 & -64;
     $61 = ($60<<24>>24)==(-128);
     $52 = (_i64Add(($58|0),($62|0),-1,-1)|0);
     $50 = tempRet0;
     if (!($61)) {
      $138 = $58;$139 = $62;
      break;
     }
     $51 = ($50|0)>(0);
     $53 = ($52>>>0)>(0);
     $54 = ($50|0)==(0);
     $55 = $54 & $53;
     $56 = $51 | $55;
     if ($56) {
      $58 = $52;$62 = $50;
     } else {
      $138 = $52;$139 = $50;
      break;
     }
    }
    $132 = $138;$133 = $139;
   } else {
    $132 = $45;$133 = $43;
   }
  } else {
   $63 = (($0) + ($45)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64 & -64;
   $66 = ($65<<24>>24)==(-128);
   if ($66) {
    (_luaL_error($L,11312,$vararg_buffer)|0);
   }
   $67 = ($2|0)<(0);
   do {
    if ($67) {
     $76 = ($43|0)>(0);
     $77 = ($45>>>0)>(0);
     $78 = ($43|0)==(0);
     $79 = $78 & $77;
     $80 = $76 | $79;
     if ($80) {
      $142 = $45;$143 = $43;$98 = $1;$99 = $2;
      L21: while(1) {
       $81 = $142;$82 = $143;
       while(1) {
        $83 = (_i64Add(($81|0),($82|0),-1,-1)|0);
        $84 = tempRet0;
        $85 = ($84|0)>(0);
        $86 = ($83>>>0)>(0);
        $87 = ($84|0)==(0);
        $88 = $87 & $86;
        $89 = $85 | $88;
        if (!($89)) {
         $144 = $83;$145 = $84;$90 = $98;$91 = $99;
         label = 23;
         break L21;
        }
        $94 = (($0) + ($83)|0);
        $95 = HEAP8[$94>>0]|0;
        $96 = $95 & -64;
        $97 = ($96<<24>>24)==(-128);
        if ($97) {
         $81 = $83;$82 = $84;
        } else {
         $$lcssa42 = $89;$146 = $83;$147 = $84;
         break;
        }
       }
       $100 = (_i64Add(($98|0),($99|0),1,0)|0);
       $101 = tempRet0;
       $102 = ($101|0)<(0);
       $or$cond = $102 & $$lcssa42;
       if ($or$cond) {
        $142 = $146;$143 = $147;$98 = $100;$99 = $101;
       } else {
        $148 = $100;$149 = $101;$150 = $146;$151 = $147;
        label = 30;
        break;
       }
      }
      if ((label|0) == 23) {
       $92 = (_i64Add(($90|0),($91|0),1,0)|0);
       $93 = tempRet0;
       $127 = $92;$129 = $93;$140 = $144;$141 = $145;
       label = 32;
       break;
      }
      else if ((label|0) == 30) {
       $127 = $148;$129 = $149;$140 = $150;$141 = $151;
       label = 32;
       break;
      }
     }
    } else {
     $68 = (_i64Add(($1|0),($2|0),-1,-1)|0);
     $69 = tempRet0;
     $70 = ($69|0)>(0);
     $71 = ($68>>>0)>(0);
     $72 = ($69|0)==(0);
     $73 = $72 & $71;
     $74 = $70 | $73;
     if ($74) {
      $75 = HEAP32[$len>>2]|0;
      $103 = $68;$104 = $69;$112 = $43;$114 = $45;
      while(1) {
       $113 = ($112|0)<(0);
       $115 = ($114>>>0)<($75>>>0);
       $116 = ($112|0)==(0);
       $117 = $116 & $115;
       $118 = $113 | $117;
       if (!($118)) {
        $154 = $103;$155 = $104;$156 = $114;$157 = $112;
        break;
       }
       $119 = $114;$120 = $112;
       while(1) {
        $121 = (_i64Add(($119|0),($120|0),1,0)|0);
        $122 = tempRet0;
        $123 = (($0) + ($121)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = $124 & -64;
        $126 = ($125<<24>>24)==(-128);
        if ($126) {
         $119 = $121;$120 = $122;
        } else {
         $152 = $121;$153 = $122;
         break;
        }
       }
       $105 = (_i64Add(($103|0),($104|0),-1,-1)|0);
       $106 = tempRet0;
       $107 = ($106|0)>(0);
       $108 = ($105>>>0)>(0);
       $109 = ($106|0)==(0);
       $110 = $109 & $108;
       $111 = $107 | $110;
       if ($111) {
        $103 = $105;$104 = $106;$112 = $153;$114 = $152;
       } else {
        $154 = $105;$155 = $106;$156 = $152;$157 = $153;
        break;
       }
      }
      $127 = $154;$129 = $155;$140 = $156;$141 = $157;
      label = 32;
     } else {
      $127 = $68;$129 = $69;$140 = $45;$141 = $43;
      label = 32;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $128 = ($127|0)==(0);
    $130 = ($129|0)==(0);
    $131 = $128 & $130;
    if ($131) {
     $132 = $140;$133 = $141;
     break;
    }
   }
   _lua_pushnil($L);
   STACKTOP = sp;return 1;
  }
 } while(0);
 $134 = (_i64Add(($132|0),($133|0),1,0)|0);
 $135 = tempRet0;
 _lua_pushinteger($L,$134,$135);
 STACKTOP = sp;return 1;
}
function _codepoint($L) {
 $L = $L|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa15 = 0, $$lcssa16 = 0, $$lcssa17 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $c$0$lcssa$i = 0, $c$05$i = 0, $count$0$lcssa$i = 0, $count$07$i = 0, $len = 0, $n$010 = 0, $or$cond$i = 0, $res$0$lcssa$i = 0, $res$06$i = 0, $res$1$i = 0, $s$0$i = 0, $s$09 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $len = sp + 12|0;
 $0 = (_luaL_checklstring($L,1,$len)|0);
 $1 = (_luaL_optinteger($L,2,1,0)|0);
 $2 = tempRet0;
 $3 = HEAP32[$len>>2]|0;
 $4 = ($2|0)>(-1);
 $5 = ($1>>>0)>(4294967295);
 $6 = ($2|0)==(-1);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $15 = $1;$16 = $2;
 } else {
  $9 = (0 - ($1))|0;
  $10 = ($3>>>0)<($9>>>0);
  if ($10) {
   $15 = 0;$16 = 0;
  } else {
   $11 = (_i64Add(($1|0),($2|0),1,0)|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($3|0),0)|0);
   $14 = tempRet0;
   $15 = $13;$16 = $14;
  }
 }
 $17 = (_luaL_optinteger($L,3,$15,$16)|0);
 $18 = tempRet0;
 $19 = HEAP32[$len>>2]|0;
 $20 = ($18|0)>(-1);
 $21 = ($17>>>0)>(4294967295);
 $22 = ($18|0)==(-1);
 $23 = $22 & $21;
 $24 = $20 | $23;
 if ($24) {
  $36 = $18;$38 = $17;
 } else {
  $25 = (0 - ($17))|0;
  $26 = ($19>>>0)<($25>>>0);
  if ($26) {
   $36 = 0;$38 = 0;
  } else {
   $27 = (_i64Add(($17|0),($18|0),1,0)|0);
   $28 = tempRet0;
   $29 = (_i64Add(($27|0),($28|0),($19|0),0)|0);
   $30 = tempRet0;
   $36 = $30;$38 = $29;
  }
 }
 $31 = ($16|0)>(0);
 $32 = ($15>>>0)>(0);
 $33 = ($16|0)==(0);
 $34 = $33 & $32;
 $35 = $31 | $34;
 if ($35) {
  $40 = $19;
 } else {
  (_luaL_argerror($L,2,11248)|0);
  $$pre = HEAP32[$len>>2]|0;
  $40 = $$pre;
 }
 $37 = ($36|0)>(0);
 $39 = ($38>>>0)>($40>>>0);
 $41 = ($36|0)==(0);
 $42 = $41 & $39;
 $43 = $37 | $42;
 if ($43) {
  (_luaL_argerror($L,3,11248)|0);
 }
 $44 = ($36|0)<($16|0);
 $45 = ($38>>>0)<($15>>>0);
 $46 = ($36|0)==($16|0);
 $47 = $46 & $45;
 $48 = $44 | $47;
 if ($48) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (_i64Subtract(($38|0),($36|0),($15|0),($16|0))|0);
 $50 = tempRet0;
 $51 = ($50|0)>(0);
 $52 = ($49>>>0)>(2147483646);
 $53 = ($50|0)==(0);
 $54 = $53 & $52;
 $55 = $51 | $54;
 if ($55) {
  $56 = (_luaL_error($L,11264,$vararg_buffer)|0);
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = (($49) + 1)|0;
 _luaL_checkstack($L,$57,11264);
 $58 = (($0) + ($38)|0);
 $59 = (_i64Add(($15|0),($16|0),-1,0)|0);
 $60 = tempRet0;
 $61 = ($59|0)<($38|0);
 if (!($61)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $62 = (($0) + ($59)|0);
 $n$010 = 0;$s$09 = $62;
 L25: while(1) {
  $63 = HEAP8[$s$09>>0]|0;
  $64 = $63&255;
  $65 = ($63<<24>>24)>(-1);
  if ($65) {
   $res$1$i = $64;$s$0$i = $s$09;
  } else {
   $66 = $64 & 64;
   $67 = ($66|0)==(0);
   if ($67) {
    $c$0$lcssa$i = $64;$count$0$lcssa$i = 0;$res$0$lcssa$i = 0;
   } else {
    $c$05$i = $64;$count$07$i = 0;$res$06$i = 0;
    while(1) {
     $68 = (($count$07$i) + 1)|0;
     $69 = (($s$09) + ($68)|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = $71 & 192;
     $73 = ($72|0)==(128);
     if (!($73)) {
      label = 25;
      break L25;
     }
     $74 = $res$06$i << 6;
     $75 = $71 & 63;
     $76 = $75 | $74;
     $77 = $c$05$i << 1;
     $78 = $77 & 64;
     $79 = ($78|0)==(0);
     if ($79) {
      $$lcssa = $76;$$lcssa15 = $68;$$lcssa16 = $77;
      break;
     } else {
      $c$05$i = $77;$count$07$i = $68;$res$06$i = $76;
     }
    }
    $c$0$lcssa$i = $$lcssa16;$count$0$lcssa$i = $$lcssa15;$res$0$lcssa$i = $$lcssa;
   }
   $80 = $c$0$lcssa$i & 127;
   $81 = ($count$0$lcssa$i*5)|0;
   $82 = $80 << $81;
   $83 = $82 | $res$0$lcssa$i;
   $84 = ($count$0$lcssa$i|0)>(3);
   $85 = ($83>>>0)>(1114111);
   $or$cond$i = $84 | $85;
   if ($or$cond$i) {
    label = 26;
    break;
   }
   $86 = (11136 + ($count$0$lcssa$i<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($83>>>0)>($87>>>0);
   if (!($88)) {
    label = 26;
    break;
   }
   $89 = (($s$09) + ($count$0$lcssa$i)|0);
   $res$1$i = $83;$s$0$i = $89;
  }
  $91 = (($s$0$i) + 1|0);
  $92 = ($res$1$i|0)<(0);
  $93 = $92 << 31 >> 31;
  _lua_pushinteger($L,$res$1$i,$93);
  $94 = (($n$010) + 1)|0;
  $95 = ($91>>>0)<($58>>>0);
  if ($95) {
   $n$010 = $94;$s$09 = $91;
  } else {
   $$lcssa17 = $94;
   label = 29;
   break;
  }
 }
 if ((label|0) == 25) {
 }
 else if ((label|0) == 26) {
 }
 else if ((label|0) == 29) {
  $$0 = $$lcssa17;
  STACKTOP = sp;return ($$0|0);
 }
 $90 = (_luaL_error($L,11112,$vararg_buffer1)|0);
 $$0 = $90;
 STACKTOP = sp;return ($$0|0);
}
function _utfchar($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $exitcond = 0;
 var $i$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $b = sp + 16|0;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)==(1);
 if ($1) {
  $2 = (_luaL_checkinteger($L,1)|0);
  $3 = tempRet0;
  $4 = ($3>>>0)<(0);
  $5 = ($2>>>0)<(1114112);
  $6 = ($3|0)==(0);
  $7 = $6 & $5;
  $8 = $4 | $7;
  if (!($8)) {
   (_luaL_argerror($L,1,11216)|0);
  }
  HEAP32[$vararg_buffer>>2] = $2;
  (_lua_pushfstring($L,11240,$vararg_buffer)|0);
  STACKTOP = sp;return 1;
 }
 _luaL_buffinit($L,$b);
 $9 = ($0|0)<(1);
 if (!($9)) {
  $i$02 = 1;
  while(1) {
   $10 = (_luaL_checkinteger($L,$i$02)|0);
   $11 = tempRet0;
   $12 = ($11>>>0)<(0);
   $13 = ($10>>>0)<(1114112);
   $14 = ($11|0)==(0);
   $15 = $14 & $13;
   $16 = $12 | $15;
   if (!($16)) {
    (_luaL_argerror($L,$i$02,11216)|0);
   }
   HEAP32[$vararg_buffer1>>2] = $10;
   (_lua_pushfstring($L,11240,$vararg_buffer1)|0);
   _luaL_addvalue($b);
   $17 = (($i$02) + 1)|0;
   $exitcond = ($i$02|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $17;
   }
  }
 }
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _utflen($L) {
 $L = $L|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa24 = 0, $$lcssa25 = 0, $$lcssa29 = 0, $$pre = 0, $$sum = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$0$lcssa$i = 0, $c$05$i = 0, $count$0$lcssa$i = 0, $count$07$i = 0, $len = 0, $n$014 = 0, $or$cond$i = 0, $res$0$lcssa$i = 0, $res$06$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp;
 $0 = (_luaL_checklstring($L,1,$len)|0);
 $1 = (_luaL_optinteger($L,2,1,0)|0);
 $2 = tempRet0;
 $3 = HEAP32[$len>>2]|0;
 $4 = ($2|0)>(-1);
 $5 = ($1>>>0)>(4294967295);
 $6 = ($2|0)==(-1);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $29 = $2;$31 = $1;
 } else {
  $9 = (0 - ($1))|0;
  $10 = ($3>>>0)<($9>>>0);
  if ($10) {
   $29 = 0;$31 = 0;
  } else {
   $11 = (_i64Add(($1|0),($2|0),1,0)|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($3|0),0)|0);
   $14 = tempRet0;
   $29 = $14;$31 = $13;
  }
 }
 $15 = (_luaL_optinteger($L,3,-1,-1)|0);
 $16 = tempRet0;
 $17 = HEAP32[$len>>2]|0;
 $18 = ($16|0)>(-1);
 $19 = ($15>>>0)>(4294967295);
 $20 = ($16|0)==(-1);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  $43 = $15;$44 = $16;
 } else {
  $23 = (0 - ($15))|0;
  $24 = ($17>>>0)<($23>>>0);
  if ($24) {
   $43 = 0;$44 = 0;
  } else {
   $25 = (_i64Add(($15|0),($16|0),1,0)|0);
   $26 = tempRet0;
   $27 = (_i64Add(($25|0),($26|0),($17|0),0)|0);
   $28 = tempRet0;
   $43 = $27;$44 = $28;
  }
 }
 $30 = ($29|0)>(0);
 $32 = ($31>>>0)>(0);
 $33 = ($29|0)==(0);
 $34 = $33 & $32;
 $35 = $30 | $34;
 if ($35) {
  $36 = (_i64Add(($31|0),($29|0),-1,-1)|0);
  $37 = tempRet0;
  $38 = ($37|0)>(0);
  $39 = ($36>>>0)>($17>>>0);
  $40 = ($37|0)==(0);
  $41 = $40 & $39;
  $42 = $38 | $41;
  if ($42) {
   $107 = $36;$108 = $37;
   label = 9;
  } else {
   $49 = $17;$53 = $37;$55 = $36;
  }
 } else {
  $107 = $31;$108 = $29;
  label = 9;
 }
 if ((label|0) == 9) {
  (_luaL_argerror($L,2,11152)|0);
  $$pre = HEAP32[$len>>2]|0;
  $49 = $$pre;$53 = $108;$55 = $107;
 }
 $45 = (_i64Add(($43|0),($44|0),-1,-1)|0);
 $46 = tempRet0;
 $47 = ($44|0)>(0);
 $48 = ($43>>>0)>($49>>>0);
 $50 = ($44|0)==(0);
 $51 = $50 & $48;
 $52 = $47 | $51;
 if ($52) {
  (_luaL_argerror($L,3,11184)|0);
 }
 $54 = ($53|0)>($46|0);
 $56 = ($55>>>0)>($45>>>0);
 $57 = ($53|0)==($46|0);
 $58 = $57 & $56;
 $59 = $54 | $58;
 do {
  if ($59) {
   $105 = 0;$106 = 0;
  } else {
   $109 = $53;$61 = $55;$n$014 = 0;
   L19: while(1) {
    $60 = (($0) + ($61)|0);
    $62 = HEAP8[$60>>0]|0;
    $63 = $62&255;
    $64 = ($62<<24>>24)>(-1);
    if ($64) {
     $88 = $61;
    } else {
     $65 = $63 & 64;
     $66 = ($65|0)==(0);
     if ($66) {
      $c$0$lcssa$i = $63;$count$0$lcssa$i = 0;$res$0$lcssa$i = 0;
     } else {
      $c$05$i = $63;$count$07$i = 0;$res$06$i = 0;
      while(1) {
       $67 = (($count$07$i) + 1)|0;
       $$sum = (($67) + ($61))|0;
       $68 = (($0) + ($$sum)|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = $69&255;
       $71 = $70 & 192;
       $72 = ($71|0)==(128);
       if (!($72)) {
        $110 = $61;$111 = $109;
        label = 24;
        break L19;
       }
       $73 = $res$06$i << 6;
       $74 = $70 & 63;
       $75 = $74 | $73;
       $76 = $c$05$i << 1;
       $77 = $76 & 64;
       $78 = ($77|0)==(0);
       if ($78) {
        $$lcssa = $75;$$lcssa24 = $67;$$lcssa25 = $76;
        break;
       } else {
        $c$05$i = $76;$count$07$i = $67;$res$06$i = $75;
       }
      }
      $c$0$lcssa$i = $$lcssa25;$count$0$lcssa$i = $$lcssa24;$res$0$lcssa$i = $$lcssa;
     }
     $79 = $c$0$lcssa$i & 127;
     $80 = ($count$0$lcssa$i*5)|0;
     $81 = $79 << $80;
     $82 = $81 | $res$0$lcssa$i;
     $83 = ($count$0$lcssa$i|0)>(3);
     $84 = ($82>>>0)>(1114111);
     $or$cond$i = $83 | $84;
     if ($or$cond$i) {
      $112 = $61;$113 = $109;
      label = 25;
      break;
     }
     $85 = (11136 + ($count$0$lcssa$i<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($82>>>0)>($86>>>0);
     if (!($87)) {
      $112 = $61;$113 = $109;
      label = 25;
      break;
     }
     $$sum4 = (($count$0$lcssa$i) + ($61))|0;
     $88 = $$sum4;
    }
    $$sum5 = (($88) + 1)|0;
    $89 = (($0) + ($$sum5)|0);
    $90 = ($89|0)==(0|0);
    if ($90) {
     $112 = $61;$113 = $109;
     label = 25;
     break;
    }
    $95 = ($$sum5|0)<(0);
    $96 = $95 << 31 >> 31;
    $97 = (($n$014) + 1)|0;
    $98 = ($96|0)>($46|0);
    $99 = ($$sum5>>>0)>($45>>>0);
    $100 = ($96|0)==($46|0);
    $101 = $100 & $99;
    $102 = $98 | $101;
    if ($102) {
     $$lcssa29 = $97;
     label = 28;
     break;
    } else {
     $109 = $96;$61 = $$sum5;$n$014 = $97;
    }
   }
   if ((label|0) == 24) {
    $91 = $110;$92 = $111;
   }
   else if ((label|0) == 25) {
    $91 = $112;$92 = $113;
   }
   else if ((label|0) == 28) {
    $103 = ($$lcssa29|0)<(0);
    $104 = $103 << 31 >> 31;
    $105 = $$lcssa29;$106 = $104;
    break;
   }
   _lua_pushnil($L);
   $93 = (_i64Add(($91|0),($92|0),1,0)|0);
   $94 = tempRet0;
   _lua_pushinteger($L,$93,$94);
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _lua_pushinteger($L,$105,$106);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _iter_codes($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_checklstring($L,1,0)|0);
 _lua_pushcclosure($L,231,0);
 _lua_pushvalue($L,1);
 _lua_pushinteger($L,0,0);
 return 3;
}
function _iter_aux($L) {
 $L = $L|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa7 = 0, $$lcssa8 = 0, $$pre = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0;
 var $c$0$lcssa$i = 0, $c$05$i = 0, $count$0$lcssa$i = 0, $count$07$i = 0, $len = 0, $or$cond$i = 0, $res$0$lcssa$i = 0, $res$06$i = 0, $res$1$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $len = sp + 4|0;
 $0 = (_luaL_checklstring($L,1,$len)|0);
 $1 = (_lua_tointegerx($L,2,0)|0);
 $2 = tempRet0;
 $3 = ($2|0)<(0);
 $4 = ($1>>>0)<(1);
 $5 = ($2|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$pre = HEAP32[$len>>2]|0;
  $24 = 0;$26 = 0;$28 = $$pre;
 } else {
  $8 = (_i64Add(($1|0),($2|0),-1,-1)|0);
  $9 = tempRet0;
  $10 = HEAP32[$len>>2]|0;
  $11 = ($2|0)>(0);
  $12 = ($1>>>0)>($10>>>0);
  $13 = ($2|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  if ($15) {
   $24 = $9;$26 = $8;$28 = $10;
  } else {
   $17 = $1;$21 = $2;
   while(1) {
    $16 = (($0) + ($17)|0);
    $18 = HEAP8[$16>>0]|0;
    $19 = $18 & -64;
    $20 = ($19<<24>>24)==(-128);
    $22 = (_i64Add(($17|0),($21|0),1,0)|0);
    $23 = tempRet0;
    if ($20) {
     $17 = $22;$21 = $23;
    } else {
     $70 = $17;$71 = $21;
     break;
    }
   }
   $24 = $71;$26 = $70;$28 = $10;
  }
 }
 $25 = ($24|0)<(0);
 $27 = ($26>>>0)<($28>>>0);
 $29 = ($24|0)==(0);
 $30 = $29 & $27;
 $31 = $25 | $30;
 if (!($31)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = (($0) + ($26)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = ($33<<24>>24)>(-1);
 L12: do {
  if ($35) {
   $59 = $26;$res$1$i = $34;
   label = 17;
  } else {
   $36 = $34 & 64;
   $37 = ($36|0)==(0);
   do {
    if ($37) {
     $c$0$lcssa$i = $34;$count$0$lcssa$i = 0;$res$0$lcssa$i = 0;
    } else {
     $c$05$i = $34;$count$07$i = 0;$res$06$i = 0;
     while(1) {
      $38 = (($count$07$i) + 1)|0;
      $$sum = (($38) + ($26))|0;
      $39 = (($0) + ($$sum)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40&255;
      $42 = $41 & 192;
      $43 = ($42|0)==(128);
      if (!($43)) {
       label = 19;
       break;
      }
      $44 = $res$06$i << 6;
      $45 = $41 & 63;
      $46 = $45 | $44;
      $47 = $c$05$i << 1;
      $48 = $47 & 64;
      $49 = ($48|0)==(0);
      if ($49) {
       $$lcssa = $46;$$lcssa7 = $38;$$lcssa8 = $47;
       label = 13;
       break;
      } else {
       $c$05$i = $47;$count$07$i = $38;$res$06$i = $46;
      }
     }
     if ((label|0) == 13) {
      $c$0$lcssa$i = $$lcssa8;$count$0$lcssa$i = $$lcssa7;$res$0$lcssa$i = $$lcssa;
      break;
     }
     else if ((label|0) == 19) {
      break L12;
     }
    }
   } while(0);
   $50 = $c$0$lcssa$i & 127;
   $51 = ($count$0$lcssa$i*5)|0;
   $52 = $50 << $51;
   $53 = $52 | $res$0$lcssa$i;
   $54 = ($count$0$lcssa$i|0)>(3);
   $55 = ($53>>>0)>(1114111);
   $or$cond$i = $54 | $55;
   if (!($or$cond$i)) {
    $56 = (11136 + ($count$0$lcssa$i<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($53>>>0)>($57>>>0);
    if ($58) {
     $$sum1 = (($count$0$lcssa$i) + ($26))|0;
     $59 = $$sum1;$res$1$i = $53;
     label = 17;
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $$sum2 = (($59) + 1)|0;
  $60 = (($0) + ($$sum2)|0);
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = HEAP8[$60>>0]|0;
   $63 = $62 & -64;
   $64 = ($63<<24>>24)==(-128);
   if (!($64)) {
    $66 = (_i64Add(($26|0),($24|0),1,0)|0);
    $67 = tempRet0;
    _lua_pushinteger($L,$66,$67);
    $68 = ($res$1$i|0)<(0);
    $69 = $68 << 31 >> 31;
    _lua_pushinteger($L,$res$1$i,$69);
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $65 = (_luaL_error($L,11112,$vararg_buffer)|0);
 $$0 = $65;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_tonumber_($obj,$n) {
 $obj = $obj|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = (($obj) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(19);
 if ($2) {
  $3 = $obj;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (+($5>>>0)) + (4294967296.0*(+($8|0)));
  HEAPF64[$n>>3] = $9;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = $1 & 15;
 $11 = ($10|0)==(4);
 if (!($11)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$obj>>2]|0;
 $13 = (($12) + 16|0);
 $14 = (_luaO_str2num($13,$v)|0);
 $15 = HEAP32[$obj>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(4);
 if ($18) {
  $19 = (($15) + 7|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $25 = $21;
 } else {
  $22 = (($15) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $25 = $23;
 }
 $24 = (($25) + 1)|0;
 $26 = ($14|0)==($24|0);
 if (!($26)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($v) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(19);
 if ($29) {
  $30 = $v;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (+($32>>>0)) + (4294967296.0*(+($35|0)));
  $38 = $36;
 } else {
  $37 = +HEAPF64[$v>>3];
  $38 = $37;
 }
 HEAPF64[$n>>3] = $38;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_tointeger($obj,$p,$mode) {
 $obj = $obj|0;
 $p = $p|0;
 $mode = $mode|0;
 var $$0 = 0, $$02 = 0, $$02$lcssa = 0, $$02$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $f$0 = 0.0, $or$cond = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $$02 = $obj;
 while(1) {
  $0 = (($$02) + 8|0);
  $1 = HEAP32[$0>>2]|0;
  if ((($1|0) == 3)) {
   $$02$lcssa = $$02;
   label = 3;
   break;
  } else if ((($1|0) == 19)) {
   $$02$lcssa7 = $$02;
   label = 9;
   break;
  }
  $26 = $1 & 15;
  $27 = ($26|0)==(4);
  if (!($27)) {
   label = 15;
   break;
  }
  $28 = HEAP32[$$02>>2]|0;
  $29 = (($28) + 16|0);
  $30 = (_luaO_str2num($29,$v)|0);
  $31 = HEAP32[$$02>>2]|0;
  $32 = (($31) + 4|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)==(4);
  if ($34) {
   $35 = (($31) + 7|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $41 = $37;
  } else {
   $38 = (($31) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $41 = $39;
  }
  $40 = (($41) + 1)|0;
  $42 = ($30|0)==($40|0);
  if ($42) {
   $$02 = $v;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 3) {
  $2 = +HEAPF64[$$02$lcssa>>3];
  $3 = (+Math_floor((+$2)));
  $4 = $2 != $3;
  if ($4) {
   $5 = ($mode|0)==(0);
   if ($5) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $6 = ($mode|0)>(1);
   if ($6) {
    $7 = $3 + 1.0;
    $f$0 = $7;
   } else {
    $f$0 = $3;
   }
  } else {
   $f$0 = $3;
  }
  $8 = $f$0 >= -9.2233720368547758E+18;
  $9 = $f$0 < 9.2233720368547758E+18;
  $or$cond = $8 & $9;
  if (!($or$cond)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $10 = (~~$f$0)>>>0;
  $11 = +Math_abs($f$0) >= 1.0 ? $f$0 > 0.0 ? (~~+Math_min(+Math_floor($f$0 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($f$0 - +(~~$f$0 >>> 0)) / 4294967296.0) >>> 0 : 0;
  $12 = $p;
  $13 = $12;
  HEAP32[$13>>2] = $10;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = $11;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  $16 = $$02$lcssa7;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $p;
  $23 = $22;
  HEAP32[$23>>2] = $18;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = $21;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaV_gettable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$05 = 0, $$05$lcssa = 0, $$05$lcssa13 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $loop$04 = 0, $tm$0 = 0, $tm$0$lcssa = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 12|0);
 $$phi$trans$insert = (($t) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$05 = $t;$3 = $$pre;$loop$04 = 0;
 while(1) {
  $4 = ($3|0)==(69);
  if ($4) {
   $5 = HEAP32[$$05>>2]|0;
   $6 = (_luaH_get($5,$key)|0);
   $7 = (($6) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$lcssa = $6;
    label = 9;
    break;
   }
   $10 = (($5) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$lcssa = $6;
    label = 9;
    break;
   }
   $13 = (($11) + 6|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 1;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    $$lcssa = $6;
    label = 9;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + 148|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_luaT_gettm($11,0,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$lcssa = $6;
    label = 9;
    break;
   }
   $$phi$trans$insert10 = (($20) + 8|0);
   $$pre11 = HEAP32[$$phi$trans$insert10>>2]|0;
   $27 = $$pre11;$tm$0 = $20;
  } else {
   $22 = (_luaT_gettmbyobj($L,$$05,0)|0);
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $$05$lcssa = $$05;
    label = 11;
    break;
   } else {
    $27 = $24;$tm$0 = $22;
   }
  }
  $26 = $27 & 15;
  $28 = ($26|0)==(6);
  $1 = (($loop$04) + 1)|0;
  if ($28) {
   $$05$lcssa13 = $$05;$tm$0$lcssa = $tm$0;
   label = 13;
   break;
  }
  $2 = ($1|0)<(2000);
  if ($2) {
   $$05 = $tm$0;$3 = $27;$loop$04 = $1;
  } else {
   label = 14;
   break;
  }
 }
 if ((label|0) == 9) {
  ;HEAP32[$val+0>>2]=HEAP32[$$lcssa+0>>2]|0;HEAP32[$val+4>>2]=HEAP32[$$lcssa+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$$lcssa+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$$lcssa+12>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  _luaG_typeerror($L,$$05$lcssa,11352);
  // unreachable;
 }
 else if ((label|0) == 13) {
  _luaT_callTM($L,$tm$0$lcssa,$$05$lcssa13,$key,$val,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  _luaG_runerror($L,11360,$vararg_buffer);
  // unreachable;
 }
}
function _luaV_settable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$011 = 0, $$011$lcssa = 0, $$011$lcssa26 = 0, $$lcssa = 0, $$lcssa28 = 0, $$lcssa29 = 0, $$lcssa30 = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$phi$trans$insert = 0, $$phi$trans$insert22 = 0, $$pre = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $loop$010 = 0, $oldval$0 = 0, $tm$0 = 0, $tm$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 12|0);
 $$phi$trans$insert = (($t) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$011 = $t;$3 = $$pre;$loop$010 = 0;
 while(1) {
  $4 = ($3|0)==(69);
  if ($4) {
   $5 = HEAP32[$$011>>2]|0;
   $6 = (_luaH_get($5,$key)|0);
   $7 = (($6) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$lcssa = $5;$$lcssa29 = $5;$$lcssa31 = $6;
    label = 11;
    break;
   }
   $10 = (($5) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$lcssa28 = $5;$$lcssa30 = $5;$$lcssa32 = $6;
    label = 9;
    break;
   }
   $13 = (($11) + 6|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 2;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    $$lcssa28 = $5;$$lcssa30 = $5;$$lcssa32 = $6;
    label = 9;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + 152|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_luaT_gettm($11,1,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$lcssa28 = $5;$$lcssa30 = $5;$$lcssa32 = $6;
    label = 9;
    break;
   }
   $$phi$trans$insert22 = (($20) + 8|0);
   $$pre23 = HEAP32[$$phi$trans$insert22>>2]|0;
   $45 = $$pre23;$tm$0 = $20;
  } else {
   $40 = (_luaT_gettmbyobj($L,$$011,1)|0);
   $41 = (($40) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   if ($43) {
    $$011$lcssa = $$011;
    label = 17;
    break;
   } else {
    $45 = $42;$tm$0 = $40;
   }
  }
  $44 = $45 & 15;
  $46 = ($44|0)==(6);
  $1 = (($loop$010) + 1)|0;
  if ($46) {
   $$011$lcssa26 = $$011;$tm$0$lcssa = $tm$0;
   label = 19;
   break;
  }
  $2 = ($1|0)<(2000);
  if ($2) {
   $$011 = $tm$0;$3 = $45;$loop$010 = $1;
  } else {
   label = 20;
   break;
  }
 }
 if ((label|0) == 9) {
  $22 = ($$lcssa32|0)==(6528|0);
  if ($22) {
   $23 = (_luaH_newkey($L,$$lcssa30,$key)|0);
   $25 = $$lcssa30;$31 = $$lcssa28;$oldval$0 = $23;
  } else {
   $25 = $$lcssa30;$31 = $$lcssa28;$oldval$0 = $$lcssa32;
  }
 }
 else if ((label|0) == 11) {
  $25 = $$lcssa29;$31 = $$lcssa;$oldval$0 = $$lcssa31;
 }
 else if ((label|0) == 17) {
  _luaG_typeerror($L,$$011$lcssa,11352);
  // unreachable;
 }
 else if ((label|0) == 19) {
  _luaT_callTM($L,$tm$0$lcssa,$$011$lcssa26,$key,$val,0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  _luaG_runerror($L,11400,$vararg_buffer);
  // unreachable;
 }
 ;HEAP32[$oldval$0+0>>2]=HEAP32[$val+0>>2]|0;HEAP32[$oldval$0+4>>2]=HEAP32[$val+4>>2]|0;HEAP32[$oldval$0+8>>2]=HEAP32[$val+8>>2]|0;HEAP32[$oldval$0+12>>2]=HEAP32[$val+12>>2]|0;
 $24 = (($25) + 6|0);
 HEAP8[$24>>0] = 0;
 $26 = (($val) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 64;
 $29 = ($28|0)==(0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = (($31) + 5|0);
 $32 = HEAP8[$30>>0]|0;
 $33 = $32 & 4;
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = HEAP32[$val>>2]|0;
 $36 = (($35) + 5|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 & 3;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  STACKTOP = sp;return;
 }
 _luaC_barrierback_($L,$25);
 STACKTOP = sp;return;
}
function _luaV_lessthan($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $$0$i1 = 0, $$0$i1$ph = 0, $$0$i2$i = 0, $$lcssa = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$0$ph$i = 0, $lr$04$i = 0, $r$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 if ((($2|0) == 4)) {
  $81 = (($r) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 & 15;
  $84 = ($83|0)==(4);
  if ($84) {
   $85 = HEAP32[$l>>2]|0;
   $86 = HEAP32[$r>>2]|0;
   $87 = (($85) + 16|0);
   $88 = (($85) + 4|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = ($89<<24>>24)==(4);
   if ($90) {
    $91 = (($85) + 7|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $121 = $93;
   } else {
    $94 = (($85) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $121 = $95;
   }
   $96 = (($86) + 16|0);
   $97 = (($86) + 4|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = ($98<<24>>24)==(4);
   if ($99) {
    $100 = (($86) + 7|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $lr$0$ph$i = $102;
   } else {
    $103 = (($86) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $lr$0$ph$i = $104;
   }
   $105 = (_strcoll($87,$96)|0);
   $106 = ($105|0)==(0);
   do {
    if ($106) {
     $l$01$i = $87;$ll$02$i = $121;$lr$04$i = $lr$0$ph$i;$r$03$i = $96;
     while(1) {
      $107 = (_strlen(($l$01$i|0))|0);
      $108 = ($107|0)==($lr$04$i|0);
      $109 = ($107|0)==($ll$02$i|0);
      if ($108) {
       $$lcssa = $109;
       label = 30;
       break;
      }
      if ($109) {
       $$0$i1$ph = -1;
       label = 33;
       break;
      }
      $112 = (($107) + 1)|0;
      $113 = (($l$01$i) + ($112)|0);
      $114 = (($ll$02$i) - ($112))|0;
      $115 = (($r$03$i) + ($112)|0);
      $116 = (($lr$04$i) - ($112))|0;
      $117 = (_strcoll($113,$115)|0);
      $118 = ($117|0)==(0);
      if ($118) {
       $l$01$i = $113;$ll$02$i = $114;$lr$04$i = $116;$r$03$i = $115;
      } else {
       $$0$i1$ph = $117;
       label = 33;
       break;
      }
     }
     if ((label|0) == 30) {
      $110 = $$lcssa&1;
      $111 = $110 ^ 1;
      $$0$i1 = $111;
      break;
     }
     else if ((label|0) == 33) {
      $$0$i1 = $$0$i1$ph;
      break;
     }
    } else {
     $$0$i1 = $105;
    }
   } while(0);
   $$lobit = $$0$i1 >>> 31;
   $$0 = $$lobit;
   return ($$0|0);
  }
 } else if ((($2|0) == 3)) {
  $3 = (($r) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 15;
  $6 = ($5|0)==(3);
  if ($6) {
   $7 = ($1|0)==(19);
   if ($7) {
    $8 = $l;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = ($4|0)==(19);
    if ($14) {
     $15 = $r;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($13|0)<($20|0);
     $22 = ($10>>>0)<($17>>>0);
     $23 = ($13|0)==($20|0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $26 = $25&1;
     $$0 = $26;
     return ($$0|0);
    }
    $27 = +HEAPF64[$r>>3];
    $28 = (_i64Add(($10|0),($13|0),0,2097152)|0);
    $29 = tempRet0;
    $30 = ($29>>>0)<(4194304);
    $31 = ($28>>>0)<(1);
    $32 = ($29|0)==(4194304);
    $33 = $32 & $31;
    $34 = $30 | $33;
    if ($34) {
     $45 = (+($10>>>0)) + (4294967296.0*(+($13|0)));
     $46 = $45 < $27;
     $47 = $46&1;
     $$0 = $47;
     return ($$0|0);
    }
    $35 = !($27 >= 9.2233720368547758E+18);
    if (!($35)) {
     $$0 = 1;
     return ($$0|0);
    }
    $36 = $27 > -9.2233720368547758E+18;
    if (!($36)) {
     $$0 = 0;
     return ($$0|0);
    }
    $37 = (~~$27)>>>0;
    $38 = +Math_abs($27) >= 1.0 ? $27 > 0.0 ? (~~+Math_min(+Math_floor($27 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($27 - +(~~$27 >>> 0)) / 4294967296.0) >>> 0 : 0;
    $39 = ($38|0)>($13|0);
    $40 = ($37>>>0)>($10>>>0);
    $41 = ($38|0)==($13|0);
    $42 = $41 & $40;
    $43 = $39 | $42;
    $44 = $43&1;
    $$0 = $44;
    return ($$0|0);
   } else {
    $48 = +HEAPF64[$l>>3];
    $49 = ($4|0)==(3);
    if ($49) {
     $50 = +HEAPF64[$r>>3];
     $51 = $48 < $50;
     $52 = $51&1;
     $$0 = $52;
     return ($$0|0);
    }
    $53 = ($48 == $48) & (0.0 == 0.0);
    if (!($53)) {
     $$0 = 0;
     return ($$0|0);
    }
    $54 = $r;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = (_i64Add(($56|0),($59|0),0,2097152)|0);
    $61 = tempRet0;
    $62 = ($61>>>0)<(4194304);
    $63 = ($60>>>0)<(1);
    $64 = ($61|0)==(4194304);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $77 = (+($56>>>0)) + (4294967296.0*(+($59|0)));
     $78 = $77 <= $48;
     $79 = $78&1;
     $$0$i2$i = $79;
    } else {
     $67 = !($48 >= 9.2233720368547758E+18);
     if ($67) {
      $68 = !($48 >= -9.2233720368547758E+18);
      if ($68) {
       $$0$i2$i = 0;
      } else {
       $69 = (~~$48)>>>0;
       $70 = +Math_abs($48) >= 1.0 ? $48 > 0.0 ? (~~+Math_min(+Math_floor($48 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($48 - +(~~$48 >>> 0)) / 4294967296.0) >>> 0 : 0;
       $71 = ($70|0)>($59|0);
       $72 = ($69>>>0)>=($56>>>0);
       $73 = ($70|0)==($59|0);
       $74 = $73 & $72;
       $75 = $71 | $74;
       $76 = $75&1;
       $$0$i2$i = $76;
      }
     } else {
      $$0$i2$i = 1;
     }
    }
    $80 = $$0$i2$i ^ 1;
    $$0 = $80;
    return ($$0|0);
   }
  }
 }
 $119 = (_luaT_callorderTM($L,$l,$r,20)|0);
 $120 = ($119|0)<(0);
 if ($120) {
  _luaG_ordererror($L,$l,$r);
  // unreachable;
 } else {
  $$0 = $119;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaV_lessequal($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $$0$i1 = 0, $$0$i1$ph = 0, $$0$i2$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$0$ph$i = 0, $lr$04$i = 0, $r$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 if ((($2|0) == 4)) {
  $81 = (($r) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 & 15;
  $84 = ($83|0)==(4);
  if ($84) {
   $85 = HEAP32[$l>>2]|0;
   $86 = HEAP32[$r>>2]|0;
   $87 = (($85) + 16|0);
   $88 = (($85) + 4|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = ($89<<24>>24)==(4);
   if ($90) {
    $91 = (($85) + 7|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $140 = $93;
   } else {
    $94 = (($85) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $140 = $95;
   }
   $96 = (($86) + 16|0);
   $97 = (($86) + 4|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = ($98<<24>>24)==(4);
   if ($99) {
    $100 = (($86) + 7|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $lr$0$ph$i = $102;
   } else {
    $103 = (($86) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $lr$0$ph$i = $104;
   }
   $105 = (_strcoll($87,$96)|0);
   $106 = ($105|0)==(0);
   do {
    if ($106) {
     $l$01$i = $87;$ll$02$i = $140;$lr$04$i = $lr$0$ph$i;$r$03$i = $96;
     while(1) {
      $107 = (_strlen(($l$01$i|0))|0);
      $108 = ($107|0)==($lr$04$i|0);
      $109 = ($107|0)==($ll$02$i|0);
      if ($108) {
       $$lcssa = $109;
       label = 30;
       break;
      }
      if ($109) {
       $$0$i1$ph = -1;
       label = 33;
       break;
      }
      $112 = (($107) + 1)|0;
      $113 = (($l$01$i) + ($112)|0);
      $114 = (($ll$02$i) - ($112))|0;
      $115 = (($r$03$i) + ($112)|0);
      $116 = (($lr$04$i) - ($112))|0;
      $117 = (_strcoll($113,$115)|0);
      $118 = ($117|0)==(0);
      if ($118) {
       $l$01$i = $113;$ll$02$i = $114;$lr$04$i = $116;$r$03$i = $115;
      } else {
       $$0$i1$ph = $117;
       label = 33;
       break;
      }
     }
     if ((label|0) == 30) {
      $110 = $$lcssa&1;
      $111 = $110 ^ 1;
      $$0$i1 = $111;
      break;
     }
     else if ((label|0) == 33) {
      $$0$i1 = $$0$i1$ph;
      break;
     }
    } else {
     $$0$i1 = $105;
    }
   } while(0);
   $119 = ($$0$i1|0)<(1);
   $120 = $119&1;
   $$0 = $120;
   return ($$0|0);
  }
 } else if ((($2|0) == 3)) {
  $3 = (($r) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 15;
  $6 = ($5|0)==(3);
  if ($6) {
   $7 = ($1|0)==(19);
   if ($7) {
    $8 = $l;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = ($4|0)==(19);
    if ($14) {
     $15 = $r;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($13|0)<($20|0);
     $22 = ($10>>>0)<=($17>>>0);
     $23 = ($13|0)==($20|0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $26 = $25&1;
     $$0 = $26;
     return ($$0|0);
    }
    $27 = +HEAPF64[$r>>3];
    $28 = (_i64Add(($10|0),($13|0),0,2097152)|0);
    $29 = tempRet0;
    $30 = ($29>>>0)<(4194304);
    $31 = ($28>>>0)<(1);
    $32 = ($29|0)==(4194304);
    $33 = $32 & $31;
    $34 = $30 | $33;
    if ($34) {
     $45 = (+($10>>>0)) + (4294967296.0*(+($13|0)));
     $46 = $45 <= $27;
     $47 = $46&1;
     $$0 = $47;
     return ($$0|0);
    }
    $35 = !($27 >= 9.2233720368547758E+18);
    if (!($35)) {
     $$0 = 1;
     return ($$0|0);
    }
    $36 = !($27 >= -9.2233720368547758E+18);
    if ($36) {
     $$0 = 0;
     return ($$0|0);
    }
    $37 = (~~$27)>>>0;
    $38 = +Math_abs($27) >= 1.0 ? $27 > 0.0 ? (~~+Math_min(+Math_floor($27 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($27 - +(~~$27 >>> 0)) / 4294967296.0) >>> 0 : 0;
    $39 = ($38|0)>($13|0);
    $40 = ($37>>>0)>=($10>>>0);
    $41 = ($38|0)==($13|0);
    $42 = $41 & $40;
    $43 = $39 | $42;
    $44 = $43&1;
    $$0 = $44;
    return ($$0|0);
   } else {
    $48 = +HEAPF64[$l>>3];
    $49 = ($4|0)==(3);
    if ($49) {
     $50 = +HEAPF64[$r>>3];
     $51 = $48 <= $50;
     $52 = $51&1;
     $$0 = $52;
     return ($$0|0);
    }
    $53 = ($48 == $48) & (0.0 == 0.0);
    if (!($53)) {
     $$0 = 0;
     return ($$0|0);
    }
    $54 = $r;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = (_i64Add(($56|0),($59|0),0,2097152)|0);
    $61 = tempRet0;
    $62 = ($61>>>0)<(4194304);
    $63 = ($60>>>0)<(1);
    $64 = ($61|0)==(4194304);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $77 = (+($56>>>0)) + (4294967296.0*(+($59|0)));
     $78 = $77 < $48;
     $79 = $78&1;
     $$0$i2$i = $79;
    } else {
     $67 = !($48 >= 9.2233720368547758E+18);
     if ($67) {
      $68 = $48 > -9.2233720368547758E+18;
      if ($68) {
       $69 = (~~$48)>>>0;
       $70 = +Math_abs($48) >= 1.0 ? $48 > 0.0 ? (~~+Math_min(+Math_floor($48 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($48 - +(~~$48 >>> 0)) / 4294967296.0) >>> 0 : 0;
       $71 = ($70|0)>($59|0);
       $72 = ($69>>>0)>($56>>>0);
       $73 = ($70|0)==($59|0);
       $74 = $73 & $72;
       $75 = $71 | $74;
       $76 = $75&1;
       $$0$i2$i = $76;
      } else {
       $$0$i2$i = 0;
      }
     } else {
      $$0$i2$i = 1;
     }
    }
    $80 = $$0$i2$i ^ 1;
    $$0 = $80;
    return ($$0|0);
   }
  }
 }
 $121 = (_luaT_callorderTM($L,$l,$r,21)|0);
 $122 = ($121|0)>(-1);
 if ($122) {
  $$0 = $121;
  return ($$0|0);
 }
 $123 = (($L) + 16|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 34|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $127 | 128;
 $129 = $128&255;
 HEAP8[$125>>0] = $129;
 $130 = (_luaT_callorderTM($L,$r,$l,20)|0);
 $131 = HEAP32[$123>>2]|0;
 $132 = (($131) + 34|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 $135 = $134 ^ 128;
 $136 = $135&255;
 HEAP8[$132>>0] = $136;
 $137 = ($130|0)<(0);
 if ($137) {
  _luaG_ordererror($L,$l,$r);
  // unreachable;
 }
 $138 = ($130|0)==(0);
 $139 = $138&1;
 $$0 = $139;
 return ($$0|0);
}
function _luaV_equalobj($L,$t1,$t2) {
 $L = $L|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $$0 = 0, $$02$i = 0, $$02$i$lcssa = 0, $$02$i$lcssa35 = 0, $$02$i2 = 0, $$02$i2$lcssa = 0, $$02$i2$lcssa33 = 0, $$phi$trans$insert = 0, $$phi$trans$insert30 = 0, $$pre = 0, $$pre27 = 0, $$pre28 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i3 = 0, $phitmp = 0, $tm$0 = 0, $tm$017 = 0, $v$i = 0, $v$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$i1 = sp + 16|0;
 $v$i = sp;
 $0 = (($t1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 $3 = (($t2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 63;
 $6 = ($2|0)==($5|0);
 if (!($6)) {
  $7 = $1 & 15;
  $8 = $4 & 15;
  $9 = ($7|0)==($8|0);
  $10 = ($7|0)==(3);
  $or$cond = $9 & $10;
  if (!($or$cond)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = ($1|0)==(19);
  do {
   if ($11) {
    $12 = $t1;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = (($12) + 4)|0;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $88 = $14;$91 = $17;
    label = 17;
   } else {
    $$02$i = $t1;$32 = $1;
    while(1) {
     if ((($32|0) == 3)) {
      $$02$i$lcssa = $$02$i;
      label = 7;
      break;
     } else if ((($32|0) == 19)) {
      $$02$i$lcssa35 = $$02$i;
      label = 10;
      break;
     }
     $31 = $32 & 15;
     $33 = ($31|0)==(4);
     if (!($33)) {
      label = 33;
      break;
     }
     $34 = HEAP32[$$02$i>>2]|0;
     $35 = (($34) + 16|0);
     $36 = (_luaO_str2num($35,$v$i)|0);
     $37 = HEAP32[$$02$i>>2]|0;
     $38 = (($37) + 4|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = ($39<<24>>24)==(4);
     if ($40) {
      $41 = (($37) + 7|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $47 = $43;
     } else {
      $44 = (($37) + 12|0);
      $45 = HEAP32[$44>>2]|0;
      $47 = $45;
     }
     $46 = (($47) + 1)|0;
     $48 = ($36|0)==($46|0);
     if (!($48)) {
      label = 33;
      break;
     }
     $$phi$trans$insert30 = (($v$i) + 8|0);
     $$pre31 = HEAP32[$$phi$trans$insert30>>2]|0;
     $$02$i = $v$i;$32 = $$pre31;
    }
    if ((label|0) == 7) {
     $18 = +HEAPF64[$$02$i$lcssa>>3];
     $19 = (+Math_floor((+$18)));
     $20 = $18 != $19;
     if ($20) {
      $96 = 0;
      break;
     }
     $21 = $19 >= -9.2233720368547758E+18;
     $22 = $19 < 9.2233720368547758E+18;
     $or$cond$i = $21 & $22;
     if (!($or$cond$i)) {
      $96 = 0;
      break;
     }
     $23 = (~~$19)>>>0;
     $24 = +Math_abs($19) >= 1.0 ? $19 > 0.0 ? (~~+Math_min(+Math_floor($19 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($19 - +(~~$19 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $88 = $23;$91 = $24;
     label = 17;
     break;
    }
    else if ((label|0) == 10) {
     $25 = $$02$i$lcssa35;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($25) + 4)|0;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $88 = $27;$91 = $30;
     label = 17;
     break;
    }
    else if ((label|0) == 33) {
     $96 = 0;
     break;
    }
   }
  } while(0);
  L24: do {
   if ((label|0) == 17) {
    $49 = HEAP32[$3>>2]|0;
    $50 = ($49|0)==(19);
    do {
     if ($50) {
      $51 = $t2;
      $52 = $51;
      $53 = HEAP32[$52>>2]|0;
      $54 = (($51) + 4)|0;
      $55 = $54;
      $56 = HEAP32[$55>>2]|0;
      $90 = $53;$93 = $56;
     } else {
      $$02$i2 = $t2;$71 = $49;
      while(1) {
       if ((($71|0) == 3)) {
        $$02$i2$lcssa = $$02$i2;
        label = 21;
        break;
       } else if ((($71|0) == 19)) {
        $$02$i2$lcssa33 = $$02$i2;
        label = 24;
        break;
       }
       $70 = $71 & 15;
       $72 = ($70|0)==(4);
       if (!($72)) {
        label = 32;
        break;
       }
       $73 = HEAP32[$$02$i2>>2]|0;
       $74 = (($73) + 16|0);
       $75 = (_luaO_str2num($74,$v$i1)|0);
       $76 = HEAP32[$$02$i2>>2]|0;
       $77 = (($76) + 4|0);
       $78 = HEAP8[$77>>0]|0;
       $79 = ($78<<24>>24)==(4);
       if ($79) {
        $80 = (($76) + 7|0);
        $81 = HEAP8[$80>>0]|0;
        $82 = $81&255;
        $86 = $82;
       } else {
        $83 = (($76) + 12|0);
        $84 = HEAP32[$83>>2]|0;
        $86 = $84;
       }
       $85 = (($86) + 1)|0;
       $87 = ($75|0)==($85|0);
       if (!($87)) {
        label = 32;
        break;
       }
       $$phi$trans$insert = (($v$i1) + 8|0);
       $$pre28 = HEAP32[$$phi$trans$insert>>2]|0;
       $$02$i2 = $v$i1;$71 = $$pre28;
      }
      if ((label|0) == 21) {
       $57 = +HEAPF64[$$02$i2$lcssa>>3];
       $58 = (+Math_floor((+$57)));
       $59 = $57 != $58;
       if ($59) {
        $96 = 0;
        break L24;
       }
       $60 = $58 >= -9.2233720368547758E+18;
       $61 = $58 < 9.2233720368547758E+18;
       $or$cond$i3 = $60 & $61;
       if (!($or$cond$i3)) {
        $96 = 0;
        break L24;
       }
       $62 = (~~$58)>>>0;
       $63 = +Math_abs($58) >= 1.0 ? $58 > 0.0 ? (~~+Math_min(+Math_floor($58 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($58 - +(~~$58 >>> 0)) / 4294967296.0) >>> 0 : 0;
       $90 = $62;$93 = $63;
       break;
      }
      else if ((label|0) == 24) {
       $64 = $$02$i2$lcssa33;
       $65 = $64;
       $66 = HEAP32[$65>>2]|0;
       $67 = (($64) + 4)|0;
       $68 = $67;
       $69 = HEAP32[$68>>2]|0;
       $90 = $66;$93 = $69;
       break;
      }
      else if ((label|0) == 32) {
       $96 = 0;
       break L24;
      }
     }
    } while(0);
    $89 = ($88|0)==($90|0);
    $92 = ($91|0)==($93|0);
    $94 = $89 & $92;
    $96 = $94;
   }
  } while(0);
  $95 = $96&1;
  $$0 = $95;
  STACKTOP = sp;return ($$0|0);
 }
 L48: do {
  switch ($2|0) {
  case 5:  {
   $166 = HEAP32[$t1>>2]|0;
   $167 = HEAP32[$t2>>2]|0;
   $168 = ($166|0)==($167|0);
   if ($168) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $169 = ($L|0)==(0|0);
   if ($169) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $170 = (($166) + 24|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)==(0|0);
   if ($172) {
    $184 = $167;
   } else {
    $173 = (($171) + 6|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $174 & 32;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     $177 = (($L) + 12|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (($178) + 168|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (_luaT_gettm($171,5,$180)|0);
     $182 = ($181|0)==(0|0);
     if (!($182)) {
      $tm$017 = $181;
      break L48;
     }
     $$pre27 = HEAP32[$t2>>2]|0;
     $184 = $$pre27;
    } else {
     $184 = $167;
    }
   }
   $183 = (($184) + 24|0);
   $185 = HEAP32[$183>>2]|0;
   $186 = ($185|0)==(0|0);
   if ($186) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $187 = (($185) + 6|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188 & 32;
   $190 = ($189<<24>>24)==(0);
   if ($190) {
    $191 = (($L) + 12|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192) + 168|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (_luaT_gettm($185,5,$194)|0);
    $tm$0 = $195;
    label = 62;
    break L48;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 0:  {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 19:  {
   $97 = $t1;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + 4)|0;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = $t2;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $106 = (($103) + 4)|0;
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = ($99|0)==($105|0);
   $110 = ($102|0)==($108|0);
   $111 = $109 & $110;
   $112 = $111&1;
   $$0 = $112;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 22:  {
   $125 = HEAP32[$t1>>2]|0;
   $126 = HEAP32[$t2>>2]|0;
   $127 = ($125|0)==($126|0);
   $128 = $127&1;
   $$0 = $128;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 4:  {
   $129 = HEAP32[$t1>>2]|0;
   $130 = HEAP32[$t2>>2]|0;
   $131 = ($129|0)==($130|0);
   $132 = $131&1;
   $$0 = $132;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 7:  {
   $136 = HEAP32[$t1>>2]|0;
   $137 = HEAP32[$t2>>2]|0;
   $138 = ($136|0)==($137|0);
   if ($138) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $139 = ($L|0)==(0|0);
   if ($139) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $140 = (($136) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)==(0|0);
   if ($142) {
    $154 = $137;
   } else {
    $143 = (($141) + 6|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144 & 32;
    $146 = ($145<<24>>24)==(0);
    if ($146) {
     $147 = (($L) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + 168|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (_luaT_gettm($141,5,$150)|0);
     $152 = ($151|0)==(0|0);
     if (!($152)) {
      $tm$017 = $151;
      break L48;
     }
     $$pre = HEAP32[$t2>>2]|0;
     $154 = $$pre;
    } else {
     $154 = $137;
    }
   }
   $153 = (($154) + 8|0);
   $155 = HEAP32[$153>>2]|0;
   $156 = ($155|0)==(0|0);
   if ($156) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $157 = (($155) + 6|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158 & 32;
   $160 = ($159<<24>>24)==(0);
   if ($160) {
    $161 = (($L) + 12|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + 168|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (_luaT_gettm($155,5,$164)|0);
    $tm$0 = $165;
    label = 62;
    break L48;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 3:  {
   $113 = +HEAPF64[$t1>>3];
   $114 = +HEAPF64[$t2>>3];
   $115 = $113 == $114;
   $116 = $115&1;
   $$0 = $116;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $121 = HEAP32[$t1>>2]|0;
   $122 = HEAP32[$t2>>2]|0;
   $123 = ($121|0)==($122|0);
   $124 = $123&1;
   $$0 = $124;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 1:  {
   $117 = HEAP32[$t1>>2]|0;
   $118 = HEAP32[$t2>>2]|0;
   $119 = ($117|0)==($118|0);
   $120 = $119&1;
   $$0 = $120;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 20:  {
   $133 = HEAP32[$t1>>2]|0;
   $134 = HEAP32[$t2>>2]|0;
   $135 = (_luaS_eqlngstr($133,$134)|0);
   $$0 = $135;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $196 = HEAP32[$t1>>2]|0;
   $197 = HEAP32[$t2>>2]|0;
   $198 = ($196|0)==($197|0);
   $199 = $198&1;
   $$0 = $199;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 if ((label|0) == 62) {
  $200 = ($tm$0|0)==(0|0);
  if ($200) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $tm$017 = $tm$0;
  }
 }
 $201 = (($L) + 8|0);
 $202 = HEAP32[$201>>2]|0;
 _luaT_callTM($L,$tm$017,$t1,$t2,$202,1);
 $203 = HEAP32[$201>>2]|0;
 $204 = (($203) + 8|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)==(0);
 if ($206) {
  $210 = 0;
 } else {
  $207 = ($205|0)==(1);
  if ($207) {
   $208 = HEAP32[$203>>2]|0;
   $phitmp = ($208|0)!=(0);
   $210 = $phitmp;
  } else {
   $210 = 1;
  }
 }
 $209 = $210&1;
 $$0 = $209;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_concat($L,$total) {
 $L = $L|0;
 $total = $total|0;
 var $$0 = 0, $$lcssa = 0, $$neg = 0, $$off = 0, $$pr = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $cond = 0, $i$0$lcssa = 0, $i$0$lcssa$ph = 0, $i$05 = 0, $i$1 = 0, $n$0 = 0;
 var $switch = 0, $tl$0$lcssa = 0, $tl$0$lcssa$ph = 0, $tl$0$ph = 0, $tl$06 = 0, $tl$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($L) + 8|0);
 $1 = (($L) + 12|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $total;$3 = $$pre;
 L1: while(1) {
  $2 = (($3) + -32|0);
  $4 = (($3) + -24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 15;
  $$off = (($6) + -3)|0;
  $switch = ($$off>>>0)<(2);
  $7 = (($3) + -16|0);
  do {
   if ($switch) {
    $8 = (($3) + -8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 15;
    if ((($10|0) == 4)) {
     $11 = $9;
    } else if ((($10|0) == 3)) {
     _luaO_tostring($L,$7);
     $$pr = HEAP32[$8>>2]|0;
     $11 = $$pr;
    } else {
     label = 5;
     break;
    }
    $12 = ($11|0)==(68);
    if ($12) {
     $13 = HEAP32[$7>>2]|0;
     $14 = (($13) + 7|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $17 = HEAP32[$4>>2]|0;
      $18 = $17 & 15;
      $cond = ($18|0)==(3);
      if (!($cond)) {
       $n$0 = 2;
       break;
      }
      _luaO_tostring($L,$2);
      $n$0 = 2;
      break;
     }
    }
    $19 = HEAP32[$4>>2]|0;
    $20 = ($19|0)==(68);
    if ($20) {
     $21 = HEAP32[$2>>2]|0;
     $22 = (($21) + 7|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      ;HEAP32[$2+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$7+12>>2]|0;
      $n$0 = 2;
      break;
     }
    }
    $25 = HEAP32[$7>>2]|0;
    $26 = (($25) + 4|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)==(4);
    if ($28) {
     $29 = (($25) + 7|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $tl$0$ph = $31;
    } else {
     $32 = (($25) + 12|0);
     $33 = HEAP32[$32>>2]|0;
     $tl$0$ph = $33;
    }
    $34 = ($$0|0)>(1);
    if ($34) {
     $i$05 = 1;$tl$06 = $tl$0$ph;
     while(1) {
      $$sum = $i$05 ^ -1;
      $35 = (($3) + ($$sum<<4)|0);
      $36 = ((($3) + ($$sum<<4)|0) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $37 & 15;
      if ((($38|0) == 3)) {
       _luaO_tostring($L,$35);
      } else if (!((($38|0) == 4))) {
       $i$0$lcssa$ph = $i$05;$tl$0$lcssa$ph = $tl$06;
       break;
      }
      $39 = HEAP32[$35>>2]|0;
      $40 = (($39) + 4|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(4);
      if ($42) {
       $43 = (($39) + 7|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = $44&255;
       $49 = $45;
      } else {
       $46 = (($39) + 12|0);
       $47 = HEAP32[$46>>2]|0;
       $49 = $47;
      }
      $48 = $tl$06 ^ -1;
      $50 = ($49>>>0)<($48>>>0);
      if (!($50)) {
       label = 24;
       break L1;
      }
      $51 = (($49) + ($tl$06))|0;
      $52 = (($i$05) + 1)|0;
      $53 = ($52|0)<($$0|0);
      if ($53) {
       $i$05 = $52;$tl$06 = $51;
      } else {
       $i$0$lcssa$ph = $52;$tl$0$lcssa$ph = $51;
       break;
      }
     }
     $i$0$lcssa = $i$0$lcssa$ph;$tl$0$lcssa = $tl$0$lcssa$ph;
    } else {
     $i$0$lcssa = 1;$tl$0$lcssa = $tl$0$ph;
    }
    $54 = HEAP32[$1>>2]|0;
    $55 = (($54) + 108|0);
    $56 = (_luaZ_openspace($L,$55,$tl$0$lcssa)|0);
    $i$1 = $i$0$lcssa;$tl$1 = 0;
    while(1) {
     $57 = (0 - ($i$1))|0;
     $58 = (($3) + ($57<<4)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + 4|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)==(4);
     if ($62) {
      $63 = (($59) + 7|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $70 = $65;
     } else {
      $66 = (($59) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $70 = $67;
     }
     $68 = (($56) + ($tl$1)|0);
     $69 = (($59) + 16|0);
     _memcpy(($68|0),($69|0),($70|0))|0;
     $71 = (($70) + ($tl$1))|0;
     $72 = (($i$1) + -1)|0;
     $73 = ($72|0)>(0);
     if ($73) {
      $i$1 = $72;$tl$1 = $71;
     } else {
      $$lcssa = $71;
      break;
     }
    }
    $74 = (0 - ($i$0$lcssa))|0;
    $75 = (($3) + ($74<<4)|0);
    $76 = (_luaS_newlstr($L,$56,$$lcssa)|0);
    HEAP32[$75>>2] = $76;
    $77 = (($76) + 4|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = $79 | 64;
    $81 = ((($3) + ($74<<4)|0) + 8|0);
    HEAP32[$81>>2] = $80;
    $n$0 = $i$0$lcssa;
   } else {
    label = 5;
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   _luaT_trybinTM($L,$2,$7,$2,22);
   $n$0 = 2;
  }
  $$neg = (($$0) + 1)|0;
  $82 = (($$neg) - ($n$0))|0;
  $83 = HEAP32[$0>>2]|0;
  $84 = (1 - ($n$0))|0;
  $85 = (($83) + ($84<<4)|0);
  HEAP32[$0>>2] = $85;
  $86 = ($82|0)>(1);
  if ($86) {
   $$0 = $82;$3 = $85;
  } else {
   label = 34;
   break;
  }
 }
 if ((label|0) == 24) {
  _luaG_runerror($L,11440,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 34) {
  STACKTOP = sp;return;
 }
}
function _luaV_objlen($L,$ra,$rb) {
 $L = $L|0;
 $ra = $ra|0;
 $rb = $rb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tm$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($rb) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 do {
  if ((($2|0) == 5)) {
   $3 = HEAP32[$rb>>2]|0;
   $4 = (($3) + 24|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = (($5) + 6|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 & 16;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $11 = (($L) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($12) + 164|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_luaT_gettm($5,4,$14)|0);
     $16 = ($15|0)==(0|0);
     if (!($16)) {
      $tm$0 = $15;
      break;
     }
    }
   }
   $17 = (_luaH_getn($3)|0);
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = $ra;
   $21 = $20;
   HEAP32[$21>>2] = $17;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = $19;
   $24 = (($ra) + 8|0);
   HEAP32[$24>>2] = 19;
   return;
  } else if ((($2|0) == 4)) {
   $25 = HEAP32[$rb>>2]|0;
   $26 = (($25) + 7|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $ra;
   $30 = $29;
   HEAP32[$30>>2] = $28;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = 0;
   $33 = (($ra) + 8|0);
   HEAP32[$33>>2] = 19;
   return;
  } else if ((($2|0) == 20)) {
   $34 = HEAP32[$rb>>2]|0;
   $35 = (($34) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $ra;
   $38 = $37;
   HEAP32[$38>>2] = $36;
   $39 = (($37) + 4)|0;
   $40 = $39;
   HEAP32[$40>>2] = 0;
   $41 = (($ra) + 8|0);
   HEAP32[$41>>2] = 19;
   return;
  } else {
   $42 = (_luaT_gettmbyobj($L,$rb,4)|0);
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0);
   if ($45) {
    _luaG_typeerror($L,$rb,11464);
    // unreachable;
   } else {
    $tm$0 = $42;
   }
  }
 } while(0);
 _luaT_callTM($L,$tm$0,$rb,$rb,$ra,1);
 return;
}
function _luaV_div($L,$0,$1,$2,$3) {
 $L = $L|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $4 = (_i64Add(($2|0),($3|0),1,0)|0);
 $5 = tempRet0;
 $6 = ($5>>>0)<(0);
 $7 = ($4>>>0)<(2);
 $8 = ($5|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if (!($10)) {
  $16 = (___divdi3(($0|0),($1|0),($2|0),($3|0))|0);
  $17 = tempRet0;
  $2 ^ $0;
  $18 = $3 ^ $1;
  $19 = ($18|0)<(0);
  if ($19) {
   $20 = (___remdi3(($0|0),($1|0),($2|0),($3|0))|0);
   $21 = tempRet0;
   $22 = ($20|0)!=(0);
   $23 = ($21|0)!=(0);
   $24 = $22 | $23;
   $25 = $24 << 31 >> 31;
   $26 = ($25|0)<(0);
   $27 = $26 << 31 >> 31;
   $28 = (_i64Add(($25|0),($27|0),($16|0),($17|0))|0);
   $29 = tempRet0;
   tempRet0 = $29;
   STACKTOP = sp;return ($28|0);
  } else {
   $30 = $17;$31 = $16;
   tempRet0 = $30;
   STACKTOP = sp;return ($31|0);
  }
 }
 $11 = ($2|0)==(0);
 $12 = ($3|0)==(0);
 $13 = $11 & $12;
 if ($13) {
  _luaG_runerror($L,11480,$vararg_buffer);
  // unreachable;
 }
 $14 = (_i64Subtract(0,0,($0|0),($1|0))|0);
 $15 = tempRet0;
 $30 = $15;$31 = $14;
 tempRet0 = $30;
 STACKTOP = sp;return ($31|0);
}
function _luaV_mod($L,$0,$1,$2,$3) {
 $L = $L|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $4 = (_i64Add(($2|0),($3|0),1,0)|0);
 $5 = tempRet0;
 $6 = ($5>>>0)<(0);
 $7 = ($4>>>0)<(2);
 $8 = ($5|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if (!($10)) {
  $14 = (___remdi3(($0|0),($1|0),($2|0),($3|0))|0);
  $15 = tempRet0;
  $16 = ($14|0)!=(0);
  $17 = ($15|0)!=(0);
  $18 = $16 | $17;
  $2 ^ $0;
  $19 = $3 ^ $1;
  $20 = ($19|0)<(0);
  $or$cond = $18 & $20;
  $21 = $or$cond ? $2 : 0;
  $22 = $or$cond ? $3 : 0;
  $23 = (_i64Add(($21|0),($22|0),($14|0),($15|0))|0);
  $24 = tempRet0;
  $25 = $24;$26 = $23;
  tempRet0 = $25;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ($2|0)==(0);
 $12 = ($3|0)==(0);
 $13 = $11 & $12;
 if ($13) {
  _luaG_runerror($L,11512,$vararg_buffer);
  // unreachable;
 } else {
  $25 = 0;$26 = 0;
  tempRet0 = $25;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _luaV_shiftl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $14 = ($3|0)>(0);
  $15 = ($2>>>0)>(63);
  $16 = ($3|0)==(0);
  $17 = $16 & $15;
  $18 = $14 | $17;
  $19 = (_bitshift64Shl(($0|0),($1|0),($2|0))|0);
  $20 = tempRet0;
  $21 = $18 ? 0 : $19;
  $22 = $18 ? 0 : $20;
  tempRet0 = $22;
  return ($21|0);
 }
 $5 = ($3|0)<(-1);
 $6 = ($2>>>0)<(4294967233);
 $7 = ($3|0)==(-1);
 $8 = $7 & $6;
 $9 = $5 | $8;
 if ($9) {
  $23 = 0;$24 = 0;
  tempRet0 = $23;
  return ($24|0);
 }
 $10 = (_i64Subtract(0,0,($2|0),($3|0))|0);
 $11 = tempRet0;
 $12 = (_bitshift64Lshr(($0|0),($1|0),($10|0))|0);
 $13 = tempRet0;
 $23 = $13;$24 = $12;
 tempRet0 = $23;
 return ($24|0);
}
function _luaV_finishOp($L) {
 $L = $L|0;
 var $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 63;
 switch ($8|0) {
 case 31: case 32: case 33:  {
  $15 = (($L) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $25 = 1;
  } else {
   $20 = ($18|0)==(1);
   if ($20) {
    $21 = (($16) + -16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0);
    $25 = $23;
   } else {
    $25 = 0;
   }
  }
  $24 = $25&1;
  $26 = $24 ^ 1;
  $27 = (($16) + -16|0);
  HEAP32[$15>>2] = $27;
  $28 = (($1) + 34|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 & 128;
  $32 = ($31|0)==(0);
  if ($32) {
   $res$0 = $26;
  } else {
   $33 = $30 ^ 128;
   $34 = $33&255;
   HEAP8[$28>>0] = $34;
   $res$0 = $24;
  }
  $35 = $7 >>> 6;
  $36 = $35 & 255;
  $37 = ($res$0|0)==($36|0);
  if ($37) {
   return;
  }
  $38 = (($5) + 4|0);
  $$c = $38;
  HEAP32[$4>>2] = $$c;
  return;
  break;
 }
 case 29:  {
  $39 = (($L) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + -16|0);
  $42 = $7 >>> 23;
  $43 = (($40) + -32|0);
  $44 = (($3) + ($42<<4)|0);
  $45 = $43;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = (($40) + -48|0);
  ;HEAP32[$48+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$48+12>>2]=HEAP32[$41+12>>2]|0;
  $49 = ($47|0)>(16);
  if ($49) {
   $50 = $47 >> 4;
   HEAP32[$39>>2] = $43;
   _luaV_concat($L,$50);
  }
  $51 = HEAP32[$2>>2]|0;
  $52 = $7 >>> 6;
  $53 = $52 & 255;
  $54 = (($51) + ($53<<4)|0);
  $55 = HEAP32[$39>>2]|0;
  $56 = (($55) + -16|0);
  ;HEAP32[$54+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$56+12>>2]|0;
  $57 = (($1) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$39>>2] = $58;
  return;
  break;
 }
 case 41:  {
  $59 = (($1) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($L) + 8|0);
  HEAP32[$61>>2] = $60;
  return;
  break;
 }
 case 12: case 7: case 6: case 28: case 26: case 25: case 17: case 16: case 24: case 23: case 22: case 21: case 20: case 19: case 18: case 15: case 14: case 13:  {
  $9 = $7 >>> 6;
  $10 = $9 & 255;
  $11 = (($3) + ($10<<4)|0);
  $12 = (($L) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + -16|0);
  HEAP32[$12>>2] = $14;
  ;HEAP32[$11+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$14+12>>2]|0;
  return;
  break;
 }
 case 36:  {
  $62 = $7 & 8372224;
  $63 = ($62|0)==(0);
  if ($63) {
   return;
  }
  $64 = (($1) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($L) + 8|0);
  HEAP32[$66>>2] = $65;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaV_execute($L) {
 $L = $L|0;
 var $$02$i = 0, $$02$i$i = 0, $$02$i$i$lcssa = 0, $$02$i$i$lcssa771 = 0, $$02$i$lcssa = 0, $$02$i$lcssa791 = 0, $$02$i100 = 0, $$02$i100$lcssa = 0, $$02$i100$lcssa785 = 0, $$02$i105 = 0, $$02$i105$lcssa = 0, $$02$i105$lcssa779 = 0, $$02$i110 = 0, $$02$i110$lcssa = 0, $$02$i110$lcssa781 = 0, $$02$i116 = 0, $$02$i116$lcssa = 0, $$02$i116$lcssa775 = 0, $$02$i121 = 0, $$02$i121$lcssa = 0;
 var $$02$i121$lcssa777 = 0, $$02$i154 = 0, $$02$i154$lcssa = 0, $$02$i154$lcssa773 = 0, $$02$i80 = 0, $$02$i80$lcssa = 0, $$02$i80$lcssa793 = 0, $$02$i85 = 0, $$02$i85$lcssa = 0, $$02$i85$lcssa787 = 0, $$02$i90 = 0, $$02$i90$lcssa = 0, $$02$i90$lcssa789 = 0, $$02$i95 = 0, $$02$i95$lcssa = 0, $$02$i95$lcssa783 = 0, $$c = 0, $$c14 = 0, $$c17 = 0, $$c20 = 0;
 var $$c23 = 0, $$c26 = 0, $$c29 = 0, $$c30 = 0, $$c32 = 0, $$c33 = 0, $$c47 = 0, $$c53 = 0, $$c54 = 0, $$c6 = 0, $$c7 = 0, $$lcssa = 0, $$lcssa809 = 0, $$not$i = 0, $$not7$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert714 = 0, $$phi$trans$insert717 = 0, $$phi$trans$insert720 = 0, $$phi$trans$insert723 = 0;
 var $$phi$trans$insert726 = 0, $$phi$trans$insert729 = 0, $$phi$trans$insert732 = 0, $$phi$trans$insert735 = 0, $$phi$trans$insert738 = 0, $$phi$trans$insert747 = 0, $$phi$trans$insert749 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre715 = 0, $$pre718 = 0, $$pre721 = 0, $$pre724 = 0, $$pre727 = 0, $$pre730 = 0, $$pre733 = 0, $$pre736 = 0, $$pre739 = 0, $$pre741 = 0, $$pre742 = 0;
 var $$pre743 = 0, $$pre744 = 0, $$pre745 = 0, $$pre746 = 0, $$pre748 = 0, $$pre750 = 0, $$pre751 = 0, $$sink$i = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum15 = 0, $$sum16 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum21 = 0, $$sum22 = 0;
 var $$sum24 = 0, $$sum27 = 0, $$sum28 = 0, $$sum3 = 0, $$sum31 = 0, $$sum34 = 0, $$sum36 = 0, $$sum4 = 0, $$sum40 = 0, $$sum44 = 0, $$sum48 = 0, $$sum49 = 0, $$sum5 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0.0, $1013 = 0.0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0.0, $1098 = 0.0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0.0, $1139 = 0.0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0.0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0.0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0.0, $13 = 0, $130 = 0, $1300 = 0.0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0.0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0.0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0.0, $1339 = 0.0, $134 = 0, $1340 = 0.0;
 var $1341 = 0.0, $1342 = 0.0, $1343 = 0.0, $1344 = 0, $1345 = 0.0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0.0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0.0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0.0, $1447 = 0.0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0.0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0.0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0.0;
 var $1486 = 0.0, $1487 = 0.0, $1488 = 0.0, $1489 = 0.0, $149 = 0, $1490 = 0.0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0.0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0.0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0.0, $1545 = 0.0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0.0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0.0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0.0, $1585 = 0.0, $1586 = 0.0, $1587 = 0.0, $1588 = 0.0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0.0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0.0, $1635 = 0.0, $1636 = 0.0, $1637 = 0.0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0.0, $1654 = 0.0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0.0, $202 = 0, $2020 = 0.0, $2021 = 0.0, $2022 = 0, $2023 = 0.0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0.0, $2051 = 0.0, $2052 = 0.0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0.0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0.0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0.0, $2118 = 0.0, $2119 = 0, $212 = 0, $2120 = 0.0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
 var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0.0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
 var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0.0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0.0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
 var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
 var $2188 = 0, $2189 = 0.0, $219 = 0, $2190 = 0.0, $2191 = 0.0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0.0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0.0, $2204 = 0;
 var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0.0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
 var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0.0, $223 = 0, $2230 = 0.0, $2231 = 0.0, $2232 = 0, $2233 = 0, $2234 = 0.0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
 var $2241 = 0, $2242 = 0.0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0;
 var $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0.0, $2269 = 0.0, $227 = 0, $2270 = 0.0, $2271 = 0.0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0;
 var $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0;
 var $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0;
 var $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0;
 var $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0;
 var $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0;
 var $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0;
 var $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0;
 var $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0;
 var $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0;
 var $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0.0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0.0, $758 = 0.0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0.0, $865 = 0.0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0.0, $906 = 0.0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0.0;
 var $972 = 0.0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $aux$0519 = 0, $b$0 = 0, $b131$0 = 0, $base$0 = 0, $base$0$be = 0, $base$1 = 0, $base$1$lcssa = 0, $base$2 = 0, $brmerge$i = 0, $c128$0 = 0;
 var $ci$0 = 0, $ci$0$be = 0, $exitcond = 0, $exitcond$i = 0, $f$0$i$i = 0.0, $i$0 = 0, $i$01$i = 0, $i$01$i170 = 0, $j$0515 = 0, $last$0517 = 0, $m$0 = 0.0, $n$0 = 0, $n$1516 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101 = 0, $or$cond$i106 = 0, $or$cond$i111 = 0, $or$cond$i117 = 0;
 var $or$cond$i122 = 0, $or$cond$i128 = 0, $or$cond$i155 = 0, $or$cond$i81 = 0, $or$cond$i86 = 0, $or$cond$i91 = 0, $or$cond$i96 = 0, $or$cond753 = 0, $ra$0 = 0, $ra$1 = 0, $storemerge = 0, $storemerge38 = 0, $storemerge38$in = 0, $storemerge42 = 0, $storemerge42$in = 0, $storemerge46 = 0, $storemerge46$in = 0, $v$i = 0, $v$i$i = 0, $v$i1$i = 0;
 var $v$i104 = 0, $v$i109 = 0, $v$i115 = 0, $v$i120 = 0, $v$i130 = 0, $v$i133 = 0, $v$i138 = 0, $v$i141 = 0, $v$i144 = 0, $v$i147 = 0, $v$i150 = 0, $v$i153 = 0, $v$i159 = 0, $v$i162 = 0, $v$i165 = 0, $v$i56 = 0, $v$i59 = 0, $v$i62 = 0, $v$i65 = 0, $v$i68 = 0;
 var $v$i71 = 0, $v$i74 = 0, $v$i77 = 0, $v$i79 = 0, $v$i84 = 0, $v$i89 = 0, $v$i94 = 0, $v$i99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 528|0;
 $vararg_buffer5 = sp + 520|0;
 $vararg_buffer3 = sp + 512|0;
 $vararg_buffer1 = sp + 504|0;
 $vararg_buffer = sp + 496|0;
 $v$i165 = sp + 480|0;
 $v$i162 = sp + 464|0;
 $v$i159 = sp + 448|0;
 $v$i1$i = sp + 432|0;
 $v$i$i = sp + 416|0;
 $v$i153 = sp + 400|0;
 $v$i150 = sp + 384|0;
 $v$i147 = sp + 368|0;
 $v$i144 = sp + 352|0;
 $v$i141 = sp + 336|0;
 $v$i138 = sp + 320|0;
 $v$i133 = sp + 304|0;
 $v$i130 = sp + 288|0;
 $v$i120 = sp + 272|0;
 $v$i115 = sp + 112|0;
 $v$i109 = sp;
 $v$i104 = sp + 16|0;
 $v$i99 = sp + 32|0;
 $v$i94 = sp + 48|0;
 $v$i89 = sp + 64|0;
 $v$i84 = sp + 80|0;
 $v$i79 = sp + 96|0;
 $v$i77 = sp + 128|0;
 $v$i74 = sp + 144|0;
 $v$i71 = sp + 160|0;
 $v$i68 = sp + 176|0;
 $v$i65 = sp + 192|0;
 $v$i62 = sp + 208|0;
 $v$i59 = sp + 224|0;
 $v$i56 = sp + 240|0;
 $v$i = sp + 256|0;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 108|0);
 $3 = (($L) + 12|0);
 $4 = (($L) + 8|0);
 $5 = (($v$i56) + 8|0);
 $6 = (($v$i) + 8|0);
 $7 = (($v$i62) + 8|0);
 $8 = (($v$i59) + 8|0);
 $9 = (($v$i68) + 8|0);
 $10 = (($v$i65) + 8|0);
 $11 = (($v$i74) + 8|0);
 $12 = (($v$i71) + 8|0);
 $13 = (($v$i133) + 8|0);
 $14 = (($v$i130) + 8|0);
 $15 = (($v$i141) + 8|0);
 $16 = (($v$i138) + 8|0);
 $17 = (($v$i147) + 8|0);
 $18 = (($v$i144) + 8|0);
 $19 = (($v$i150) + 8|0);
 $20 = (($v$i1$i) + 8|0);
 $21 = (($v$i165) + 8|0);
 $22 = (($v$i162) + 8|0);
 $23 = (($v$i159) + 8|0);
 $24 = (($L) + 24|0);
 $25 = (($L) + 100|0);
 $ci$0 = $1;
 L1: while(1) {
  $26 = HEAP32[$ci$0>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 44|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($ci$0) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($ci$0) + 20|0);
  $35 = (($27) + 16|0);
  $36 = (($ci$0) + 4|0);
  $base$0 = $33;
  L3: while(1) {
   $37 = HEAP32[$34>>2]|0;
   $38 = (($37) + 4|0);
   $$c = $38;
   HEAP32[$34>>2] = $$c;
   $39 = HEAP32[$37>>2]|0;
   $40 = HEAP8[$2>>0]|0;
   $41 = $40 & 12;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $base$1 = $base$0;
   } else {
    $43 = HEAP32[$25>>2]|0;
    $44 = (($43) + -1)|0;
    HEAP32[$25>>2] = $44;
    $45 = ($44|0)!=(0);
    $46 = $40 & 4;
    $47 = ($46<<24>>24)==(0);
    $or$cond753 = $45 & $47;
    if ($or$cond753) {
     $base$1 = $base$0;
    } else {
     _luaG_traceexec($L);
     $48 = HEAP32[$32>>2]|0;
     $base$1 = $48;
    }
   }
   $49 = $39 >>> 6;
   $50 = $49 & 255;
   $51 = (($base$1) + ($50<<4)|0);
   $52 = $39 & 63;
   L9: do {
    switch ($52|0) {
    case 23:  {
     $948 = $39 >>> 23;
     $949 = $948 & 256;
     $950 = ($949|0)==(0);
     if ($950) {
      $953 = (($base$1) + ($948<<4)|0);
      $962 = $953;
     } else {
      $951 = $948 & 255;
      $952 = (($31) + ($951<<4)|0);
      $962 = $952;
     }
     $954 = $39 >>> 14;
     $955 = $954 & 256;
     $956 = ($955|0)==(0);
     if ($956) {
      $959 = $954 & 511;
      $960 = (($base$1) + ($959<<4)|0);
      $1003 = $960;
     } else {
      $957 = $954 & 255;
      $958 = (($31) + ($957<<4)|0);
      $1003 = $958;
     }
     $961 = (($962) + 8|0);
     $963 = HEAP32[$961>>2]|0;
     $964 = ($963|0)==(19);
     do {
      if ($964) {
       $965 = $962;
       $966 = $965;
       $967 = HEAP32[$966>>2]|0;
       $968 = (($965) + 4)|0;
       $969 = $968;
       $970 = HEAP32[$969>>2]|0;
       $1053 = $967;$1054 = $970;
       label = 315;
      } else {
       $$02$i105 = $962;$985 = $963;
       while(1) {
        if ((($985|0) == 3)) {
         $$02$i105$lcssa = $$02$i105;
         label = 305;
         break;
        } else if ((($985|0) == 19)) {
         $$02$i105$lcssa779 = $$02$i105;
         label = 308;
         break;
        }
        $984 = $985 & 15;
        $986 = ($984|0)==(4);
        if (!($986)) {
         label = 335;
         break;
        }
        $987 = HEAP32[$$02$i105>>2]|0;
        $988 = (($987) + 16|0);
        $989 = (_luaO_str2num($988,$v$i104)|0);
        $990 = HEAP32[$$02$i105>>2]|0;
        $991 = (($990) + 4|0);
        $992 = HEAP8[$991>>0]|0;
        $993 = ($992<<24>>24)==(4);
        if ($993) {
         $994 = (($990) + 7|0);
         $995 = HEAP8[$994>>0]|0;
         $996 = $995&255;
         $1000 = $996;
        } else {
         $997 = (($990) + 12|0);
         $998 = HEAP32[$997>>2]|0;
         $1000 = $998;
        }
        $999 = (($1000) + 1)|0;
        $1001 = ($989|0)==($999|0);
        if (!($1001)) {
         label = 335;
         break;
        }
        $$phi$trans$insert732 = (($v$i104) + 8|0);
        $$pre733 = HEAP32[$$phi$trans$insert732>>2]|0;
        $$02$i105 = $v$i104;$985 = $$pre733;
       }
       if ((label|0) == 305) {
        label = 0;
        $971 = +HEAPF64[$$02$i105$lcssa>>3];
        $972 = (+Math_floor((+$971)));
        $973 = $971 != $972;
        if ($973) {
         break;
        }
        $974 = $972 >= -9.2233720368547758E+18;
        $975 = $972 < 9.2233720368547758E+18;
        $or$cond$i106 = $974 & $975;
        if (!($or$cond$i106)) {
         break;
        }
        $976 = (~~$972)>>>0;
        $977 = +Math_abs($972) >= 1.0 ? $972 > 0.0 ? (~~+Math_min(+Math_floor($972 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($972 - +(~~$972 >>> 0)) / 4294967296.0) >>> 0 : 0;
        $1053 = $976;$1054 = $977;
        label = 315;
        break;
       }
       else if ((label|0) == 308) {
        label = 0;
        $978 = $$02$i105$lcssa779;
        $979 = $978;
        $980 = HEAP32[$979>>2]|0;
        $981 = (($978) + 4)|0;
        $982 = $981;
        $983 = HEAP32[$982>>2]|0;
        $1053 = $980;$1054 = $983;
        label = 315;
        break;
       }
       else if ((label|0) == 335) {
        label = 0;
        break;
       }
      }
     } while(0);
     L37: do {
      if ((label|0) == 315) {
       label = 0;
       $1002 = (($1003) + 8|0);
       $1004 = HEAP32[$1002>>2]|0;
       $1005 = ($1004|0)==(19);
       do {
        if ($1005) {
         $1006 = $1003;
         $1007 = $1006;
         $1008 = HEAP32[$1007>>2]|0;
         $1009 = (($1006) + 4)|0;
         $1010 = $1009;
         $1011 = HEAP32[$1010>>2]|0;
         $1043 = $1011;$1046 = $1008;
        } else {
         $$02$i110 = $1003;$1026 = $1004;
         while(1) {
          if ((($1026|0) == 19)) {
           $$02$i110$lcssa781 = $$02$i110;
           label = 322;
           break;
          } else if ((($1026|0) == 3)) {
           $$02$i110$lcssa = $$02$i110;
           label = 319;
           break;
          }
          $1025 = $1026 & 15;
          $1027 = ($1025|0)==(4);
          if (!($1027)) {
           label = 334;
           break;
          }
          $1028 = HEAP32[$$02$i110>>2]|0;
          $1029 = (($1028) + 16|0);
          $1030 = (_luaO_str2num($1029,$v$i109)|0);
          $1031 = HEAP32[$$02$i110>>2]|0;
          $1032 = (($1031) + 4|0);
          $1033 = HEAP8[$1032>>0]|0;
          $1034 = ($1033<<24>>24)==(4);
          if ($1034) {
           $1035 = (($1031) + 7|0);
           $1036 = HEAP8[$1035>>0]|0;
           $1037 = $1036&255;
           $1041 = $1037;
          } else {
           $1038 = (($1031) + 12|0);
           $1039 = HEAP32[$1038>>2]|0;
           $1041 = $1039;
          }
          $1040 = (($1041) + 1)|0;
          $1042 = ($1030|0)==($1040|0);
          if (!($1042)) {
           label = 334;
           break;
          }
          $$phi$trans$insert729 = (($v$i109) + 8|0);
          $$pre730 = HEAP32[$$phi$trans$insert729>>2]|0;
          $$02$i110 = $v$i109;$1026 = $$pre730;
         }
         if ((label|0) == 319) {
          label = 0;
          $1012 = +HEAPF64[$$02$i110$lcssa>>3];
          $1013 = (+Math_floor((+$1012)));
          $1014 = $1012 != $1013;
          if ($1014) {
           break L37;
          }
          $1015 = $1013 >= -9.2233720368547758E+18;
          $1016 = $1013 < 9.2233720368547758E+18;
          $or$cond$i111 = $1015 & $1016;
          if (!($or$cond$i111)) {
           break L37;
          }
          $1017 = (~~$1013)>>>0;
          $1018 = +Math_abs($1013) >= 1.0 ? $1013 > 0.0 ? (~~+Math_min(+Math_floor($1013 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1013 - +(~~$1013 >>> 0)) / 4294967296.0) >>> 0 : 0;
          $1043 = $1018;$1046 = $1017;
          break;
         }
         else if ((label|0) == 322) {
          label = 0;
          $1019 = $$02$i110$lcssa781;
          $1020 = $1019;
          $1021 = HEAP32[$1020>>2]|0;
          $1022 = (($1019) + 4)|0;
          $1023 = $1022;
          $1024 = HEAP32[$1023>>2]|0;
          $1043 = $1024;$1046 = $1021;
          break;
         }
         else if ((label|0) == 334) {
          label = 0;
          break L37;
         }
        }
       } while(0);
       $1044 = ($1043|0)<(0);
       if ($1044) {
        $1045 = ($1043|0)<(-1);
        $1047 = ($1046>>>0)<(4294967233);
        $1048 = ($1043|0)==(-1);
        $1049 = $1048 & $1047;
        $1050 = $1045 | $1049;
        if ($1050) {
         $1068 = 0;$1071 = 0;
        } else {
         $1051 = (_i64Subtract(0,0,($1046|0),($1043|0))|0);
         $1052 = tempRet0;
         $1055 = (_bitshift64Lshr(($1053|0),($1054|0),($1051|0))|0);
         $1056 = tempRet0;
         $1068 = $1055;$1071 = $1056;
        }
       } else {
        $1057 = ($1043|0)>(0);
        $1058 = ($1046>>>0)>(63);
        $1059 = ($1043|0)==(0);
        $1060 = $1059 & $1058;
        $1061 = $1057 | $1060;
        $1062 = (_bitshift64Shl(($1053|0),($1054|0),($1046|0))|0);
        $1063 = tempRet0;
        $1064 = $1061 ? 0 : $1062;
        $1065 = $1061 ? 0 : $1063;
        $1068 = $1064;$1071 = $1065;
       }
       $1066 = $51;
       $1067 = $1066;
       HEAP32[$1067>>2] = $1068;
       $1069 = (($1066) + 4)|0;
       $1070 = $1069;
       HEAP32[$1070>>2] = $1071;
       $1072 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1072>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$962,$1003,$51,16);
     $1073 = HEAP32[$32>>2]|0;
     $base$0$be = $1073;
     break;
    }
    case 21:  {
     $734 = $39 >>> 23;
     $735 = $734 & 256;
     $736 = ($735|0)==(0);
     if ($736) {
      $739 = (($base$1) + ($734<<4)|0);
      $748 = $739;
     } else {
      $737 = $734 & 255;
      $738 = (($31) + ($737<<4)|0);
      $748 = $738;
     }
     $740 = $39 >>> 14;
     $741 = $740 & 256;
     $742 = ($741|0)==(0);
     if ($742) {
      $745 = $740 & 511;
      $746 = (($base$1) + ($745<<4)|0);
      $789 = $746;
     } else {
      $743 = $740 & 255;
      $744 = (($31) + ($743<<4)|0);
      $789 = $744;
     }
     $747 = (($748) + 8|0);
     $749 = HEAP32[$747>>2]|0;
     $750 = ($749|0)==(19);
     do {
      if ($750) {
       $751 = $748;
       $752 = $751;
       $753 = HEAP32[$752>>2]|0;
       $754 = (($751) + 4)|0;
       $755 = $754;
       $756 = HEAP32[$755>>2]|0;
       $831 = $753;$834 = $756;
       label = 239;
      } else {
       $$02$i85 = $748;$771 = $749;
       while(1) {
        if ((($771|0) == 19)) {
         $$02$i85$lcssa787 = $$02$i85;
         label = 232;
         break;
        } else if ((($771|0) == 3)) {
         $$02$i85$lcssa = $$02$i85;
         label = 229;
         break;
        }
        $770 = $771 & 15;
        $772 = ($770|0)==(4);
        if (!($772)) {
         label = 255;
         break;
        }
        $773 = HEAP32[$$02$i85>>2]|0;
        $774 = (($773) + 16|0);
        $775 = (_luaO_str2num($774,$v$i84)|0);
        $776 = HEAP32[$$02$i85>>2]|0;
        $777 = (($776) + 4|0);
        $778 = HEAP8[$777>>0]|0;
        $779 = ($778<<24>>24)==(4);
        if ($779) {
         $780 = (($776) + 7|0);
         $781 = HEAP8[$780>>0]|0;
         $782 = $781&255;
         $786 = $782;
        } else {
         $783 = (($776) + 12|0);
         $784 = HEAP32[$783>>2]|0;
         $786 = $784;
        }
        $785 = (($786) + 1)|0;
        $787 = ($775|0)==($785|0);
        if (!($787)) {
         label = 255;
         break;
        }
        $$phi$trans$insert720 = (($v$i84) + 8|0);
        $$pre721 = HEAP32[$$phi$trans$insert720>>2]|0;
        $$02$i85 = $v$i84;$771 = $$pre721;
       }
       if ((label|0) == 229) {
        label = 0;
        $757 = +HEAPF64[$$02$i85$lcssa>>3];
        $758 = (+Math_floor((+$757)));
        $759 = $757 != $758;
        if ($759) {
         break;
        }
        $760 = $758 >= -9.2233720368547758E+18;
        $761 = $758 < 9.2233720368547758E+18;
        $or$cond$i86 = $760 & $761;
        if (!($or$cond$i86)) {
         break;
        }
        $762 = (~~$758)>>>0;
        $763 = +Math_abs($758) >= 1.0 ? $758 > 0.0 ? (~~+Math_min(+Math_floor($758 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($758 - +(~~$758 >>> 0)) / 4294967296.0) >>> 0 : 0;
        $831 = $762;$834 = $763;
        label = 239;
        break;
       }
       else if ((label|0) == 232) {
        label = 0;
        $764 = $$02$i85$lcssa787;
        $765 = $764;
        $766 = HEAP32[$765>>2]|0;
        $767 = (($764) + 4)|0;
        $768 = $767;
        $769 = HEAP32[$768>>2]|0;
        $831 = $766;$834 = $769;
        label = 239;
        break;
       }
       else if ((label|0) == 255) {
        label = 0;
        break;
       }
      }
     } while(0);
     L91: do {
      if ((label|0) == 239) {
       label = 0;
       $788 = (($789) + 8|0);
       $790 = HEAP32[$788>>2]|0;
       $791 = ($790|0)==(19);
       do {
        if ($791) {
         $792 = $789;
         $793 = $792;
         $794 = HEAP32[$793>>2]|0;
         $795 = (($792) + 4)|0;
         $796 = $795;
         $797 = HEAP32[$796>>2]|0;
         $830 = $794;$833 = $797;
        } else {
         $$02$i90 = $789;$812 = $790;
         while(1) {
          if ((($812|0) == 19)) {
           $$02$i90$lcssa789 = $$02$i90;
           label = 246;
           break;
          } else if ((($812|0) == 3)) {
           $$02$i90$lcssa = $$02$i90;
           label = 243;
           break;
          }
          $811 = $812 & 15;
          $813 = ($811|0)==(4);
          if (!($813)) {
           label = 254;
           break;
          }
          $814 = HEAP32[$$02$i90>>2]|0;
          $815 = (($814) + 16|0);
          $816 = (_luaO_str2num($815,$v$i89)|0);
          $817 = HEAP32[$$02$i90>>2]|0;
          $818 = (($817) + 4|0);
          $819 = HEAP8[$818>>0]|0;
          $820 = ($819<<24>>24)==(4);
          if ($820) {
           $821 = (($817) + 7|0);
           $822 = HEAP8[$821>>0]|0;
           $823 = $822&255;
           $827 = $823;
          } else {
           $824 = (($817) + 12|0);
           $825 = HEAP32[$824>>2]|0;
           $827 = $825;
          }
          $826 = (($827) + 1)|0;
          $828 = ($816|0)==($826|0);
          if (!($828)) {
           label = 254;
           break;
          }
          $$phi$trans$insert717 = (($v$i89) + 8|0);
          $$pre718 = HEAP32[$$phi$trans$insert717>>2]|0;
          $$02$i90 = $v$i89;$812 = $$pre718;
         }
         if ((label|0) == 243) {
          label = 0;
          $798 = +HEAPF64[$$02$i90$lcssa>>3];
          $799 = (+Math_floor((+$798)));
          $800 = $798 != $799;
          if ($800) {
           break L91;
          }
          $801 = $799 >= -9.2233720368547758E+18;
          $802 = $799 < 9.2233720368547758E+18;
          $or$cond$i91 = $801 & $802;
          if (!($or$cond$i91)) {
           break L91;
          }
          $803 = (~~$799)>>>0;
          $804 = +Math_abs($799) >= 1.0 ? $799 > 0.0 ? (~~+Math_min(+Math_floor($799 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($799 - +(~~$799 >>> 0)) / 4294967296.0) >>> 0 : 0;
          $830 = $803;$833 = $804;
          break;
         }
         else if ((label|0) == 246) {
          label = 0;
          $805 = $$02$i90$lcssa789;
          $806 = $805;
          $807 = HEAP32[$806>>2]|0;
          $808 = (($805) + 4)|0;
          $809 = $808;
          $810 = HEAP32[$809>>2]|0;
          $830 = $807;$833 = $810;
          break;
         }
         else if ((label|0) == 254) {
          label = 0;
          break L91;
         }
        }
       } while(0);
       $829 = $830 | $831;
       $832 = $833 | $834;
       $835 = $51;
       $836 = $835;
       HEAP32[$836>>2] = $829;
       $837 = (($835) + 4)|0;
       $838 = $837;
       HEAP32[$838>>2] = $832;
       $839 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$839>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$748,$789,$51,14);
     $840 = HEAP32[$32>>2]|0;
     $base$0$be = $840;
     break;
    }
    case 15:  {
     $411 = $39 >>> 23;
     $412 = $411 & 256;
     $413 = ($412|0)==(0);
     if ($413) {
      $416 = (($base$1) + ($411<<4)|0);
      $425 = $416;
     } else {
      $414 = $411 & 255;
      $415 = (($31) + ($414<<4)|0);
      $425 = $415;
     }
     $417 = $39 >>> 14;
     $418 = $417 & 256;
     $419 = ($418|0)==(0);
     if ($419) {
      $422 = $417 & 511;
      $423 = (($base$1) + ($422<<4)|0);
      $428 = $423;
     } else {
      $420 = $417 & 255;
      $421 = (($31) + ($420<<4)|0);
      $428 = $421;
     }
     $424 = (($425) + 8|0);
     $426 = HEAP32[$424>>2]|0;
     do {
      if ((($426|0) == 19)) {
       $427 = (($428) + 8|0);
       $429 = HEAP32[$427>>2]|0;
       $430 = ($429|0)==(19);
       if ($430) {
        $431 = $425;
        $432 = $431;
        $433 = HEAP32[$432>>2]|0;
        $434 = (($431) + 4)|0;
        $435 = $434;
        $436 = HEAP32[$435>>2]|0;
        $437 = $428;
        $438 = $437;
        $439 = HEAP32[$438>>2]|0;
        $440 = (($437) + 4)|0;
        $441 = $440;
        $442 = HEAP32[$441>>2]|0;
        $443 = (___muldi3(($439|0),($442|0),($433|0),($436|0))|0);
        $444 = tempRet0;
        $445 = $51;
        $446 = $445;
        HEAP32[$446>>2] = $443;
        $447 = (($445) + 4)|0;
        $448 = $447;
        HEAP32[$448>>2] = $444;
        $449 = ((($base$1) + ($50<<4)|0) + 8|0);
        HEAP32[$449>>2] = 19;
        $base$0$be = $base$1;
        break L9;
       } else {
        $451 = $425;
        $452 = $451;
        $453 = HEAP32[$452>>2]|0;
        $454 = (($451) + 4)|0;
        $455 = $454;
        $456 = HEAP32[$455>>2]|0;
        $457 = (+($453>>>0)) + (4294967296.0*(+($456|0)));
        $526 = $457;
        label = 135;
        break;
       }
      } else if ((($426|0) == 3)) {
       $450 = +HEAPF64[$425>>3];
       $526 = $450;
       label = 135;
      } else {
       $458 = $426 & 15;
       $459 = ($458|0)==(4);
       if ($459) {
        $460 = HEAP32[$425>>2]|0;
        $461 = (($460) + 16|0);
        $462 = (_luaO_str2num($461,$v$i65)|0);
        $463 = HEAP32[$425>>2]|0;
        $464 = (($463) + 4|0);
        $465 = HEAP8[$464>>0]|0;
        $466 = ($465<<24>>24)==(4);
        if ($466) {
         $467 = (($463) + 7|0);
         $468 = HEAP8[$467>>0]|0;
         $469 = $468&255;
         $473 = $469;
        } else {
         $470 = (($463) + 12|0);
         $471 = HEAP32[$470>>2]|0;
         $473 = $471;
        }
        $472 = (($473) + 1)|0;
        $474 = ($462|0)==($472|0);
        if ($474) {
         $475 = HEAP32[$10>>2]|0;
         $476 = ($475|0)==(19);
         if ($476) {
          $477 = $v$i65;
          $478 = $477;
          $479 = HEAP32[$478>>2]|0;
          $480 = (($477) + 4)|0;
          $481 = $480;
          $482 = HEAP32[$481>>2]|0;
          $483 = (+($479>>>0)) + (4294967296.0*(+($482|0)));
          $526 = $483;
          label = 135;
          break;
         } else {
          $484 = +HEAPF64[$v$i65>>3];
          $526 = $484;
          label = 135;
          break;
         }
        }
       }
      }
     } while(0);
     L138: do {
      if ((label|0) == 135) {
       label = 0;
       $485 = (($428) + 8|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = ($486|0)==(3);
       do {
        if ($487) {
         $488 = +HEAPF64[$428>>3];
         $525 = $488;
        } else {
         $489 = ($486|0)==(19);
         if ($489) {
          $490 = $428;
          $491 = $490;
          $492 = HEAP32[$491>>2]|0;
          $493 = (($490) + 4)|0;
          $494 = $493;
          $495 = HEAP32[$494>>2]|0;
          $496 = (+($492>>>0)) + (4294967296.0*(+($495|0)));
          $525 = $496;
          break;
         }
         $497 = $486 & 15;
         $498 = ($497|0)==(4);
         if (!($498)) {
          break L138;
         }
         $499 = HEAP32[$428>>2]|0;
         $500 = (($499) + 16|0);
         $501 = (_luaO_str2num($500,$v$i68)|0);
         $502 = HEAP32[$428>>2]|0;
         $503 = (($502) + 4|0);
         $504 = HEAP8[$503>>0]|0;
         $505 = ($504<<24>>24)==(4);
         if ($505) {
          $506 = (($502) + 7|0);
          $507 = HEAP8[$506>>0]|0;
          $508 = $507&255;
          $512 = $508;
         } else {
          $509 = (($502) + 12|0);
          $510 = HEAP32[$509>>2]|0;
          $512 = $510;
         }
         $511 = (($512) + 1)|0;
         $513 = ($501|0)==($511|0);
         if (!($513)) {
          break L138;
         }
         $514 = HEAP32[$9>>2]|0;
         $515 = ($514|0)==(19);
         if ($515) {
          $516 = $v$i68;
          $517 = $516;
          $518 = HEAP32[$517>>2]|0;
          $519 = (($516) + 4)|0;
          $520 = $519;
          $521 = HEAP32[$520>>2]|0;
          $522 = (+($518>>>0)) + (4294967296.0*(+($521|0)));
          $525 = $522;
          break;
         } else {
          $523 = +HEAPF64[$v$i68>>3];
          $525 = $523;
          break;
         }
        }
       } while(0);
       $524 = $526 * $525;
       HEAPF64[$51>>3] = $524;
       $527 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$527>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$425,$428,$51,8);
     $528 = HEAP32[$32>>2]|0;
     $base$0$be = $528;
     break;
    }
    case 18:  {
     $529 = $39 >>> 23;
     $530 = $529 & 256;
     $531 = ($530|0)==(0);
     if ($531) {
      $534 = (($base$1) + ($529<<4)|0);
      $543 = $534;
     } else {
      $532 = $529 & 255;
      $533 = (($31) + ($532<<4)|0);
      $543 = $533;
     }
     $535 = $39 >>> 14;
     $536 = $535 & 256;
     $537 = ($536|0)==(0);
     if ($537) {
      $540 = $535 & 511;
      $541 = (($base$1) + ($540<<4)|0);
      $583 = $541;
     } else {
      $538 = $535 & 255;
      $539 = (($31) + ($538<<4)|0);
      $583 = $539;
     }
     $542 = (($543) + 8|0);
     $544 = HEAP32[$542>>2]|0;
     $545 = ($544|0)==(3);
     do {
      if ($545) {
       $546 = +HEAPF64[$543>>3];
       $624 = $546;
       label = 167;
      } else {
       $547 = ($544|0)==(19);
       if ($547) {
        $548 = $543;
        $549 = $548;
        $550 = HEAP32[$549>>2]|0;
        $551 = (($548) + 4)|0;
        $552 = $551;
        $553 = HEAP32[$552>>2]|0;
        $554 = (+($550>>>0)) + (4294967296.0*(+($553|0)));
        $624 = $554;
        label = 167;
        break;
       }
       $555 = $544 & 15;
       $556 = ($555|0)==(4);
       if ($556) {
        $557 = HEAP32[$543>>2]|0;
        $558 = (($557) + 16|0);
        $559 = (_luaO_str2num($558,$v$i71)|0);
        $560 = HEAP32[$543>>2]|0;
        $561 = (($560) + 4|0);
        $562 = HEAP8[$561>>0]|0;
        $563 = ($562<<24>>24)==(4);
        if ($563) {
         $564 = (($560) + 7|0);
         $565 = HEAP8[$564>>0]|0;
         $566 = $565&255;
         $570 = $566;
        } else {
         $567 = (($560) + 12|0);
         $568 = HEAP32[$567>>2]|0;
         $570 = $568;
        }
        $569 = (($570) + 1)|0;
        $571 = ($559|0)==($569|0);
        if ($571) {
         $572 = HEAP32[$12>>2]|0;
         $573 = ($572|0)==(19);
         if ($573) {
          $574 = $v$i71;
          $575 = $574;
          $576 = HEAP32[$575>>2]|0;
          $577 = (($574) + 4)|0;
          $578 = $577;
          $579 = HEAP32[$578>>2]|0;
          $580 = (+($576>>>0)) + (4294967296.0*(+($579|0)));
          $624 = $580;
          label = 167;
          break;
         } else {
          $581 = +HEAPF64[$v$i71>>3];
          $624 = $581;
          label = 167;
          break;
         }
        }
       }
      }
     } while(0);
     L181: do {
      if ((label|0) == 167) {
       label = 0;
       $582 = (($583) + 8|0);
       $584 = HEAP32[$582>>2]|0;
       $585 = ($584|0)==(3);
       do {
        if ($585) {
         $586 = +HEAPF64[$583>>3];
         $623 = $586;
        } else {
         $587 = ($584|0)==(19);
         if ($587) {
          $588 = $583;
          $589 = $588;
          $590 = HEAP32[$589>>2]|0;
          $591 = (($588) + 4)|0;
          $592 = $591;
          $593 = HEAP32[$592>>2]|0;
          $594 = (+($590>>>0)) + (4294967296.0*(+($593|0)));
          $623 = $594;
          break;
         }
         $595 = $584 & 15;
         $596 = ($595|0)==(4);
         if (!($596)) {
          break L181;
         }
         $597 = HEAP32[$583>>2]|0;
         $598 = (($597) + 16|0);
         $599 = (_luaO_str2num($598,$v$i74)|0);
         $600 = HEAP32[$583>>2]|0;
         $601 = (($600) + 4|0);
         $602 = HEAP8[$601>>0]|0;
         $603 = ($602<<24>>24)==(4);
         if ($603) {
          $604 = (($600) + 7|0);
          $605 = HEAP8[$604>>0]|0;
          $606 = $605&255;
          $610 = $606;
         } else {
          $607 = (($600) + 12|0);
          $608 = HEAP32[$607>>2]|0;
          $610 = $608;
         }
         $609 = (($610) + 1)|0;
         $611 = ($599|0)==($609|0);
         if (!($611)) {
          break L181;
         }
         $612 = HEAP32[$11>>2]|0;
         $613 = ($612|0)==(19);
         if ($613) {
          $614 = $v$i74;
          $615 = $614;
          $616 = HEAP32[$615>>2]|0;
          $617 = (($614) + 4)|0;
          $618 = $617;
          $619 = HEAP32[$618>>2]|0;
          $620 = (+($616>>>0)) + (4294967296.0*(+($619|0)));
          $623 = $620;
          break;
         } else {
          $621 = +HEAPF64[$v$i74>>3];
          $623 = $621;
          break;
         }
        }
       } while(0);
       $622 = $624 / $623;
       HEAPF64[$51>>3] = $622;
       $625 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$625>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$543,$583,$51,11);
     $626 = HEAP32[$32>>2]|0;
     $base$0$be = $626;
     break;
    }
    case 6:  {
     $77 = $39 >>> 23;
     $78 = (($35) + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = HEAP32[$79>>2]|0;
     $81 = $39 >>> 14;
     $82 = $81 & 256;
     $83 = ($82|0)==(0);
     if ($83) {
      $86 = $81 & 511;
      $87 = (($base$1) + ($86<<4)|0);
      $88 = $87;
     } else {
      $84 = $81 & 255;
      $85 = (($31) + ($84<<4)|0);
      $88 = $85;
     }
     _luaV_gettable($L,$80,$88,$51);
     $89 = HEAP32[$32>>2]|0;
     $base$0$be = $89;
     break;
    }
    case 1:  {
     $55 = $39 >>> 14;
     $56 = (($31) + ($55<<4)|0);
     ;HEAP32[$51+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$51+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[$56+12>>2]|0;
     $base$0$be = $base$1;
     break;
    }
    case 7:  {
     $90 = $39 >>> 23;
     $91 = (($base$1) + ($90<<4)|0);
     $92 = $39 >>> 14;
     $93 = $92 & 256;
     $94 = ($93|0)==(0);
     if ($94) {
      $97 = $92 & 511;
      $98 = (($base$1) + ($97<<4)|0);
      $99 = $98;
     } else {
      $95 = $92 & 255;
      $96 = (($31) + ($95<<4)|0);
      $99 = $96;
     }
     _luaV_gettable($L,$91,$99,$51);
     $100 = HEAP32[$32>>2]|0;
     $base$0$be = $100;
     break;
    }
    case 9:  {
     $120 = $39 >>> 23;
     $121 = (($35) + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = HEAP32[$122>>2]|0;
     ;HEAP32[$123+0>>2]=HEAP32[$51+0>>2]|0;HEAP32[$123+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$123+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$123+12>>2]=HEAP32[$51+12>>2]|0;
     $124 = HEAP32[$122>>2]|0;
     $125 = (($124) + 8|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & 64;
     $128 = ($127|0)!=(0);
     $129 = (($122) + 8|0);
     $130 = ($124|0)==($129|0);
     $or$cond = $128 & $130;
     if ($or$cond) {
      _luaC_upvalbarrier_($L,$122);
      $base$0$be = $base$1;
     } else {
      $base$0$be = $base$1;
     }
     break;
    }
    case 10:  {
     $131 = $39 >>> 23;
     $132 = $131 & 256;
     $133 = ($132|0)==(0);
     if ($133) {
      $136 = (($base$1) + ($131<<4)|0);
      $144 = $136;
     } else {
      $134 = $131 & 255;
      $135 = (($31) + ($134<<4)|0);
      $144 = $135;
     }
     $137 = $39 >>> 14;
     $138 = $137 & 256;
     $139 = ($138|0)==(0);
     if ($139) {
      $142 = $137 & 511;
      $143 = (($base$1) + ($142<<4)|0);
      $145 = $143;
     } else {
      $140 = $137 & 255;
      $141 = (($31) + ($140<<4)|0);
      $145 = $141;
     }
     _luaV_settable($L,$51,$144,$145);
     $146 = HEAP32[$32>>2]|0;
     $base$0$be = $146;
     break;
    }
    case 11:  {
     $147 = $39 >>> 23;
     $148 = $39 >>> 14;
     $149 = $148 & 511;
     $150 = (_luaH_new($L)|0);
     HEAP32[$51>>2] = $150;
     $151 = ((($base$1) + ($50<<4)|0) + 8|0);
     HEAP32[$151>>2] = 69;
     $152 = $149 | $147;
     $153 = ($152|0)==(0);
     if (!($153)) {
      $154 = (_luaO_fb2int($147)|0);
      $155 = (_luaO_fb2int($149)|0);
      _luaH_resize($L,$150,$154,$155);
     }
     $156 = HEAP32[$3>>2]|0;
     $157 = (($156) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)>(0);
     if ($159) {
      $$sum52 = (($50) + 1)|0;
      $160 = (($base$1) + ($$sum52<<4)|0);
      HEAP32[$4>>2] = $160;
      _luaC_step($L);
      $161 = HEAP32[$36>>2]|0;
      HEAP32[$4>>2] = $161;
     }
     $162 = HEAP32[$32>>2]|0;
     $base$0$be = $162;
     break;
    }
    case 3:  {
     $62 = $39 >>> 23;
     HEAP32[$51>>2] = $62;
     $63 = ((($base$1) + ($50<<4)|0) + 8|0);
     HEAP32[$63>>2] = 1;
     $64 = $39 & 8372224;
     $65 = ($64|0)==(0);
     if ($65) {
      $base$0$be = $base$1;
     } else {
      $66 = HEAP32[$34>>2]|0;
      $67 = (($66) + 4|0);
      $$c53 = $67;
      HEAP32[$34>>2] = $$c53;
      $base$0$be = $base$1;
     }
     break;
    }
    case 8:  {
     $101 = (($35) + ($50<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = HEAP32[$102>>2]|0;
     $104 = $39 >>> 23;
     $105 = $104 & 256;
     $106 = ($105|0)==(0);
     if ($106) {
      $109 = (($base$1) + ($104<<4)|0);
      $117 = $109;
     } else {
      $107 = $104 & 255;
      $108 = (($31) + ($107<<4)|0);
      $117 = $108;
     }
     $110 = $39 >>> 14;
     $111 = $110 & 256;
     $112 = ($111|0)==(0);
     if ($112) {
      $115 = $110 & 511;
      $116 = (($base$1) + ($115<<4)|0);
      $118 = $116;
     } else {
      $113 = $110 & 255;
      $114 = (($31) + ($113<<4)|0);
      $118 = $114;
     }
     _luaV_settable($L,$103,$117,$118);
     $119 = HEAP32[$32>>2]|0;
     $base$0$be = $119;
     break;
    }
    case 2:  {
     $57 = HEAP32[$34>>2]|0;
     $58 = (($57) + 4|0);
     $$c54 = $58;
     HEAP32[$34>>2] = $$c54;
     $59 = HEAP32[$57>>2]|0;
     $60 = $59 >>> 6;
     $61 = (($31) + ($60<<4)|0);
     ;HEAP32[$51+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$51+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[$61+12>>2]|0;
     $base$0$be = $base$1;
     break;
    }
    case 5:  {
     $73 = $39 >>> 23;
     $74 = (($35) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = HEAP32[$75>>2]|0;
     ;HEAP32[$51+0>>2]=HEAP32[$76+0>>2]|0;HEAP32[$51+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[$76+12>>2]|0;
     $base$0$be = $base$1;
     break;
    }
    case 0:  {
     $53 = $39 >>> 23;
     $54 = (($base$1) + ($53<<4)|0);
     ;HEAP32[$51+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$51+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[$54+12>>2]|0;
     $base$0$be = $base$1;
     break;
    }
    case 4:  {
     $68 = $39 >>> 23;
     $b$0 = $68;$ra$0 = $51;
     while(1) {
      $69 = (($ra$0) + 16|0);
      $70 = (($ra$0) + 8|0);
      HEAP32[$70>>2] = 0;
      $71 = (($b$0) + -1)|0;
      $72 = ($b$0|0)==(0);
      if ($72) {
       break;
      } else {
       $b$0 = $71;$ra$0 = $69;
      }
     }
     $base$0$be = $base$1;
     break;
    }
    case 13:  {
     $175 = $39 >>> 23;
     $176 = $175 & 256;
     $177 = ($176|0)==(0);
     if ($177) {
      $180 = (($base$1) + ($175<<4)|0);
      $189 = $180;
     } else {
      $178 = $175 & 255;
      $179 = (($31) + ($178<<4)|0);
      $189 = $179;
     }
     $181 = $39 >>> 14;
     $182 = $181 & 256;
     $183 = ($182|0)==(0);
     if ($183) {
      $186 = $181 & 511;
      $187 = (($base$1) + ($186<<4)|0);
      $192 = $187;
     } else {
      $184 = $181 & 255;
      $185 = (($31) + ($184<<4)|0);
      $192 = $185;
     }
     $188 = (($189) + 8|0);
     $190 = HEAP32[$188>>2]|0;
     do {
      if ((($190|0) == 3)) {
       $214 = +HEAPF64[$189>>3];
       $289 = $214;
       label = 69;
      } else if ((($190|0) == 19)) {
       $191 = (($192) + 8|0);
       $193 = HEAP32[$191>>2]|0;
       $194 = ($193|0)==(19);
       if ($194) {
        $195 = $189;
        $196 = $195;
        $197 = HEAP32[$196>>2]|0;
        $198 = (($195) + 4)|0;
        $199 = $198;
        $200 = HEAP32[$199>>2]|0;
        $201 = $192;
        $202 = $201;
        $203 = HEAP32[$202>>2]|0;
        $204 = (($201) + 4)|0;
        $205 = $204;
        $206 = HEAP32[$205>>2]|0;
        $207 = (_i64Add(($203|0),($206|0),($197|0),($200|0))|0);
        $208 = tempRet0;
        $209 = $51;
        $210 = $209;
        HEAP32[$210>>2] = $207;
        $211 = (($209) + 4)|0;
        $212 = $211;
        HEAP32[$212>>2] = $208;
        $213 = ((($base$1) + ($50<<4)|0) + 8|0);
        HEAP32[$213>>2] = 19;
        $base$0$be = $base$1;
        break L9;
       } else {
        $215 = $189;
        $216 = $215;
        $217 = HEAP32[$216>>2]|0;
        $218 = (($215) + 4)|0;
        $219 = $218;
        $220 = HEAP32[$219>>2]|0;
        $221 = (+($217>>>0)) + (4294967296.0*(+($220|0)));
        $289 = $221;
        label = 69;
        break;
       }
      } else {
       $222 = $190 & 15;
       $223 = ($222|0)==(4);
       if ($223) {
        $224 = HEAP32[$189>>2]|0;
        $225 = (($224) + 16|0);
        $226 = (_luaO_str2num($225,$v$i)|0);
        $227 = HEAP32[$189>>2]|0;
        $228 = (($227) + 4|0);
        $229 = HEAP8[$228>>0]|0;
        $230 = ($229<<24>>24)==(4);
        if ($230) {
         $231 = (($227) + 7|0);
         $232 = HEAP8[$231>>0]|0;
         $233 = $232&255;
         $237 = $233;
        } else {
         $234 = (($227) + 12|0);
         $235 = HEAP32[$234>>2]|0;
         $237 = $235;
        }
        $236 = (($237) + 1)|0;
        $238 = ($226|0)==($236|0);
        if ($238) {
         $239 = HEAP32[$6>>2]|0;
         $240 = ($239|0)==(19);
         if ($240) {
          $241 = $v$i;
          $242 = $241;
          $243 = HEAP32[$242>>2]|0;
          $244 = (($241) + 4)|0;
          $245 = $244;
          $246 = HEAP32[$245>>2]|0;
          $247 = (+($243>>>0)) + (4294967296.0*(+($246|0)));
          $289 = $247;
          label = 69;
          break;
         } else {
          $248 = +HEAPF64[$v$i>>3];
          $289 = $248;
          label = 69;
          break;
         }
        }
       }
      }
     } while(0);
     L272: do {
      if ((label|0) == 69) {
       label = 0;
       $249 = (($192) + 8|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = ($250|0)==(3);
       do {
        if ($251) {
         $252 = +HEAPF64[$192>>3];
         $290 = $252;
        } else {
         $253 = ($250|0)==(19);
         if ($253) {
          $254 = $192;
          $255 = $254;
          $256 = HEAP32[$255>>2]|0;
          $257 = (($254) + 4)|0;
          $258 = $257;
          $259 = HEAP32[$258>>2]|0;
          $260 = (+($256>>>0)) + (4294967296.0*(+($259|0)));
          $290 = $260;
          break;
         }
         $261 = $250 & 15;
         $262 = ($261|0)==(4);
         if (!($262)) {
          break L272;
         }
         $263 = HEAP32[$192>>2]|0;
         $264 = (($263) + 16|0);
         $265 = (_luaO_str2num($264,$v$i56)|0);
         $266 = HEAP32[$192>>2]|0;
         $267 = (($266) + 4|0);
         $268 = HEAP8[$267>>0]|0;
         $269 = ($268<<24>>24)==(4);
         if ($269) {
          $270 = (($266) + 7|0);
          $271 = HEAP8[$270>>0]|0;
          $272 = $271&255;
          $276 = $272;
         } else {
          $273 = (($266) + 12|0);
          $274 = HEAP32[$273>>2]|0;
          $276 = $274;
         }
         $275 = (($276) + 1)|0;
         $277 = ($265|0)==($275|0);
         if (!($277)) {
          break L272;
         }
         $278 = HEAP32[$5>>2]|0;
         $279 = ($278|0)==(19);
         if ($279) {
          $280 = $v$i56;
          $281 = $280;
          $282 = HEAP32[$281>>2]|0;
          $283 = (($280) + 4)|0;
          $284 = $283;
          $285 = HEAP32[$284>>2]|0;
          $286 = (+($282>>>0)) + (4294967296.0*(+($285|0)));
          $290 = $286;
          break;
         } else {
          $287 = +HEAPF64[$v$i56>>3];
          $290 = $287;
          break;
         }
        }
       } while(0);
       $288 = $289 + $290;
       HEAPF64[$51>>3] = $288;
       $291 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$291>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$189,$192,$51,6);
     $292 = HEAP32[$32>>2]|0;
     $base$0$be = $292;
     break;
    }
    case 14:  {
     $293 = $39 >>> 23;
     $294 = $293 & 256;
     $295 = ($294|0)==(0);
     if ($295) {
      $298 = (($base$1) + ($293<<4)|0);
      $307 = $298;
     } else {
      $296 = $293 & 255;
      $297 = (($31) + ($296<<4)|0);
      $307 = $297;
     }
     $299 = $39 >>> 14;
     $300 = $299 & 256;
     $301 = ($300|0)==(0);
     if ($301) {
      $304 = $299 & 511;
      $305 = (($base$1) + ($304<<4)|0);
      $310 = $305;
     } else {
      $302 = $299 & 255;
      $303 = (($31) + ($302<<4)|0);
      $310 = $303;
     }
     $306 = (($307) + 8|0);
     $308 = HEAP32[$306>>2]|0;
     do {
      if ((($308|0) == 19)) {
       $309 = (($310) + 8|0);
       $311 = HEAP32[$309>>2]|0;
       $312 = ($311|0)==(19);
       if ($312) {
        $313 = $307;
        $314 = $313;
        $315 = HEAP32[$314>>2]|0;
        $316 = (($313) + 4)|0;
        $317 = $316;
        $318 = HEAP32[$317>>2]|0;
        $319 = $310;
        $320 = $319;
        $321 = HEAP32[$320>>2]|0;
        $322 = (($319) + 4)|0;
        $323 = $322;
        $324 = HEAP32[$323>>2]|0;
        $325 = (_i64Subtract(($315|0),($318|0),($321|0),($324|0))|0);
        $326 = tempRet0;
        $327 = $51;
        $328 = $327;
        HEAP32[$328>>2] = $325;
        $329 = (($327) + 4)|0;
        $330 = $329;
        HEAP32[$330>>2] = $326;
        $331 = ((($base$1) + ($50<<4)|0) + 8|0);
        HEAP32[$331>>2] = 19;
        $base$0$be = $base$1;
        break L9;
       } else {
        $333 = $307;
        $334 = $333;
        $335 = HEAP32[$334>>2]|0;
        $336 = (($333) + 4)|0;
        $337 = $336;
        $338 = HEAP32[$337>>2]|0;
        $339 = (+($335>>>0)) + (4294967296.0*(+($338|0)));
        $408 = $339;
        label = 102;
        break;
       }
      } else if ((($308|0) == 3)) {
       $332 = +HEAPF64[$307>>3];
       $408 = $332;
       label = 102;
      } else {
       $340 = $308 & 15;
       $341 = ($340|0)==(4);
       if ($341) {
        $342 = HEAP32[$307>>2]|0;
        $343 = (($342) + 16|0);
        $344 = (_luaO_str2num($343,$v$i59)|0);
        $345 = HEAP32[$307>>2]|0;
        $346 = (($345) + 4|0);
        $347 = HEAP8[$346>>0]|0;
        $348 = ($347<<24>>24)==(4);
        if ($348) {
         $349 = (($345) + 7|0);
         $350 = HEAP8[$349>>0]|0;
         $351 = $350&255;
         $355 = $351;
        } else {
         $352 = (($345) + 12|0);
         $353 = HEAP32[$352>>2]|0;
         $355 = $353;
        }
        $354 = (($355) + 1)|0;
        $356 = ($344|0)==($354|0);
        if ($356) {
         $357 = HEAP32[$8>>2]|0;
         $358 = ($357|0)==(19);
         if ($358) {
          $359 = $v$i59;
          $360 = $359;
          $361 = HEAP32[$360>>2]|0;
          $362 = (($359) + 4)|0;
          $363 = $362;
          $364 = HEAP32[$363>>2]|0;
          $365 = (+($361>>>0)) + (4294967296.0*(+($364|0)));
          $408 = $365;
          label = 102;
          break;
         } else {
          $366 = +HEAPF64[$v$i59>>3];
          $408 = $366;
          label = 102;
          break;
         }
        }
       }
      }
     } while(0);
     L316: do {
      if ((label|0) == 102) {
       label = 0;
       $367 = (($310) + 8|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = ($368|0)==(3);
       do {
        if ($369) {
         $370 = +HEAPF64[$310>>3];
         $407 = $370;
        } else {
         $371 = ($368|0)==(19);
         if ($371) {
          $372 = $310;
          $373 = $372;
          $374 = HEAP32[$373>>2]|0;
          $375 = (($372) + 4)|0;
          $376 = $375;
          $377 = HEAP32[$376>>2]|0;
          $378 = (+($374>>>0)) + (4294967296.0*(+($377|0)));
          $407 = $378;
          break;
         }
         $379 = $368 & 15;
         $380 = ($379|0)==(4);
         if (!($380)) {
          break L316;
         }
         $381 = HEAP32[$310>>2]|0;
         $382 = (($381) + 16|0);
         $383 = (_luaO_str2num($382,$v$i62)|0);
         $384 = HEAP32[$310>>2]|0;
         $385 = (($384) + 4|0);
         $386 = HEAP8[$385>>0]|0;
         $387 = ($386<<24>>24)==(4);
         if ($387) {
          $388 = (($384) + 7|0);
          $389 = HEAP8[$388>>0]|0;
          $390 = $389&255;
          $394 = $390;
         } else {
          $391 = (($384) + 12|0);
          $392 = HEAP32[$391>>2]|0;
          $394 = $392;
         }
         $393 = (($394) + 1)|0;
         $395 = ($383|0)==($393|0);
         if (!($395)) {
          break L316;
         }
         $396 = HEAP32[$7>>2]|0;
         $397 = ($396|0)==(19);
         if ($397) {
          $398 = $v$i62;
          $399 = $398;
          $400 = HEAP32[$399>>2]|0;
          $401 = (($398) + 4)|0;
          $402 = $401;
          $403 = HEAP32[$402>>2]|0;
          $404 = (+($400>>>0)) + (4294967296.0*(+($403|0)));
          $407 = $404;
          break;
         } else {
          $405 = +HEAPF64[$v$i62>>3];
          $407 = $405;
          break;
         }
        }
       } while(0);
       $406 = $408 - $407;
       HEAPF64[$51>>3] = $406;
       $409 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$409>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$307,$310,$51,7);
     $410 = HEAP32[$32>>2]|0;
     $base$0$be = $410;
     break;
    }
    case 12:  {
     $163 = $39 >>> 23;
     $164 = (($base$1) + ($163<<4)|0);
     $$sum51 = (($50) + 1)|0;
     $165 = (($base$1) + ($$sum51<<4)|0);
     ;HEAP32[$165+0>>2]=HEAP32[$164+0>>2]|0;HEAP32[$165+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$165+8>>2]=HEAP32[$164+8>>2]|0;HEAP32[$165+12>>2]=HEAP32[$164+12>>2]|0;
     $166 = $39 >>> 14;
     $167 = $166 & 256;
     $168 = ($167|0)==(0);
     if ($168) {
      $171 = $166 & 511;
      $172 = (($base$1) + ($171<<4)|0);
      $173 = $172;
     } else {
      $169 = $166 & 255;
      $170 = (($31) + ($169<<4)|0);
      $173 = $170;
     }
     _luaV_gettable($L,$164,$173,$51);
     $174 = HEAP32[$32>>2]|0;
     $base$0$be = $174;
     break;
    }
    case 20:  {
     $627 = $39 >>> 23;
     $628 = $627 & 256;
     $629 = ($628|0)==(0);
     if ($629) {
      $632 = (($base$1) + ($627<<4)|0);
      $641 = $632;
     } else {
      $630 = $627 & 255;
      $631 = (($31) + ($630<<4)|0);
      $641 = $631;
     }
     $633 = $39 >>> 14;
     $634 = $633 & 256;
     $635 = ($634|0)==(0);
     if ($635) {
      $638 = $633 & 511;
      $639 = (($base$1) + ($638<<4)|0);
      $682 = $639;
     } else {
      $636 = $633 & 255;
      $637 = (($31) + ($636<<4)|0);
      $682 = $637;
     }
     $640 = (($641) + 8|0);
     $642 = HEAP32[$640>>2]|0;
     $643 = ($642|0)==(19);
     do {
      if ($643) {
       $644 = $641;
       $645 = $644;
       $646 = HEAP32[$645>>2]|0;
       $647 = (($644) + 4)|0;
       $648 = $647;
       $649 = HEAP32[$648>>2]|0;
       $724 = $646;$727 = $649;
       label = 201;
      } else {
       $$02$i = $641;$664 = $642;
       while(1) {
        if ((($664|0) == 3)) {
         $$02$i$lcssa = $$02$i;
         label = 191;
         break;
        } else if ((($664|0) == 19)) {
         $$02$i$lcssa791 = $$02$i;
         label = 194;
         break;
        }
        $663 = $664 & 15;
        $665 = ($663|0)==(4);
        if (!($665)) {
         label = 217;
         break;
        }
        $666 = HEAP32[$$02$i>>2]|0;
        $667 = (($666) + 16|0);
        $668 = (_luaO_str2num($667,$v$i77)|0);
        $669 = HEAP32[$$02$i>>2]|0;
        $670 = (($669) + 4|0);
        $671 = HEAP8[$670>>0]|0;
        $672 = ($671<<24>>24)==(4);
        if ($672) {
         $673 = (($669) + 7|0);
         $674 = HEAP8[$673>>0]|0;
         $675 = $674&255;
         $679 = $675;
        } else {
         $676 = (($669) + 12|0);
         $677 = HEAP32[$676>>2]|0;
         $679 = $677;
        }
        $678 = (($679) + 1)|0;
        $680 = ($668|0)==($678|0);
        if (!($680)) {
         label = 217;
         break;
        }
        $$phi$trans$insert714 = (($v$i77) + 8|0);
        $$pre715 = HEAP32[$$phi$trans$insert714>>2]|0;
        $$02$i = $v$i77;$664 = $$pre715;
       }
       if ((label|0) == 191) {
        label = 0;
        $650 = +HEAPF64[$$02$i$lcssa>>3];
        $651 = (+Math_floor((+$650)));
        $652 = $650 != $651;
        if ($652) {
         break;
        }
        $653 = $651 >= -9.2233720368547758E+18;
        $654 = $651 < 9.2233720368547758E+18;
        $or$cond$i = $653 & $654;
        if (!($or$cond$i)) {
         break;
        }
        $655 = (~~$651)>>>0;
        $656 = +Math_abs($651) >= 1.0 ? $651 > 0.0 ? (~~+Math_min(+Math_floor($651 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($651 - +(~~$651 >>> 0)) / 4294967296.0) >>> 0 : 0;
        $724 = $655;$727 = $656;
        label = 201;
        break;
       }
       else if ((label|0) == 194) {
        label = 0;
        $657 = $$02$i$lcssa791;
        $658 = $657;
        $659 = HEAP32[$658>>2]|0;
        $660 = (($657) + 4)|0;
        $661 = $660;
        $662 = HEAP32[$661>>2]|0;
        $724 = $659;$727 = $662;
        label = 201;
        break;
       }
       else if ((label|0) == 217) {
        label = 0;
        break;
       }
      }
     } while(0);
     L367: do {
      if ((label|0) == 201) {
       label = 0;
       $681 = (($682) + 8|0);
       $683 = HEAP32[$681>>2]|0;
       $684 = ($683|0)==(19);
       do {
        if ($684) {
         $685 = $682;
         $686 = $685;
         $687 = HEAP32[$686>>2]|0;
         $688 = (($685) + 4)|0;
         $689 = $688;
         $690 = HEAP32[$689>>2]|0;
         $723 = $687;$726 = $690;
        } else {
         $$02$i80 = $682;$705 = $683;
         while(1) {
          if ((($705|0) == 3)) {
           $$02$i80$lcssa = $$02$i80;
           label = 205;
           break;
          } else if ((($705|0) == 19)) {
           $$02$i80$lcssa793 = $$02$i80;
           label = 208;
           break;
          }
          $704 = $705 & 15;
          $706 = ($704|0)==(4);
          if (!($706)) {
           label = 216;
           break;
          }
          $707 = HEAP32[$$02$i80>>2]|0;
          $708 = (($707) + 16|0);
          $709 = (_luaO_str2num($708,$v$i79)|0);
          $710 = HEAP32[$$02$i80>>2]|0;
          $711 = (($710) + 4|0);
          $712 = HEAP8[$711>>0]|0;
          $713 = ($712<<24>>24)==(4);
          if ($713) {
           $714 = (($710) + 7|0);
           $715 = HEAP8[$714>>0]|0;
           $716 = $715&255;
           $720 = $716;
          } else {
           $717 = (($710) + 12|0);
           $718 = HEAP32[$717>>2]|0;
           $720 = $718;
          }
          $719 = (($720) + 1)|0;
          $721 = ($709|0)==($719|0);
          if (!($721)) {
           label = 216;
           break;
          }
          $$phi$trans$insert = (($v$i79) + 8|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $$02$i80 = $v$i79;$705 = $$pre;
         }
         if ((label|0) == 205) {
          label = 0;
          $691 = +HEAPF64[$$02$i80$lcssa>>3];
          $692 = (+Math_floor((+$691)));
          $693 = $691 != $692;
          if ($693) {
           break L367;
          }
          $694 = $692 >= -9.2233720368547758E+18;
          $695 = $692 < 9.2233720368547758E+18;
          $or$cond$i81 = $694 & $695;
          if (!($or$cond$i81)) {
           break L367;
          }
          $696 = (~~$692)>>>0;
          $697 = +Math_abs($692) >= 1.0 ? $692 > 0.0 ? (~~+Math_min(+Math_floor($692 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($692 - +(~~$692 >>> 0)) / 4294967296.0) >>> 0 : 0;
          $723 = $696;$726 = $697;
          break;
         }
         else if ((label|0) == 208) {
          label = 0;
          $698 = $$02$i80$lcssa793;
          $699 = $698;
          $700 = HEAP32[$699>>2]|0;
          $701 = (($698) + 4)|0;
          $702 = $701;
          $703 = HEAP32[$702>>2]|0;
          $723 = $700;$726 = $703;
          break;
         }
         else if ((label|0) == 216) {
          label = 0;
          break L367;
         }
        }
       } while(0);
       $722 = $723 & $724;
       $725 = $726 & $727;
       $728 = $51;
       $729 = $728;
       HEAP32[$729>>2] = $722;
       $730 = (($728) + 4)|0;
       $731 = $730;
       HEAP32[$731>>2] = $725;
       $732 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$732>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$641,$682,$51,13);
     $733 = HEAP32[$32>>2]|0;
     $base$0$be = $733;
     break;
    }
    case 22:  {
     $841 = $39 >>> 23;
     $842 = $841 & 256;
     $843 = ($842|0)==(0);
     if ($843) {
      $846 = (($base$1) + ($841<<4)|0);
      $855 = $846;
     } else {
      $844 = $841 & 255;
      $845 = (($31) + ($844<<4)|0);
      $855 = $845;
     }
     $847 = $39 >>> 14;
     $848 = $847 & 256;
     $849 = ($848|0)==(0);
     if ($849) {
      $852 = $847 & 511;
      $853 = (($base$1) + ($852<<4)|0);
      $896 = $853;
     } else {
      $850 = $847 & 255;
      $851 = (($31) + ($850<<4)|0);
      $896 = $851;
     }
     $854 = (($855) + 8|0);
     $856 = HEAP32[$854>>2]|0;
     $857 = ($856|0)==(19);
     do {
      if ($857) {
       $858 = $855;
       $859 = $858;
       $860 = HEAP32[$859>>2]|0;
       $861 = (($858) + 4)|0;
       $862 = $861;
       $863 = HEAP32[$862>>2]|0;
       $938 = $860;$941 = $863;
       label = 277;
      } else {
       $$02$i95 = $855;$878 = $856;
       while(1) {
        if ((($878|0) == 19)) {
         $$02$i95$lcssa783 = $$02$i95;
         label = 270;
         break;
        } else if ((($878|0) == 3)) {
         $$02$i95$lcssa = $$02$i95;
         label = 267;
         break;
        }
        $877 = $878 & 15;
        $879 = ($877|0)==(4);
        if (!($879)) {
         label = 293;
         break;
        }
        $880 = HEAP32[$$02$i95>>2]|0;
        $881 = (($880) + 16|0);
        $882 = (_luaO_str2num($881,$v$i94)|0);
        $883 = HEAP32[$$02$i95>>2]|0;
        $884 = (($883) + 4|0);
        $885 = HEAP8[$884>>0]|0;
        $886 = ($885<<24>>24)==(4);
        if ($886) {
         $887 = (($883) + 7|0);
         $888 = HEAP8[$887>>0]|0;
         $889 = $888&255;
         $893 = $889;
        } else {
         $890 = (($883) + 12|0);
         $891 = HEAP32[$890>>2]|0;
         $893 = $891;
        }
        $892 = (($893) + 1)|0;
        $894 = ($882|0)==($892|0);
        if (!($894)) {
         label = 293;
         break;
        }
        $$phi$trans$insert726 = (($v$i94) + 8|0);
        $$pre727 = HEAP32[$$phi$trans$insert726>>2]|0;
        $$02$i95 = $v$i94;$878 = $$pre727;
       }
       if ((label|0) == 267) {
        label = 0;
        $864 = +HEAPF64[$$02$i95$lcssa>>3];
        $865 = (+Math_floor((+$864)));
        $866 = $864 != $865;
        if ($866) {
         break;
        }
        $867 = $865 >= -9.2233720368547758E+18;
        $868 = $865 < 9.2233720368547758E+18;
        $or$cond$i96 = $867 & $868;
        if (!($or$cond$i96)) {
         break;
        }
        $869 = (~~$865)>>>0;
        $870 = +Math_abs($865) >= 1.0 ? $865 > 0.0 ? (~~+Math_min(+Math_floor($865 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($865 - +(~~$865 >>> 0)) / 4294967296.0) >>> 0 : 0;
        $938 = $869;$941 = $870;
        label = 277;
        break;
       }
       else if ((label|0) == 270) {
        label = 0;
        $871 = $$02$i95$lcssa783;
        $872 = $871;
        $873 = HEAP32[$872>>2]|0;
        $874 = (($871) + 4)|0;
        $875 = $874;
        $876 = HEAP32[$875>>2]|0;
        $938 = $873;$941 = $876;
        label = 277;
        break;
       }
       else if ((label|0) == 293) {
        label = 0;
        break;
       }
      }
     } while(0);
     L416: do {
      if ((label|0) == 277) {
       label = 0;
       $895 = (($896) + 8|0);
       $897 = HEAP32[$895>>2]|0;
       $898 = ($897|0)==(19);
       do {
        if ($898) {
         $899 = $896;
         $900 = $899;
         $901 = HEAP32[$900>>2]|0;
         $902 = (($899) + 4)|0;
         $903 = $902;
         $904 = HEAP32[$903>>2]|0;
         $937 = $901;$940 = $904;
        } else {
         $$02$i100 = $896;$919 = $897;
         while(1) {
          if ((($919|0) == 3)) {
           $$02$i100$lcssa = $$02$i100;
           label = 281;
           break;
          } else if ((($919|0) == 19)) {
           $$02$i100$lcssa785 = $$02$i100;
           label = 284;
           break;
          }
          $918 = $919 & 15;
          $920 = ($918|0)==(4);
          if (!($920)) {
           label = 292;
           break;
          }
          $921 = HEAP32[$$02$i100>>2]|0;
          $922 = (($921) + 16|0);
          $923 = (_luaO_str2num($922,$v$i99)|0);
          $924 = HEAP32[$$02$i100>>2]|0;
          $925 = (($924) + 4|0);
          $926 = HEAP8[$925>>0]|0;
          $927 = ($926<<24>>24)==(4);
          if ($927) {
           $928 = (($924) + 7|0);
           $929 = HEAP8[$928>>0]|0;
           $930 = $929&255;
           $934 = $930;
          } else {
           $931 = (($924) + 12|0);
           $932 = HEAP32[$931>>2]|0;
           $934 = $932;
          }
          $933 = (($934) + 1)|0;
          $935 = ($923|0)==($933|0);
          if (!($935)) {
           label = 292;
           break;
          }
          $$phi$trans$insert723 = (($v$i99) + 8|0);
          $$pre724 = HEAP32[$$phi$trans$insert723>>2]|0;
          $$02$i100 = $v$i99;$919 = $$pre724;
         }
         if ((label|0) == 281) {
          label = 0;
          $905 = +HEAPF64[$$02$i100$lcssa>>3];
          $906 = (+Math_floor((+$905)));
          $907 = $905 != $906;
          if ($907) {
           break L416;
          }
          $908 = $906 >= -9.2233720368547758E+18;
          $909 = $906 < 9.2233720368547758E+18;
          $or$cond$i101 = $908 & $909;
          if (!($or$cond$i101)) {
           break L416;
          }
          $910 = (~~$906)>>>0;
          $911 = +Math_abs($906) >= 1.0 ? $906 > 0.0 ? (~~+Math_min(+Math_floor($906 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($906 - +(~~$906 >>> 0)) / 4294967296.0) >>> 0 : 0;
          $937 = $910;$940 = $911;
          break;
         }
         else if ((label|0) == 284) {
          label = 0;
          $912 = $$02$i100$lcssa785;
          $913 = $912;
          $914 = HEAP32[$913>>2]|0;
          $915 = (($912) + 4)|0;
          $916 = $915;
          $917 = HEAP32[$916>>2]|0;
          $937 = $914;$940 = $917;
          break;
         }
         else if ((label|0) == 292) {
          label = 0;
          break L416;
         }
        }
       } while(0);
       $936 = $937 ^ $938;
       $939 = $940 ^ $941;
       $942 = $51;
       $943 = $942;
       HEAP32[$943>>2] = $936;
       $944 = (($942) + 4)|0;
       $945 = $944;
       HEAP32[$945>>2] = $939;
       $946 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$946>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$855,$896,$51,15);
     $947 = HEAP32[$32>>2]|0;
     $base$0$be = $947;
     break;
    }
    case 24:  {
     $1074 = $39 >>> 23;
     $1075 = $1074 & 256;
     $1076 = ($1075|0)==(0);
     if ($1076) {
      $1079 = (($base$1) + ($1074<<4)|0);
      $1088 = $1079;
     } else {
      $1077 = $1074 & 255;
      $1078 = (($31) + ($1077<<4)|0);
      $1088 = $1078;
     }
     $1080 = $39 >>> 14;
     $1081 = $1080 & 256;
     $1082 = ($1081|0)==(0);
     if ($1082) {
      $1085 = $1080 & 511;
      $1086 = (($base$1) + ($1085<<4)|0);
      $1129 = $1086;
     } else {
      $1083 = $1080 & 255;
      $1084 = (($31) + ($1083<<4)|0);
      $1129 = $1084;
     }
     $1087 = (($1088) + 8|0);
     $1089 = HEAP32[$1087>>2]|0;
     $1090 = ($1089|0)==(19);
     do {
      if ($1090) {
       $1091 = $1088;
       $1092 = $1091;
       $1093 = HEAP32[$1092>>2]|0;
       $1094 = (($1091) + 4)|0;
       $1095 = $1094;
       $1096 = HEAP32[$1095>>2]|0;
       $1181 = $1093;$1182 = $1096;
       label = 357;
      } else {
       $$02$i116 = $1088;$1111 = $1089;
       while(1) {
        if ((($1111|0) == 19)) {
         $$02$i116$lcssa775 = $$02$i116;
         label = 350;
         break;
        } else if ((($1111|0) == 3)) {
         $$02$i116$lcssa = $$02$i116;
         label = 347;
         break;
        }
        $1110 = $1111 & 15;
        $1112 = ($1110|0)==(4);
        if (!($1112)) {
         label = 376;
         break;
        }
        $1113 = HEAP32[$$02$i116>>2]|0;
        $1114 = (($1113) + 16|0);
        $1115 = (_luaO_str2num($1114,$v$i115)|0);
        $1116 = HEAP32[$$02$i116>>2]|0;
        $1117 = (($1116) + 4|0);
        $1118 = HEAP8[$1117>>0]|0;
        $1119 = ($1118<<24>>24)==(4);
        if ($1119) {
         $1120 = (($1116) + 7|0);
         $1121 = HEAP8[$1120>>0]|0;
         $1122 = $1121&255;
         $1126 = $1122;
        } else {
         $1123 = (($1116) + 12|0);
         $1124 = HEAP32[$1123>>2]|0;
         $1126 = $1124;
        }
        $1125 = (($1126) + 1)|0;
        $1127 = ($1115|0)==($1125|0);
        if (!($1127)) {
         label = 376;
         break;
        }
        $$phi$trans$insert738 = (($v$i115) + 8|0);
        $$pre739 = HEAP32[$$phi$trans$insert738>>2]|0;
        $$02$i116 = $v$i115;$1111 = $$pre739;
       }
       if ((label|0) == 347) {
        label = 0;
        $1097 = +HEAPF64[$$02$i116$lcssa>>3];
        $1098 = (+Math_floor((+$1097)));
        $1099 = $1097 != $1098;
        if ($1099) {
         break;
        }
        $1100 = $1098 >= -9.2233720368547758E+18;
        $1101 = $1098 < 9.2233720368547758E+18;
        $or$cond$i117 = $1100 & $1101;
        if (!($or$cond$i117)) {
         break;
        }
        $1102 = (~~$1098)>>>0;
        $1103 = +Math_abs($1098) >= 1.0 ? $1098 > 0.0 ? (~~+Math_min(+Math_floor($1098 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1098 - +(~~$1098 >>> 0)) / 4294967296.0) >>> 0 : 0;
        $1181 = $1102;$1182 = $1103;
        label = 357;
        break;
       }
       else if ((label|0) == 350) {
        label = 0;
        $1104 = $$02$i116$lcssa775;
        $1105 = $1104;
        $1106 = HEAP32[$1105>>2]|0;
        $1107 = (($1104) + 4)|0;
        $1108 = $1107;
        $1109 = HEAP32[$1108>>2]|0;
        $1181 = $1106;$1182 = $1109;
        label = 357;
        break;
       }
       else if ((label|0) == 376) {
        label = 0;
        break;
       }
      }
     } while(0);
     L465: do {
      if ((label|0) == 357) {
       label = 0;
       $1128 = (($1129) + 8|0);
       $1130 = HEAP32[$1128>>2]|0;
       $1131 = ($1130|0)==(19);
       do {
        if ($1131) {
         $1132 = $1129;
         $1133 = $1132;
         $1134 = HEAP32[$1133>>2]|0;
         $1135 = (($1132) + 4)|0;
         $1136 = $1135;
         $1137 = HEAP32[$1136>>2]|0;
         $1169 = $1137;$1171 = $1134;
        } else {
         $$02$i121 = $1129;$1152 = $1130;
         while(1) {
          if ((($1152|0) == 19)) {
           $$02$i121$lcssa777 = $$02$i121;
           label = 364;
           break;
          } else if ((($1152|0) == 3)) {
           $$02$i121$lcssa = $$02$i121;
           label = 361;
           break;
          }
          $1151 = $1152 & 15;
          $1153 = ($1151|0)==(4);
          if (!($1153)) {
           label = 375;
           break;
          }
          $1154 = HEAP32[$$02$i121>>2]|0;
          $1155 = (($1154) + 16|0);
          $1156 = (_luaO_str2num($1155,$v$i120)|0);
          $1157 = HEAP32[$$02$i121>>2]|0;
          $1158 = (($1157) + 4|0);
          $1159 = HEAP8[$1158>>0]|0;
          $1160 = ($1159<<24>>24)==(4);
          if ($1160) {
           $1161 = (($1157) + 7|0);
           $1162 = HEAP8[$1161>>0]|0;
           $1163 = $1162&255;
           $1167 = $1163;
          } else {
           $1164 = (($1157) + 12|0);
           $1165 = HEAP32[$1164>>2]|0;
           $1167 = $1165;
          }
          $1166 = (($1167) + 1)|0;
          $1168 = ($1156|0)==($1166|0);
          if (!($1168)) {
           label = 375;
           break;
          }
          $$phi$trans$insert735 = (($v$i120) + 8|0);
          $$pre736 = HEAP32[$$phi$trans$insert735>>2]|0;
          $$02$i121 = $v$i120;$1152 = $$pre736;
         }
         if ((label|0) == 361) {
          label = 0;
          $1138 = +HEAPF64[$$02$i121$lcssa>>3];
          $1139 = (+Math_floor((+$1138)));
          $1140 = $1138 != $1139;
          if ($1140) {
           break L465;
          }
          $1141 = $1139 >= -9.2233720368547758E+18;
          $1142 = $1139 < 9.2233720368547758E+18;
          $or$cond$i122 = $1141 & $1142;
          if (!($or$cond$i122)) {
           break L465;
          }
          $1143 = (~~$1139)>>>0;
          $1144 = +Math_abs($1139) >= 1.0 ? $1139 > 0.0 ? (~~+Math_min(+Math_floor($1139 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1139 - +(~~$1139 >>> 0)) / 4294967296.0) >>> 0 : 0;
          $1169 = $1144;$1171 = $1143;
          break;
         }
         else if ((label|0) == 364) {
          label = 0;
          $1145 = $$02$i121$lcssa777;
          $1146 = $1145;
          $1147 = HEAP32[$1146>>2]|0;
          $1148 = (($1145) + 4)|0;
          $1149 = $1148;
          $1150 = HEAP32[$1149>>2]|0;
          $1169 = $1150;$1171 = $1147;
          break;
         }
         else if ((label|0) == 375) {
          label = 0;
          break L465;
         }
        }
       } while(0);
       $1170 = ($1169|0)>(0);
       $1172 = ($1171>>>0)>(0);
       $1173 = ($1169|0)==(0);
       $1174 = $1173 & $1172;
       $1175 = $1170 | $1174;
       if ($1175) {
        $1176 = ($1169|0)>(0);
        $1177 = ($1171>>>0)>(63);
        $1178 = ($1169|0)==(0);
        $1179 = $1178 & $1177;
        $1180 = $1176 | $1179;
        $1183 = (_bitshift64Lshr(($1181|0),($1182|0),($1171|0))|0);
        $1184 = tempRet0;
        $1185 = $1180 ? 0 : $1183;
        $1186 = $1180 ? 0 : $1184;
        $1200 = $1185;$1203 = $1186;
       } else {
        $1187 = (_i64Subtract(0,0,($1171|0),($1169|0))|0);
        $1188 = tempRet0;
        $1189 = ($1169|0)<(-1);
        $1190 = ($1171>>>0)<(4294967233);
        $1191 = ($1169|0)==(-1);
        $1192 = $1191 & $1190;
        $1193 = $1189 | $1192;
        $1194 = (_bitshift64Shl(($1181|0),($1182|0),($1187|0))|0);
        $1195 = tempRet0;
        $1196 = $1193 ? 0 : $1194;
        $1197 = $1193 ? 0 : $1195;
        $1200 = $1196;$1203 = $1197;
       }
       $1198 = $51;
       $1199 = $1198;
       HEAP32[$1199>>2] = $1200;
       $1201 = (($1198) + 4)|0;
       $1202 = $1201;
       HEAP32[$1202>>2] = $1203;
       $1204 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1204>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$1088,$1129,$51,17);
     $1205 = HEAP32[$32>>2]|0;
     $base$0$be = $1205;
     break;
    }
    case 16:  {
     $1206 = $39 >>> 23;
     $1207 = $1206 & 256;
     $1208 = ($1207|0)==(0);
     if ($1208) {
      $1211 = (($base$1) + ($1206<<4)|0);
      $1220 = $1211;
     } else {
      $1209 = $1206 & 255;
      $1210 = (($31) + ($1209<<4)|0);
      $1220 = $1210;
     }
     $1212 = $39 >>> 14;
     $1213 = $1212 & 256;
     $1214 = ($1213|0)==(0);
     if ($1214) {
      $1217 = $1212 & 511;
      $1218 = (($base$1) + ($1217<<4)|0);
      $1223 = $1218;
     } else {
      $1215 = $1212 & 255;
      $1216 = (($31) + ($1215<<4)|0);
      $1223 = $1216;
     }
     $1219 = (($1220) + 8|0);
     $1221 = HEAP32[$1219>>2]|0;
     do {
      if ((($1221|0) == 3)) {
       $1266 = +HEAPF64[$1220>>3];
       $1340 = $1266;
       label = 401;
      } else if ((($1221|0) == 19)) {
       $1222 = (($1223) + 8|0);
       $1224 = HEAP32[$1222>>2]|0;
       $1225 = ($1224|0)==(19);
       if (!($1225)) {
        $1267 = $1220;
        $1268 = $1267;
        $1269 = HEAP32[$1268>>2]|0;
        $1270 = (($1267) + 4)|0;
        $1271 = $1270;
        $1272 = HEAP32[$1271>>2]|0;
        $1273 = (+($1269>>>0)) + (4294967296.0*(+($1272|0)));
        $1340 = $1273;
        label = 401;
        break;
       }
       $1226 = $1220;
       $1227 = $1226;
       $1228 = HEAP32[$1227>>2]|0;
       $1229 = (($1226) + 4)|0;
       $1230 = $1229;
       $1231 = HEAP32[$1230>>2]|0;
       $1232 = $1223;
       $1233 = $1232;
       $1234 = HEAP32[$1233>>2]|0;
       $1235 = (($1232) + 4)|0;
       $1236 = $1235;
       $1237 = HEAP32[$1236>>2]|0;
       $1238 = (_i64Add(($1234|0),($1237|0),1,0)|0);
       $1239 = tempRet0;
       $1240 = ($1239>>>0)<(0);
       $1241 = ($1238>>>0)<(2);
       $1242 = ($1239|0)==(0);
       $1243 = $1242 & $1241;
       $1244 = $1240 | $1243;
       if ($1244) {
        $1245 = ($1234|0)==(0);
        $1246 = ($1237|0)==(0);
        $1247 = $1245 & $1246;
        if ($1247) {
         label = 388;
         break L1;
        } else {
         $1261 = 0;$1264 = 0;
        }
       } else {
        $1248 = (___remdi3(($1228|0),($1231|0),($1234|0),($1237|0))|0);
        $1249 = tempRet0;
        $1250 = ($1248|0)!=(0);
        $1251 = ($1249|0)!=(0);
        $1252 = $1250 | $1251;
        $1234 ^ $1228;
        $1253 = $1237 ^ $1231;
        $1254 = ($1253|0)<(0);
        $or$cond$i128 = $1252 & $1254;
        $1255 = $or$cond$i128 ? $1234 : 0;
        $1256 = $or$cond$i128 ? $1237 : 0;
        $1257 = (_i64Add(($1255|0),($1256|0),($1248|0),($1249|0))|0);
        $1258 = tempRet0;
        $1261 = $1257;$1264 = $1258;
       }
       $1259 = $51;
       $1260 = $1259;
       HEAP32[$1260>>2] = $1261;
       $1262 = (($1259) + 4)|0;
       $1263 = $1262;
       HEAP32[$1263>>2] = $1264;
       $1265 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1265>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      } else {
       $1274 = $1221 & 15;
       $1275 = ($1274|0)==(4);
       if ($1275) {
        $1276 = HEAP32[$1220>>2]|0;
        $1277 = (($1276) + 16|0);
        $1278 = (_luaO_str2num($1277,$v$i130)|0);
        $1279 = HEAP32[$1220>>2]|0;
        $1280 = (($1279) + 4|0);
        $1281 = HEAP8[$1280>>0]|0;
        $1282 = ($1281<<24>>24)==(4);
        if ($1282) {
         $1283 = (($1279) + 7|0);
         $1284 = HEAP8[$1283>>0]|0;
         $1285 = $1284&255;
         $1289 = $1285;
        } else {
         $1286 = (($1279) + 12|0);
         $1287 = HEAP32[$1286>>2]|0;
         $1289 = $1287;
        }
        $1288 = (($1289) + 1)|0;
        $1290 = ($1278|0)==($1288|0);
        if ($1290) {
         $1291 = HEAP32[$14>>2]|0;
         $1292 = ($1291|0)==(19);
         if ($1292) {
          $1293 = $v$i130;
          $1294 = $1293;
          $1295 = HEAP32[$1294>>2]|0;
          $1296 = (($1293) + 4)|0;
          $1297 = $1296;
          $1298 = HEAP32[$1297>>2]|0;
          $1299 = (+($1295>>>0)) + (4294967296.0*(+($1298|0)));
          $1340 = $1299;
          label = 401;
          break;
         } else {
          $1300 = +HEAPF64[$v$i130>>3];
          $1340 = $1300;
          label = 401;
          break;
         }
        }
       }
      }
     } while(0);
     L520: do {
      if ((label|0) == 401) {
       label = 0;
       $1301 = (($1223) + 8|0);
       $1302 = HEAP32[$1301>>2]|0;
       $1303 = ($1302|0)==(3);
       do {
        if ($1303) {
         $1304 = +HEAPF64[$1223>>3];
         $1341 = $1304;
        } else {
         $1305 = ($1302|0)==(19);
         if ($1305) {
          $1306 = $1223;
          $1307 = $1306;
          $1308 = HEAP32[$1307>>2]|0;
          $1309 = (($1306) + 4)|0;
          $1310 = $1309;
          $1311 = HEAP32[$1310>>2]|0;
          $1312 = (+($1308>>>0)) + (4294967296.0*(+($1311|0)));
          $1341 = $1312;
          break;
         }
         $1313 = $1302 & 15;
         $1314 = ($1313|0)==(4);
         if (!($1314)) {
          break L520;
         }
         $1315 = HEAP32[$1223>>2]|0;
         $1316 = (($1315) + 16|0);
         $1317 = (_luaO_str2num($1316,$v$i133)|0);
         $1318 = HEAP32[$1223>>2]|0;
         $1319 = (($1318) + 4|0);
         $1320 = HEAP8[$1319>>0]|0;
         $1321 = ($1320<<24>>24)==(4);
         if ($1321) {
          $1322 = (($1318) + 7|0);
          $1323 = HEAP8[$1322>>0]|0;
          $1324 = $1323&255;
          $1328 = $1324;
         } else {
          $1325 = (($1318) + 12|0);
          $1326 = HEAP32[$1325>>2]|0;
          $1328 = $1326;
         }
         $1327 = (($1328) + 1)|0;
         $1329 = ($1317|0)==($1327|0);
         if (!($1329)) {
          break L520;
         }
         $1330 = HEAP32[$13>>2]|0;
         $1331 = ($1330|0)==(19);
         if ($1331) {
          $1332 = $v$i133;
          $1333 = $1332;
          $1334 = HEAP32[$1333>>2]|0;
          $1335 = (($1332) + 4)|0;
          $1336 = $1335;
          $1337 = HEAP32[$1336>>2]|0;
          $1338 = (+($1334>>>0)) + (4294967296.0*(+($1337|0)));
          $1341 = $1338;
          break;
         } else {
          $1339 = +HEAPF64[$v$i133>>3];
          $1341 = $1339;
          break;
         }
        }
       } while(0);
       $1342 = (+_fmod($1340,$1341));
       $1343 = $1341 * $1342;
       $1344 = $1343 < 0.0;
       if ($1344) {
        $1345 = $1341 + $1342;
        $m$0 = $1345;
       } else {
        $m$0 = $1342;
       }
       HEAPF64[$51>>3] = $m$0;
       $1346 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1346>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$1220,$1223,$51,9);
     $1347 = HEAP32[$32>>2]|0;
     $base$0$be = $1347;
     break;
    }
    case 19:  {
     $1348 = $39 >>> 23;
     $1349 = $1348 & 256;
     $1350 = ($1349|0)==(0);
     if ($1350) {
      $1353 = (($base$1) + ($1348<<4)|0);
      $1362 = $1353;
     } else {
      $1351 = $1348 & 255;
      $1352 = (($31) + ($1351<<4)|0);
      $1362 = $1352;
     }
     $1354 = $39 >>> 14;
     $1355 = $1354 & 256;
     $1356 = ($1355|0)==(0);
     if ($1356) {
      $1359 = $1354 & 511;
      $1360 = (($base$1) + ($1359<<4)|0);
      $1365 = $1360;
     } else {
      $1357 = $1354 & 255;
      $1358 = (($31) + ($1357<<4)|0);
      $1365 = $1358;
     }
     $1361 = (($1362) + 8|0);
     $1363 = HEAP32[$1361>>2]|0;
     do {
      if ((($1363|0) == 19)) {
       $1364 = (($1365) + 8|0);
       $1366 = HEAP32[$1364>>2]|0;
       $1367 = ($1366|0)==(19);
       if (!($1367)) {
        $1414 = $1362;
        $1415 = $1414;
        $1416 = HEAP32[$1415>>2]|0;
        $1417 = (($1414) + 4)|0;
        $1418 = $1417;
        $1419 = HEAP32[$1418>>2]|0;
        $1420 = (+($1416>>>0)) + (4294967296.0*(+($1419|0)));
        $1489 = $1420;
        label = 442;
        break;
       }
       $1368 = $1362;
       $1369 = $1368;
       $1370 = HEAP32[$1369>>2]|0;
       $1371 = (($1368) + 4)|0;
       $1372 = $1371;
       $1373 = HEAP32[$1372>>2]|0;
       $1374 = $1365;
       $1375 = $1374;
       $1376 = HEAP32[$1375>>2]|0;
       $1377 = (($1374) + 4)|0;
       $1378 = $1377;
       $1379 = HEAP32[$1378>>2]|0;
       $1380 = (_i64Add(($1376|0),($1379|0),1,0)|0);
       $1381 = tempRet0;
       $1382 = ($1381>>>0)<(0);
       $1383 = ($1380>>>0)<(2);
       $1384 = ($1381|0)==(0);
       $1385 = $1384 & $1383;
       $1386 = $1382 | $1385;
       if ($1386) {
        $1387 = ($1376|0)==(0);
        $1388 = ($1379|0)==(0);
        $1389 = $1387 & $1388;
        if ($1389) {
         label = 427;
         break L1;
        }
        $1390 = (_i64Subtract(0,0,($1370|0),($1373|0))|0);
        $1391 = tempRet0;
        $1408 = $1390;$1411 = $1391;
       } else {
        $1392 = (___divdi3(($1370|0),($1373|0),($1376|0),($1379|0))|0);
        $1393 = tempRet0;
        $1376 ^ $1370;
        $1394 = $1379 ^ $1373;
        $1395 = ($1394|0)<(0);
        if ($1395) {
         $1396 = (___remdi3(($1370|0),($1373|0),($1376|0),($1379|0))|0);
         $1397 = tempRet0;
         $1398 = ($1396|0)!=(0);
         $1399 = ($1397|0)!=(0);
         $1400 = $1398 | $1399;
         $1401 = $1400 << 31 >> 31;
         $1402 = ($1401|0)<(0);
         $1403 = $1402 << 31 >> 31;
         $1404 = (_i64Add(($1401|0),($1403|0),($1392|0),($1393|0))|0);
         $1405 = tempRet0;
         $1408 = $1404;$1411 = $1405;
        } else {
         $1408 = $1392;$1411 = $1393;
        }
       }
       $1406 = $51;
       $1407 = $1406;
       HEAP32[$1407>>2] = $1408;
       $1409 = (($1406) + 4)|0;
       $1410 = $1409;
       HEAP32[$1410>>2] = $1411;
       $1412 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1412>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      } else if ((($1363|0) == 3)) {
       $1413 = +HEAPF64[$1362>>3];
       $1489 = $1413;
       label = 442;
      } else {
       $1421 = $1363 & 15;
       $1422 = ($1421|0)==(4);
       if ($1422) {
        $1423 = HEAP32[$1362>>2]|0;
        $1424 = (($1423) + 16|0);
        $1425 = (_luaO_str2num($1424,$v$i138)|0);
        $1426 = HEAP32[$1362>>2]|0;
        $1427 = (($1426) + 4|0);
        $1428 = HEAP8[$1427>>0]|0;
        $1429 = ($1428<<24>>24)==(4);
        if ($1429) {
         $1430 = (($1426) + 7|0);
         $1431 = HEAP8[$1430>>0]|0;
         $1432 = $1431&255;
         $1436 = $1432;
        } else {
         $1433 = (($1426) + 12|0);
         $1434 = HEAP32[$1433>>2]|0;
         $1436 = $1434;
        }
        $1435 = (($1436) + 1)|0;
        $1437 = ($1425|0)==($1435|0);
        if ($1437) {
         $1438 = HEAP32[$16>>2]|0;
         $1439 = ($1438|0)==(19);
         if ($1439) {
          $1440 = $v$i138;
          $1441 = $1440;
          $1442 = HEAP32[$1441>>2]|0;
          $1443 = (($1440) + 4)|0;
          $1444 = $1443;
          $1445 = HEAP32[$1444>>2]|0;
          $1446 = (+($1442>>>0)) + (4294967296.0*(+($1445|0)));
          $1489 = $1446;
          label = 442;
          break;
         } else {
          $1447 = +HEAPF64[$v$i138>>3];
          $1489 = $1447;
          label = 442;
          break;
         }
        }
       }
      }
     } while(0);
     L573: do {
      if ((label|0) == 442) {
       label = 0;
       $1448 = (($1365) + 8|0);
       $1449 = HEAP32[$1448>>2]|0;
       $1450 = ($1449|0)==(3);
       do {
        if ($1450) {
         $1451 = +HEAPF64[$1365>>3];
         $1488 = $1451;
        } else {
         $1452 = ($1449|0)==(19);
         if ($1452) {
          $1453 = $1365;
          $1454 = $1453;
          $1455 = HEAP32[$1454>>2]|0;
          $1456 = (($1453) + 4)|0;
          $1457 = $1456;
          $1458 = HEAP32[$1457>>2]|0;
          $1459 = (+($1455>>>0)) + (4294967296.0*(+($1458|0)));
          $1488 = $1459;
          break;
         }
         $1460 = $1449 & 15;
         $1461 = ($1460|0)==(4);
         if (!($1461)) {
          break L573;
         }
         $1462 = HEAP32[$1365>>2]|0;
         $1463 = (($1462) + 16|0);
         $1464 = (_luaO_str2num($1463,$v$i141)|0);
         $1465 = HEAP32[$1365>>2]|0;
         $1466 = (($1465) + 4|0);
         $1467 = HEAP8[$1466>>0]|0;
         $1468 = ($1467<<24>>24)==(4);
         if ($1468) {
          $1469 = (($1465) + 7|0);
          $1470 = HEAP8[$1469>>0]|0;
          $1471 = $1470&255;
          $1475 = $1471;
         } else {
          $1472 = (($1465) + 12|0);
          $1473 = HEAP32[$1472>>2]|0;
          $1475 = $1473;
         }
         $1474 = (($1475) + 1)|0;
         $1476 = ($1464|0)==($1474|0);
         if (!($1476)) {
          break L573;
         }
         $1477 = HEAP32[$15>>2]|0;
         $1478 = ($1477|0)==(19);
         if ($1478) {
          $1479 = $v$i141;
          $1480 = $1479;
          $1481 = HEAP32[$1480>>2]|0;
          $1482 = (($1479) + 4)|0;
          $1483 = $1482;
          $1484 = HEAP32[$1483>>2]|0;
          $1485 = (+($1481>>>0)) + (4294967296.0*(+($1484|0)));
          $1488 = $1485;
          break;
         } else {
          $1486 = +HEAPF64[$v$i141>>3];
          $1488 = $1486;
          break;
         }
        }
       } while(0);
       $1487 = $1489 / $1488;
       $1490 = (+Math_floor((+$1487)));
       HEAPF64[$51>>3] = $1490;
       $1491 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1491>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$1362,$1365,$51,12);
     $1492 = HEAP32[$32>>2]|0;
     $base$0$be = $1492;
     break;
    }
    case 17:  {
     $1493 = $39 >>> 23;
     $1494 = $1493 & 256;
     $1495 = ($1494|0)==(0);
     if ($1495) {
      $1498 = (($base$1) + ($1493<<4)|0);
      $1507 = $1498;
     } else {
      $1496 = $1493 & 255;
      $1497 = (($31) + ($1496<<4)|0);
      $1507 = $1497;
     }
     $1499 = $39 >>> 14;
     $1500 = $1499 & 256;
     $1501 = ($1500|0)==(0);
     if ($1501) {
      $1504 = $1499 & 511;
      $1505 = (($base$1) + ($1504<<4)|0);
      $1547 = $1505;
     } else {
      $1502 = $1499 & 255;
      $1503 = (($31) + ($1502<<4)|0);
      $1547 = $1503;
     }
     $1506 = (($1507) + 8|0);
     $1508 = HEAP32[$1506>>2]|0;
     $1509 = ($1508|0)==(3);
     do {
      if ($1509) {
       $1510 = +HEAPF64[$1507>>3];
       $1586 = $1510;
       label = 474;
      } else {
       $1511 = ($1508|0)==(19);
       if ($1511) {
        $1512 = $1507;
        $1513 = $1512;
        $1514 = HEAP32[$1513>>2]|0;
        $1515 = (($1512) + 4)|0;
        $1516 = $1515;
        $1517 = HEAP32[$1516>>2]|0;
        $1518 = (+($1514>>>0)) + (4294967296.0*(+($1517|0)));
        $1586 = $1518;
        label = 474;
        break;
       }
       $1519 = $1508 & 15;
       $1520 = ($1519|0)==(4);
       if ($1520) {
        $1521 = HEAP32[$1507>>2]|0;
        $1522 = (($1521) + 16|0);
        $1523 = (_luaO_str2num($1522,$v$i144)|0);
        $1524 = HEAP32[$1507>>2]|0;
        $1525 = (($1524) + 4|0);
        $1526 = HEAP8[$1525>>0]|0;
        $1527 = ($1526<<24>>24)==(4);
        if ($1527) {
         $1528 = (($1524) + 7|0);
         $1529 = HEAP8[$1528>>0]|0;
         $1530 = $1529&255;
         $1534 = $1530;
        } else {
         $1531 = (($1524) + 12|0);
         $1532 = HEAP32[$1531>>2]|0;
         $1534 = $1532;
        }
        $1533 = (($1534) + 1)|0;
        $1535 = ($1523|0)==($1533|0);
        if ($1535) {
         $1536 = HEAP32[$18>>2]|0;
         $1537 = ($1536|0)==(19);
         if ($1537) {
          $1538 = $v$i144;
          $1539 = $1538;
          $1540 = HEAP32[$1539>>2]|0;
          $1541 = (($1538) + 4)|0;
          $1542 = $1541;
          $1543 = HEAP32[$1542>>2]|0;
          $1544 = (+($1540>>>0)) + (4294967296.0*(+($1543|0)));
          $1586 = $1544;
          label = 474;
          break;
         } else {
          $1545 = +HEAPF64[$v$i144>>3];
          $1586 = $1545;
          label = 474;
          break;
         }
        }
       }
      }
     } while(0);
     L616: do {
      if ((label|0) == 474) {
       label = 0;
       $1546 = (($1547) + 8|0);
       $1548 = HEAP32[$1546>>2]|0;
       $1549 = ($1548|0)==(3);
       do {
        if ($1549) {
         $1550 = +HEAPF64[$1547>>3];
         $1587 = $1550;
        } else {
         $1551 = ($1548|0)==(19);
         if ($1551) {
          $1552 = $1547;
          $1553 = $1552;
          $1554 = HEAP32[$1553>>2]|0;
          $1555 = (($1552) + 4)|0;
          $1556 = $1555;
          $1557 = HEAP32[$1556>>2]|0;
          $1558 = (+($1554>>>0)) + (4294967296.0*(+($1557|0)));
          $1587 = $1558;
          break;
         }
         $1559 = $1548 & 15;
         $1560 = ($1559|0)==(4);
         if (!($1560)) {
          break L616;
         }
         $1561 = HEAP32[$1547>>2]|0;
         $1562 = (($1561) + 16|0);
         $1563 = (_luaO_str2num($1562,$v$i147)|0);
         $1564 = HEAP32[$1547>>2]|0;
         $1565 = (($1564) + 4|0);
         $1566 = HEAP8[$1565>>0]|0;
         $1567 = ($1566<<24>>24)==(4);
         if ($1567) {
          $1568 = (($1564) + 7|0);
          $1569 = HEAP8[$1568>>0]|0;
          $1570 = $1569&255;
          $1574 = $1570;
         } else {
          $1571 = (($1564) + 12|0);
          $1572 = HEAP32[$1571>>2]|0;
          $1574 = $1572;
         }
         $1573 = (($1574) + 1)|0;
         $1575 = ($1563|0)==($1573|0);
         if (!($1575)) {
          break L616;
         }
         $1576 = HEAP32[$17>>2]|0;
         $1577 = ($1576|0)==(19);
         if ($1577) {
          $1578 = $v$i147;
          $1579 = $1578;
          $1580 = HEAP32[$1579>>2]|0;
          $1581 = (($1578) + 4)|0;
          $1582 = $1581;
          $1583 = HEAP32[$1582>>2]|0;
          $1584 = (+($1580>>>0)) + (4294967296.0*(+($1583|0)));
          $1587 = $1584;
          break;
         } else {
          $1585 = +HEAPF64[$v$i147>>3];
          $1587 = $1585;
          break;
         }
        }
       } while(0);
       $1588 = (+Math_pow((+$1586),(+$1587)));
       HEAPF64[$51>>3] = $1588;
       $1589 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1589>>2] = 3;
       $base$0$be = $base$1;
       break L9;
      }
     } while(0);
     _luaT_trybinTM($L,$1507,$1547,$51,10);
     $1590 = HEAP32[$32>>2]|0;
     $base$0$be = $1590;
     break;
    }
    case 26:  {
     $1640 = $39 >>> 23;
     $1641 = (($base$1) + ($1640<<4)|0);
     $1642 = ((($base$1) + ($1640<<4)|0) + 8|0);
     $1643 = HEAP32[$1642>>2]|0;
     $1644 = ($1643|0)==(19);
     do {
      if ($1644) {
       $1645 = $1641;
       $1646 = $1645;
       $1647 = HEAP32[$1646>>2]|0;
       $1648 = (($1645) + 4)|0;
       $1649 = $1648;
       $1650 = HEAP32[$1649>>2]|0;
       $1684 = $1647;$1686 = $1650;
      } else {
       $$02$i154 = $1641;
       while(1) {
        $1651 = (($$02$i154) + 8|0);
        $1652 = HEAP32[$1651>>2]|0;
        if ((($1652|0) == 3)) {
         $$02$i154$lcssa = $$02$i154;
         label = 505;
         break;
        } else if ((($1652|0) == 19)) {
         $$02$i154$lcssa773 = $$02$i154;
         label = 508;
         break;
        }
        $1666 = $1652 & 15;
        $1667 = ($1666|0)==(4);
        if (!($1667)) {
         label = 515;
         break;
        }
        $1668 = HEAP32[$$02$i154>>2]|0;
        $1669 = (($1668) + 16|0);
        $1670 = (_luaO_str2num($1669,$v$i153)|0);
        $1671 = HEAP32[$$02$i154>>2]|0;
        $1672 = (($1671) + 4|0);
        $1673 = HEAP8[$1672>>0]|0;
        $1674 = ($1673<<24>>24)==(4);
        if ($1674) {
         $1675 = (($1671) + 7|0);
         $1676 = HEAP8[$1675>>0]|0;
         $1677 = $1676&255;
         $1681 = $1677;
        } else {
         $1678 = (($1671) + 12|0);
         $1679 = HEAP32[$1678>>2]|0;
         $1681 = $1679;
        }
        $1680 = (($1681) + 1)|0;
        $1682 = ($1670|0)==($1680|0);
        if ($1682) {
         $$02$i154 = $v$i153;
        } else {
         label = 515;
         break;
        }
       }
       if ((label|0) == 505) {
        label = 0;
        $1653 = +HEAPF64[$$02$i154$lcssa>>3];
        $1654 = (+Math_floor((+$1653)));
        $1655 = $1653 != $1654;
        if (!($1655)) {
         $1656 = $1654 >= -9.2233720368547758E+18;
         $1657 = $1654 < 9.2233720368547758E+18;
         $or$cond$i155 = $1656 & $1657;
         if ($or$cond$i155) {
          $1658 = (~~$1654)>>>0;
          $1659 = +Math_abs($1654) >= 1.0 ? $1654 > 0.0 ? (~~+Math_min(+Math_floor($1654 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1654 - +(~~$1654 >>> 0)) / 4294967296.0) >>> 0 : 0;
          $1684 = $1658;$1686 = $1659;
          break;
         }
        }
       }
       else if ((label|0) == 508) {
        label = 0;
        $1660 = $$02$i154$lcssa773;
        $1661 = $1660;
        $1662 = HEAP32[$1661>>2]|0;
        $1663 = (($1660) + 4)|0;
        $1664 = $1663;
        $1665 = HEAP32[$1664>>2]|0;
        $1684 = $1662;$1686 = $1665;
        break;
       }
       else if ((label|0) == 515) {
        label = 0;
       }
       _luaT_trybinTM($L,$1641,$1641,$51,19);
       $1692 = HEAP32[$32>>2]|0;
       $base$0$be = $1692;
       break L9;
      }
     } while(0);
     $1683 = $1684 ^ -1;
     $1685 = $1686 ^ -1;
     $1687 = $51;
     $1688 = $1687;
     HEAP32[$1688>>2] = $1683;
     $1689 = (($1687) + 4)|0;
     $1690 = $1689;
     HEAP32[$1690>>2] = $1685;
     $1691 = ((($base$1) + ($50<<4)|0) + 8|0);
     HEAP32[$1691>>2] = 19;
     $base$0$be = $base$1;
     break;
    }
    case 25:  {
     $1591 = $39 >>> 23;
     $1592 = (($base$1) + ($1591<<4)|0);
     $1593 = ((($base$1) + ($1591<<4)|0) + 8|0);
     $1594 = HEAP32[$1593>>2]|0;
     do {
      if ((($1594|0) == 3)) {
       $1608 = +HEAPF64[$1592>>3];
       $1637 = $1608;
      } else if ((($1594|0) == 19)) {
       $1595 = $1592;
       $1596 = $1595;
       $1597 = HEAP32[$1596>>2]|0;
       $1598 = (($1595) + 4)|0;
       $1599 = $1598;
       $1600 = HEAP32[$1599>>2]|0;
       $1601 = (_i64Subtract(0,0,($1597|0),($1600|0))|0);
       $1602 = tempRet0;
       $1603 = $51;
       $1604 = $1603;
       HEAP32[$1604>>2] = $1601;
       $1605 = (($1603) + 4)|0;
       $1606 = $1605;
       HEAP32[$1606>>2] = $1602;
       $1607 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$1607>>2] = 19;
       $base$0$be = $base$1;
       break L9;
      } else {
       $1609 = $1594 & 15;
       $1610 = ($1609|0)==(4);
       if ($1610) {
        $1611 = HEAP32[$1592>>2]|0;
        $1612 = (($1611) + 16|0);
        $1613 = (_luaO_str2num($1612,$v$i150)|0);
        $1614 = HEAP32[$1592>>2]|0;
        $1615 = (($1614) + 4|0);
        $1616 = HEAP8[$1615>>0]|0;
        $1617 = ($1616<<24>>24)==(4);
        if ($1617) {
         $1618 = (($1614) + 7|0);
         $1619 = HEAP8[$1618>>0]|0;
         $1620 = $1619&255;
         $1624 = $1620;
        } else {
         $1621 = (($1614) + 12|0);
         $1622 = HEAP32[$1621>>2]|0;
         $1624 = $1622;
        }
        $1623 = (($1624) + 1)|0;
        $1625 = ($1613|0)==($1623|0);
        if ($1625) {
         $1626 = HEAP32[$19>>2]|0;
         $1627 = ($1626|0)==(19);
         if ($1627) {
          $1628 = $v$i150;
          $1629 = $1628;
          $1630 = HEAP32[$1629>>2]|0;
          $1631 = (($1628) + 4)|0;
          $1632 = $1631;
          $1633 = HEAP32[$1632>>2]|0;
          $1634 = (+($1630>>>0)) + (4294967296.0*(+($1633|0)));
          $1637 = $1634;
          break;
         } else {
          $1635 = +HEAPF64[$v$i150>>3];
          $1637 = $1635;
          break;
         }
        }
       }
       _luaT_trybinTM($L,$1592,$1592,$51,18);
       $1639 = HEAP32[$32>>2]|0;
       $base$0$be = $1639;
       break L9;
      }
     } while(0);
     $1636 = -$1637;
     HEAPF64[$51>>3] = $1636;
     $1638 = ((($base$1) + ($50<<4)|0) + 8|0);
     HEAP32[$1638>>2] = 3;
     $base$0$be = $base$1;
     break;
    }
    case 33:  {
     $1793 = $39 >>> 23;
     $1794 = $1793 & 256;
     $1795 = ($1794|0)==(0);
     if ($1795) {
      $1798 = (($base$1) + ($1793<<4)|0);
      $1806 = $1798;
     } else {
      $1796 = $1793 & 255;
      $1797 = (($31) + ($1796<<4)|0);
      $1806 = $1797;
     }
     $1799 = $39 >>> 14;
     $1800 = $1799 & 256;
     $1801 = ($1800|0)==(0);
     if ($1801) {
      $1804 = $1799 & 511;
      $1805 = (($base$1) + ($1804<<4)|0);
      $1807 = $1805;
     } else {
      $1802 = $1799 & 255;
      $1803 = (($31) + ($1802<<4)|0);
      $1807 = $1803;
     }
     $1808 = (_luaV_lessequal($L,$1806,$1807)|0);
     $1809 = ($1808|0)==($50|0);
     $1810 = HEAP32[$34>>2]|0;
     if ($1809) {
      $1812 = HEAP32[$1810>>2]|0;
      $1813 = $1812 >>> 6;
      $1814 = $1813 & 255;
      $1815 = ($1814|0)==(0);
      if ($1815) {
       $1821 = $1810;
      } else {
       $1816 = HEAP32[$32>>2]|0;
       $$sum36 = (($1814) + -1)|0;
       $1817 = (($1816) + ($$sum36<<4)|0);
       _luaF_close($L,$1817);
       $$pre744 = HEAP32[$34>>2]|0;
       $1821 = $$pre744;
      }
      $1818 = $1812 >>> 14;
      $1819 = (($1818) + -131070)|0;
      $1820 = (($1821) + ($1819<<2)|0);
      $storemerge38$in = $1820;
     } else {
      $1811 = (($1810) + 4|0);
      $storemerge38$in = $1811;
     }
     $storemerge38 = $storemerge38$in;
     HEAP32[$34>>2] = $storemerge38;
     $1822 = HEAP32[$32>>2]|0;
     $base$0$be = $1822;
     break;
    }
    case 31:  {
     $1733 = $39 >>> 23;
     $1734 = $1733 & 256;
     $1735 = ($1734|0)==(0);
     if ($1735) {
      $1738 = (($base$1) + ($1733<<4)|0);
      $1746 = $1738;
     } else {
      $1736 = $1733 & 255;
      $1737 = (($31) + ($1736<<4)|0);
      $1746 = $1737;
     }
     $1739 = $39 >>> 14;
     $1740 = $1739 & 256;
     $1741 = ($1740|0)==(0);
     if ($1741) {
      $1744 = $1739 & 511;
      $1745 = (($base$1) + ($1744<<4)|0);
      $1747 = $1745;
     } else {
      $1742 = $1739 & 255;
      $1743 = (($31) + ($1742<<4)|0);
      $1747 = $1743;
     }
     $1748 = (_luaV_equalobj($L,$1746,$1747)|0);
     $1749 = ($1748|0)==($50|0);
     $1750 = HEAP32[$34>>2]|0;
     if ($1749) {
      $1752 = HEAP32[$1750>>2]|0;
      $1753 = $1752 >>> 6;
      $1754 = $1753 & 255;
      $1755 = ($1754|0)==(0);
      if ($1755) {
       $1761 = $1750;
      } else {
       $1756 = HEAP32[$32>>2]|0;
       $$sum44 = (($1754) + -1)|0;
       $1757 = (($1756) + ($$sum44<<4)|0);
       _luaF_close($L,$1757);
       $$pre742 = HEAP32[$34>>2]|0;
       $1761 = $$pre742;
      }
      $1758 = $1752 >>> 14;
      $1759 = (($1758) + -131070)|0;
      $1760 = (($1761) + ($1759<<2)|0);
      $storemerge46$in = $1760;
     } else {
      $1751 = (($1750) + 4|0);
      $storemerge46$in = $1751;
     }
     $storemerge46 = $storemerge46$in;
     HEAP32[$34>>2] = $storemerge46;
     $1762 = HEAP32[$32>>2]|0;
     $base$0$be = $1762;
     break;
    }
    case 32:  {
     $1763 = $39 >>> 23;
     $1764 = $1763 & 256;
     $1765 = ($1764|0)==(0);
     if ($1765) {
      $1768 = (($base$1) + ($1763<<4)|0);
      $1776 = $1768;
     } else {
      $1766 = $1763 & 255;
      $1767 = (($31) + ($1766<<4)|0);
      $1776 = $1767;
     }
     $1769 = $39 >>> 14;
     $1770 = $1769 & 256;
     $1771 = ($1770|0)==(0);
     if ($1771) {
      $1774 = $1769 & 511;
      $1775 = (($base$1) + ($1774<<4)|0);
      $1777 = $1775;
     } else {
      $1772 = $1769 & 255;
      $1773 = (($31) + ($1772<<4)|0);
      $1777 = $1773;
     }
     $1778 = (_luaV_lessthan($L,$1776,$1777)|0);
     $1779 = ($1778|0)==($50|0);
     $1780 = HEAP32[$34>>2]|0;
     if ($1779) {
      $1782 = HEAP32[$1780>>2]|0;
      $1783 = $1782 >>> 6;
      $1784 = $1783 & 255;
      $1785 = ($1784|0)==(0);
      if ($1785) {
       $1791 = $1780;
      } else {
       $1786 = HEAP32[$32>>2]|0;
       $$sum40 = (($1784) + -1)|0;
       $1787 = (($1786) + ($$sum40<<4)|0);
       _luaF_close($L,$1787);
       $$pre743 = HEAP32[$34>>2]|0;
       $1791 = $$pre743;
      }
      $1788 = $1782 >>> 14;
      $1789 = (($1788) + -131070)|0;
      $1790 = (($1791) + ($1789<<2)|0);
      $storemerge42$in = $1790;
     } else {
      $1781 = (($1780) + 4|0);
      $storemerge42$in = $1781;
     }
     $storemerge42 = $storemerge42$in;
     HEAP32[$34>>2] = $storemerge42;
     $1792 = HEAP32[$32>>2]|0;
     $base$0$be = $1792;
     break;
    }
    case 27:  {
     $1693 = $39 >>> 23;
     $1694 = ((($base$1) + ($1693<<4)|0) + 8|0);
     $1695 = HEAP32[$1694>>2]|0;
     $1696 = ($1695|0)==(0);
     if ($1696) {
      $1702 = 1;
     } else {
      $1697 = ($1695|0)==(1);
      if ($1697) {
       $1698 = (($base$1) + ($1693<<4)|0);
       $1699 = HEAP32[$1698>>2]|0;
       $1700 = ($1699|0)==(0);
       $1702 = $1700;
      } else {
       $1702 = 0;
      }
     }
     $1701 = $1702&1;
     HEAP32[$51>>2] = $1701;
     $1703 = ((($base$1) + ($50<<4)|0) + 8|0);
     HEAP32[$1703>>2] = 1;
     $base$0$be = $base$1;
     break;
    }
    case 28:  {
     $1704 = $39 >>> 23;
     $1705 = (($base$1) + ($1704<<4)|0);
     _luaV_objlen($L,$51,$1705);
     $1706 = HEAP32[$32>>2]|0;
     $base$0$be = $1706;
     break;
    }
    case 29:  {
     $1707 = $39 >>> 23;
     $1708 = $39 >>> 14;
     $1709 = $1708 & 511;
     $$sum49 = (($1709) + 1)|0;
     $1710 = (($base$1) + ($$sum49<<4)|0);
     HEAP32[$4>>2] = $1710;
     $1711 = (1 - ($1707))|0;
     $1712 = (($1711) + ($1709))|0;
     _luaV_concat($L,$1712);
     $1713 = HEAP32[$32>>2]|0;
     $1714 = (($1713) + ($50<<4)|0);
     $1715 = (($1713) + ($1707<<4)|0);
     ;HEAP32[$1714+0>>2]=HEAP32[$1715+0>>2]|0;HEAP32[$1714+4>>2]=HEAP32[$1715+4>>2]|0;HEAP32[$1714+8>>2]=HEAP32[$1715+8>>2]|0;HEAP32[$1714+12>>2]=HEAP32[$1715+12>>2]|0;
     $1716 = HEAP32[$3>>2]|0;
     $1717 = (($1716) + 12|0);
     $1718 = HEAP32[$1717>>2]|0;
     $1719 = ($1718|0)>(0);
     if ($1719) {
      $1720 = ($50>>>0)<($1707>>>0);
      if ($1720) {
       $1722 = $1715;
      } else {
       $$sum50 = (($50) + 1)|0;
       $1721 = (($1713) + ($$sum50<<4)|0);
       $1722 = $1721;
      }
      HEAP32[$4>>2] = $1722;
      _luaC_step($L);
      $1723 = HEAP32[$36>>2]|0;
      HEAP32[$4>>2] = $1723;
      $1725 = $1723;
     } else {
      $$pre741 = HEAP32[$36>>2]|0;
      $1725 = $$pre741;
     }
     $1724 = HEAP32[$32>>2]|0;
     HEAP32[$4>>2] = $1725;
     $base$0$be = $1724;
     break;
    }
    case 30:  {
     $1726 = ($50|0)==(0);
     if (!($1726)) {
      $1727 = HEAP32[$32>>2]|0;
      $$sum48 = (($50) + -1)|0;
      $1728 = (($1727) + ($$sum48<<4)|0);
      _luaF_close($L,$1728);
     }
     $1729 = $39 >>> 14;
     $1730 = (($1729) + -131071)|0;
     $1731 = HEAP32[$34>>2]|0;
     $1732 = (($1731) + ($1730<<2)|0);
     $$c47 = $1732;
     HEAP32[$34>>2] = $$c47;
     $base$0$be = $base$1;
     break;
    }
    case 37:  {
     $1890 = $39 >>> 23;
     $1891 = ($1890|0)==(0);
     if (!($1891)) {
      $$sum27 = (($50) + ($1890))|0;
      $1892 = (($base$1) + ($$sum27<<4)|0);
      HEAP32[$4>>2] = $1892;
     }
     $1893 = (_luaD_precall($L,$51,-1)|0);
     $1894 = ($1893|0)==(0);
     if ($1894) {
      label = 601;
      break L3;
     }
     $1895 = HEAP32[$32>>2]|0;
     $base$0$be = $1895;
     break;
    }
    case 39:  {
     $1965 = ((($base$1) + ($50<<4)|0) + 8|0);
     $1966 = HEAP32[$1965>>2]|0;
     $1967 = ($1966|0)==(19);
     $$sum18 = (($50) + 2)|0;
     $1968 = (($base$1) + ($$sum18<<4)|0);
     if ($1967) {
      $1969 = $1968;
      $1970 = $1969;
      $1971 = HEAP32[$1970>>2]|0;
      $1972 = (($1969) + 4)|0;
      $1973 = $1972;
      $1974 = HEAP32[$1973>>2]|0;
      $1975 = $51;
      $1976 = $1975;
      $1977 = HEAP32[$1976>>2]|0;
      $1978 = (($1975) + 4)|0;
      $1979 = $1978;
      $1980 = HEAP32[$1979>>2]|0;
      $1981 = (_i64Add(($1977|0),($1980|0),($1971|0),($1974|0))|0);
      $1982 = tempRet0;
      $$sum22 = (($50) + 1)|0;
      $1983 = (($base$1) + ($$sum22<<4)|0);
      $1984 = $1983;
      $1985 = $1984;
      $1986 = HEAP32[$1985>>2]|0;
      $1987 = (($1984) + 4)|0;
      $1988 = $1987;
      $1989 = HEAP32[$1988>>2]|0;
      $1990 = ($1974|0)>(0);
      $1991 = ($1971>>>0)>(0);
      $1992 = ($1974|0)==(0);
      $1993 = $1992 & $1991;
      $1994 = $1990 | $1993;
      if ($1994) {
       $1995 = ($1982|0)>($1989|0);
       $1996 = ($1981>>>0)>($1986>>>0);
       $1997 = ($1982|0)==($1989|0);
       $1998 = $1997 & $1996;
       $1999 = $1995 | $1998;
       if ($1999) {
        $base$0$be = $base$1;
        break L9;
       }
      } else {
       $2000 = ($1989|0)>($1982|0);
       $2001 = ($1986>>>0)>($1981>>>0);
       $2002 = ($1989|0)==($1982|0);
       $2003 = $2002 & $2001;
       $2004 = $2000 | $2003;
       if ($2004) {
        $base$0$be = $base$1;
        break L9;
       }
      }
      $2005 = $39 >>> 14;
      $2006 = (($2005) + -131071)|0;
      $2007 = HEAP32[$34>>2]|0;
      $2008 = (($2007) + ($2006<<2)|0);
      $$c23 = $2008;
      HEAP32[$34>>2] = $$c23;
      $2009 = $51;
      $2010 = $2009;
      HEAP32[$2010>>2] = $1981;
      $2011 = (($2009) + 4)|0;
      $2012 = $2011;
      HEAP32[$2012>>2] = $1982;
      $$sum24 = (($50) + 3)|0;
      $2013 = (($base$1) + ($$sum24<<4)|0);
      $2014 = $2013;
      $2015 = $2014;
      HEAP32[$2015>>2] = $1981;
      $2016 = (($2014) + 4)|0;
      $2017 = $2016;
      HEAP32[$2017>>2] = $1982;
      $2018 = ((($base$1) + ($$sum24<<4)|0) + 8|0);
      HEAP32[$2018>>2] = 19;
      $base$0$be = $base$1;
      break L9;
     } else {
      $2019 = +HEAPF64[$1968>>3];
      $2020 = +HEAPF64[$51>>3];
      $2021 = $2019 + $2020;
      $$sum19 = (($50) + 1)|0;
      $2022 = (($base$1) + ($$sum19<<4)|0);
      $2023 = +HEAPF64[$2022>>3];
      $2024 = $2019 > 0.0;
      if ($2024) {
       $2025 = !($2021 <= $2023);
       if ($2025) {
        $base$0$be = $base$1;
        break L9;
       }
      } else {
       $2026 = !($2023 <= $2021);
       if ($2026) {
        $base$0$be = $base$1;
        break L9;
       }
      }
      $2027 = $39 >>> 14;
      $2028 = (($2027) + -131071)|0;
      $2029 = HEAP32[$34>>2]|0;
      $2030 = (($2029) + ($2028<<2)|0);
      $$c20 = $2030;
      HEAP32[$34>>2] = $$c20;
      HEAPF64[$51>>3] = $2021;
      $$sum21 = (($50) + 3)|0;
      $2031 = (($base$1) + ($$sum21<<4)|0);
      HEAPF64[$2031>>3] = $2021;
      $2032 = ((($base$1) + ($$sum21<<4)|0) + 8|0);
      HEAP32[$2032>>2] = 3;
      $base$0$be = $base$1;
      break L9;
     }
     break;
    }
    case 38:  {
     $$lcssa = $39;$$lcssa809 = $51;$base$1$lcssa = $base$1;
     label = 608;
     break L3;
     break;
    }
    case 34:  {
     $1823 = $39 & 8372224;
     $1824 = ($1823|0)==(0);
     $1825 = ((($base$1) + ($50<<4)|0) + 8|0);
     $1826 = HEAP32[$1825>>2]|0;
     $1827 = ($1826|0)==(0);
     if ($1824) {
      if (!($1827)) {
       $1831 = ($1826|0)==(1);
       if ($1831) {
        $1832 = HEAP32[$51>>2]|0;
        $1833 = ($1832|0)==(0);
        if (!($1833)) {
         label = 574;
        }
       } else {
        label = 574;
       }
      }
     } else {
      if ($1827) {
       label = 574;
      } else {
       $1828 = ($1826|0)==(1);
       if ($1828) {
        $1829 = HEAP32[$51>>2]|0;
        $1830 = ($1829|0)==(0);
        if ($1830) {
         label = 574;
        }
       }
      }
     }
     if ((label|0) == 574) {
      label = 0;
      $1834 = HEAP32[$34>>2]|0;
      $1835 = (($1834) + 4|0);
      $$c32 = $1835;
      HEAP32[$34>>2] = $$c32;
      $base$0$be = $base$1;
      break L9;
     }
     $1836 = HEAP32[$34>>2]|0;
     $1837 = HEAP32[$1836>>2]|0;
     $1838 = $1837 >>> 6;
     $1839 = $1838 & 255;
     $1840 = ($1839|0)==(0);
     if ($1840) {
      $1846 = $1836;
     } else {
      $1841 = HEAP32[$32>>2]|0;
      $$sum34 = (($1839) + -1)|0;
      $1842 = (($1841) + ($$sum34<<4)|0);
      _luaF_close($L,$1842);
      $$pre745 = HEAP32[$34>>2]|0;
      $1846 = $$pre745;
     }
     $1843 = $1837 >>> 14;
     $1844 = (($1843) + -131070)|0;
     $1845 = (($1846) + ($1844<<2)|0);
     $$c33 = $1845;
     HEAP32[$34>>2] = $$c33;
     $base$0$be = $base$1;
     break;
    }
    case 36:  {
     $1873 = $39 >>> 23;
     $1874 = $39 >>> 14;
     $1875 = $1874 & 511;
     $1876 = (($1875) + -1)|0;
     $1877 = ($1873|0)==(0);
     if (!($1877)) {
      $$sum28 = (($50) + ($1873))|0;
      $1878 = (($base$1) + ($$sum28<<4)|0);
      HEAP32[$4>>2] = $1878;
     }
     $1879 = (_luaD_precall($L,$51,$1876)|0);
     $1880 = ($1879|0)==(0);
     if ($1880) {
      label = 595;
      break L3;
     }
     $1881 = ($1875|0)==(0);
     if (!($1881)) {
      $1882 = HEAP32[$36>>2]|0;
      HEAP32[$4>>2] = $1882;
     }
     $1883 = HEAP32[$32>>2]|0;
     $base$0$be = $1883;
     break;
    }
    case 35:  {
     $1847 = $39 >>> 23;
     $1848 = (($base$1) + ($1847<<4)|0);
     $1849 = $39 & 8372224;
     $1850 = ($1849|0)==(0);
     $1851 = ((($base$1) + ($1847<<4)|0) + 8|0);
     $1852 = HEAP32[$1851>>2]|0;
     $1853 = ($1852|0)==(0);
     if ($1850) {
      if (!($1853)) {
       $1857 = ($1852|0)==(1);
       if ($1857) {
        $1858 = HEAP32[$1848>>2]|0;
        $1859 = ($1858|0)==(0);
        if (!($1859)) {
         label = 585;
        }
       } else {
        label = 585;
       }
      }
     } else {
      if ($1853) {
       label = 585;
      } else {
       $1854 = ($1852|0)==(1);
       if ($1854) {
        $1855 = HEAP32[$1848>>2]|0;
        $1856 = ($1855|0)==(0);
        if ($1856) {
         label = 585;
        }
       }
      }
     }
     if ((label|0) == 585) {
      label = 0;
      $1860 = HEAP32[$34>>2]|0;
      $1861 = (($1860) + 4|0);
      $$c29 = $1861;
      HEAP32[$34>>2] = $$c29;
      $base$0$be = $base$1;
      break L9;
     }
     ;HEAP32[$51+0>>2]=HEAP32[$1848+0>>2]|0;HEAP32[$51+4>>2]=HEAP32[$1848+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$1848+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[$1848+12>>2]|0;
     $1862 = HEAP32[$34>>2]|0;
     $1863 = HEAP32[$1862>>2]|0;
     $1864 = $1863 >>> 6;
     $1865 = $1864 & 255;
     $1866 = ($1865|0)==(0);
     if ($1866) {
      $1872 = $1862;
     } else {
      $1867 = HEAP32[$32>>2]|0;
      $$sum31 = (($1865) + -1)|0;
      $1868 = (($1867) + ($$sum31<<4)|0);
      _luaF_close($L,$1868);
      $$pre746 = HEAP32[$34>>2]|0;
      $1872 = $$pre746;
     }
     $1869 = $1863 >>> 14;
     $1870 = (($1869) + -131070)|0;
     $1871 = (($1872) + ($1870<<2)|0);
     $$c30 = $1871;
     HEAP32[$34>>2] = $$c30;
     $base$0$be = $base$1;
     break;
    }
    case 40:  {
     $$sum15 = (($50) + 1)|0;
     $2033 = (($base$1) + ($$sum15<<4)|0);
     $$sum16 = (($50) + 2)|0;
     $2034 = (($base$1) + ($$sum16<<4)|0);
     $2035 = ((($base$1) + ($50<<4)|0) + 8|0);
     $2036 = HEAP32[$2035>>2]|0;
     $2037 = ($2036|0)==(19);
     L792: do {
      if ($2037) {
       $2038 = ((($base$1) + ($$sum16<<4)|0) + 8|0);
       $2039 = HEAP32[$2038>>2]|0;
       $2040 = ($2039|0)==(19);
       if ($2040) {
        $2041 = $2034;
        $2042 = $2041;
        $2043 = HEAP32[$2042>>2]|0;
        $2044 = (($2041) + 4)|0;
        $2045 = $2044;
        $2046 = HEAP32[$2045>>2]|0;
        $2047 = ($2046|0)<(0);
        $$02$i$i = $2033;
        while(1) {
         $2048 = (($$02$i$i) + 8|0);
         $2049 = HEAP32[$2048>>2]|0;
         if ((($2049|0) == 19)) {
          $$02$i$i$lcssa771 = $$02$i$i;
          label = 634;
          break;
         } else if ((($2049|0) == 3)) {
          $$02$i$i$lcssa = $$02$i$i;
          label = 630;
          break;
         }
         $2063 = $2049 & 15;
         $2064 = ($2063|0)==(4);
         if (!($2064)) {
          label = 640;
          break;
         }
         $2065 = HEAP32[$$02$i$i>>2]|0;
         $2066 = (($2065) + 16|0);
         $2067 = (_luaO_str2num($2066,$v$i$i)|0);
         $2068 = HEAP32[$$02$i$i>>2]|0;
         $2069 = (($2068) + 4|0);
         $2070 = HEAP8[$2069>>0]|0;
         $2071 = ($2070<<24>>24)==(4);
         if ($2071) {
          $2072 = (($2068) + 7|0);
          $2073 = HEAP8[$2072>>0]|0;
          $2074 = $2073&255;
          $2078 = $2074;
         } else {
          $2075 = (($2068) + 12|0);
          $2076 = HEAP32[$2075>>2]|0;
          $2078 = $2076;
         }
         $2077 = (($2078) + 1)|0;
         $2079 = ($2067|0)==($2077|0);
         if ($2079) {
          $$02$i$i = $v$i$i;
         } else {
          label = 640;
          break;
         }
        }
        if ((label|0) == 630) {
         label = 0;
         $2050 = +HEAPF64[$$02$i$i$lcssa>>3];
         $2051 = (+Math_floor((+$2050)));
         $$not$i = $2050 == $2051;
         $$not7$i = $2047 ^ 1;
         $brmerge$i = $$not$i | $$not7$i;
         if ($brmerge$i) {
          $f$0$i$i = $2051;
         } else {
          $2052 = $2051 + 1.0;
          $f$0$i$i = $2052;
         }
         $2053 = $f$0$i$i >= -9.2233720368547758E+18;
         $2054 = $f$0$i$i < 9.2233720368547758E+18;
         $or$cond$i$i = $2053 & $2054;
         if ($or$cond$i$i) {
          $2055 = (~~$f$0$i$i)>>>0;
          $2056 = +Math_abs($f$0$i$i) >= 1.0 ? $f$0$i$i > 0.0 ? (~~+Math_min(+Math_floor($f$0$i$i / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($f$0$i$i - +(~~$f$0$i$i >>> 0)) / 4294967296.0) >>> 0 : 0;
          $2430 = $2055;$2431 = $2056;
          label = 656;
         } else {
          label = 641;
         }
        }
        else if ((label|0) == 634) {
         label = 0;
         $2057 = $$02$i$i$lcssa771;
         $2058 = $2057;
         $2059 = HEAP32[$2058>>2]|0;
         $2060 = (($2057) + 4)|0;
         $2061 = $2060;
         $2062 = HEAP32[$2061>>2]|0;
         $2430 = $2059;$2431 = $2062;
         label = 656;
        }
        else if ((label|0) == 640) {
         label = 0;
         label = 641;
        }
        do {
         if ((label|0) == 641) {
          label = 0;
          $2080 = ((($base$1) + ($$sum15<<4)|0) + 8|0);
          $2081 = HEAP32[$2080>>2]|0;
          $2082 = ($2081|0)==(3);
          do {
           if ($2082) {
            $2083 = +HEAPF64[$2033>>3];
            $2120 = $2083;
           } else {
            $2084 = ($2081|0)==(19);
            if ($2084) {
             $2085 = $2033;
             $2086 = $2085;
             $2087 = HEAP32[$2086>>2]|0;
             $2088 = (($2085) + 4)|0;
             $2089 = $2088;
             $2090 = HEAP32[$2089>>2]|0;
             $2091 = (+($2087>>>0)) + (4294967296.0*(+($2090|0)));
             $2120 = $2091;
             break;
            }
            $2092 = $2081 & 15;
            $2093 = ($2092|0)==(4);
            if (!($2093)) {
             label = 658;
             break L792;
            }
            $2094 = HEAP32[$2033>>2]|0;
            $2095 = (($2094) + 16|0);
            $2096 = (_luaO_str2num($2095,$v$i1$i)|0);
            $2097 = HEAP32[$2033>>2]|0;
            $2098 = (($2097) + 4|0);
            $2099 = HEAP8[$2098>>0]|0;
            $2100 = ($2099<<24>>24)==(4);
            if ($2100) {
             $2101 = (($2097) + 7|0);
             $2102 = HEAP8[$2101>>0]|0;
             $2103 = $2102&255;
             $2107 = $2103;
            } else {
             $2104 = (($2097) + 12|0);
             $2105 = HEAP32[$2104>>2]|0;
             $2107 = $2105;
            }
            $2106 = (($2107) + 1)|0;
            $2108 = ($2096|0)==($2106|0);
            if (!($2108)) {
             label = 658;
             break L792;
            }
            $2109 = HEAP32[$20>>2]|0;
            $2110 = ($2109|0)==(19);
            if ($2110) {
             $2111 = $v$i1$i;
             $2112 = $2111;
             $2113 = HEAP32[$2112>>2]|0;
             $2114 = (($2111) + 4)|0;
             $2115 = $2114;
             $2116 = HEAP32[$2115>>2]|0;
             $2117 = (+($2113>>>0)) + (4294967296.0*(+($2116|0)));
             $2120 = $2117;
             break;
            } else {
             $2118 = +HEAPF64[$v$i1$i>>3];
             $2120 = $2118;
             break;
            }
           }
          } while(0);
          $2119 = $2120 > 0.0;
          if ($2119) {
           if ($2047) {
            $$pre$phiZ2D = $2080;$2134 = -1;$2137 = 2147483647;$2144 = 0;$2145 = 0;
            break;
           } else {
            $2430 = -1;$2431 = 2147483647;
            label = 656;
            break;
           }
          } else {
           $2121 = ($2046|0)>(-1);
           $2122 = ($2043>>>0)>(4294967295);
           $2123 = ($2046|0)==(-1);
           $2124 = $2123 & $2122;
           $2125 = $2121 | $2124;
           if ($2125) {
            $$pre$phiZ2D = $2080;$2134 = 0;$2137 = -2147483648;$2144 = 0;$2145 = 0;
            break;
           } else {
            $2430 = 0;$2431 = -2147483648;
            label = 656;
            break;
           }
          }
         }
        } while(0);
        if ((label|0) == 656) {
         label = 0;
         $2126 = $51;
         $2127 = $2126;
         $2128 = HEAP32[$2127>>2]|0;
         $2129 = (($2126) + 4)|0;
         $2130 = $2129;
         $2131 = HEAP32[$2130>>2]|0;
         $$pre751 = ((($base$1) + ($$sum15<<4)|0) + 8|0);
         $$pre$phiZ2D = $$pre751;$2134 = $2430;$2137 = $2431;$2144 = $2128;$2145 = $2131;
        }
        $2132 = $2033;
        $2133 = $2132;
        HEAP32[$2133>>2] = $2134;
        $2135 = (($2132) + 4)|0;
        $2136 = $2135;
        HEAP32[$2136>>2] = $2137;
        HEAP32[$$pre$phiZ2D>>2] = 19;
        $2138 = $2034;
        $2139 = $2138;
        $2140 = HEAP32[$2139>>2]|0;
        $2141 = (($2138) + 4)|0;
        $2142 = $2141;
        $2143 = HEAP32[$2142>>2]|0;
        $2146 = (_i64Subtract(($2144|0),($2145|0),($2140|0),($2143|0))|0);
        $2147 = tempRet0;
        $2148 = $51;
        $2149 = $2148;
        HEAP32[$2149>>2] = $2146;
        $2150 = (($2148) + 4)|0;
        $2151 = $2150;
        HEAP32[$2151>>2] = $2147;
        $storemerge = 19;
       } else {
        label = 658;
       }
      } else {
       label = 658;
      }
     } while(0);
     if ((label|0) == 658) {
      label = 0;
      $2152 = ((($base$1) + ($$sum15<<4)|0) + 8|0);
      $2153 = HEAP32[$2152>>2]|0;
      $2154 = ($2153|0)==(3);
      do {
       if ($2154) {
        $2155 = +HEAPF64[$2033>>3];
        $2191 = $2155;
       } else {
        $2156 = ($2153|0)==(19);
        if ($2156) {
         $2157 = $2033;
         $2158 = $2157;
         $2159 = HEAP32[$2158>>2]|0;
         $2160 = (($2157) + 4)|0;
         $2161 = $2160;
         $2162 = HEAP32[$2161>>2]|0;
         $2163 = (+($2159>>>0)) + (4294967296.0*(+($2162|0)));
         $2191 = $2163;
         break;
        }
        $2164 = $2153 & 15;
        $2165 = ($2164|0)==(4);
        if (!($2165)) {
         label = 670;
         break L1;
        }
        $2166 = HEAP32[$2033>>2]|0;
        $2167 = (($2166) + 16|0);
        $2168 = (_luaO_str2num($2167,$v$i159)|0);
        $2169 = HEAP32[$2033>>2]|0;
        $2170 = (($2169) + 4|0);
        $2171 = HEAP8[$2170>>0]|0;
        $2172 = ($2171<<24>>24)==(4);
        if ($2172) {
         $2173 = (($2169) + 7|0);
         $2174 = HEAP8[$2173>>0]|0;
         $2175 = $2174&255;
         $2179 = $2175;
        } else {
         $2176 = (($2169) + 12|0);
         $2177 = HEAP32[$2176>>2]|0;
         $2179 = $2177;
        }
        $2178 = (($2179) + 1)|0;
        $2180 = ($2168|0)==($2178|0);
        if (!($2180)) {
         label = 670;
         break L1;
        }
        $2181 = HEAP32[$23>>2]|0;
        $2182 = ($2181|0)==(19);
        if ($2182) {
         $2183 = $v$i159;
         $2184 = $2183;
         $2185 = HEAP32[$2184>>2]|0;
         $2186 = (($2183) + 4)|0;
         $2187 = $2186;
         $2188 = HEAP32[$2187>>2]|0;
         $2189 = (+($2185>>>0)) + (4294967296.0*(+($2188|0)));
         $2191 = $2189;
         break;
        } else {
         $2190 = +HEAPF64[$v$i159>>3];
         $2191 = $2190;
         break;
        }
       }
      } while(0);
      HEAPF64[$2033>>3] = $2191;
      HEAP32[$2152>>2] = 3;
      $2192 = ((($base$1) + ($$sum16<<4)|0) + 8|0);
      $2193 = HEAP32[$2192>>2]|0;
      $2194 = ($2193|0)==(3);
      do {
       if ($2194) {
        $2195 = +HEAPF64[$2034>>3];
        $2231 = $2195;
       } else {
        $2196 = ($2193|0)==(19);
        if ($2196) {
         $2197 = $2034;
         $2198 = $2197;
         $2199 = HEAP32[$2198>>2]|0;
         $2200 = (($2197) + 4)|0;
         $2201 = $2200;
         $2202 = HEAP32[$2201>>2]|0;
         $2203 = (+($2199>>>0)) + (4294967296.0*(+($2202|0)));
         $2231 = $2203;
         break;
        }
        $2204 = $2193 & 15;
        $2205 = ($2204|0)==(4);
        if (!($2205)) {
         label = 683;
         break L1;
        }
        $2206 = HEAP32[$2034>>2]|0;
        $2207 = (($2206) + 16|0);
        $2208 = (_luaO_str2num($2207,$v$i162)|0);
        $2209 = HEAP32[$2034>>2]|0;
        $2210 = (($2209) + 4|0);
        $2211 = HEAP8[$2210>>0]|0;
        $2212 = ($2211<<24>>24)==(4);
        if ($2212) {
         $2213 = (($2209) + 7|0);
         $2214 = HEAP8[$2213>>0]|0;
         $2215 = $2214&255;
         $2219 = $2215;
        } else {
         $2216 = (($2209) + 12|0);
         $2217 = HEAP32[$2216>>2]|0;
         $2219 = $2217;
        }
        $2218 = (($2219) + 1)|0;
        $2220 = ($2208|0)==($2218|0);
        if (!($2220)) {
         label = 683;
         break L1;
        }
        $2221 = HEAP32[$22>>2]|0;
        $2222 = ($2221|0)==(19);
        if ($2222) {
         $2223 = $v$i162;
         $2224 = $2223;
         $2225 = HEAP32[$2224>>2]|0;
         $2226 = (($2223) + 4)|0;
         $2227 = $2226;
         $2228 = HEAP32[$2227>>2]|0;
         $2229 = (+($2225>>>0)) + (4294967296.0*(+($2228|0)));
         $2231 = $2229;
         break;
        } else {
         $2230 = +HEAPF64[$v$i162>>3];
         $2231 = $2230;
         break;
        }
       }
      } while(0);
      HEAPF64[$2034>>3] = $2231;
      HEAP32[$2192>>2] = 3;
      $2232 = HEAP32[$2035>>2]|0;
      $2233 = ($2232|0)==(3);
      do {
       if ($2233) {
        $2234 = +HEAPF64[$51>>3];
        $2271 = $2234;
       } else {
        $2235 = ($2232|0)==(19);
        if ($2235) {
         $2236 = $51;
         $2237 = $2236;
         $2238 = HEAP32[$2237>>2]|0;
         $2239 = (($2236) + 4)|0;
         $2240 = $2239;
         $2241 = HEAP32[$2240>>2]|0;
         $2242 = (+($2238>>>0)) + (4294967296.0*(+($2241|0)));
         $2271 = $2242;
         break;
        }
        $2243 = $2232 & 15;
        $2244 = ($2243|0)==(4);
        if (!($2244)) {
         label = 696;
         break L1;
        }
        $2245 = HEAP32[$51>>2]|0;
        $2246 = (($2245) + 16|0);
        $2247 = (_luaO_str2num($2246,$v$i165)|0);
        $2248 = HEAP32[$51>>2]|0;
        $2249 = (($2248) + 4|0);
        $2250 = HEAP8[$2249>>0]|0;
        $2251 = ($2250<<24>>24)==(4);
        if ($2251) {
         $2252 = (($2248) + 7|0);
         $2253 = HEAP8[$2252>>0]|0;
         $2254 = $2253&255;
         $2258 = $2254;
        } else {
         $2255 = (($2248) + 12|0);
         $2256 = HEAP32[$2255>>2]|0;
         $2258 = $2256;
        }
        $2257 = (($2258) + 1)|0;
        $2259 = ($2247|0)==($2257|0);
        if (!($2259)) {
         label = 696;
         break L1;
        }
        $2260 = HEAP32[$21>>2]|0;
        $2261 = ($2260|0)==(19);
        if ($2261) {
         $2262 = $v$i165;
         $2263 = $2262;
         $2264 = HEAP32[$2263>>2]|0;
         $2265 = (($2262) + 4)|0;
         $2266 = $2265;
         $2267 = HEAP32[$2266>>2]|0;
         $2268 = (+($2264>>>0)) + (4294967296.0*(+($2267|0)));
         $2271 = $2268;
         break;
        } else {
         $2269 = +HEAPF64[$v$i165>>3];
         $2271 = $2269;
         break;
        }
       }
      } while(0);
      $2270 = $2271 - $2231;
      HEAPF64[$51>>3] = $2270;
      $storemerge = 3;
     }
     HEAP32[$2035>>2] = $storemerge;
     $2272 = $39 >>> 14;
     $2273 = (($2272) + -131071)|0;
     $2274 = HEAP32[$34>>2]|0;
     $2275 = (($2274) + ($2273<<2)|0);
     $$c17 = $2275;
     HEAP32[$34>>2] = $$c17;
     $base$0$be = $base$1;
     break;
    }
    case 44:  {
     $2341 = $39 >>> 14;
     $2342 = HEAP32[$28>>2]|0;
     $2343 = (($2342) + 52|0);
     $2344 = HEAP32[$2343>>2]|0;
     $2345 = (($2344) + ($2341<<2)|0);
     $2346 = HEAP32[$2345>>2]|0;
     $2347 = (($2346) + 68|0);
     $2348 = HEAP32[$2347>>2]|0;
     $2349 = ($2348|0)==(0|0);
     $$phi$trans$insert747 = (($2346) + 12|0);
     $$pre748 = HEAP32[$$phi$trans$insert747>>2]|0;
     $$phi$trans$insert749 = (($2346) + 64|0);
     $$pre750 = HEAP32[$$phi$trans$insert749>>2]|0;
     L887: do {
      if ($2349) {
       label = 726;
      } else {
       $2350 = ($$pre748|0)>(0);
       do {
        if ($2350) {
         $i$01$i = 0;
         while(1) {
          $2353 = ((($$pre750) + ($i$01$i<<3)|0) + 4|0);
          $2354 = HEAP8[$2353>>0]|0;
          $2355 = ($2354<<24>>24)==(0);
          $2356 = ((($$pre750) + ($i$01$i<<3)|0) + 5|0);
          $2357 = HEAP8[$2356>>0]|0;
          $2358 = $2357&255;
          if ($2355) {
           $2360 = (($35) + ($2358<<2)|0);
           $2361 = HEAP32[$2360>>2]|0;
           $2362 = HEAP32[$2361>>2]|0;
           $2367 = $2362;
          } else {
           $2359 = (($base$1) + ($2358<<4)|0);
           $2367 = $2359;
          }
          $2363 = ((($2348) + ($i$01$i<<2)|0) + 16|0);
          $2364 = HEAP32[$2363>>2]|0;
          $2365 = HEAP32[$2364>>2]|0;
          $2366 = ($2365|0)==($2367|0);
          $2351 = (($i$01$i) + 1)|0;
          if (!($2366)) {
           label = 725;
           break;
          }
          $2352 = ($2351|0)<($$pre748|0);
          if ($2352) {
           $i$01$i = $2351;
          } else {
           label = 735;
           break;
          }
         }
         if ((label|0) == 725) {
          label = 0;
          label = 726;
          break L887;
         }
         else if ((label|0) == 735) {
          label = 0;
          break;
         }
        }
       } while(0);
       HEAP32[$51>>2] = $2348;
       $2391 = ((($base$1) + ($50<<4)|0) + 8|0);
       HEAP32[$2391>>2] = 70;
      }
     } while(0);
     if ((label|0) == 726) {
      label = 0;
      $2368 = (_luaF_newLclosure($L,$$pre748)|0);
      $2369 = (($2368) + 12|0);
      HEAP32[$2369>>2] = $2346;
      HEAP32[$51>>2] = $2368;
      $2370 = ((($base$1) + ($50<<4)|0) + 8|0);
      HEAP32[$2370>>2] = 70;
      $2371 = ($$pre748|0)>(0);
      if ($2371) {
       $i$01$i170 = 0;
       while(1) {
        $2372 = ((($$pre750) + ($i$01$i170<<3)|0) + 4|0);
        $2373 = HEAP8[$2372>>0]|0;
        $2374 = ($2373<<24>>24)==(0);
        $2375 = ((($$pre750) + ($i$01$i170<<3)|0) + 5|0);
        $2376 = HEAP8[$2375>>0]|0;
        $2377 = $2376&255;
        if ($2374) {
         $2380 = (($35) + ($2377<<2)|0);
         $2381 = HEAP32[$2380>>2]|0;
         $$sink$i = $2381;
        } else {
         $2378 = (($base$1) + ($2377<<4)|0);
         $2379 = (_luaF_findupval($L,$2378)|0);
         $$sink$i = $2379;
        }
        $2382 = ((($2368) + ($i$01$i170<<2)|0) + 16|0);
        HEAP32[$2382>>2] = $$sink$i;
        $2383 = (($$sink$i) + 4|0);
        $2384 = HEAP32[$2383>>2]|0;
        $2385 = (($2384) + 1)|0;
        HEAP32[$2383>>2] = $2385;
        $2386 = (($i$01$i170) + 1)|0;
        $exitcond$i = ($2386|0)==($$pre748|0);
        if ($exitcond$i) {
         break;
        } else {
         $i$01$i170 = $2386;
        }
       }
      }
      $2387 = (($2346) + 5|0);
      $2388 = HEAP8[$2387>>0]|0;
      $2389 = $2388 & 4;
      $2390 = ($2389<<24>>24)==(0);
      if ($2390) {
       HEAP32[$2347>>2] = $2368;
      }
     }
     $2392 = HEAP32[$3>>2]|0;
     $2393 = (($2392) + 12|0);
     $2394 = HEAP32[$2393>>2]|0;
     $2395 = ($2394|0)>(0);
     if ($2395) {
      $$sum4 = (($50) + 1)|0;
      $2396 = (($base$1) + ($$sum4<<4)|0);
      HEAP32[$4>>2] = $2396;
      _luaC_step($L);
      $2397 = HEAP32[$36>>2]|0;
      HEAP32[$4>>2] = $2397;
     }
     $2398 = HEAP32[$32>>2]|0;
     $base$0$be = $2398;
     break;
    }
    case 43:  {
     $2300 = $39 >>> 23;
     $2301 = $39 >>> 14;
     $2302 = $2301 & 511;
     $2303 = ($2300|0)==(0);
     if ($2303) {
      $2304 = HEAP32[$4>>2]|0;
      $2305 = $2304;
      $2306 = $51;
      $2307 = (($2305) - ($2306))|0;
      $2308 = $2307 >> 4;
      $2309 = (($2308) + -1)|0;
      $n$0 = $2309;
     } else {
      $n$0 = $2300;
     }
     $2310 = ($2302|0)==(0);
     if ($2310) {
      $2311 = HEAP32[$34>>2]|0;
      $2312 = (($2311) + 4|0);
      $$c6 = $2312;
      HEAP32[$34>>2] = $$c6;
      $2313 = HEAP32[$2311>>2]|0;
      $2314 = $2313 >>> 6;
      $c128$0 = $2314;
     } else {
      $c128$0 = $2302;
     }
     $2315 = HEAP32[$51>>2]|0;
     $2316 = ($c128$0*50)|0;
     $2317 = (($n$0) + -50)|0;
     $2318 = (($2317) + ($2316))|0;
     $2319 = (($2315) + 8|0);
     $2320 = HEAP32[$2319>>2]|0;
     $2321 = ($2318>>>0)>($2320>>>0);
     if ($2321) {
      _luaH_resizearray($L,$2315,$2318);
     }
     $2322 = ($n$0|0)>(0);
     if ($2322) {
      $2323 = (($2315) + 5|0);
      $last$0517 = $2318;$n$1516 = $n$0;
      while(1) {
       $$sum5 = (($n$1516) + ($50))|0;
       $2324 = (($base$1) + ($$sum5<<4)|0);
       $2325 = (($last$0517) + -1)|0;
       _luaH_setint($L,$2315,$last$0517,0,$2324);
       $2326 = ((($base$1) + ($$sum5<<4)|0) + 8|0);
       $2327 = HEAP32[$2326>>2]|0;
       $2328 = $2327 & 64;
       $2329 = ($2328|0)==(0);
       if (!($2329)) {
        $2330 = HEAP8[$2323>>0]|0;
        $2331 = $2330 & 4;
        $2332 = ($2331<<24>>24)==(0);
        if (!($2332)) {
         $2333 = HEAP32[$2324>>2]|0;
         $2334 = (($2333) + 5|0);
         $2335 = HEAP8[$2334>>0]|0;
         $2336 = $2335 & 3;
         $2337 = ($2336<<24>>24)==(0);
         if (!($2337)) {
          _luaC_barrierback_($L,$2315);
         }
        }
       }
       $2338 = (($n$1516) + -1)|0;
       $2339 = ($2338|0)>(0);
       if ($2339) {
        $last$0517 = $2325;$n$1516 = $2338;
       } else {
        break;
       }
      }
     }
     $2340 = HEAP32[$36>>2]|0;
     HEAP32[$4>>2] = $2340;
     $base$0$be = $base$1;
     break;
    }
    case 41:  {
     $$sum8 = (($50) + 3)|0;
     $2276 = (($base$1) + ($$sum8<<4)|0);
     $$sum9 = (($50) + 5)|0;
     $2277 = (($base$1) + ($$sum9<<4)|0);
     $$sum10 = (($50) + 2)|0;
     $2278 = (($base$1) + ($$sum10<<4)|0);
     ;HEAP32[$2277+0>>2]=HEAP32[$2278+0>>2]|0;HEAP32[$2277+4>>2]=HEAP32[$2278+4>>2]|0;HEAP32[$2277+8>>2]=HEAP32[$2278+8>>2]|0;HEAP32[$2277+12>>2]=HEAP32[$2278+12>>2]|0;
     $$sum11 = (($50) + 4)|0;
     $2279 = (($base$1) + ($$sum11<<4)|0);
     $$sum12 = (($50) + 1)|0;
     $2280 = (($base$1) + ($$sum12<<4)|0);
     ;HEAP32[$2279+0>>2]=HEAP32[$2280+0>>2]|0;HEAP32[$2279+4>>2]=HEAP32[$2280+4>>2]|0;HEAP32[$2279+8>>2]=HEAP32[$2280+8>>2]|0;HEAP32[$2279+12>>2]=HEAP32[$2280+12>>2]|0;
     ;HEAP32[$2276+0>>2]=HEAP32[$51+0>>2]|0;HEAP32[$2276+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$2276+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$2276+12>>2]=HEAP32[$51+12>>2]|0;
     $$sum13 = (($50) + 6)|0;
     $2281 = (($base$1) + ($$sum13<<4)|0);
     HEAP32[$4>>2] = $2281;
     $2282 = $39 >>> 14;
     $2283 = $2282 & 511;
     _luaD_call($L,$2276,$2283,1);
     $2284 = HEAP32[$32>>2]|0;
     $2285 = HEAP32[$36>>2]|0;
     HEAP32[$4>>2] = $2285;
     $2286 = HEAP32[$34>>2]|0;
     $2287 = (($2286) + 4|0);
     $$c14 = $2287;
     HEAP32[$34>>2] = $$c14;
     $2288 = HEAP32[$2286>>2]|0;
     $2289 = $2288 >>> 6;
     $2290 = $2289 & 255;
     $2291 = (($2284) + ($2290<<4)|0);
     $base$2 = $2284;$i$0 = $2288;$ra$1 = $2291;
     label = 700;
     break;
    }
    case 42:  {
     $base$2 = $base$1;$i$0 = $39;$ra$1 = $51;
     label = 700;
     break;
    }
    case 45:  {
     $2399 = $39 >>> 23;
     $2400 = (($2399) + -1)|0;
     $2401 = HEAP32[$ci$0>>2]|0;
     $2402 = $base$1;
     $2403 = $2401;
     $2404 = (($2402) - ($2403))|0;
     $2405 = $2404 >> 4;
     $2406 = HEAP32[$28>>2]|0;
     $2407 = (($2406) + 6|0);
     $2408 = HEAP8[$2407>>0]|0;
     $2409 = $2408&255;
     $2410 = (($2405) - ($2409))|0;
     $2411 = (($2410) + -1)|0;
     $2412 = ($2399|0)==(0);
     if ($2412) {
      $2413 = HEAP32[$24>>2]|0;
      $2414 = HEAP32[$4>>2]|0;
      $2415 = $2413;
      $2416 = $2414;
      $2417 = (($2415) - ($2416))|0;
      $2418 = $2417 >> 4;
      $2419 = ($2418|0)>($2411|0);
      if (!($2419)) {
       _luaD_growstack($L,$2411);
      }
      $2420 = HEAP32[$32>>2]|0;
      $$sum3 = (($2411) + ($50))|0;
      $2421 = (($2420) + ($$sum3<<4)|0);
      HEAP32[$4>>2] = $2421;
      $2426 = $2420;$b131$0 = $2411;
     } else {
      $2426 = $base$1;$b131$0 = $2400;
     }
     $2422 = ($b131$0|0)>(0);
     if ($2422) {
      $2423 = (1 - ($2410))|0;
      $j$0515 = 0;
      while(1) {
       $2424 = ($j$0515|0)<($2411|0);
       $$sum = (($j$0515) + ($50))|0;
       if ($2424) {
        $2425 = (($2426) + ($$sum<<4)|0);
        $$sum2 = (($2423) + ($j$0515))|0;
        $2427 = (($2426) + ($$sum2<<4)|0);
        ;HEAP32[$2425+0>>2]=HEAP32[$2427+0>>2]|0;HEAP32[$2425+4>>2]=HEAP32[$2427+4>>2]|0;HEAP32[$2425+8>>2]=HEAP32[$2427+8>>2]|0;HEAP32[$2425+12>>2]=HEAP32[$2427+12>>2]|0;
       } else {
        $2428 = ((($2426) + ($$sum<<4)|0) + 8|0);
        HEAP32[$2428>>2] = 0;
       }
       $2429 = (($j$0515) + 1)|0;
       $exitcond = ($2429|0)==($b131$0|0);
       if ($exitcond) {
        break;
       } else {
        $j$0515 = $2429;
       }
      }
      $base$0$be = $2426;
     } else {
      $base$0$be = $2426;
     }
     break;
    }
    default: {
     $base$0$be = $base$1;
    }
    }
   } while(0);
   if ((label|0) == 700) {
    label = 0;
    $2292 = (($ra$1) + 24|0);
    $2293 = HEAP32[$2292>>2]|0;
    $2294 = ($2293|0)==(0);
    if ($2294) {
     $base$0$be = $base$2;
    } else {
     $2295 = (($ra$1) + 16|0);
     ;HEAP32[$ra$1+0>>2]=HEAP32[$2295+0>>2]|0;HEAP32[$ra$1+4>>2]=HEAP32[$2295+4>>2]|0;HEAP32[$ra$1+8>>2]=HEAP32[$2295+8>>2]|0;HEAP32[$ra$1+12>>2]=HEAP32[$2295+12>>2]|0;
     $2296 = $i$0 >>> 14;
     $2297 = (($2296) + -131071)|0;
     $2298 = HEAP32[$34>>2]|0;
     $2299 = (($2298) + ($2297<<2)|0);
     $$c7 = $2299;
     HEAP32[$34>>2] = $$c7;
     $base$0$be = $base$2;
    }
   }
   $base$0 = $base$0$be;
  }
  if ((label|0) == 595) {
   label = 0;
   $1884 = HEAP32[$0>>2]|0;
   $1885 = (($1884) + 34|0);
   $1886 = HEAP8[$1885>>0]|0;
   $1887 = $1886&255;
   $1888 = $1887 | 8;
   $1889 = $1888&255;
   HEAP8[$1885>>0] = $1889;
   $ci$0$be = $1884;
  }
  else if ((label|0) == 601) {
   label = 0;
   $1896 = HEAP32[$0>>2]|0;
   $1897 = (($1896) + 8|0);
   $1898 = HEAP32[$1897>>2]|0;
   $1899 = HEAP32[$1896>>2]|0;
   $1900 = HEAP32[$1898>>2]|0;
   $1901 = (($1896) + 16|0);
   $1902 = HEAP32[$1901>>2]|0;
   $1903 = HEAP32[$1899>>2]|0;
   $1904 = (($1903) + 12|0);
   $1905 = HEAP32[$1904>>2]|0;
   $1906 = (($1905) + 6|0);
   $1907 = HEAP8[$1906>>0]|0;
   $1908 = $1907&255;
   $1909 = (($1902) + ($1908<<4)|0);
   $1910 = HEAP32[$28>>2]|0;
   $1911 = (($1910) + 28|0);
   $1912 = HEAP32[$1911>>2]|0;
   $1913 = ($1912|0)>(0);
   if ($1913) {
    $1914 = (($1898) + 16|0);
    $1915 = HEAP32[$1914>>2]|0;
    _luaF_close($L,$1915);
   }
   $1916 = ($1899>>>0)<($1909>>>0);
   if ($1916) {
    $1918 = $1899;$aux$0519 = 0;
    while(1) {
     $1917 = (($1900) + ($aux$0519<<4)|0);
     ;HEAP32[$1917+0>>2]=HEAP32[$1918+0>>2]|0;HEAP32[$1917+4>>2]=HEAP32[$1918+4>>2]|0;HEAP32[$1917+8>>2]=HEAP32[$1918+8>>2]|0;HEAP32[$1917+12>>2]=HEAP32[$1918+12>>2]|0;
     $1919 = (($aux$0519) + 1)|0;
     $1920 = (($1899) + ($1919<<4)|0);
     $1921 = ($1920>>>0)<($1909>>>0);
     if ($1921) {
      $1918 = $1920;$aux$0519 = $1919;
     } else {
      break;
     }
    }
   }
   $1922 = HEAP32[$1901>>2]|0;
   $1923 = $1922;
   $1924 = $1899;
   $1925 = (($1923) - ($1924))|0;
   $1926 = $1925 >> 4;
   $1927 = (($1900) + ($1926<<4)|0);
   $1928 = (($1898) + 16|0);
   HEAP32[$1928>>2] = $1927;
   $1929 = HEAP32[$4>>2]|0;
   $1930 = $1929;
   $1931 = (($1930) - ($1924))|0;
   $1932 = $1931 >> 4;
   $1933 = (($1900) + ($1932<<4)|0);
   HEAP32[$4>>2] = $1933;
   $1934 = (($1898) + 4|0);
   HEAP32[$1934>>2] = $1933;
   $1935 = (($1896) + 20|0);
   $1936 = HEAP32[$1935>>2]|0;
   $1937 = (($1898) + 20|0);
   $$c26 = $1936;
   HEAP32[$1937>>2] = $$c26;
   $1938 = (($1898) + 34|0);
   $1939 = HEAP8[$1938>>0]|0;
   $1940 = $1939&255;
   $1941 = $1940 | 32;
   $1942 = $1941&255;
   HEAP8[$1938>>0] = $1942;
   HEAP32[$0>>2] = $1898;
   $ci$0$be = $1898;
  }
  else if ((label|0) == 608) {
   label = 0;
   $1943 = $$lcssa >>> 23;
   $1944 = HEAP32[$28>>2]|0;
   $1945 = (($1944) + 28|0);
   $1946 = HEAP32[$1945>>2]|0;
   $1947 = ($1946|0)>(0);
   if ($1947) {
    _luaF_close($L,$base$1$lcssa);
   }
   $1948 = ($1943|0)==(0);
   if ($1948) {
    $1950 = HEAP32[$4>>2]|0;
    $1951 = $1950;
    $1952 = $$lcssa809;
    $1953 = (($1951) - ($1952))|0;
    $1954 = $1953 >> 4;
    $1955 = $1954;
   } else {
    $1949 = (($1943) + -1)|0;
    $1955 = $1949;
   }
   $1956 = (_luaD_poscall($L,$$lcssa809,$1955)|0);
   $1957 = (($ci$0) + 34|0);
   $1958 = HEAP8[$1957>>0]|0;
   $1959 = $1958 & 8;
   $1960 = ($1959<<24>>24)==(0);
   if ($1960) {
    label = 614;
    break;
   }
   $1961 = HEAP32[$0>>2]|0;
   $1962 = ($1956|0)==(0);
   if ($1962) {
    $ci$0$be = $1961;
   } else {
    $1963 = (($1961) + 4|0);
    $1964 = HEAP32[$1963>>2]|0;
    HEAP32[$4>>2] = $1964;
    $ci$0$be = $1961;
   }
  }
  $ci$0 = $ci$0$be;
 }
 if ((label|0) == 388) {
  _luaG_runerror($L,11512,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 427) {
  _luaG_runerror($L,11480,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 614) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 670) {
  _luaG_runerror($L,11544,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 683) {
  _luaG_runerror($L,11576,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 696) {
  _luaG_runerror($L,11608,$vararg_buffer7);
  // unreachable;
 }
}
function _luaZ_fill($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = (($z) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($z) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($z) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$3 & 255]($1,$5,$size)|0);
 $7 = ($6|0)==(0|0);
 $8 = HEAP32[$size>>2]|0;
 $9 = ($8|0)==(0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($8) + -1)|0;
 HEAP32[$z>>2] = $10;
 $11 = (($z) + 4|0);
 $12 = (($6) + 1|0);
 HEAP32[$11>>2] = $12;
 $13 = HEAP8[$6>>0]|0;
 $14 = $13&255;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _luaZ_init($L,$z,$reader,$data) {
 $L = $L|0;
 $z = $z|0;
 $reader = $reader|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 16|0);
 HEAP32[$0>>2] = $L;
 $1 = (($z) + 8|0);
 HEAP32[$1>>2] = $reader;
 $2 = (($z) + 12|0);
 HEAP32[$2>>2] = $data;
 HEAP32[$z>>2] = 0;
 $3 = (($z) + 4|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _luaZ_read($z,$b,$n) {
 $z = $z|0;
 $b = $b|0;
 $n = $n|0;
 var $$$01 = 0, $$0 = 0, $$0$ph = 0, $$014 = 0, $$023 = 0, $$pre = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $0 = ($n|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($z) + 16|0);
 $2 = (($z) + 8|0);
 $3 = (($z) + 12|0);
 $4 = (($z) + 4|0);
 $$pre = HEAP32[$z>>2]|0;
 $$014 = $n;$$023 = $b;$5 = $$pre;
 while(1) {
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$2>>2]|0;
   $9 = HEAP32[$3>>2]|0;
   $10 = (FUNCTION_TABLE_iiii[$8 & 255]($7,$9,$size$i)|0);
   $11 = ($10|0)==(0|0);
   $12 = HEAP32[$size$i>>2]|0;
   $13 = ($12|0)==(0);
   $or$cond$i = $11 | $13;
   if ($or$cond$i) {
    $$0$ph = $$014;
    break;
   }
   HEAP32[$z>>2] = $12;
   HEAP32[$4>>2] = $10;
   $15 = $12;$16 = $10;
  } else {
   $$pre8 = HEAP32[$4>>2]|0;
   $15 = $5;$16 = $$pre8;
  }
  $14 = ($$014>>>0)>($15>>>0);
  $$$01 = $14 ? $15 : $$014;
  _memcpy(($$023|0),($16|0),($$$01|0))|0;
  $17 = HEAP32[$z>>2]|0;
  $18 = (($17) - ($$$01))|0;
  HEAP32[$z>>2] = $18;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + ($$$01)|0);
  HEAP32[$4>>2] = $20;
  $21 = (($$023) + ($$$01)|0);
  $22 = (($$014) - ($$$01))|0;
  $23 = ($$014|0)==($$$01|0);
  if ($23) {
   $$0$ph = 0;
   break;
  } else {
   $$014 = $22;$$023 = $21;$5 = $18;
  }
 }
 $$0 = $$0$ph;
 STACKTOP = sp;return ($$0|0);
}
function _luaZ_openspace($L,$buff,$n) {
 $L = $L|0;
 $buff = $buff|0;
 $n = $n|0;
 var $$n = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($buff) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if ($2) {
  $3 = ($n>>>0)<(32);
  $$n = $3 ? 32 : $n;
  $4 = HEAP32[$buff>>2]|0;
  $5 = (_luaM_realloc_($L,$4,$1,$$n)|0);
  HEAP32[$buff>>2] = $5;
  HEAP32[$0>>2] = $$n;
  $6 = $5;
  return ($6|0);
 } else {
  $$pre = HEAP32[$buff>>2]|0;
  $6 = $$pre;
  return ($6|0);
 }
 return (0)|0;
}
function _luaopen_base($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_rawgeti($L,-1001000,2,0)|0);
 _luaL_setfuncs($L,11648,0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-2,11848);
 (_lua_pushstring($L,11856)|0);
 _lua_setfield($L,-2,11864);
 $0 = (_lua_typename($L,0)|0);
 (_lua_pushstring($L,$0)|0);
 $1 = (_lua_typename($L,1)|0);
 (_lua_pushstring($L,$1)|0);
 $2 = (_lua_typename($L,2)|0);
 (_lua_pushstring($L,$2)|0);
 $3 = (_lua_typename($L,3)|0);
 (_lua_pushstring($L,$3)|0);
 $4 = (_lua_typename($L,4)|0);
 (_lua_pushstring($L,$4)|0);
 $5 = (_lua_typename($L,5)|0);
 (_lua_pushstring($L,$5)|0);
 $6 = (_lua_typename($L,6)|0);
 (_lua_pushstring($L,$6)|0);
 $7 = (_lua_typename($L,7)|0);
 (_lua_pushstring($L,$7)|0);
 $8 = (_lua_typename($L,8)|0);
 (_lua_pushstring($L,$8)|0);
 _lua_pushcclosure($L,232,9);
 _lua_setfield($L,-2,11880);
 return 1;
}
function _luaB_type($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_type($L,1)|0);
 $1 = (-1001001 - ($0))|0;
 _lua_pushvalue($L,$1);
 return 1;
}
function _luaB_assert($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_toboolean($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _luaL_checkany($L,1);
  _lua_rotate($L,1,-1);
  _lua_settop($L,-2);
  (_lua_pushstring($L,12528)|0);
  _lua_settop($L,1);
  $3 = (_luaB_error($L)|0);
  $$0 = $3;
  return ($$0|0);
 } else {
  $2 = (_lua_gettop($L)|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaB_collectgarbage($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkoption($L,1,12432,12376)|0);
 $1 = (12496 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_luaL_optinteger($L,2,0,0)|0);
 $4 = tempRet0;
 $5 = (_lua_gc($L,$2,$3)|0);
 if ((($2|0) == 3)) {
  $6 = (_lua_gc($L,4,0)|0);
  $7 = (+($5|0));
  $8 = (+($6|0));
  $9 = $8 * 9.765625E-4;
  $10 = $7 + $9;
  _lua_pushnumber($L,$10);
  return 1;
 } else if ((($2|0) == 9) | (($2|0) == 5)) {
  _lua_pushboolean($L,$5);
  return 1;
 } else {
  $11 = ($5|0)<(0);
  $12 = $11 << 31 >> 31;
  _lua_pushinteger($L,$5,$12);
  return 1;
 }
 return (0)|0;
}
function _luaB_dofile($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 _lua_settop($L,1);
 $1 = (_luaL_loadfilex($L,$0,0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _lua_callk($L,0,-1,0,233);
 $3 = (_lua_gettop($L)|0);
 $4 = (($3) + -1)|0;
 return ($4|0);
}
function _luaB_error($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optinteger($L,2,1,0)|0);
 $1 = tempRet0;
 _lua_settop($L,1);
 $2 = (_lua_isstring($L,1)|0);
 $3 = ($2|0)!=(0);
 $4 = ($0|0)>(0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _luaL_where($L,$0);
 _lua_pushvalue($L,1);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return (0)|0;
}
function _luaB_getmetatable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_pushnil($L);
  return 1;
 } else {
  (_luaL_getmetafield($L,1,12112)|0);
  return 1;
 }
 return (0)|0;
}
function _luaB_ipairs($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_getmetafield($L,1,12368)|0);
 $1 = ($0|0)!=(0);
 $2 = $1 ? 235 : 234;
 _luaL_checkany($L,1);
 _lua_pushcclosure($L,$2,0);
 _lua_pushvalue($L,1);
 _lua_pushinteger($L,0,0);
 return 3;
}
function _luaB_loadfile($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_luaL_optlstring($L,2,0,0)|0);
 $2 = (_lua_type($L,3)|0);
 $3 = ($2|0)!=(-1);
 $4 = $3 ? 3 : 0;
 $5 = (_luaL_loadfilex($L,$0,$1)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _lua_pushnil($L);
  _lua_rotate($L,-2,1);
  $$0$i = 2;
  return ($$0$i|0);
 }
 if (!($3)) {
  $$0$i = 1;
  return ($$0$i|0);
 }
 _lua_pushvalue($L,$4);
 $7 = (_lua_setupvalue($L,-2,1)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0$i = 1;
  return ($$0$i|0);
 }
 _lua_settop($L,-2);
 $$0$i = 1;
 return ($$0$i|0);
}
function _luaB_load($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 $0 = (_lua_tolstring($L,1,$l)|0);
 $1 = (_luaL_optlstring($L,3,12280,0)|0);
 $2 = (_lua_type($L,4)|0);
 $3 = ($2|0)!=(-1);
 $4 = $3 ? 4 : 0;
 $5 = ($0|0)==(0|0);
 if ($5) {
  $9 = (_luaL_optlstring($L,2,12288,0)|0);
  _luaL_checktype($L,1,6);
  _lua_settop($L,5);
  $10 = (_lua_load($L,236,0,$9,$1)|0);
  $status$0 = $10;
 } else {
  $6 = (_luaL_optlstring($L,2,$0,0)|0);
  $7 = HEAP32[$l>>2]|0;
  $8 = (_luaL_loadbufferx($L,$0,$7,$6,$1)|0);
  $status$0 = $8;
 }
 $11 = ($status$0|0)==(0);
 if (!($11)) {
  _lua_pushnil($L);
  _lua_rotate($L,-2,1);
  $$0$i = 2;
  STACKTOP = sp;return ($$0$i|0);
 }
 if (!($3)) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 _lua_pushvalue($L,$4);
 $12 = (_lua_setupvalue($L,-2,1)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 _lua_settop($L,-2);
 $$0$i = 1;
 STACKTOP = sp;return ($$0$i|0);
}
function _luaB_next($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _lua_settop($L,2);
 $0 = (_lua_next($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 2;
  return ($$0|0);
 }
 _lua_pushnil($L);
 $$0 = 1;
 return ($$0|0);
}
function _luaB_pairs($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_getmetafield($L,1,12272)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _luaL_checktype($L,1,5);
  _lua_pushcclosure($L,143,0);
  _lua_pushvalue($L,1);
  _lua_pushnil($L);
  return 3;
 } else {
  _lua_pushvalue($L,1);
  _lua_callk($L,1,3,0,0);
  return 3;
 }
 return (0)|0;
}
function _luaB_pcall($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $status$cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 _lua_pushboolean($L,1);
 _lua_rotate($L,1,1);
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -2)|0;
 $2 = (_lua_pcallk($L,$1,-1,0,0,237)|0);
 $status$cmp$i = ($2>>>0)>(1);
 if ($status$cmp$i) {
  _lua_pushboolean($L,0);
  _lua_pushvalue($L,-2);
  $$0$i = 2;
  return ($$0$i|0);
 } else {
  $3 = (_lua_gettop($L)|0);
  $$0$i = $3;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _luaB_print($L) {
 $L = $L|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$04 = 0, $l = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (_lua_gettop($L)|0);
 (_lua_getglobal($L,12056)|0);
 $1 = ($0|0)<(1);
 $$pre = HEAP32[_stdout>>2]|0;
 do {
  if (!($1)) {
   $i$04 = 1;
   while(1) {
    _lua_pushvalue($L,-1);
    _lua_pushvalue($L,$i$04);
    _lua_callk($L,1,1,0,0);
    $2 = (_lua_tolstring($L,-1,$l)|0);
    $3 = ($2|0)==(0|0);
    if ($3) {
     break;
    }
    $5 = ($i$04|0)>(1);
    if ($5) {
     (_fputc(9,($$pre|0))|0);
    }
    $6 = HEAP32[$l>>2]|0;
    (_fwrite(($2|0),1,($6|0),($$pre|0))|0);
    _lua_settop($L,-2);
    $7 = (($i$04) + 1)|0;
    $8 = ($i$04|0)<($0|0);
    if ($8) {
     $i$04 = $7;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    break;
   }
   $4 = (_luaL_error($L,12224,$vararg_buffer)|0);
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 (_fputc(10,($$pre|0))|0);
 (_fflush(($$pre|0))|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaB_rawequal($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 _luaL_checkany($L,2);
 $0 = (_lua_rawequal($L,1,2)|0);
 _lua_pushboolean($L,$0);
 return 1;
}
function _luaB_rawlen($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = $0 & -2;
 $2 = ($1|0)==(4);
 if (!($2)) {
  (_luaL_argerror($L,1,12192)|0);
 }
 $3 = (_lua_rawlen($L,1)|0);
 _lua_pushinteger($L,$3,0);
 return 1;
}
function _luaB_rawget($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _luaL_checkany($L,2);
 _lua_settop($L,2);
 (_lua_rawget($L,1)|0);
 return 1;
}
function _luaB_rawset($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _luaL_checkany($L,2);
 _luaL_checkany($L,3);
 _lua_settop($L,3);
 _lua_rawset($L,1);
 return 1;
}
function _luaB_select($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (_lua_type($L,1)|0);
 $2 = ($1|0)==(4);
 if ($2) {
  $3 = (_lua_tolstring($L,1,0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(35);
  if ($5) {
   $6 = (($0) + -1)|0;
   $7 = ($6|0)<(0);
   $8 = $7 << 31 >> 31;
   _lua_pushinteger($L,$6,$8);
   $$0 = 1;
   return ($$0|0);
  }
 }
 $9 = (_luaL_checkinteger($L,1)|0);
 $10 = tempRet0;
 $11 = ($10|0)<(0);
 $12 = ($0|0)<(0);
 $13 = $12 << 31 >> 31;
 if ($11) {
  $14 = (_i64Add(($9|0),($10|0),($0|0),($13|0))|0);
  $15 = tempRet0;
  $23 = $15;$25 = $14;
 } else {
  $16 = ($10|0)>($13|0);
  $17 = ($9>>>0)>($0>>>0);
  $18 = ($10|0)==($13|0);
  $19 = $18 & $17;
  $20 = $16 | $19;
  $21 = $20 ? $0 : $9;
  $22 = $20 ? $13 : $10;
  $23 = $22;$25 = $21;
 }
 $24 = ($23|0)>(0);
 $26 = ($25>>>0)>(0);
 $27 = ($23|0)==(0);
 $28 = $27 & $26;
 $29 = $24 | $28;
 if (!($29)) {
  (_luaL_argerror($L,1,12168)|0);
 }
 $30 = (($0) - ($25))|0;
 $$0 = $30;
 return ($$0|0);
}
function _luaB_setmetatable($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_type($L,2)|0);
 _luaL_checktype($L,1,5);
 if (!((($0|0) == 0) | (($0|0) == 5))) {
  (_luaL_argerror($L,2,13576)|0);
 }
 $1 = (_luaL_getmetafield($L,1,12112)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lua_settop($L,2);
  (_lua_setmetatable($L,1)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_luaL_error($L,12128,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaB_tonumber($L) {
 $L = $L|0;
 var $$0$i = 0, $$01$i = 0, $$1$i = 0, $$1$i$lcssa6 = 0, $$lcssa7 = 0, $$sum$i = 0, $$sum2$i = 0, $$sum3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit$i = 0, $isdigittmp$i = 0, $l = 0, $l1 = 0, $neg$0$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 4|0;
 $l1 = sp;
 $0 = (_lua_type($L,2)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  _luaL_checkany($L,1);
  $2 = (_lua_type($L,1)|0);
  $3 = ($2|0)==(3);
  if ($3) {
   _lua_settop($L,1);
   STACKTOP = sp;return 1;
  }
  $4 = (_lua_tolstring($L,1,$l)|0);
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (_lua_stringtonumber($L,$4)|0);
   $7 = HEAP32[$l>>2]|0;
   $8 = (($7) + 1)|0;
   $9 = ($6|0)==($8|0);
   if ($9) {
    STACKTOP = sp;return 1;
   }
  }
 } else {
  $10 = (_luaL_checkinteger($L,2)|0);
  $11 = tempRet0;
  _luaL_checktype($L,1,4);
  $12 = (_luaL_checklstring($L,1,$l1)|0);
  $13 = (_i64Add(($10|0),($11|0),-2,-1)|0);
  $14 = tempRet0;
  $15 = ($14>>>0)<(0);
  $16 = ($13>>>0)<(35);
  $17 = ($14|0)==(0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if (!($19)) {
   (_luaL_argerror($L,2,12080)|0);
  }
  $20 = (_strspn($12,12104)|0);
  $21 = (($12) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  if ((($22<<24>>24) == 43)) {
   $$sum2$i = (($20) + 1)|0;
   $24 = (($12) + ($$sum2$i)|0);
   $$01$i = $24;$neg$0$i = 0;
  } else if ((($22<<24>>24) == 45)) {
   $$sum3$i = (($20) + 1)|0;
   $23 = (($12) + ($$sum3$i)|0);
   $$01$i = $23;$neg$0$i = 1;
  } else {
   $$01$i = $21;$neg$0$i = 0;
  }
  $25 = HEAP8[$$01$i>>0]|0;
  $26 = $25&255;
  $27 = (_isalnum($26)|0);
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    $$0$i = 0;$64 = 0;$65 = 0;
   } else {
    $29 = ($10|0)<(0);
    $30 = $29 << 31 >> 31;
    $$1$i = $$01$i;$39 = 0;$40 = 0;
    while(1) {
     $31 = HEAP8[$$1$i>>0]|0;
     $32 = $31&255;
     $isdigittmp$i = (($32) + -48)|0;
     $isdigit$i = ($isdigittmp$i>>>0)<(10);
     if ($isdigit$i) {
      $33 = $31 << 24 >> 24;
      $34 = (($33) + -48)|0;
      $37 = $34;
     } else {
      $35 = (_toupper($32)|0);
      $36 = (($35) + -55)|0;
      $37 = $36;
     }
     $38 = ($37|0)<($10|0);
     if (!($38)) {
      label = 19;
      break;
     }
     $41 = (___muldi3(($39|0),($40|0),($10|0),($30|0))|0);
     $42 = tempRet0;
     $43 = ($37|0)<(0);
     $44 = $43 << 31 >> 31;
     $45 = (_i64Add(($37|0),($44|0),($41|0),($42|0))|0);
     $46 = tempRet0;
     $47 = (($$1$i) + 1|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = (_isalnum($49)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      $$1$i$lcssa6 = $$1$i;$$lcssa7 = $47;$55 = $45;$56 = $46;
      label = 18;
      break;
     } else {
      $$1$i = $47;$39 = $45;$40 = $46;
     }
    }
    if ((label|0) == 18) {
     $52 = (_strspn($$lcssa7,12104)|0);
     $$sum$i = (($52) + 1)|0;
     $53 = (($$1$i$lcssa6) + ($$sum$i)|0);
     $54 = ($neg$0$i|0)!=(0);
     $57 = (_i64Subtract(0,0,($55|0),($56|0))|0);
     $58 = tempRet0;
     $59 = $54 ? $57 : $55;
     $60 = $54 ? $58 : $56;
     $$0$i = $53;$64 = $59;$65 = $60;
     break;
    }
    else if ((label|0) == 19) {
     $$0$i = 0;$64 = 0;$65 = 0;
     break;
    }
   }
  } while(0);
  $61 = HEAP32[$l1>>2]|0;
  $62 = (($12) + ($61)|0);
  $63 = ($$0$i|0)==($62|0);
  if ($63) {
   _lua_pushinteger($L,$64,$65);
   STACKTOP = sp;return 1;
  }
 }
 _lua_pushnil($L);
 STACKTOP = sp;return 1;
}
function _luaB_tostring($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 (_luaL_tolstring($L,1,0)|0);
 return 1;
}
function _luaB_xpcall($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $status$cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 _luaL_checktype($L,2,6);
 _lua_pushboolean($L,1);
 _lua_pushvalue($L,1);
 _lua_rotate($L,3,2);
 $1 = (($0) + -2)|0;
 $2 = (_lua_pcallk($L,$1,-1,2,2,237)|0);
 $status$cmp$i = ($2>>>0)>(1);
 if ($status$cmp$i) {
  _lua_pushboolean($L,0);
  _lua_pushvalue($L,-2);
  $$0$i = 2;
  return ($$0$i|0);
 } else {
  $3 = (_lua_gettop($L)|0);
  $4 = (($3) + -2)|0;
  $$0$i = $4;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _dofilecont($L,$d1,$d2) {
 $L = $L|0;
 $d1 = $d1|0;
 $d2 = $d2|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -1)|0;
 return ($1|0);
}
function _ipairsaux($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 $2 = (_i64Add(($0|0),($1|0),1,0)|0);
 $3 = tempRet0;
 _lua_pushinteger($L,$2,$3);
 $4 = (_lua_geti($L,1,$2,$3)|0);
 $5 = ($4|0)==(0);
 $6 = $5 ? 1 : 2;
 return ($6|0);
}
function _ipairsaux_raw($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 $2 = (_i64Add(($0|0),($1|0),1,0)|0);
 $3 = tempRet0;
 _luaL_checktype($L,1,5);
 _lua_pushinteger($L,$2,$3);
 $4 = (_lua_rawgeti($L,1,$2,$3)|0);
 $5 = ($4|0)==(0);
 $6 = $5 ? 1 : 2;
 return ($6|0);
}
function _generic_reader($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaL_checkstack($L,2,12296);
 _lua_pushvalue($L,1);
 _lua_callk($L,0,1,0,0);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_settop($L,-2);
  HEAP32[$size>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_lua_isstring($L,-1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  (_luaL_error($L,12328,$vararg_buffer)|0);
 }
 _lua_copy($L,-1,5);
 _lua_settop($L,-2);
 $4 = (_lua_tolstring($L,5,$size)|0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _finishpcall($L,$status,$extra) {
 $L = $L|0;
 $status = $status|0;
 $extra = $extra|0;
 var $$0 = 0, $0 = 0, $1 = 0, $status$cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $status$cmp = ($status>>>0)>(1);
 if ($status$cmp) {
  _lua_pushboolean($L,0);
  _lua_pushvalue($L,-2);
  $$0 = 2;
  return ($$0|0);
 } else {
  $0 = (_lua_gettop($L)|0);
  $1 = (($0) - ($extra))|0;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaK_nil($fs,$from,$n) {
 $fs = $fs|0;
 $from = $from|0;
 $n = $n|0;
 var $$from = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0;
 var $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + ($from))|0;
 $1 = (($0) + -1)|0;
 $2 = (($fs) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($fs) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 do {
  if ($6) {
   $7 = (($3) + -1)|0;
   $8 = HEAP32[$fs>>2]|0;
   $9 = (($8) + 48|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($7<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 63;
   $14 = ($13|0)==(4);
   if ($14) {
    $15 = $12 >>> 6;
    $16 = $15 & 255;
    $17 = $12 >>> 23;
    $18 = (($16) + ($17))|0;
    $19 = ($16|0)>($from|0);
    $20 = (($18) + 1)|0;
    $21 = ($20|0)<($from|0);
    $or$cond = $19 | $21;
    if ($or$cond) {
     $22 = ($16|0)<($from|0);
     $23 = ($16|0)>($0|0);
     $or$cond2 = $22 | $23;
     if ($or$cond2) {
      break;
     }
    }
    $24 = ($16|0)<($from|0);
    $$from = $24 ? $16 : $from;
    $25 = ($18|0)>($1|0);
    $l$0 = $25 ? $18 : $1;
    $26 = $12 & 8372287;
    $27 = $$from << 6;
    $28 = $27 & 16320;
    $29 = (($l$0) - ($$from))|0;
    $30 = $29 << 23;
    $31 = $30 | $28;
    $32 = $31 | $26;
    HEAP32[$11>>2] = $32;
    return;
   }
  }
 } while(0);
 $33 = $from << 6;
 $34 = $n << 23;
 $35 = (($34) + -8388608)|0;
 $36 = $33 | $35;
 $37 = $36 | 4;
 (_luaK_code($fs,$37)|0);
 return;
}
function _luaK_codeABC($fs,$o,$a,$b,$c) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $b << 23;
 $3 = $1 | $2;
 $4 = $c << 14;
 $5 = $3 | $4;
 $6 = (_luaK_code($fs,$5)|0);
 return ($6|0);
}
function _luaK_jump($fs) {
 $fs = $fs|0;
 var $$lcssa = 0, $$lcssa3 = 0, $$neg$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $ispos$i$i = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = -1;
 $2 = (_luaK_code($fs,2147450910)|0);
 $3 = ($1|0)==(-1);
 if ($3) {
  $22 = $2;
  return ($22|0);
 }
 $4 = ($2|0)==(-1);
 if ($4) {
  $22 = $1;
  return ($22|0);
 }
 $fs$idx$val$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
 $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
 $list$0$i = $2;
 while(1) {
  $5 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 >>> 14;
  $8 = (($7) + -131071)|0;
  $9 = ($8|0)==(-1);
  if ($9) {
   $$lcssa = $5;$$lcssa3 = $6;$list$0$i$lcssa = $list$0$i;
   break;
  }
  $10 = (($list$0$i) + 1)|0;
  $11 = (($10) + ($8))|0;
  $12 = ($11|0)==(-1);
  if ($12) {
   $$lcssa = $5;$$lcssa3 = $6;$list$0$i$lcssa = $list$0$i;
   break;
  } else {
   $list$0$i = $11;
  }
 }
 $$neg$i$i = $list$0$i$lcssa ^ -1;
 $13 = (($1) + ($$neg$i$i))|0;
 $ispos$i$i = ($13|0)>(-1);
 $neg$i$i = (0 - ($13))|0;
 $14 = $ispos$i$i ? $13 : $neg$i$i;
 $15 = ($14|0)>(131071);
 if ($15) {
  $16 = (($fs) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  _luaX_syntaxerror($17,12648);
  // unreachable;
 }
 $18 = $$lcssa3 & 16383;
 $19 = $13 << 14;
 $20 = (($19) + 2147467264)|0;
 $21 = $20 | $18;
 HEAP32[$$lcssa>>2] = $21;
 $22 = $2;
 return ($22|0);
}
function _luaK_codeABx($fs,$o,$a,$bc) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $bc = $bc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $bc << 14;
 $3 = $1 | $2;
 $4 = (_luaK_code($fs,$3)|0);
 return ($4|0);
}
function _luaK_concat($fs,$l1,$l2) {
 $fs = $fs|0;
 $l1 = $l1|0;
 $l2 = $l2|0;
 var $$lcssa = 0, $$lcssa1 = 0, $$neg$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fs$idx$val = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$val = 0, $ispos$i = 0, $list$0 = 0, $list$0$lcssa = 0, $neg$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l2|0)==(-1);
 if ($0) {
  return;
 }
 $1 = HEAP32[$l1>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  HEAP32[$l1>>2] = $l2;
  return;
 }
 $fs$idx$val = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx = (($fs$idx$val) + 48|0);
 $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
 $list$0 = $1;
 while(1) {
  $3 = (($fs$idx$val$idx$val) + ($list$0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 >>> 14;
  $6 = (($5) + -131071)|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   $$lcssa = $3;$$lcssa1 = $4;$list$0$lcssa = $list$0;
   break;
  }
  $8 = (($list$0) + 1)|0;
  $9 = (($8) + ($6))|0;
  $10 = ($9|0)==(-1);
  if ($10) {
   $$lcssa = $3;$$lcssa1 = $4;$list$0$lcssa = $list$0;
   break;
  } else {
   $list$0 = $9;
  }
 }
 $$neg$i = $list$0$lcssa ^ -1;
 $11 = (($$neg$i) + ($l2))|0;
 $ispos$i = ($11|0)>(-1);
 $neg$i = (0 - ($11))|0;
 $12 = $ispos$i ? $11 : $neg$i;
 $13 = ($12|0)>(131071);
 if ($13) {
  $14 = (($fs) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _luaX_syntaxerror($15,12648);
  // unreachable;
 }
 $16 = $$lcssa1 & 16383;
 $17 = $11 << 14;
 $18 = (($17) + 2147467264)|0;
 $19 = $16 | $18;
 HEAP32[$$lcssa>>2] = $19;
 return;
}
function _luaK_ret($fs,$first,$nret) {
 $fs = $fs|0;
 $first = $first|0;
 $nret = $nret|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $first << 6;
 $1 = $nret << 23;
 $2 = (($1) + 8388608)|0;
 $3 = $0 | $2;
 $4 = $3 | 38;
 (_luaK_code($fs,$4)|0);
 return;
}
function _luaK_getlabel($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 20|0);
 HEAP32[$2>>2] = $1;
 return ($1|0);
}
function _luaK_patchlist($fs,$list,$target) {
 $fs = $fs|0;
 $list = $list|0;
 $target = $target|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $$02$i = 0, $$lcssa = 0, $$lcssa7 = 0, $$neg$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$pre = 0, $fs$idx$val$idx$i$i = 0;
 var $fs$idx$val$idx$i$phi$trans$insert = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$pre = 0, $ispos$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $list$0$i$i = 0, $list$0$i$i$lcssa = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($target|0);
 if ($2) {
  $3 = (($fs) + 20|0);
  HEAP32[$3>>2] = $target;
  $4 = (($fs) + 24|0);
  $5 = ($list|0)==(-1);
  if ($5) {
   return;
  }
  $6 = HEAP32[$4>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   HEAP32[$4>>2] = $list;
   return;
  }
  $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
  $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 48|0);
  $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
  $list$0$i$i = $6;
  while(1) {
   $8 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 >>> 14;
   $11 = (($10) + -131071)|0;
   $12 = ($11|0)==(-1);
   if ($12) {
    $$lcssa = $8;$$lcssa7 = $9;$list$0$i$i$lcssa = $list$0$i$i;
    break;
   }
   $13 = (($list$0$i$i) + 1)|0;
   $14 = (($13) + ($11))|0;
   $15 = ($14|0)==(-1);
   if ($15) {
    $$lcssa = $8;$$lcssa7 = $9;$list$0$i$i$lcssa = $list$0$i$i;
    break;
   } else {
    $list$0$i$i = $14;
   }
  }
  $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
  $16 = (($$neg$i$i$i) + ($list))|0;
  $ispos$i$i$i = ($16|0)>(-1);
  $neg$i$i$i = (0 - ($16))|0;
  $17 = $ispos$i$i$i ? $16 : $neg$i$i$i;
  $18 = ($17|0)>(131071);
  if ($18) {
   $19 = (($fs) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   _luaX_syntaxerror($20,12648);
   // unreachable;
  }
  $21 = $$lcssa7 & 16383;
  $22 = $16 << 14;
  $23 = (($22) + 2147467264)|0;
  $24 = $23 | $21;
  HEAP32[$$lcssa>>2] = $24;
  return;
 }
 $25 = ($list|0)==(-1);
 if ($25) {
  return;
 }
 $fs$idx$val$i$pre = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$phi$trans$insert = (($fs$idx$val$i$pre) + 48|0);
 $fs$idx$val$idx$val$i$pre = HEAP32[$fs$idx$val$idx$i$phi$trans$insert>>2]|0;
 $$02$i = $list;
 while(1) {
  $26 = (($fs$idx$val$idx$val$i$pre) + ($$02$i<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 >>> 14;
  $29 = (($28) + -131071)|0;
  $30 = ($29|0)==(-1);
  if ($30) {
   $$0$i$i = -1;
  } else {
   $31 = (($$02$i) + 1)|0;
   $32 = (($31) + ($29))|0;
   $$0$i$i = $32;
  }
  $33 = ($$02$i|0)>(0);
  if ($33) {
   $$sum$i$i = (($$02$i) + -1)|0;
   $34 = (($fs$idx$val$idx$val$i$pre) + ($$sum$i$i<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & 63;
   $37 = (6936 + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)<(0);
   if ($39) {
    $$0$i$i1 = $34;$41 = $35;
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $$0$i$i1 = $26;$41 = $27;
  }
  $40 = $41 & 63;
  $42 = ($40|0)==(35);
  if ($42) {
   $43 = $41 >>> 23;
   $44 = $43 << 6;
   $45 = $41 & 8372224;
   $46 = $45 | $44;
   $47 = $46 | 34;
   HEAP32[$$0$i$i1>>2] = $47;
   $$neg$i = $$02$i ^ -1;
   $48 = (($$neg$i) + ($target))|0;
   $ispos$i = ($48|0)>(-1);
   $neg$i = (0 - ($48))|0;
   $49 = $ispos$i ? $48 : $neg$i;
   $50 = ($49|0)>(131071);
   if ($50) {
    label = 20;
    break;
   }
   $53 = HEAP32[$26>>2]|0;
   $54 = $53 & 16383;
   $55 = $48 << 14;
   $56 = (($55) + 2147467264)|0;
   $57 = $54 | $56;
   $storemerge = $57;
  } else {
   $$neg$i$i = $$02$i ^ -1;
   $58 = (($$neg$i$i) + ($target))|0;
   $ispos$i$i = ($58|0)>(-1);
   $neg$i$i = (0 - ($58))|0;
   $59 = $ispos$i$i ? $58 : $neg$i$i;
   $60 = ($59|0)>(131071);
   if ($60) {
    label = 23;
    break;
   }
   $63 = $27 & 16383;
   $64 = $58 << 14;
   $65 = (($64) + 2147467264)|0;
   $66 = $63 | $65;
   $storemerge = $66;
  }
  HEAP32[$26>>2] = $storemerge;
  $67 = ($$0$i$i|0)==(-1);
  if ($67) {
   label = 26;
   break;
  } else {
   $$02$i = $$0$i$i;
  }
 }
 if ((label|0) == 20) {
  $51 = (($fs) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  _luaX_syntaxerror($52,12648);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $61 = (($fs) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  _luaX_syntaxerror($62,12648);
  // unreachable;
 }
 else if ((label|0) == 26) {
  return;
 }
}
function _luaK_patchtohere($fs,$list) {
 $fs = $fs|0;
 $list = $list|0;
 var $$lcssa = 0, $$lcssa3 = 0, $$neg$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $ispos$i$i = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 20|0);
 HEAP32[$2>>2] = $1;
 $3 = (($fs) + 24|0);
 $4 = ($list|0)==(-1);
 if ($4) {
  return;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  HEAP32[$3>>2] = $list;
  return;
 }
 $fs$idx$val$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
 $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
 $list$0$i = $5;
 while(1) {
  $7 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 14;
  $10 = (($9) + -131071)|0;
  $11 = ($10|0)==(-1);
  if ($11) {
   $$lcssa = $7;$$lcssa3 = $8;$list$0$i$lcssa = $list$0$i;
   break;
  }
  $12 = (($list$0$i) + 1)|0;
  $13 = (($12) + ($10))|0;
  $14 = ($13|0)==(-1);
  if ($14) {
   $$lcssa = $7;$$lcssa3 = $8;$list$0$i$lcssa = $list$0$i;
   break;
  } else {
   $list$0$i = $13;
  }
 }
 $$neg$i$i = $list$0$i$lcssa ^ -1;
 $15 = (($$neg$i$i) + ($list))|0;
 $ispos$i$i = ($15|0)>(-1);
 $neg$i$i = (0 - ($15))|0;
 $16 = $ispos$i$i ? $15 : $neg$i$i;
 $17 = ($16|0)>(131071);
 if ($17) {
  $18 = (($fs) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  _luaX_syntaxerror($19,12648);
  // unreachable;
 }
 $20 = $$lcssa3 & 16383;
 $21 = $15 << 14;
 $22 = (($21) + 2147467264)|0;
 $23 = $22 | $20;
 HEAP32[$$lcssa>>2] = $23;
 return;
}
function _luaK_patchclose($fs,$list,$level) {
 $fs = $fs|0;
 $list = $list|0;
 $level = $level|0;
 var $$01 = 0, $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val = 0;
 var $fs$idx$val$idx = 0, $fs$idx$val$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(-1);
 if ($0) {
  return;
 }
 $fs$idx$val = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx = (($fs$idx$val) + 48|0);
 $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
 $1 = $level << 6;
 $2 = (($1) + 64)|0;
 $3 = $2 & 16320;
 $$01 = $list;
 while(1) {
  $4 = (($fs$idx$val$idx$val) + ($$01<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 >>> 14;
  $7 = (($6) + -131071)|0;
  $8 = ($7|0)==(-1);
  if ($8) {
   $$lcssa = $4;$$lcssa3 = $5;
   label = 4;
   break;
  }
  $11 = (($$01) + 1)|0;
  $12 = (($11) + ($7))|0;
  $13 = $5 & -16321;
  $14 = $13 | $3;
  HEAP32[$4>>2] = $14;
  $15 = ($12|0)==(-1);
  if ($15) {
   label = 6;
   break;
  } else {
   $$01 = $12;
  }
 }
 if ((label|0) == 4) {
  $9 = $$lcssa3 & -16321;
  $10 = $9 | $3;
  HEAP32[$$lcssa>>2] = $10;
  return;
 }
 else if ((label|0) == 6) {
  return;
 }
}
function _luaK_codek($fs,$reg,$k) {
 $fs = $fs|0;
 $reg = $reg|0;
 $k = $k|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($k|0)<(262144);
 $1 = $reg << 6;
 if ($0) {
  $2 = $k << 14;
  $3 = $1 | $2;
  $4 = $3 | 1;
  $5 = (_luaK_code($fs,$4)|0);
  $$0 = $5;
  return ($$0|0);
 } else {
  $6 = $1 | 2;
  $7 = (_luaK_code($fs,$6)|0);
  $8 = $k << 6;
  $9 = $8 | 46;
  (_luaK_code($fs,$9)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaK_checkstack($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + ($n))|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($3|0)>($7|0);
 if (!($8)) {
  return;
 }
 $9 = ($3|0)>(254);
 if ($9) {
  $10 = (($fs) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _luaX_syntaxerror($11,12552);
  // unreachable;
 }
 $12 = $3&255;
 HEAP8[$5>>0] = $12;
 return;
}
function _luaK_reserveregs($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + ($n))|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($3|0)>($7|0);
 if (!($8)) {
  $$pre = $3&255;
  $$pre$phiZ2D = $$pre;
  HEAP8[$0>>0] = $$pre$phiZ2D;
  return;
 }
 $9 = ($3|0)>(254);
 if ($9) {
  $10 = (($fs) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _luaX_syntaxerror($11,12552);
  // unreachable;
 }
 $12 = $3&255;
 HEAP8[$5>>0] = $12;
 $$pre$phiZ2D = $12;
 HEAP8[$0>>0] = $$pre$phiZ2D;
 return;
}
function _luaK_stringK($fs,$s) {
 $fs = $fs|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o = sp;
 HEAP32[$o>>2] = $s;
 $0 = (($s) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 | 64;
 $4 = (($o) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = (_addk($fs,$o,$o)|0);
 STACKTOP = sp;return ($5|0);
}
function _luaK_intK($fs,$0,$1) {
 $fs = $fs|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 16|0;
 $o = sp;
 $2 = $0;
 HEAP32[$k>>2] = $2;
 $3 = (($k) + 8|0);
 HEAP32[$3>>2] = 2;
 $4 = $o;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($o) + 8|0);
 HEAP32[$8>>2] = 19;
 $9 = (_addk($fs,$k,$o)|0);
 STACKTOP = sp;return ($9|0);
}
function _luaK_setreturns($fs,$e,$nresults) {
 $fs = $fs|0;
 $e = $e|0;
 $nresults = $nresults|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 13)) {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -8372225;
  $9 = $nresults << 14;
  $10 = (($9) + 16384)|0;
  $11 = $10 & 8372224;
  $12 = $8 | $11;
  HEAP32[$6>>2] = $12;
  return;
 } else if ((($0|0) == 14)) {
  $13 = (($e) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$fs>>2]|0;
  $16 = (($15) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 8388607;
  $21 = $nresults << 23;
  $22 = (($21) + 8388608)|0;
  $23 = $20 | $22;
  HEAP32[$18>>2] = $23;
  $24 = HEAP32[$13>>2]|0;
  $25 = (($17) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & -16321;
  $28 = (($fs) + 44|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 6;
  $32 = $31 | $27;
  HEAP32[$25>>2] = $32;
  $33 = (($30) + 1)|0;
  $34 = (($15) + 8|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($33>>>0)>($36>>>0);
  do {
   if ($37) {
    $38 = ($33>>>0)>(254);
    if ($38) {
     $39 = (($fs) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     _luaX_syntaxerror($40,12552);
     // unreachable;
    } else {
     $41 = $33&255;
     HEAP8[$34>>0] = $41;
     $$pre$phi$iZ2D = $41;
     break;
    }
   } else {
    $$pre$i = $33&255;
    $$pre$phi$iZ2D = $$pre$i;
   }
  } while(0);
  HEAP8[$28>>0] = $$pre$phi$iZ2D;
  return;
 } else {
  return;
 }
}
function _luaK_setoneret($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 13)) {
  HEAP32[$e>>2] = 7;
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 6;
  $9 = $8 & 255;
  HEAP32[$1>>2] = $9;
  return;
 } else if ((($0|0) == 14)) {
  $10 = (($e) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$fs>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8388607;
  $18 = $17 | 16777216;
  HEAP32[$15>>2] = $18;
  HEAP32[$e>>2] = 12;
  return;
 } else {
  return;
 }
}
function _luaK_dischargevars($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 8:  {
  HEAP32[$e>>2] = 7;
  return;
  break;
 }
 case 14:  {
  $44 = (($e) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$fs>>2]|0;
  $47 = (($46) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 & 8388607;
  $52 = $51 | 16777216;
  HEAP32[$49>>2] = $52;
  HEAP32[$e>>2] = 12;
  return;
  break;
 }
 case 13:  {
  HEAP32[$e>>2] = 7;
  $35 = (($e) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$fs>>2]|0;
  $38 = (($37) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 6;
  $43 = $42 & 255;
  HEAP32[$35>>2] = $43;
  return;
  break;
 }
 case 9:  {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 << 23;
  $4 = $3 | 5;
  $5 = (_luaK_code($fs,$4)|0);
  HEAP32[$1>>2] = $5;
  HEAP32[$e>>2] = 12;
  return;
  break;
 }
 case 10:  {
  $6 = (($e) + 8|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 << 16 >> 16;
  $9 = $8 & 256;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = (($fs) + 42|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)>($8|0);
   if (!($14)) {
    $15 = (($fs) + 44|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (($16) + -1)<<24>>24;
    HEAP8[$15>>0] = $17;
   }
  }
  $18 = (($6) + 3|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(8);
  $21 = (($6) + 2|0);
  $22 = HEAP8[$21>>0]|0;
  if ($20) {
   $23 = (($fs) + 42|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24&255)>($22&255);
   if ($25) {
    $op$0 = 7;
   } else {
    $26 = (($fs) + 44|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (($27) + -1)<<24>>24;
    HEAP8[$26>>0] = $28;
    $op$0 = 7;
   }
  } else {
   $op$0 = 6;
  }
  $29 = $22&255;
  $30 = $29 << 23;
  $31 = $30 | $op$0;
  $32 = $8 << 14;
  $33 = $31 | $32;
  $34 = (_luaK_code($fs,$33)|0);
  HEAP32[$6>>2] = $34;
  HEAP32[$e>>2] = 12;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaK_exp2nextreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(7);
 if ($1) {
  $2 = (($e) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 256;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (($fs) + 42|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = ($8|0)>($3|0);
   if (!($9)) {
    $10 = (($fs) + 44|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = (($11) + -1)<<24>>24;
    HEAP8[$10>>0] = $12;
   }
  }
 }
 $13 = (($fs) + 44|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = HEAP32[$fs>>2]|0;
 $18 = (($17) + 8|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($16>>>0)>($20>>>0);
 if (!($21)) {
  $$pre$i = $16&255;
  $$pre$phi$iZ2D = $$pre$i;
  HEAP8[$13>>0] = $$pre$phi$iZ2D;
  $26 = $$pre$phi$iZ2D&255;
  $27 = (($26) + -1)|0;
  _exp2reg($fs,$e,$27);
  return;
 }
 $22 = ($16>>>0)>(254);
 if ($22) {
  $23 = (($fs) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  _luaX_syntaxerror($24,12552);
  // unreachable;
 }
 $25 = $16&255;
 HEAP8[$18>>0] = $25;
 $$pre$phi$iZ2D = $25;
 HEAP8[$13>>0] = $$pre$phi$iZ2D;
 $26 = $$pre$phi$iZ2D&255;
 $27 = (($26) + -1)|0;
 _exp2reg($fs,$e,$27);
 return;
}
function _luaK_exp2anyreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(7);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($e) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  $7 = (($e) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  if ($6) {
   $$0 = $8;
   return ($$0|0);
  }
  $9 = (($fs) + 42|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   _exp2reg($fs,$e,$8);
   $13 = HEAP32[$7>>2]|0;
   $$0 = $13;
   return ($$0|0);
  }
 }
 _luaK_dischargevars($fs,$e);
 $14 = HEAP32[$e>>2]|0;
 $15 = ($14|0)==(7);
 if ($15) {
  $16 = (($e) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 256;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = (($fs) + 42|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)>($17|0);
   if (!($23)) {
    $24 = (($fs) + 44|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = (($25) + -1)<<24>>24;
    HEAP8[$24>>0] = $26;
   }
  }
 }
 $27 = (($fs) + 44|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($29) + 1)|0;
 $31 = HEAP32[$fs>>2]|0;
 $32 = (($31) + 8|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = ($30>>>0)>($34>>>0);
 do {
  if ($35) {
   $36 = ($30>>>0)>(254);
   if ($36) {
    $37 = (($fs) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    _luaX_syntaxerror($38,12552);
    // unreachable;
   } else {
    $39 = $30&255;
    HEAP8[$32>>0] = $39;
    $$pre$phi$i$iZ2D = $39;
    break;
   }
  } else {
   $$pre$i$i = $30&255;
   $$pre$phi$i$iZ2D = $$pre$i$i;
  }
 } while(0);
 HEAP8[$27>>0] = $$pre$phi$i$iZ2D;
 $40 = $$pre$phi$i$iZ2D&255;
 $41 = (($40) + -1)|0;
 _exp2reg($fs,$e,$41);
 $42 = (($e) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $$0 = $43;
 return ($$0|0);
}
function _luaK_exp2anyregup($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(9);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($e) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  if ($6) {
   return;
  }
 }
 (_luaK_exp2anyreg($fs,$e)|0);
 return;
}
function _luaK_exp2val($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($e) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($e) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  _luaK_dischargevars($fs,$e);
  return;
 } else {
  (_luaK_exp2anyreg($fs,$e)|0);
  return;
 }
}
function _luaK_exp2RK($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$i = 0, $k$i1 = 0, $o$i = 0, $o$i2 = 0, $o$i3 = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o$i3 = sp + 80|0;
 $k$i1 = sp;
 $o$i2 = sp + 16|0;
 $o$i = sp + 32|0;
 $k$i = sp + 48|0;
 $v$i = sp + 64|0;
 $0 = (($e) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($e) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  _luaK_dischargevars($fs,$e);
 } else {
  (_luaK_exp2anyreg($fs,$e)|0);
 }
 $5 = HEAP32[$e>>2]|0;
 switch ($5|0) {
 case 1: case 3: case 2:  {
  $6 = (($fs) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)<(256);
  if ($8) {
   $9 = ($5|0)==(1);
   if ($9) {
    $10 = (($v$i) + 8|0);
    HEAP32[$10>>2] = 0;
    $11 = (($fs) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 64|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$k$i>>2] = $14;
    $15 = (($k$i) + 8|0);
    HEAP32[$15>>2] = 69;
    $16 = (_addk($fs,$k$i,$v$i)|0);
    $22 = $16;
   } else {
    $17 = ($5|0)==(2);
    $18 = $17&1;
    HEAP32[$o$i>>2] = $18;
    $19 = (($o$i) + 8|0);
    HEAP32[$19>>2] = 1;
    $20 = (_addk($fs,$o$i,$o$i)|0);
    $22 = $20;
   }
   $21 = (($e) + 8|0);
   HEAP32[$21>>2] = $22;
   HEAP32[$e>>2] = 4;
   $23 = $22 | 256;
   $$0 = $23;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 5:  {
  $39 = (($e) + 8|0);
  $40 = +HEAPF64[$39>>3];
  HEAPF64[$o$i3>>3] = $40;
  $41 = (($o$i3) + 8|0);
  HEAP32[$41>>2] = 3;
  $42 = (_addk($fs,$o$i3,$o$i3)|0);
  HEAP32[$39>>2] = $42;
  HEAP32[$e>>2] = 4;
  $43 = $42;
  label = 13;
  break;
 }
 case 6:  {
  $24 = (($e) + 8|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $27;
  HEAP32[$k$i1>>2] = $31;
  $32 = (($k$i1) + 8|0);
  HEAP32[$32>>2] = 2;
  $33 = $o$i2;
  $34 = $33;
  HEAP32[$34>>2] = $27;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = $30;
  $37 = (($o$i2) + 8|0);
  HEAP32[$37>>2] = 19;
  $38 = (_addk($fs,$k$i1,$o$i2)|0);
  HEAP32[$24>>2] = $38;
  HEAP32[$e>>2] = 4;
  $43 = $38;
  label = 13;
  break;
 }
 case 4:  {
  $$phi$trans$insert = (($e) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $43 = $$pre;
  label = 13;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 13) {
  $44 = ($43|0)<(256);
  if ($44) {
   $45 = $43 | 256;
   $$0 = $45;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $46 = (_luaK_exp2anyreg($fs,$e)|0);
 $$0 = $46;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_storevar($fs,$var,$ex) {
 $fs = $fs|0;
 $var = $var|0;
 $ex = $ex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$var>>2]|0;
 if ((($0|0) == 10)) {
  $23 = (($var) + 8|0);
  $24 = (($23) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(8);
  $27 = $26 ? 10 : 8;
  $28 = (_luaK_exp2RK($fs,$ex)|0);
  $29 = (($23) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = HEAP16[$23>>1]|0;
  $33 = $32&65535;
  $34 = $31 << 6;
  $35 = $33 << 23;
  $36 = $28 << 14;
  $37 = $36 | $27;
  $38 = $37 | $34;
  $39 = $38 | $35;
  (_luaK_code($fs,$39)|0);
 } else if ((($0|0) == 8)) {
  $1 = HEAP32[$ex>>2]|0;
  $2 = ($1|0)==(7);
  if ($2) {
   $3 = (($ex) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = $4 & 256;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = (($fs) + 42|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = ($9|0)>($4|0);
    if (!($10)) {
     $11 = (($fs) + 44|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = (($12) + -1)<<24>>24;
     HEAP8[$11>>0] = $13;
    }
   }
  }
  $14 = (($var) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _exp2reg($fs,$ex,$15);
  return;
 } else if ((($0|0) == 9)) {
  $16 = (_luaK_exp2anyreg($fs,$ex)|0);
  $17 = (($var) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $16 << 6;
  $20 = $18 << 23;
  $21 = $19 | $20;
  $22 = $21 | 9;
  (_luaK_code($fs,$22)|0);
 }
 $40 = HEAP32[$ex>>2]|0;
 $41 = ($40|0)==(7);
 if (!($41)) {
  return;
 }
 $42 = (($ex) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 256;
 $45 = ($44|0)==(0);
 if (!($45)) {
  return;
 }
 $46 = (($fs) + 42|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)>($43|0);
 if ($49) {
  return;
 }
 $50 = (($fs) + 44|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = (($51) + -1)<<24>>24;
 HEAP8[$50>>0] = $52;
 return;
}
function _luaK_self($fs,$e,$key) {
 $fs = $fs|0;
 $e = $e|0;
 $key = $key|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaK_exp2anyreg($fs,$e)|0);
 $0 = (($e) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$e>>2]|0;
 $3 = ($2|0)==(7);
 $4 = $1 & 256;
 $5 = ($4|0)==(0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = (($fs) + 42|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)>($1|0);
  if (!($9)) {
   $10 = (($fs) + 44|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = (($11) + -1)<<24>>24;
   HEAP8[$10>>0] = $12;
  }
 }
 $13 = (($fs) + 44|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 HEAP32[$0>>2] = $15;
 HEAP32[$e>>2] = 7;
 $16 = (($15) + 2)|0;
 $17 = HEAP32[$fs>>2]|0;
 $18 = (($17) + 8|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($16>>>0)>($20>>>0);
 do {
  if ($21) {
   $22 = ($16>>>0)>(254);
   if ($22) {
    $23 = (($fs) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    _luaX_syntaxerror($24,12552);
    // unreachable;
   } else {
    $25 = $16&255;
    HEAP8[$18>>0] = $25;
    $$pre$phi$iZ2D = $25;
    break;
   }
  } else {
   $$pre$i = $16&255;
   $$pre$phi$iZ2D = $$pre$i;
  }
 } while(0);
 HEAP8[$13>>0] = $$pre$phi$iZ2D;
 $26 = (_luaK_exp2RK($fs,$key)|0);
 $27 = $15 << 6;
 $28 = $1 << 23;
 $29 = $26 << 14;
 $30 = $28 | $27;
 $31 = $30 | $29;
 $32 = $31 | 12;
 (_luaK_code($fs,$32)|0);
 $33 = HEAP32[$key>>2]|0;
 $34 = ($33|0)==(7);
 if (!($34)) {
  return;
 }
 $35 = (($key) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 256;
 $38 = ($37|0)==(0);
 if (!($38)) {
  return;
 }
 $39 = (($fs) + 42|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)>($36|0);
 if ($42) {
  return;
 }
 $43 = HEAP8[$13>>0]|0;
 $44 = (($43) + -1)<<24>>24;
 HEAP8[$13>>0] = $44;
 return;
}
function _luaK_goiftrue($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0$i$i = 0, $$lcssa = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$neg$i$i$i$i = 0, $$neg$i$i$i$i8 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $$sum$i$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$i$i = 0, $fs$idx$val$i$i$i2 = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$i = 0;
 var $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$i$i$i3 = 0, $fs$idx$val$idx$val = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $fs$idx$val$idx$val$i$i$i4 = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i$i$i$i = 0, $ispos$i$i$i$i9 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $list$0$i$i$i6 = 0, $list$0$i$i$i6$lcssa = 0, $list$0$i$i$lcssa = 0, $list$0$i$lcssa = 0;
 var $neg$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i$i = 0, $neg$i$i$i$i10 = 0, $pc$0 = 0, $pc$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 L1: do {
  switch ($0|0) {
  case 11:  {
   $fs$idx$val = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx = (($fs$idx$val) + 48|0);
   $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
   $1 = (($e) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($fs$idx$val$idx$val) + ($2<<2)|0);
   $4 = ($2|0)>(0);
   if ($4) {
    $$sum$i$i = (($2) + -1)|0;
    $5 = (($fs$idx$val$idx$val) + ($$sum$i$i<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & 63;
    $8 = (6936 + ($7)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)<(0);
    if ($10) {
     $$0$i$i = $5;$12 = $6;
    } else {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $$pre$i = HEAP32[$3>>2]|0;
    $$0$i$i = $3;$12 = $$pre$i;
   }
   $11 = $12 & -16321;
   $13 = $12 & 16320;
   $14 = ($13|0)==(0);
   $15 = $14&1;
   $16 = $15 << 6;
   $17 = $16 | $11;
   HEAP32[$$0$i$i>>2] = $17;
   $18 = HEAP32[$1>>2]|0;
   $pc$0 = $18;
   label = 34;
   break;
  }
  case 2: case 6: case 5: case 4:  {
   break;
  }
  default: {
   $19 = (($e) + 8|0);
   if ((($0|0) == 7)) {
    label = 23;
   } else if ((($0|0) == 12)) {
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$fs>>2]|0;
    $22 = (($21) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + ($20<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 63;
    $27 = ($26|0)==(27);
    if ($27) {
     $28 = (($fs) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + -1)|0;
     HEAP32[$28>>2] = $30;
     $31 = $25 >>> 23;
     $32 = $31 << 6;
     $33 = $32 | 16418;
     (_luaK_code($fs,$33)|0);
     $34 = (($fs) + 24|0);
     $35 = HEAP32[$34>>2]|0;
     HEAP32[$34>>2] = -1;
     $36 = (_luaK_code($fs,2147450910)|0);
     $37 = ($35|0)==(-1);
     if ($37) {
      $pc$0 = $36;
      label = 34;
      break L1;
     }
     $38 = ($36|0)==(-1);
     if ($38) {
      $pc$014 = $35;
      label = 35;
      break L1;
     }
     $fs$idx$val$i$i$i2 = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i3 = (($fs$idx$val$i$i$i2) + 48|0);
     $fs$idx$val$idx$val$i$i$i4 = HEAP32[$fs$idx$val$idx$i$i$i3>>2]|0;
     $list$0$i$i$i6 = $36;
     while(1) {
      $39 = (($fs$idx$val$idx$val$i$i$i4) + ($list$0$i$i$i6<<2)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $40 >>> 14;
      $42 = (($41) + -131071)|0;
      $43 = ($42|0)==(-1);
      if ($43) {
       $$lcssa36 = $39;$$lcssa37 = $40;$list$0$i$i$i6$lcssa = $list$0$i$i$i6;
       break;
      }
      $44 = (($list$0$i$i$i6) + 1)|0;
      $45 = (($44) + ($42))|0;
      $46 = ($45|0)==(-1);
      if ($46) {
       $$lcssa36 = $39;$$lcssa37 = $40;$list$0$i$i$i6$lcssa = $list$0$i$i$i6;
       break;
      } else {
       $list$0$i$i$i6 = $45;
      }
     }
     $$neg$i$i$i$i8 = $list$0$i$i$i6$lcssa ^ -1;
     $47 = (($35) + ($$neg$i$i$i$i8))|0;
     $ispos$i$i$i$i9 = ($47|0)>(-1);
     $neg$i$i$i$i10 = (0 - ($47))|0;
     $48 = $ispos$i$i$i$i9 ? $47 : $neg$i$i$i$i10;
     $49 = ($48|0)>(131071);
     if ($49) {
      $50 = (($fs) + 8|0);
      $51 = HEAP32[$50>>2]|0;
      _luaX_syntaxerror($51,12648);
      // unreachable;
     } else {
      $52 = $$lcssa37 & 16383;
      $53 = $47 << 14;
      $54 = (($53) + 2147467264)|0;
      $55 = $54 | $52;
      HEAP32[$$lcssa36>>2] = $55;
      $pc$0 = $36;
      label = 34;
      break L1;
     }
    } else {
     label = 16;
    }
   } else {
    label = 16;
   }
   if ((label|0) == 16) {
    $56 = (($fs) + 44|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = (($58) + 1)|0;
    $60 = HEAP32[$fs>>2]|0;
    $61 = (($60) + 8|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = ($59>>>0)>($63>>>0);
    do {
     if ($64) {
      $65 = ($59>>>0)>(254);
      if ($65) {
       $66 = (($fs) + 8|0);
       $67 = HEAP32[$66>>2]|0;
       _luaX_syntaxerror($67,12552);
       // unreachable;
      } else {
       $68 = $59&255;
       HEAP8[$61>>0] = $68;
       $$pre$phi$i$iZ2D = $68;
       break;
      }
     } else {
      $$pre$i$i = $59&255;
      $$pre$phi$i$iZ2D = $$pre$i$i;
     }
    } while(0);
    HEAP8[$56>>0] = $$pre$phi$i$iZ2D;
    $69 = $$pre$phi$i$iZ2D&255;
    $70 = (($69) + -1)|0;
    _discharge2reg($fs,$e,$70);
    $$pr = HEAP32[$e>>2]|0;
    $71 = ($$pr|0)==(7);
    if ($71) {
     label = 23;
    } else {
     $$pre = HEAP32[$19>>2]|0;
     $83 = $$pre;
    }
   }
   if ((label|0) == 23) {
    $72 = HEAP32[$19>>2]|0;
    $73 = $72 & 256;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = (($fs) + 42|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = ($77|0)>($72|0);
     if ($78) {
      $83 = $72;
     } else {
      $79 = (($fs) + 44|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($80) + -1)<<24>>24;
      HEAP8[$79>>0] = $81;
      $83 = $72;
     }
    } else {
     $83 = $72;
    }
   }
   $82 = $83 << 23;
   $84 = $82 | 16355;
   (_luaK_code($fs,$84)|0);
   $85 = (($fs) + 24|0);
   $86 = HEAP32[$85>>2]|0;
   HEAP32[$85>>2] = -1;
   $87 = (_luaK_code($fs,2147450910)|0);
   $88 = ($86|0)==(-1);
   if ($88) {
    $pc$0 = $87;
    label = 34;
   } else {
    $89 = ($87|0)==(-1);
    if ($89) {
     $pc$014 = $86;
     label = 35;
    } else {
     $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i = (($fs$idx$val$i$i$i) + 48|0);
     $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
     $list$0$i$i$i = $87;
     while(1) {
      $90 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $91 >>> 14;
      $93 = (($92) + -131071)|0;
      $94 = ($93|0)==(-1);
      if ($94) {
       $$lcssa34 = $90;$$lcssa35 = $91;$list$0$i$i$i$lcssa = $list$0$i$i$i;
       break;
      }
      $95 = (($list$0$i$i$i) + 1)|0;
      $96 = (($95) + ($93))|0;
      $97 = ($96|0)==(-1);
      if ($97) {
       $$lcssa34 = $90;$$lcssa35 = $91;$list$0$i$i$i$lcssa = $list$0$i$i$i;
       break;
      } else {
       $list$0$i$i$i = $96;
      }
     }
     $$neg$i$i$i$i = $list$0$i$i$i$lcssa ^ -1;
     $98 = (($86) + ($$neg$i$i$i$i))|0;
     $ispos$i$i$i$i = ($98|0)>(-1);
     $neg$i$i$i$i = (0 - ($98))|0;
     $99 = $ispos$i$i$i$i ? $98 : $neg$i$i$i$i;
     $100 = ($99|0)>(131071);
     if ($100) {
      $101 = (($fs) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      _luaX_syntaxerror($102,12648);
      // unreachable;
     } else {
      $103 = $$lcssa35 & 16383;
      $104 = $98 << 14;
      $105 = (($104) + 2147467264)|0;
      $106 = $105 | $103;
      HEAP32[$$lcssa34>>2] = $106;
      $pc$0 = $87;
      label = 34;
      break L1;
     }
    }
   }
  }
  }
 } while(0);
 if ((label|0) == 34) {
  $107 = ($pc$0|0)==(-1);
  if (!($107)) {
   $pc$014 = $pc$0;
   label = 35;
  }
 }
 do {
  if ((label|0) == 35) {
   $108 = (($e) + 20|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(-1);
   if ($110) {
    HEAP32[$108>>2] = $pc$014;
    break;
   }
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $list$0$i = $109;
   while(1) {
    $111 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112 >>> 14;
    $114 = (($113) + -131071)|0;
    $115 = ($114|0)==(-1);
    if ($115) {
     $$lcssa32 = $111;$$lcssa33 = $112;$list$0$i$lcssa = $list$0$i;
     break;
    }
    $116 = (($list$0$i) + 1)|0;
    $117 = (($116) + ($114))|0;
    $118 = ($117|0)==(-1);
    if ($118) {
     $$lcssa32 = $111;$$lcssa33 = $112;$list$0$i$lcssa = $list$0$i;
     break;
    } else {
     $list$0$i = $117;
    }
   }
   $$neg$i$i = $list$0$i$lcssa ^ -1;
   $119 = (($pc$014) + ($$neg$i$i))|0;
   $ispos$i$i = ($119|0)>(-1);
   $neg$i$i = (0 - ($119))|0;
   $120 = $ispos$i$i ? $119 : $neg$i$i;
   $121 = ($120|0)>(131071);
   if ($121) {
    $122 = (($fs) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    _luaX_syntaxerror($123,12648);
    // unreachable;
   } else {
    $124 = $$lcssa33 & 16383;
    $125 = $119 << 14;
    $126 = (($125) + 2147467264)|0;
    $127 = $126 | $124;
    HEAP32[$$lcssa32>>2] = $127;
    break;
   }
  }
 } while(0);
 $128 = (($e) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($fs) + 16|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($fs) + 20|0);
 HEAP32[$132>>2] = $131;
 $133 = (($fs) + 24|0);
 $134 = ($129|0)==(-1);
 if ($134) {
  HEAP32[$128>>2] = -1;
  return;
 }
 $135 = HEAP32[$133>>2]|0;
 $136 = ($135|0)==(-1);
 if ($136) {
  HEAP32[$133>>2] = $129;
  HEAP32[$128>>2] = -1;
  return;
 }
 $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 48|0);
 $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
 $list$0$i$i = $135;
 while(1) {
  $137 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 >>> 14;
  $140 = (($139) + -131071)|0;
  $141 = ($140|0)==(-1);
  if ($141) {
   $$lcssa = $137;$$lcssa31 = $138;$list$0$i$i$lcssa = $list$0$i$i;
   break;
  }
  $142 = (($list$0$i$i) + 1)|0;
  $143 = (($142) + ($140))|0;
  $144 = ($143|0)==(-1);
  if ($144) {
   $$lcssa = $137;$$lcssa31 = $138;$list$0$i$i$lcssa = $list$0$i$i;
   break;
  } else {
   $list$0$i$i = $143;
  }
 }
 $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
 $145 = (($129) + ($$neg$i$i$i))|0;
 $ispos$i$i$i = ($145|0)>(-1);
 $neg$i$i$i = (0 - ($145))|0;
 $146 = $ispos$i$i$i ? $145 : $neg$i$i$i;
 $147 = ($146|0)>(131071);
 if ($147) {
  $148 = (($fs) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  _luaX_syntaxerror($149,12648);
  // unreachable;
 }
 $150 = $$lcssa31 & 16383;
 $151 = $145 << 14;
 $152 = (($151) + 2147467264)|0;
 $153 = $152 | $150;
 HEAP32[$$lcssa>>2] = $153;
 HEAP32[$128>>2] = -1;
 return;
}
function _luaK_goiffalse($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$lcssa = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$neg$i$i$i$i = 0, $$neg$i$i$i$i8 = 0, $$pr = 0, $$pre = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$i$i = 0, $fs$idx$val$i$i$i2 = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0;
 var $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$i$i$i3 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $fs$idx$val$idx$val$i$i$i4 = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i$i$i$i = 0, $ispos$i$i$i$i9 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $list$0$i$i$i6 = 0, $list$0$i$i$i6$lcssa = 0, $list$0$i$i$lcssa = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, $neg$i$i$i = 0;
 var $neg$i$i$i$i = 0, $neg$i$i$i$i10 = 0, $pc$0 = 0, $pc$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 do {
  if ((($0|0) == 11)) {
   $1 = (($e) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $pc$0 = $2;
   label = 31;
  } else if (!((($0|0) == 3) | (($0|0) == 1))) {
   $3 = (($e) + 8|0);
   if ((($0|0) == 12)) {
    $4 = HEAP32[$3>>2]|0;
    $5 = HEAP32[$fs>>2]|0;
    $6 = (($5) + 48|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + ($4<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 63;
    $11 = ($10|0)==(27);
    if ($11) {
     $12 = (($fs) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($13) + -1)|0;
     HEAP32[$12>>2] = $14;
     $15 = $9 >>> 23;
     $16 = $15 << 6;
     $17 = $16 | 34;
     (_luaK_code($fs,$17)|0);
     $18 = (($fs) + 24|0);
     $19 = HEAP32[$18>>2]|0;
     HEAP32[$18>>2] = -1;
     $20 = (_luaK_code($fs,2147450910)|0);
     $21 = ($19|0)==(-1);
     if ($21) {
      $pc$0 = $20;
      label = 31;
      break;
     }
     $22 = ($20|0)==(-1);
     if ($22) {
      $pc$014 = $19;
      label = 32;
      break;
     }
     $fs$idx$val$i$i$i2 = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i3 = (($fs$idx$val$i$i$i2) + 48|0);
     $fs$idx$val$idx$val$i$i$i4 = HEAP32[$fs$idx$val$idx$i$i$i3>>2]|0;
     $list$0$i$i$i6 = $20;
     while(1) {
      $23 = (($fs$idx$val$idx$val$i$i$i4) + ($list$0$i$i$i6<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $24 >>> 14;
      $26 = (($25) + -131071)|0;
      $27 = ($26|0)==(-1);
      if ($27) {
       $$lcssa36 = $23;$$lcssa37 = $24;$list$0$i$i$i6$lcssa = $list$0$i$i$i6;
       break;
      }
      $28 = (($list$0$i$i$i6) + 1)|0;
      $29 = (($28) + ($26))|0;
      $30 = ($29|0)==(-1);
      if ($30) {
       $$lcssa36 = $23;$$lcssa37 = $24;$list$0$i$i$i6$lcssa = $list$0$i$i$i6;
       break;
      } else {
       $list$0$i$i$i6 = $29;
      }
     }
     $$neg$i$i$i$i8 = $list$0$i$i$i6$lcssa ^ -1;
     $31 = (($19) + ($$neg$i$i$i$i8))|0;
     $ispos$i$i$i$i9 = ($31|0)>(-1);
     $neg$i$i$i$i10 = (0 - ($31))|0;
     $32 = $ispos$i$i$i$i9 ? $31 : $neg$i$i$i$i10;
     $33 = ($32|0)>(131071);
     if ($33) {
      $34 = (($fs) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      _luaX_syntaxerror($35,12648);
      // unreachable;
     } else {
      $36 = $$lcssa37 & 16383;
      $37 = $31 << 14;
      $38 = (($37) + 2147467264)|0;
      $39 = $38 | $36;
      HEAP32[$$lcssa36>>2] = $39;
      $pc$0 = $20;
      label = 31;
      break;
     }
    } else {
     label = 13;
    }
   } else if ((($0|0) == 7)) {
    label = 20;
   } else {
    label = 13;
   }
   if ((label|0) == 13) {
    $40 = (($fs) + 44|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = (($42) + 1)|0;
    $44 = HEAP32[$fs>>2]|0;
    $45 = (($44) + 8|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = ($43>>>0)>($47>>>0);
    do {
     if ($48) {
      $49 = ($43>>>0)>(254);
      if ($49) {
       $50 = (($fs) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       _luaX_syntaxerror($51,12552);
       // unreachable;
      } else {
       $52 = $43&255;
       HEAP8[$45>>0] = $52;
       $$pre$phi$i$iZ2D = $52;
       break;
      }
     } else {
      $$pre$i$i = $43&255;
      $$pre$phi$i$iZ2D = $$pre$i$i;
     }
    } while(0);
    HEAP8[$40>>0] = $$pre$phi$i$iZ2D;
    $53 = $$pre$phi$i$iZ2D&255;
    $54 = (($53) + -1)|0;
    _discharge2reg($fs,$e,$54);
    $$pr = HEAP32[$e>>2]|0;
    $55 = ($$pr|0)==(7);
    if ($55) {
     label = 20;
    } else {
     $$pre = HEAP32[$3>>2]|0;
     $67 = $$pre;
    }
   }
   if ((label|0) == 20) {
    $56 = HEAP32[$3>>2]|0;
    $57 = $56 & 256;
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = (($fs) + 42|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60&255;
     $62 = ($61|0)>($56|0);
     if ($62) {
      $67 = $56;
     } else {
      $63 = (($fs) + 44|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = (($64) + -1)<<24>>24;
      HEAP8[$63>>0] = $65;
      $67 = $56;
     }
    } else {
     $67 = $56;
    }
   }
   $66 = $67 << 23;
   $68 = $66 | 32739;
   (_luaK_code($fs,$68)|0);
   $69 = (($fs) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   HEAP32[$69>>2] = -1;
   $71 = (_luaK_code($fs,2147450910)|0);
   $72 = ($70|0)==(-1);
   if ($72) {
    $pc$0 = $71;
    label = 31;
   } else {
    $73 = ($71|0)==(-1);
    if ($73) {
     $pc$014 = $70;
     label = 32;
    } else {
     $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i = (($fs$idx$val$i$i$i) + 48|0);
     $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
     $list$0$i$i$i = $71;
     while(1) {
      $74 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $75 >>> 14;
      $77 = (($76) + -131071)|0;
      $78 = ($77|0)==(-1);
      if ($78) {
       $$lcssa34 = $74;$$lcssa35 = $75;$list$0$i$i$i$lcssa = $list$0$i$i$i;
       break;
      }
      $79 = (($list$0$i$i$i) + 1)|0;
      $80 = (($79) + ($77))|0;
      $81 = ($80|0)==(-1);
      if ($81) {
       $$lcssa34 = $74;$$lcssa35 = $75;$list$0$i$i$i$lcssa = $list$0$i$i$i;
       break;
      } else {
       $list$0$i$i$i = $80;
      }
     }
     $$neg$i$i$i$i = $list$0$i$i$i$lcssa ^ -1;
     $82 = (($70) + ($$neg$i$i$i$i))|0;
     $ispos$i$i$i$i = ($82|0)>(-1);
     $neg$i$i$i$i = (0 - ($82))|0;
     $83 = $ispos$i$i$i$i ? $82 : $neg$i$i$i$i;
     $84 = ($83|0)>(131071);
     if ($84) {
      $85 = (($fs) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      _luaX_syntaxerror($86,12648);
      // unreachable;
     } else {
      $87 = $$lcssa35 & 16383;
      $88 = $82 << 14;
      $89 = (($88) + 2147467264)|0;
      $90 = $89 | $87;
      HEAP32[$$lcssa34>>2] = $90;
      $pc$0 = $71;
      label = 31;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 31) {
  $91 = ($pc$0|0)==(-1);
  if (!($91)) {
   $pc$014 = $pc$0;
   label = 32;
  }
 }
 do {
  if ((label|0) == 32) {
   $92 = (($e) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(-1);
   if ($94) {
    HEAP32[$92>>2] = $pc$014;
    break;
   }
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $list$0$i = $93;
   while(1) {
    $95 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 >>> 14;
    $98 = (($97) + -131071)|0;
    $99 = ($98|0)==(-1);
    if ($99) {
     $$lcssa32 = $95;$$lcssa33 = $96;$list$0$i$lcssa = $list$0$i;
     break;
    }
    $100 = (($list$0$i) + 1)|0;
    $101 = (($100) + ($98))|0;
    $102 = ($101|0)==(-1);
    if ($102) {
     $$lcssa32 = $95;$$lcssa33 = $96;$list$0$i$lcssa = $list$0$i;
     break;
    } else {
     $list$0$i = $101;
    }
   }
   $$neg$i$i = $list$0$i$lcssa ^ -1;
   $103 = (($pc$014) + ($$neg$i$i))|0;
   $ispos$i$i = ($103|0)>(-1);
   $neg$i$i = (0 - ($103))|0;
   $104 = $ispos$i$i ? $103 : $neg$i$i;
   $105 = ($104|0)>(131071);
   if ($105) {
    $106 = (($fs) + 8|0);
    $107 = HEAP32[$106>>2]|0;
    _luaX_syntaxerror($107,12648);
    // unreachable;
   } else {
    $108 = $$lcssa33 & 16383;
    $109 = $103 << 14;
    $110 = (($109) + 2147467264)|0;
    $111 = $110 | $108;
    HEAP32[$$lcssa32>>2] = $111;
    break;
   }
  }
 } while(0);
 $112 = (($e) + 20|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (($fs) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (($fs) + 20|0);
 HEAP32[$116>>2] = $115;
 $117 = (($fs) + 24|0);
 $118 = ($113|0)==(-1);
 if ($118) {
  HEAP32[$112>>2] = -1;
  return;
 }
 $119 = HEAP32[$117>>2]|0;
 $120 = ($119|0)==(-1);
 if ($120) {
  HEAP32[$117>>2] = $113;
  HEAP32[$112>>2] = -1;
  return;
 }
 $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 48|0);
 $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
 $list$0$i$i = $119;
 while(1) {
  $121 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 >>> 14;
  $124 = (($123) + -131071)|0;
  $125 = ($124|0)==(-1);
  if ($125) {
   $$lcssa = $121;$$lcssa31 = $122;$list$0$i$i$lcssa = $list$0$i$i;
   break;
  }
  $126 = (($list$0$i$i) + 1)|0;
  $127 = (($126) + ($124))|0;
  $128 = ($127|0)==(-1);
  if ($128) {
   $$lcssa = $121;$$lcssa31 = $122;$list$0$i$i$lcssa = $list$0$i$i;
   break;
  } else {
   $list$0$i$i = $127;
  }
 }
 $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
 $129 = (($113) + ($$neg$i$i$i))|0;
 $ispos$i$i$i = ($129|0)>(-1);
 $neg$i$i$i = (0 - ($129))|0;
 $130 = $ispos$i$i$i ? $129 : $neg$i$i$i;
 $131 = ($130|0)>(131071);
 if ($131) {
  $132 = (($fs) + 8|0);
  $133 = HEAP32[$132>>2]|0;
  _luaX_syntaxerror($133,12648);
  // unreachable;
 }
 $134 = $$lcssa31 & 16383;
 $135 = $129 << 14;
 $136 = (($135) + 2147467264)|0;
 $137 = $136 | $134;
 HEAP32[$$lcssa>>2] = $137;
 HEAP32[$112>>2] = -1;
 return;
}
function _luaK_indexed($fs,$t,$k) {
 $fs = $fs|0;
 $t = $t|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1&255;
 $3 = (($0) + 2|0);
 HEAP8[$3>>0] = $2;
 $4 = (_luaK_exp2RK($fs,$k)|0);
 $5 = $4&65535;
 HEAP16[$0>>1] = $5;
 $6 = HEAP32[$t>>2]|0;
 $7 = ($6|0)==(9);
 $8 = $7 ? 9 : 8;
 $9 = (($0) + 3|0);
 HEAP8[$9>>0] = $8;
 HEAP32[$t>>2] = 10;
 return;
}
function _luaK_prefix($fs,$op,$e,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e = $e|0;
 $line = $line|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i9$i = 0, $$03$i$i = 0, $$03$i6$i = 0, $$phi$trans$insert$i = 0, $$pr$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i14$i = 0, $$pre$i$i8$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre16$i = 0, $$sum$i$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i7$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e2 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$phi$trans$insert$i$i = 0, $fs$idx1$val$idx$phi$trans$insert$i3$i = 0, $fs$idx1$val$idx$val$pre$i$i = 0, $fs$idx1$val$idx$val$pre$i4$i = 0, $fs$idx1$val$pre$i$i = 0, $fs$idx1$val$pre$i2$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e2 = sp;
 $0 = (($e2) + 20|0);
 HEAP32[$0>>2] = -1;
 $1 = (($e2) + 16|0);
 HEAP32[$1>>2] = -1;
 HEAP32[$e2>>2] = 6;
 $2 = (($e2) + 8|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 if ((($op|0) == 3) | (($op|0) == 1) | (($op|0) == 0)) {
  $7 = (($op) + 25)|0;
  _codeexpval($fs,$7,$e,$e2,$line);
  STACKTOP = sp;return;
 } else if ((($op|0) == 2)) {
  _luaK_dischargevars($fs,$e);
  $8 = HEAP32[$e>>2]|0;
  switch ($8|0) {
  case 11:  {
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $9 = (($e) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($fs$idx$val$idx$val$i) + ($10<<2)|0);
   $12 = ($10|0)>(0);
   if ($12) {
    $$sum$i$i$i = (($10) + -1)|0;
    $13 = (($fs$idx$val$idx$val$i) + ($$sum$i$i$i<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 63;
    $16 = (6936 + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)<(0);
    if ($18) {
     $$0$i$i$i = $13;$20 = $14;
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    $$pre$i$i = HEAP32[$11>>2]|0;
    $$0$i$i$i = $11;$20 = $$pre$i$i;
   }
   $19 = $20 & -16321;
   $21 = $20 & 16320;
   $22 = ($21|0)==(0);
   $23 = $22&1;
   $24 = $23 << 6;
   $25 = $24 | $19;
   HEAP32[$$0$i$i$i>>2] = $25;
   break;
  }
  case 3: case 1:  {
   HEAP32[$e>>2] = 2;
   break;
  }
  case 2: case 6: case 5: case 4:  {
   HEAP32[$e>>2] = 3;
   break;
  }
  case 12:  {
   $26 = (($fs) + 44|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = (($28) + 1)|0;
   $30 = HEAP32[$fs>>2]|0;
   $31 = (($30) + 8|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = ($29>>>0)>($33>>>0);
   do {
    if ($34) {
     $35 = ($29>>>0)>(254);
     if ($35) {
      $36 = (($fs) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      _luaX_syntaxerror($37,12552);
      // unreachable;
     } else {
      $38 = $29&255;
      HEAP8[$31>>0] = $38;
      $$pre$phi$i$i$iZ2D = $38;
      break;
     }
    } else {
     $$pre$i$i14$i = $29&255;
     $$pre$phi$i$i$iZ2D = $$pre$i$i14$i;
    }
   } while(0);
   HEAP8[$26>>0] = $$pre$phi$i$i$iZ2D;
   $39 = $$pre$phi$i$i$iZ2D&255;
   $40 = (($39) + -1)|0;
   _discharge2reg($fs,$e,$40);
   $$pre$i = HEAP32[$e>>2]|0;
   $phitmp$i = ($$pre$i|0)==(7);
   if ($phitmp$i) {
    label = 17;
   } else {
    $$phi$trans$insert$i = (($e) + 8|0);
    $$pre16$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $54 = $$pre16$i;
    label = 20;
   }
   break;
  }
  case 7:  {
   label = 17;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 17) {
   $41 = (($e) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 256;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = (($fs) + 42|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = ($47|0)>($42|0);
    if ($48) {
     $54 = $42;
     label = 20;
    } else {
     $49 = (($fs) + 44|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = (($50) + -1)<<24>>24;
     HEAP8[$49>>0] = $51;
     $54 = $42;
     label = 20;
    }
   } else {
    $54 = $42;
    label = 20;
   }
  }
  if ((label|0) == 20) {
   $52 = (($e) + 8|0);
   $53 = $54 << 23;
   $55 = $53 | 27;
   $56 = (_luaK_code($fs,$55)|0);
   HEAP32[$52>>2] = $56;
   HEAP32[$e>>2] = 12;
  }
  $57 = (($e) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($e) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  HEAP32[$57>>2] = $60;
  HEAP32[$59>>2] = $58;
  $61 = ($60|0)==(-1);
  if ($61) {
   $85 = $58;
  } else {
   $fs$idx1$val$pre$i2$i = HEAP32[$fs>>2]|0;
   $fs$idx1$val$idx$phi$trans$insert$i3$i = (($fs$idx1$val$pre$i2$i) + 48|0);
   $fs$idx1$val$idx$val$pre$i4$i = HEAP32[$fs$idx1$val$idx$phi$trans$insert$i3$i>>2]|0;
   $$03$i6$i = $60;
   while(1) {
    $62 = (($fs$idx1$val$idx$val$pre$i4$i) + ($$03$i6$i<<2)|0);
    $63 = ($$03$i6$i|0)>(0);
    if ($63) {
     $$sum$i$i$i7$i = (($$03$i6$i) + -1)|0;
     $64 = (($fs$idx1$val$idx$val$pre$i4$i) + ($$sum$i$i$i7$i<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $65 & 63;
     $67 = (6936 + ($66)|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)<(0);
     if ($69) {
      $$0$i$i$i9$i = $64;$71 = $65;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
    if ((label|0) == 25) {
     label = 0;
     $$pre$i$i8$i = HEAP32[$62>>2]|0;
     $$0$i$i$i9$i = $62;$71 = $$pre$i$i8$i;
    }
    $70 = $71 & 63;
    $72 = ($70|0)==(35);
    if ($72) {
     $73 = $71 >>> 23;
     $74 = $73 << 6;
     $75 = $71 & 8372224;
     $76 = $75 | $74;
     $77 = $76 | 34;
     HEAP32[$$0$i$i$i9$i>>2] = $77;
    }
    $78 = HEAP32[$62>>2]|0;
    $79 = $78 >>> 14;
    $80 = (($79) + -131071)|0;
    $81 = ($80|0)==(-1);
    if ($81) {
     break;
    }
    $82 = (($$03$i6$i) + 1)|0;
    $83 = (($82) + ($80))|0;
    $84 = ($83|0)==(-1);
    if ($84) {
     break;
    } else {
     $$03$i6$i = $83;
    }
   }
   $$pr$i = HEAP32[$59>>2]|0;
   $85 = $$pr$i;
  }
  $86 = ($85|0)==(-1);
  if ($86) {
   STACKTOP = sp;return;
  }
  $fs$idx1$val$pre$i$i = HEAP32[$fs>>2]|0;
  $fs$idx1$val$idx$phi$trans$insert$i$i = (($fs$idx1$val$pre$i$i) + 48|0);
  $fs$idx1$val$idx$val$pre$i$i = HEAP32[$fs$idx1$val$idx$phi$trans$insert$i$i>>2]|0;
  $$03$i$i = $85;
  while(1) {
   $87 = (($fs$idx1$val$idx$val$pre$i$i) + ($$03$i$i<<2)|0);
   $88 = ($$03$i$i|0)>(0);
   if ($88) {
    $$sum$i$i$i$i = (($$03$i$i) + -1)|0;
    $89 = (($fs$idx1$val$idx$val$pre$i$i) + ($$sum$i$i$i$i<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $90 & 63;
    $92 = (6936 + ($91)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = ($93<<24>>24)<(0);
    if ($94) {
     $$0$i$i$i$i = $89;$96 = $90;
    } else {
     label = 35;
    }
   } else {
    label = 35;
   }
   if ((label|0) == 35) {
    label = 0;
    $$pre$i$i$i = HEAP32[$87>>2]|0;
    $$0$i$i$i$i = $87;$96 = $$pre$i$i$i;
   }
   $95 = $96 & 63;
   $97 = ($95|0)==(35);
   if ($97) {
    $98 = $96 >>> 23;
    $99 = $98 << 6;
    $100 = $96 & 8372224;
    $101 = $100 | $99;
    $102 = $101 | 34;
    HEAP32[$$0$i$i$i$i>>2] = $102;
   }
   $103 = HEAP32[$87>>2]|0;
   $104 = $103 >>> 14;
   $105 = (($104) + -131071)|0;
   $106 = ($105|0)==(-1);
   if ($106) {
    break;
   }
   $107 = (($$03$i$i) + 1)|0;
   $108 = (($107) + ($105))|0;
   $109 = ($108|0)==(-1);
   if ($109) {
    break;
   } else {
    $$03$i$i = $108;
   }
  }
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaK_infix($fs,$op,$v) {
 $fs = $fs|0;
 $op = $op|0;
 $v = $v|0;
 var $$off = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 19:  {
  _luaK_goiftrue($fs,$v);
  return;
  break;
 }
 case 12:  {
  _luaK_dischargevars($fs,$v);
  $0 = HEAP32[$v>>2]|0;
  $1 = ($0|0)==(7);
  if ($1) {
   $2 = (($v) + 8|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = $3 & 256;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (($fs) + 42|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = ($8|0)>($3|0);
    if (!($9)) {
     $10 = (($fs) + 44|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = (($11) + -1)<<24>>24;
     HEAP8[$10>>0] = $12;
    }
   }
  }
  $13 = (($fs) + 44|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($15) + 1)|0;
  $17 = HEAP32[$fs>>2]|0;
  $18 = (($17) + 8|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($16>>>0)>($20>>>0);
  do {
   if ($21) {
    $22 = ($16>>>0)>(254);
    if ($22) {
     $23 = (($fs) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     _luaX_syntaxerror($24,12552);
     // unreachable;
    } else {
     $25 = $16&255;
     HEAP8[$18>>0] = $25;
     $$pre$phi$i$iZ2D = $25;
     break;
    }
   } else {
    $$pre$i$i = $16&255;
    $$pre$phi$i$iZ2D = $$pre$i$i;
   }
  } while(0);
  HEAP8[$13>>0] = $$pre$phi$i$iZ2D;
  $26 = $$pre$phi$i$iZ2D&255;
  $27 = (($26) + -1)|0;
  _exp2reg($fs,$v,$27);
  return;
  break;
 }
 case 20:  {
  _luaK_goiffalse($fs,$v);
  return;
  break;
 }
 case 11: case 10: case 9: case 8: case 7: case 4: case 3: case 6: case 5: case 2: case 1: case 0:  {
  $28 = (($v) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(-1);
  if ($30) {
   $31 = (($v) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(-1);
   if ($33) {
    $34 = HEAP32[$v>>2]|0;
    $$off = (($34) + -5)|0;
    $switch = ($$off>>>0)<(2);
    if ($switch) {
     return;
    }
   }
  }
  (_luaK_exp2RK($fs,$v)|0);
  return;
  break;
 }
 default: {
  (_luaK_exp2RK($fs,$v)|0);
  return;
 }
 }
}
function _luaK_posfix($fs,$op,$e1,$e2,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 $line = $line|0;
 var $$lcssa = 0, $$lcssa22 = 0, $$lcssa23 = 0, $$lcssa24 = 0, $$neg$i$i = 0, $$neg$i$i8 = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0;
 var $fs$idx$val$i2 = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i3 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i4 = 0, $ispos$i$i = 0, $ispos$i$i9 = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $list$0$i6 = 0, $list$0$i6$lcssa = 0, $neg$i$i = 0, $neg$i$i10 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 15: case 14: case 13:  {
  $109 = (($op) + 18)|0;
  _codecomp($fs,$109,1,$e1,$e2);
  return;
  break;
 }
 case 18: case 17: case 16:  {
  $110 = (($op) + 15)|0;
  _codecomp($fs,$110,0,$e1,$e2);
  return;
  break;
 }
 case 20:  {
  _luaK_dischargevars($fs,$e2);
  $23 = (($e2) + 16|0);
  $24 = (($e1) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(-1);
  do {
   if (!($26)) {
    $27 = HEAP32[$23>>2]|0;
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$23>>2] = $25;
     break;
    }
    $fs$idx$val$i2 = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i3 = (($fs$idx$val$i2) + 48|0);
    $fs$idx$val$idx$val$i4 = HEAP32[$fs$idx$val$idx$i3>>2]|0;
    $list$0$i6 = $27;
    while(1) {
     $29 = (($fs$idx$val$idx$val$i4) + ($list$0$i6<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $30 >>> 14;
     $32 = (($31) + -131071)|0;
     $33 = ($32|0)==(-1);
     if ($33) {
      $$lcssa23 = $29;$$lcssa24 = $30;$list$0$i6$lcssa = $list$0$i6;
      break;
     }
     $34 = (($list$0$i6) + 1)|0;
     $35 = (($34) + ($32))|0;
     $36 = ($35|0)==(-1);
     if ($36) {
      $$lcssa23 = $29;$$lcssa24 = $30;$list$0$i6$lcssa = $list$0$i6;
      break;
     } else {
      $list$0$i6 = $35;
     }
    }
    $$neg$i$i8 = $list$0$i6$lcssa ^ -1;
    $37 = (($25) + ($$neg$i$i8))|0;
    $ispos$i$i9 = ($37|0)>(-1);
    $neg$i$i10 = (0 - ($37))|0;
    $38 = $ispos$i$i9 ? $37 : $neg$i$i10;
    $39 = ($38|0)>(131071);
    if ($39) {
     $40 = (($fs) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     _luaX_syntaxerror($41,12648);
     // unreachable;
    } else {
     $42 = $$lcssa24 & 16383;
     $43 = $37 << 14;
     $44 = (($43) + 2147467264)|0;
     $45 = $44 | $42;
     HEAP32[$$lcssa23>>2] = $45;
     break;
    }
   }
  } while(0);
  ;HEAP32[$e1+0>>2]=HEAP32[$e2+0>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
  return;
  break;
 }
 case 12:  {
  $46 = (($e2) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($e2) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)==($49|0);
  if ($50) {
   _luaK_dischargevars($fs,$e2);
  } else {
   (_luaK_exp2anyreg($fs,$e2)|0);
  }
  $51 = HEAP32[$e2>>2]|0;
  $52 = ($51|0)==(12);
  if ($52) {
   $53 = (($e2) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$fs>>2]|0;
   $56 = (($55) + 48|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 63;
   $61 = ($60|0)==(29);
   if ($61) {
    $62 = HEAP32[$e1>>2]|0;
    $63 = ($62|0)==(7);
    $64 = (($e1) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65 & 256;
    $67 = ($66|0)==(0);
    $or$cond = $63 & $67;
    if ($or$cond) {
     $68 = (($fs) + 42|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = ($70|0)>($65|0);
     if (!($71)) {
      $72 = (($fs) + 44|0);
      $73 = HEAP8[$72>>0]|0;
      $74 = (($73) + -1)<<24>>24;
      HEAP8[$72>>0] = $74;
     }
    }
    $75 = $59 & 8388607;
    $76 = (($e1) + 8|0);
    $77 = $65 << 23;
    $78 = $77 | $75;
    HEAP32[$58>>2] = $78;
    HEAP32[$e1>>2] = 12;
    $79 = HEAP32[$53>>2]|0;
    HEAP32[$76>>2] = $79;
    return;
   }
  }
  _luaK_dischargevars($fs,$e2);
  $80 = HEAP32[$e2>>2]|0;
  $81 = ($80|0)==(7);
  if ($81) {
   $82 = (($e2) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 & 256;
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = (($fs) + 42|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = ($88|0)>($83|0);
    if (!($89)) {
     $90 = (($fs) + 44|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = (($91) + -1)<<24>>24;
     HEAP8[$90>>0] = $92;
    }
   }
  }
  $93 = (($fs) + 44|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (($95) + 1)|0;
  $97 = HEAP32[$fs>>2]|0;
  $98 = (($97) + 8|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = ($96>>>0)>($100>>>0);
  do {
   if ($101) {
    $102 = ($96>>>0)>(254);
    if ($102) {
     $103 = (($fs) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     _luaX_syntaxerror($104,12552);
     // unreachable;
    } else {
     $105 = $96&255;
     HEAP8[$98>>0] = $105;
     $$pre$phi$i$iZ2D = $105;
     break;
    }
   } else {
    $$pre$i$i = $96&255;
    $$pre$phi$i$iZ2D = $$pre$i$i;
   }
  } while(0);
  HEAP8[$93>>0] = $$pre$phi$i$iZ2D;
  $106 = $$pre$phi$i$iZ2D&255;
  $107 = (($106) + -1)|0;
  _exp2reg($fs,$e2,$107);
  _codeexpval($fs,29,$e1,$e2,$line);
  return;
  break;
 }
 case 11: case 10: case 9: case 8: case 7: case 4: case 3: case 6: case 5: case 2: case 1: case 0:  {
  $108 = (($op) + 13)|0;
  _codeexpval($fs,$108,$e1,$e2,$line);
  return;
  break;
 }
 case 19:  {
  _luaK_dischargevars($fs,$e2);
  $0 = (($e2) + 20|0);
  $1 = (($e1) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(-1);
  do {
   if (!($3)) {
    $4 = HEAP32[$0>>2]|0;
    $5 = ($4|0)==(-1);
    if ($5) {
     HEAP32[$0>>2] = $2;
     break;
    }
    $fs$idx$val$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
    $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
    $list$0$i = $4;
    while(1) {
     $6 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = $7 >>> 14;
     $9 = (($8) + -131071)|0;
     $10 = ($9|0)==(-1);
     if ($10) {
      $$lcssa = $6;$$lcssa22 = $7;$list$0$i$lcssa = $list$0$i;
      break;
     }
     $11 = (($list$0$i) + 1)|0;
     $12 = (($11) + ($9))|0;
     $13 = ($12|0)==(-1);
     if ($13) {
      $$lcssa = $6;$$lcssa22 = $7;$list$0$i$lcssa = $list$0$i;
      break;
     } else {
      $list$0$i = $12;
     }
    }
    $$neg$i$i = $list$0$i$lcssa ^ -1;
    $14 = (($2) + ($$neg$i$i))|0;
    $ispos$i$i = ($14|0)>(-1);
    $neg$i$i = (0 - ($14))|0;
    $15 = $ispos$i$i ? $14 : $neg$i$i;
    $16 = ($15|0)>(131071);
    if ($16) {
     $17 = (($fs) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     _luaX_syntaxerror($18,12648);
     // unreachable;
    } else {
     $19 = $$lcssa22 & 16383;
     $20 = $14 << 14;
     $21 = (($20) + 2147467264)|0;
     $22 = $21 | $19;
     HEAP32[$$lcssa>>2] = $22;
     break;
    }
   }
  } while(0);
  ;HEAP32[$e1+0>>2]=HEAP32[$e2+0>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaK_fixline($fs,$line) {
 $fs = $fs|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = HEAP32[$fs>>2]|0;
 $4 = (($3) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 HEAP32[$6>>2] = $line;
 return;
}
function _luaK_setlist($fs,$base,$nelems,$tostore) {
 $fs = $fs|0;
 $base = $base|0;
 $nelems = $nelems|0;
 $tostore = $tostore|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($nelems) + -1)|0;
 $1 = (($0|0) / 50)&-1;
 $2 = (($1) + 1)|0;
 $3 = ($tostore|0)==(-1);
 $4 = $3 ? 0 : $tostore;
 $5 = ($2|0)<(512);
 if ($5) {
  $6 = $base << 6;
  $7 = $4 << 23;
  $8 = $2 << 14;
  $9 = $6 | $7;
  $10 = $9 | $8;
  $11 = $10 | 43;
  (_luaK_code($fs,$11)|0);
  $21 = (($base) + 1)|0;
  $22 = $21&255;
  $23 = (($fs) + 44|0);
  HEAP8[$23>>0] = $22;
  return;
 }
 $12 = ($2|0)<(67108864);
 if (!($12)) {
  $19 = (($fs) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  _luaX_syntaxerror($20,12600);
  // unreachable;
 }
 $13 = $base << 6;
 $14 = $4 << 23;
 $15 = $13 | $14;
 $16 = $15 | 43;
 (_luaK_code($fs,$16)|0);
 $17 = $2 << 6;
 $18 = $17 | 46;
 (_luaK_code($fs,$18)|0);
 $21 = (($base) + 1)|0;
 $22 = $21&255;
 $23 = (($fs) + 44|0);
 HEAP8[$23>>0] = $22;
 return;
}
function _luaK_code($fs,$i) {
 $fs = $fs|0;
 $i = $i|0;
 var $$0$i$i$i = 0, $$0$i$i1$i = 0, $$02$i$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$pre = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre2 = 0, $$pre3 = 0, $$pre4 = 0, $$pre6 = 0, $$sum$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $fs$idx$val$idx$i$phi$trans$insert$i = 0, $fs$idx$val$idx$val$i$pre$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $neg$i$i = 0, $neg$i$i$i = 0;
 var $storemerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($fs) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($fs) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(-1);
 do {
  if ($5) {
   $50 = $4;
  } else {
   $fs$idx$val$idx$i$phi$trans$insert$i = (($0) + 48|0);
   $fs$idx$val$idx$val$i$pre$i = HEAP32[$fs$idx$val$idx$i$phi$trans$insert$i>>2]|0;
   $$02$i$i = $2;
   while(1) {
    $6 = (($fs$idx$val$idx$val$i$pre$i) + ($$02$i$i<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7 >>> 14;
    $9 = (($8) + -131071)|0;
    $10 = ($9|0)==(-1);
    if ($10) {
     $$0$i$i$i = -1;
    } else {
     $11 = (($$02$i$i) + 1)|0;
     $12 = (($11) + ($9))|0;
     $$0$i$i$i = $12;
    }
    $13 = ($$02$i$i|0)>(0);
    if ($13) {
     $$sum$i$i$i = (($$02$i$i) + -1)|0;
     $14 = (($fs$idx$val$idx$val$i$pre$i) + ($$sum$i$i$i<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = $15 & 63;
     $17 = (6936 + ($16)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)<(0);
     if ($19) {
      $$0$i$i1$i = $14;$21 = $15;
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
    if ((label|0) == 7) {
     label = 0;
     $$0$i$i1$i = $6;$21 = $7;
    }
    $20 = $21 & 63;
    $22 = ($20|0)==(35);
    if ($22) {
     $23 = $21 >>> 23;
     $24 = $23 << 6;
     $25 = $21 & 8372224;
     $26 = $25 | $24;
     $27 = $26 | 34;
     HEAP32[$$0$i$i1$i>>2] = $27;
     $$neg$i$i = $$02$i$i ^ -1;
     $28 = (($4) + ($$neg$i$i))|0;
     $ispos$i$i = ($28|0)>(-1);
     $neg$i$i = (0 - ($28))|0;
     $29 = $ispos$i$i ? $28 : $neg$i$i;
     $30 = ($29|0)>(131071);
     if ($30) {
      label = 10;
      break;
     }
     $33 = HEAP32[$6>>2]|0;
     $34 = $33 & 16383;
     $35 = $28 << 14;
     $36 = (($35) + 2147467264)|0;
     $37 = $34 | $36;
     $storemerge$i = $37;
    } else {
     $$neg$i$i$i = $$02$i$i ^ -1;
     $38 = (($4) + ($$neg$i$i$i))|0;
     $ispos$i$i$i = ($38|0)>(-1);
     $neg$i$i$i = (0 - ($38))|0;
     $39 = $ispos$i$i$i ? $38 : $neg$i$i$i;
     $40 = ($39|0)>(131071);
     if ($40) {
      label = 13;
      break;
     }
     $43 = $7 & 16383;
     $44 = $38 << 14;
     $45 = (($44) + 2147467264)|0;
     $46 = $45 | $43;
     $storemerge$i = $46;
    }
    HEAP32[$6>>2] = $storemerge$i;
    $47 = ($$0$i$i$i|0)==(-1);
    if ($47) {
     label = 16;
     break;
    } else {
     $$02$i$i = $$0$i$i$i;
    }
   }
   if ((label|0) == 10) {
    $31 = (($fs) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    _luaX_syntaxerror($32,12648);
    // unreachable;
   }
   else if ((label|0) == 13) {
    $41 = (($fs) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    _luaX_syntaxerror($42,12648);
    // unreachable;
   }
   else if ((label|0) == 16) {
    $$pre = HEAP32[$3>>2]|0;
    $50 = $$pre;
    break;
   }
  }
 } while(0);
 HEAP32[$1>>2] = -1;
 $48 = (($0) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $51 = ($50|0)<($49|0);
 if ($51) {
  $$pre3 = (($0) + 48|0);
  $$pre$phiZ2D = $$pre3;$61 = $50;
 } else {
  $52 = (($fs) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 52|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($0) + 48|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_luaM_growaux_($55,$57,$48,4,2147483647,12640)|0);
  HEAP32[$56>>2] = $58;
  $$pre1 = HEAP32[$3>>2]|0;
  $$pre$phiZ2D = $56;$61 = $$pre1;
 }
 $59 = HEAP32[$$pre$phiZ2D>>2]|0;
 $60 = (($59) + ($61<<2)|0);
 HEAP32[$60>>2] = $i;
 $62 = HEAP32[$3>>2]|0;
 $63 = (($0) + 24|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($62|0)<($64|0);
 $$pre4 = (($fs) + 8|0);
 if ($65) {
  $$pre6 = (($0) + 56|0);
  $$pre$phi7Z2D = $$pre6;$77 = $62;
  $72 = HEAP32[$$pre4>>2]|0;
  $73 = (($72) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$$pre$phi7Z2D>>2]|0;
  $76 = (($75) + ($77<<2)|0);
  HEAP32[$76>>2] = $74;
  $78 = HEAP32[$3>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$3>>2] = $79;
  return ($78|0);
 } else {
  $66 = HEAP32[$$pre4>>2]|0;
  $67 = (($66) + 52|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($0) + 56|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (_luaM_growaux_($68,$70,$63,4,2147483647,12640)|0);
  HEAP32[$69>>2] = $71;
  $$pre2 = HEAP32[$3>>2]|0;
  $$pre$phi7Z2D = $69;$77 = $$pre2;
  $72 = HEAP32[$$pre4>>2]|0;
  $73 = (($72) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$$pre$phi7Z2D>>2]|0;
  $76 = (($75) + ($77<<2)|0);
  HEAP32[$76>>2] = $74;
  $78 = HEAP32[$3>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$3>>2] = $79;
  return ($78|0);
 }
 return (0)|0;
}
function _addk($fs,$key,$v) {
 $fs = $fs|0;
 $key = $key|0;
 $v = $v|0;
 var $$0 = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $oldsize$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = (($1) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_luaH_set($3,$6,$key)|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(19);
 if ($10) {
  $11 = $7;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($fs) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($13|0)<($18|0);
  if ($19) {
   $20 = (($4) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21) + ($13<<4)|0) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($v) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 ^ $23;
   $27 = $26 & 63;
   $28 = ($27|0)==(0);
   if ($28) {
    $29 = (($21) + ($13<<4)|0);
    $30 = (_luaV_equalobj(0,$29,$v)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $$pre$phi6Z2D = $7;$$pre$phiZ2D = $17;
    } else {
     $$0 = $13;
     return ($$0|0);
    }
   } else {
    $$pre$phi6Z2D = $7;$$pre$phiZ2D = $17;
   }
  } else {
   $$pre$phi6Z2D = $7;$$pre$phiZ2D = $17;
  }
 } else {
  $$pre4 = (($fs) + 28|0);
  $$pre$phi6Z2D = $7;$$pre$phiZ2D = $$pre4;
 }
 $32 = (($4) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$$pre$phiZ2D>>2]|0;
 $35 = ($34|0)<(0);
 $36 = $35 << 31 >> 31;
 $37 = $$pre$phi6Z2D;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 HEAP32[$8>>2] = 19;
 $41 = ($34|0)<($33|0);
 if ($41) {
  $46 = $33;
 } else {
  $42 = (($4) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_luaM_growaux_($3,$43,$32,16,67108863,12624)|0);
  HEAP32[$42>>2] = $44;
  $$pre = HEAP32[$32>>2]|0;
  $46 = $$pre;
 }
 $45 = ($33|0)<($46|0);
 $47 = (($4) + 44|0);
 $48 = HEAP32[$47>>2]|0;
 if ($45) {
  $oldsize$01 = $33;
  while(1) {
   $49 = (($oldsize$01) + 1)|0;
   $50 = ((($48) + ($oldsize$01<<4)|0) + 8|0);
   HEAP32[$50>>2] = 0;
   $51 = ($49|0)<($46|0);
   if ($51) {
    $oldsize$01 = $49;
   } else {
    break;
   }
  }
 }
 $52 = (($48) + ($34<<4)|0);
 ;HEAP32[$52+0>>2]=HEAP32[$v+0>>2]|0;HEAP32[$52+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$v+8>>2]|0;HEAP32[$52+12>>2]=HEAP32[$v+12>>2]|0;
 $53 = HEAP32[$$pre$phiZ2D>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $54;
 $55 = (($v) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & 64;
 $58 = ($57|0)==(0);
 if ($58) {
  $$0 = $34;
  return ($$0|0);
 }
 $59 = (($4) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 & 4;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  $$0 = $34;
  return ($$0|0);
 }
 $63 = HEAP32[$v>>2]|0;
 $64 = (($63) + 5|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 & 3;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $$0 = $34;
  return ($$0|0);
 }
 _luaC_barrier_($3,$4,$63);
 $$0 = $34;
 return ($$0|0);
}
function _exp2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $$0$i$i = 0, $$0$i$i$us = 0, $$0$i$i25 = 0, $$0$i$i25$us = 0, $$0$i$i46 = 0, $$0$i$i60 = 0, $$014$i = 0, $$014$i16 = 0, $$02$i = 0, $$02$i$us = 0, $$02$i42 = 0, $$lcssa = 0, $$lcssa100 = 0, $$lcssa101 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $$neg$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0;
 var $$neg$i$i$i35 = 0, $$neg$i$i48 = 0, $$neg$i$i7 = 0, $$neg$i$i7$us = 0, $$neg$i$us = 0, $$neg$i54 = 0, $$pre$i = 0, $$pre$i18 = 0, $$pre89 = 0, $$sum$i$i = 0, $$sum$i$i17 = 0, $$sum$i$i23 = 0, $$sum$i$i23$us = 0, $$sum$i$i58 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$i29 = 0, $fs$idx$val$i3$us$pre = 0, $fs$idx$val$i43$pre = 0, $fs$idx$val$idx$i = 0;
 var $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i30 = 0, $fs$idx$val$idx$i4$us$phi$trans$insert = 0, $fs$idx$val$idx$i44$phi$trans$insert = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i31 = 0, $fs$idx$val$idx$val$i45$pre = 0, $fs$idx$val$idx$val$i5$us$pre = 0, $fs$idx2$val$i = 0, $fs$idx2$val$i12 = 0, $fs$idx2$val$idx$i = 0, $fs$idx2$val$idx$i13 = 0, $fs$idx2$val$idx$val$i = 0, $fs$idx2$val$idx$val$i14 = 0, $ispos$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i$i$i36 = 0, $ispos$i$i49 = 0;
 var $ispos$i$i8 = 0, $ispos$i$i8$us = 0, $ispos$i$us = 0, $ispos$i55 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$lcssa = 0, $list$0$i$i33 = 0, $list$0$i$i33$lcssa = 0, $list$0$i$lcssa = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i37 = 0, $neg$i$i50 = 0, $neg$i$i9 = 0, $neg$i$i9$us = 0, $neg$i$us = 0, $neg$i56 = 0, $or$cond$i62 = 0;
 var $p_f$0 = 0, $p_t$0 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge$i63 = 0, $storemerge91 = 0, $storemerge92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _discharge2reg($fs,$e,$reg);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(11);
 $2 = (($e) + 16|0);
 do {
  if ($1) {
   $3 = (($e) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(-1);
   if (!($5)) {
    $6 = HEAP32[$2>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     HEAP32[$2>>2] = $4;
     break;
    }
    $fs$idx$val$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i = (($fs$idx$val$i) + 48|0);
    $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
    $list$0$i = $6;
    while(1) {
     $8 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = $9 >>> 14;
     $11 = (($10) + -131071)|0;
     $12 = ($11|0)==(-1);
     if ($12) {
      $$lcssa100 = $8;$$lcssa101 = $9;$list$0$i$lcssa = $list$0$i;
      break;
     }
     $13 = (($list$0$i) + 1)|0;
     $14 = (($13) + ($11))|0;
     $15 = ($14|0)==(-1);
     if ($15) {
      $$lcssa100 = $8;$$lcssa101 = $9;$list$0$i$lcssa = $list$0$i;
      break;
     } else {
      $list$0$i = $14;
     }
    }
    $$neg$i$i = $list$0$i$lcssa ^ -1;
    $16 = (($4) + ($$neg$i$i))|0;
    $ispos$i$i = ($16|0)>(-1);
    $neg$i$i = (0 - ($16))|0;
    $17 = $ispos$i$i ? $16 : $neg$i$i;
    $18 = ($17|0)>(131071);
    if ($18) {
     $19 = (($fs) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     _luaX_syntaxerror($20,12648);
     // unreachable;
    } else {
     $21 = $$lcssa101 & 16383;
     $22 = $16 << 14;
     $23 = (($22) + 2147467264)|0;
     $24 = $23 | $21;
     HEAP32[$$lcssa100>>2] = $24;
     break;
    }
   }
  }
 } while(0);
 $25 = HEAP32[$2>>2]|0;
 $26 = (($e) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)==($27|0);
 if ($28) {
  HEAP32[$2>>2] = -1;
  HEAP32[$26>>2] = -1;
  $259 = (($e) + 8|0);
  HEAP32[$259>>2] = $reg;
  HEAP32[$e>>2] = 7;
  return;
 }
 $29 = ($25|0)==(-1);
 do {
  if ($29) {
   label = 21;
  } else {
   $fs$idx2$val$i = HEAP32[$fs>>2]|0;
   $fs$idx2$val$idx$i = (($fs$idx2$val$i) + 48|0);
   $fs$idx2$val$idx$val$i = HEAP32[$fs$idx2$val$idx$i>>2]|0;
   $$014$i = $25;
   while(1) {
    $30 = (($fs$idx2$val$idx$val$i) + ($$014$i<<2)|0);
    $31 = ($$014$i|0)>(0);
    if ($31) {
     $$sum$i$i = (($$014$i) + -1)|0;
     $32 = (($fs$idx2$val$idx$val$i) + ($$sum$i$i<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $33 & 63;
     $35 = (6936 + ($34)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = ($36<<24>>24)<(0);
     if ($37) {
      $39 = $33;
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    if ((label|0) == 16) {
     label = 0;
     $$pre$i = HEAP32[$30>>2]|0;
     $39 = $$pre$i;
    }
    $38 = $39 & 63;
    $40 = ($38|0)==(35);
    if (!($40)) {
     label = 30;
     break;
    }
    $41 = HEAP32[$30>>2]|0;
    $42 = $41 >>> 14;
    $43 = (($42) + -131071)|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 20;
     break;
    }
    $45 = (($$014$i) + 1)|0;
    $46 = (($45) + ($43))|0;
    $47 = ($46|0)==(-1);
    if ($47) {
     label = 20;
     break;
    } else {
     $$014$i = $46;
    }
   }
   if ((label|0) == 20) {
    label = 21;
    break;
   }
   else if ((label|0) == 30) {
    label = 31;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $48 = ($27|0)==(-1);
   if ($48) {
    $p_f$0 = -1;$p_t$0 = -1;
   } else {
    $fs$idx2$val$i12 = HEAP32[$fs>>2]|0;
    $fs$idx2$val$idx$i13 = (($fs$idx2$val$i12) + 48|0);
    $fs$idx2$val$idx$val$i14 = HEAP32[$fs$idx2$val$idx$i13>>2]|0;
    $$014$i16 = $27;
    while(1) {
     $49 = (($fs$idx2$val$idx$val$i14) + ($$014$i16<<2)|0);
     $50 = ($$014$i16|0)>(0);
     if ($50) {
      $$sum$i$i17 = (($$014$i16) + -1)|0;
      $51 = (($fs$idx2$val$idx$val$i14) + ($$sum$i$i17<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & 63;
      $54 = (6936 + ($53)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ($55<<24>>24)<(0);
      if ($56) {
       $58 = $52;
      } else {
       label = 25;
      }
     } else {
      label = 25;
     }
     if ((label|0) == 25) {
      label = 0;
      $$pre$i18 = HEAP32[$49>>2]|0;
      $58 = $$pre$i18;
     }
     $57 = $58 & 63;
     $59 = ($57|0)==(35);
     if (!($59)) {
      label = 29;
      break;
     }
     $60 = HEAP32[$49>>2]|0;
     $61 = $60 >>> 14;
     $62 = (($61) + -131071)|0;
     $63 = ($62|0)==(-1);
     if ($63) {
      label = 49;
      break;
     }
     $64 = (($$014$i16) + 1)|0;
     $65 = (($64) + ($62))|0;
     $66 = ($65|0)==(-1);
     if ($66) {
      label = 49;
      break;
     } else {
      $$014$i16 = $65;
     }
    }
    if ((label|0) == 29) {
     label = 31;
     break;
    }
    else if ((label|0) == 49) {
     $p_f$0 = -1;$p_t$0 = -1;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $$pre89 = (($fs) + 24|0);
   do {
    if ($1) {
     $98 = -1;
    } else {
     $67 = HEAP32[$$pre89>>2]|0;
     HEAP32[$$pre89>>2] = -1;
     $68 = (_luaK_code($fs,2147450910)|0);
     $69 = ($67|0)==(-1);
     if ($69) {
      $98 = $68;
     } else {
      $70 = ($68|0)==(-1);
      if ($70) {
       $98 = $67;
      } else {
       $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
       $fs$idx$val$idx$i$i = (($fs$idx$val$i$i) + 48|0);
       $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
       $list$0$i$i = $68;
       while(1) {
        $71 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = $72 >>> 14;
        $74 = (($73) + -131071)|0;
        $75 = ($74|0)==(-1);
        if ($75) {
         $$lcssa98 = $71;$$lcssa99 = $72;$list$0$i$i$lcssa = $list$0$i$i;
         break;
        }
        $76 = (($list$0$i$i) + 1)|0;
        $77 = (($76) + ($74))|0;
        $78 = ($77|0)==(-1);
        if ($78) {
         $$lcssa98 = $71;$$lcssa99 = $72;$list$0$i$i$lcssa = $list$0$i$i;
         break;
        } else {
         $list$0$i$i = $77;
        }
       }
       $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
       $79 = (($67) + ($$neg$i$i$i))|0;
       $ispos$i$i$i = ($79|0)>(-1);
       $neg$i$i$i = (0 - ($79))|0;
       $80 = $ispos$i$i$i ? $79 : $neg$i$i$i;
       $81 = ($80|0)>(131071);
       if ($81) {
        $82 = (($fs) + 8|0);
        $83 = HEAP32[$82>>2]|0;
        _luaX_syntaxerror($83,12648);
        // unreachable;
       } else {
        $84 = $$lcssa99 & 16383;
        $85 = $79 << 14;
        $86 = (($85) + 2147467264)|0;
        $87 = $86 | $84;
        HEAP32[$$lcssa98>>2] = $87;
        $98 = $68;
        break;
       }
      }
     }
    }
   } while(0);
   $88 = (($fs) + 16|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($fs) + 20|0);
   HEAP32[$90>>2] = $89;
   $91 = $reg << 6;
   $92 = $91 | 16387;
   $93 = (_luaK_code($fs,$92)|0);
   $94 = HEAP32[$88>>2]|0;
   HEAP32[$90>>2] = $94;
   $95 = $91 | 8388611;
   $96 = (_luaK_code($fs,$95)|0);
   $97 = HEAP32[$88>>2]|0;
   HEAP32[$90>>2] = $97;
   $99 = ($98|0)==(-1);
   if ($99) {
    $p_f$0 = $93;$p_t$0 = $96;
   } else {
    $100 = HEAP32[$$pre89>>2]|0;
    $101 = ($100|0)==(-1);
    if ($101) {
     HEAP32[$$pre89>>2] = $98;
     $p_f$0 = $93;$p_t$0 = $96;
     break;
    }
    $fs$idx$val$i$i29 = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i$i30 = (($fs$idx$val$i$i29) + 48|0);
    $fs$idx$val$idx$val$i$i31 = HEAP32[$fs$idx$val$idx$i$i30>>2]|0;
    $list$0$i$i33 = $100;
    while(1) {
     $102 = (($fs$idx$val$idx$val$i$i31) + ($list$0$i$i33<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $103 >>> 14;
     $105 = (($104) + -131071)|0;
     $106 = ($105|0)==(-1);
     if ($106) {
      $$lcssa = $102;$$lcssa97 = $103;$list$0$i$i33$lcssa = $list$0$i$i33;
      break;
     }
     $107 = (($list$0$i$i33) + 1)|0;
     $108 = (($107) + ($105))|0;
     $109 = ($108|0)==(-1);
     if ($109) {
      $$lcssa = $102;$$lcssa97 = $103;$list$0$i$i33$lcssa = $list$0$i$i33;
      break;
     } else {
      $list$0$i$i33 = $108;
     }
    }
    $$neg$i$i$i35 = $list$0$i$i33$lcssa ^ -1;
    $110 = (($98) + ($$neg$i$i$i35))|0;
    $ispos$i$i$i36 = ($110|0)>(-1);
    $neg$i$i$i37 = (0 - ($110))|0;
    $111 = $ispos$i$i$i36 ? $110 : $neg$i$i$i37;
    $112 = ($111|0)>(131071);
    if ($112) {
     $113 = (($fs) + 8|0);
     $114 = HEAP32[$113>>2]|0;
     _luaX_syntaxerror($114,12648);
     // unreachable;
    } else {
     $115 = $$lcssa97 & 16383;
     $116 = $110 << 14;
     $117 = (($116) + 2147467264)|0;
     $118 = $117 | $115;
     HEAP32[$$lcssa>>2] = $118;
     $p_f$0 = $93;$p_t$0 = $96;
     break;
    }
   }
  }
 } while(0);
 $119 = (($fs) + 16|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($fs) + 20|0);
 HEAP32[$121>>2] = $120;
 $122 = HEAP32[$26>>2]|0;
 $123 = ($122|0)==(-1);
 do {
  if (!($123)) {
   $124 = ($reg|0)==(255);
   $125 = $reg << 6;
   $126 = $125 & 16320;
   $fs$idx$val$i43$pre = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i44$phi$trans$insert = (($fs$idx$val$i43$pre) + 48|0);
   $fs$idx$val$idx$val$i45$pre = HEAP32[$fs$idx$val$idx$i44$phi$trans$insert>>2]|0;
   $$02$i42 = $122;
   while(1) {
    $127 = (($fs$idx$val$idx$val$i45$pre) + ($$02$i42<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $128 >>> 14;
    $130 = (($129) + -131071)|0;
    $131 = ($130|0)==(-1);
    if ($131) {
     $$0$i$i46 = -1;
    } else {
     $132 = (($$02$i42) + 1)|0;
     $133 = (($132) + ($130))|0;
     $$0$i$i46 = $133;
    }
    $134 = ($$02$i42|0)>(0);
    if ($134) {
     $$sum$i$i58 = (($$02$i42) + -1)|0;
     $135 = (($fs$idx$val$idx$val$i45$pre) + ($$sum$i$i58<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & 63;
     $138 = (6936 + ($137)|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = ($139<<24>>24)<(0);
     if ($140) {
      $$0$i$i60 = $135;$142 = $136;
     } else {
      label = 56;
     }
    } else {
     label = 56;
    }
    if ((label|0) == 56) {
     label = 0;
     $$0$i$i60 = $127;$142 = $128;
    }
    $141 = $142 & 63;
    $143 = ($141|0)==(35);
    if ($143) {
     $144 = $142 >>> 23;
     $145 = ($144|0)==($reg|0);
     $or$cond$i62 = $124 | $145;
     if ($or$cond$i62) {
      $148 = $144 << 6;
      $149 = $142 & 8372224;
      $150 = $149 | $148;
      $151 = $150 | 34;
      $storemerge$i63 = $151;
     } else {
      $146 = $142 & -16321;
      $147 = $146 | $126;
      $storemerge$i63 = $147;
     }
     HEAP32[$$0$i$i60>>2] = $storemerge$i63;
     $$neg$i54 = $$02$i42 ^ -1;
     $152 = (($120) + ($$neg$i54))|0;
     $ispos$i55 = ($152|0)>(-1);
     $neg$i56 = (0 - ($152))|0;
     $153 = $ispos$i55 ? $152 : $neg$i56;
     $154 = ($153|0)>(131071);
     if ($154) {
      label = 62;
      break;
     }
     $157 = HEAP32[$127>>2]|0;
     $158 = $157 & 16383;
     $159 = $152 << 14;
     $160 = (($159) + 2147467264)|0;
     $161 = $158 | $160;
     $storemerge = $161;
    } else {
     $$neg$i$i48 = $$02$i42 ^ -1;
     $162 = (($p_f$0) + ($$neg$i$i48))|0;
     $ispos$i$i49 = ($162|0)>(-1);
     $neg$i$i50 = (0 - ($162))|0;
     $163 = $ispos$i$i49 ? $162 : $neg$i$i50;
     $164 = ($163|0)>(131071);
     if ($164) {
      label = 65;
      break;
     }
     $167 = $128 & 16383;
     $168 = $162 << 14;
     $169 = (($168) + 2147467264)|0;
     $170 = $167 | $169;
     $storemerge = $170;
    }
    HEAP32[$127>>2] = $storemerge;
    $171 = ($$0$i$i46|0)==(-1);
    if ($171) {
     label = 68;
     break;
    } else {
     $$02$i42 = $$0$i$i46;
    }
   }
   if ((label|0) == 62) {
    $155 = (($fs) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    _luaX_syntaxerror($156,12648);
    // unreachable;
   }
   else if ((label|0) == 65) {
    $165 = (($fs) + 8|0);
    $166 = HEAP32[$165>>2]|0;
    _luaX_syntaxerror($166,12648);
    // unreachable;
   }
   else if ((label|0) == 68) {
    break;
   }
  }
 } while(0);
 $172 = HEAP32[$2>>2]|0;
 $173 = ($172|0)==(-1);
 if ($173) {
  HEAP32[$2>>2] = -1;
  HEAP32[$26>>2] = -1;
  $259 = (($e) + 8|0);
  HEAP32[$259>>2] = $reg;
  HEAP32[$e>>2] = 7;
  return;
 }
 $174 = ($reg|0)==(255);
 $175 = $reg << 6;
 $176 = $175 & 16320;
 $fs$idx$val$i3$us$pre = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i4$us$phi$trans$insert = (($fs$idx$val$i3$us$pre) + 48|0);
 $fs$idx$val$idx$val$i5$us$pre = HEAP32[$fs$idx$val$idx$i4$us$phi$trans$insert>>2]|0;
 if ($174) {
  $$02$i$us = $172;
  while(1) {
   $177 = (($fs$idx$val$idx$val$i5$us$pre) + ($$02$i$us<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 >>> 14;
   $180 = (($179) + -131071)|0;
   $181 = ($180|0)==(-1);
   if ($181) {
    $$0$i$i$us = -1;
   } else {
    $182 = (($$02$i$us) + 1)|0;
    $183 = (($182) + ($180))|0;
    $$0$i$i$us = $183;
   }
   $184 = ($$02$i$us|0)>(0);
   if ($184) {
    $$sum$i$i23$us = (($$02$i$us) + -1)|0;
    $185 = (($fs$idx$val$idx$val$i5$us$pre) + ($$sum$i$i23$us<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $186 & 63;
    $188 = (6936 + ($187)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = ($189<<24>>24)<(0);
    if ($190) {
     $$0$i$i25$us = $185;$192 = $186;
    } else {
     label = 77;
    }
   } else {
    label = 77;
   }
   if ((label|0) == 77) {
    label = 0;
    $$0$i$i25$us = $177;$192 = $178;
   }
   $191 = $192 & 63;
   $193 = ($191|0)==(35);
   if ($193) {
    $201 = $192 >>> 23;
    $202 = $201 << 6;
    $203 = $192 & 8372224;
    $204 = $203 | $202;
    $205 = $204 | 34;
    HEAP32[$$0$i$i25$us>>2] = $205;
    $$neg$i$us = $$02$i$us ^ -1;
    $206 = (($120) + ($$neg$i$us))|0;
    $ispos$i$us = ($206|0)>(-1);
    $neg$i$us = (0 - ($206))|0;
    $207 = $ispos$i$us ? $206 : $neg$i$us;
    $208 = ($207|0)>(131071);
    if ($208) {
     label = 94;
     break;
    }
    $209 = HEAP32[$177>>2]|0;
    $210 = $209 & 16383;
    $211 = $206 << 14;
    $212 = (($211) + 2147467264)|0;
    $213 = $210 | $212;
    $storemerge92 = $213;
   } else {
    $$neg$i$i7$us = $$02$i$us ^ -1;
    $194 = (($p_t$0) + ($$neg$i$i7$us))|0;
    $ispos$i$i8$us = ($194|0)>(-1);
    $neg$i$i9$us = (0 - ($194))|0;
    $195 = $ispos$i$i8$us ? $194 : $neg$i$i9$us;
    $196 = ($195|0)>(131071);
    if ($196) {
     label = 99;
     break;
    }
    $197 = $178 & 16383;
    $198 = $194 << 14;
    $199 = (($198) + 2147467264)|0;
    $200 = $197 | $199;
    $storemerge92 = $200;
   }
   HEAP32[$177>>2] = $storemerge92;
   $214 = ($$0$i$i$us|0)==(-1);
   if ($214) {
    label = 104;
    break;
   } else {
    $$02$i$us = $$0$i$i$us;
   }
  }
  if ((label|0) == 94) {
   $242 = (($fs) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   _luaX_syntaxerror($243,12648);
   // unreachable;
  }
  else if ((label|0) == 99) {
   $252 = (($fs) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   _luaX_syntaxerror($253,12648);
   // unreachable;
  }
  else if ((label|0) == 104) {
   HEAP32[$2>>2] = -1;
   HEAP32[$26>>2] = -1;
   $259 = (($e) + 8|0);
   HEAP32[$259>>2] = $reg;
   HEAP32[$e>>2] = 7;
   return;
  }
 }
 $$02$i = $172;
 while(1) {
  $215 = (($fs$idx$val$idx$val$i5$us$pre) + ($$02$i<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $216 >>> 14;
  $218 = (($217) + -131071)|0;
  $219 = ($218|0)==(-1);
  if ($219) {
   $$0$i$i = -1;
  } else {
   $220 = (($$02$i) + 1)|0;
   $221 = (($220) + ($218))|0;
   $$0$i$i = $221;
  }
  $222 = ($$02$i|0)>(0);
  if ($222) {
   $$sum$i$i23 = (($$02$i) + -1)|0;
   $223 = (($fs$idx$val$idx$val$i5$us$pre) + ($$sum$i$i23<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $224 & 63;
   $226 = (6936 + ($225)|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = ($227<<24>>24)<(0);
   if ($228) {
    $$0$i$i25 = $223;$230 = $224;
   } else {
    label = 88;
   }
  } else {
   label = 88;
  }
  if ((label|0) == 88) {
   label = 0;
   $$0$i$i25 = $215;$230 = $216;
  }
  $229 = $230 & 63;
  $231 = ($229|0)==(35);
  if ($231) {
   $232 = $230 >>> 23;
   $233 = ($232|0)==($reg|0);
   if ($233) {
    $236 = $230 & 8372224;
    $237 = $236 | $175;
    $238 = $237 | 34;
    $storemerge$i = $238;
   } else {
    $234 = $230 & -16321;
    $235 = $234 | $176;
    $storemerge$i = $235;
   }
   HEAP32[$$0$i$i25>>2] = $storemerge$i;
   $$neg$i = $$02$i ^ -1;
   $239 = (($120) + ($$neg$i))|0;
   $ispos$i = ($239|0)>(-1);
   $neg$i = (0 - ($239))|0;
   $240 = $ispos$i ? $239 : $neg$i;
   $241 = ($240|0)>(131071);
   if ($241) {
    label = 95;
    break;
   }
   $244 = HEAP32[$215>>2]|0;
   $245 = $244 & 16383;
   $246 = $239 << 14;
   $247 = (($246) + 2147467264)|0;
   $248 = $245 | $247;
   $storemerge91 = $248;
  } else {
   $$neg$i$i7 = $$02$i ^ -1;
   $249 = (($p_t$0) + ($$neg$i$i7))|0;
   $ispos$i$i8 = ($249|0)>(-1);
   $neg$i$i9 = (0 - ($249))|0;
   $250 = $ispos$i$i8 ? $249 : $neg$i$i9;
   $251 = ($250|0)>(131071);
   if ($251) {
    label = 100;
    break;
   }
   $254 = $216 & 16383;
   $255 = $249 << 14;
   $256 = (($255) + 2147467264)|0;
   $257 = $254 | $256;
   $storemerge91 = $257;
  }
  HEAP32[$215>>2] = $storemerge91;
  $258 = ($$0$i$i|0)==(-1);
  if ($258) {
   label = 105;
   break;
  } else {
   $$02$i = $$0$i$i;
  }
 }
 if ((label|0) == 95) {
  $242 = (($fs) + 8|0);
  $243 = HEAP32[$242>>2]|0;
  _luaX_syntaxerror($243,12648);
  // unreachable;
 }
 else if ((label|0) == 100) {
  $252 = (($fs) + 8|0);
  $253 = HEAP32[$252>>2]|0;
  _luaX_syntaxerror($253,12648);
  // unreachable;
 }
 else if ((label|0) == 105) {
  HEAP32[$2>>2] = -1;
  HEAP32[$26>>2] = -1;
  $259 = (($e) + 8|0);
  HEAP32[$259>>2] = $reg;
  HEAP32[$e>>2] = 7;
  return;
 }
}
function _discharge2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $$from$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k$i = 0, $l$0$i = 0, $o$i = 0, $o$i3 = 0, $or$cond$i = 0, $or$cond2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k$i = sp + 32|0;
 $o$i3 = sp;
 $o$i = sp + 16|0;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 L1: do {
  switch ($0|0) {
  case 4:  {
   $41 = (($e) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)<(262144);
   $44 = $reg << 6;
   if ($43) {
    $45 = $42 << 14;
    $46 = $44 | $45;
    $47 = $46 | 1;
    (_luaK_code($fs,$47)|0);
    break L1;
   } else {
    $48 = $44 | 2;
    (_luaK_code($fs,$48)|0);
    $49 = $42 << 6;
    $50 = $49 | 46;
    (_luaK_code($fs,$50)|0);
    break L1;
   }
   break;
  }
  case 12:  {
   $86 = (($e) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = HEAP32[$fs>>2]|0;
   $89 = (($88) + 48|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + ($87<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 & -16321;
   $94 = $reg << 6;
   $95 = $94 & 16320;
   $96 = $93 | $95;
   HEAP32[$91>>2] = $96;
   break;
  }
  case 7:  {
   $97 = (($e) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($reg|0);
   if (!($99)) {
    $100 = $reg << 6;
    $101 = $98 << 23;
    $102 = $101 | $100;
    (_luaK_code($fs,$102)|0);
   }
   break;
  }
  case 5:  {
   $51 = (($e) + 8|0);
   $52 = +HEAPF64[$51>>3];
   HEAPF64[$o$i>>3] = $52;
   $53 = (($o$i) + 8|0);
   HEAP32[$53>>2] = 3;
   $54 = (_addk($fs,$o$i,$o$i)|0);
   $55 = ($54|0)<(262144);
   $56 = $reg << 6;
   if ($55) {
    $57 = $54 << 14;
    $58 = $56 | $57;
    $59 = $58 | 1;
    (_luaK_code($fs,$59)|0);
    break L1;
   } else {
    $60 = $56 | 2;
    (_luaK_code($fs,$60)|0);
    $61 = $54 << 6;
    $62 = $61 | 46;
    (_luaK_code($fs,$62)|0);
    break L1;
   }
   break;
  }
  case 2: case 3:  {
   $35 = ($0|0)==(2);
   $36 = $35&1;
   $37 = $reg << 6;
   $38 = $36 << 23;
   $39 = $37 | $38;
   $40 = $39 | 3;
   (_luaK_code($fs,$40)|0);
   break;
  }
  case 1:  {
   $1 = (($reg) + 1)|0;
   $2 = (($fs) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($fs) + 20|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)>($5|0);
   do {
    if ($6) {
     $7 = (($3) + -1)|0;
     $8 = HEAP32[$fs>>2]|0;
     $9 = (($8) + 48|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (($10) + ($7<<2)|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = $12 & 63;
     $14 = ($13|0)==(4);
     if ($14) {
      $15 = $12 >>> 6;
      $16 = $15 & 255;
      $17 = $12 >>> 23;
      $18 = (($16) + ($17))|0;
      $19 = ($16|0)>($reg|0);
      $20 = (($18) + 1)|0;
      $21 = ($20|0)<($reg|0);
      $or$cond$i = $19 | $21;
      if ($or$cond$i) {
       $22 = ($16|0)<($reg|0);
       $23 = ($16|0)>($1|0);
       $or$cond2$i = $22 | $23;
       if ($or$cond2$i) {
        break;
       }
      }
      $24 = ($16|0)<($reg|0);
      $$from$i = $24 ? $16 : $reg;
      $25 = ($18|0)>($reg|0);
      $l$0$i = $25 ? $18 : $reg;
      $26 = $12 & 8372287;
      $27 = $$from$i << 6;
      $28 = $27 & 16320;
      $29 = (($l$0$i) - ($$from$i))|0;
      $30 = $29 << 23;
      $31 = $28 | $26;
      $32 = $31 | $30;
      HEAP32[$11>>2] = $32;
      break L1;
     }
    }
   } while(0);
   $33 = $reg << 6;
   $34 = $33 | 4;
   (_luaK_code($fs,$34)|0);
   break;
  }
  case 6:  {
   $63 = (($e) + 8|0);
   $64 = $63;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + 4)|0;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = $66;
   HEAP32[$k$i>>2] = $70;
   $71 = (($k$i) + 8|0);
   HEAP32[$71>>2] = 2;
   $72 = $o$i3;
   $73 = $72;
   HEAP32[$73>>2] = $66;
   $74 = (($72) + 4)|0;
   $75 = $74;
   HEAP32[$75>>2] = $69;
   $76 = (($o$i3) + 8|0);
   HEAP32[$76>>2] = 19;
   $77 = (_addk($fs,$k$i,$o$i3)|0);
   $78 = ($77|0)<(262144);
   $79 = $reg << 6;
   if ($78) {
    $80 = $77 << 14;
    $81 = $79 | $80;
    $82 = $81 | 1;
    (_luaK_code($fs,$82)|0);
    break L1;
   } else {
    $83 = $79 | 2;
    (_luaK_code($fs,$83)|0);
    $84 = $77 << 6;
    $85 = $84 | 46;
    (_luaK_code($fs,$85)|0);
    break L1;
   }
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $103 = (($e) + 8|0);
 HEAP32[$103>>2] = $reg;
 HEAP32[$e>>2] = 7;
 STACKTOP = sp;return;
}
function _codeexpval($fs,$op,$e1,$e2,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 $line = $line|0;
 var $$phi$trans$insert$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$i$i = 0, $o1$0 = 0, $o2$0 = 0, $or$cond$i = 0, $phitmp$i$i = 0, $res$i = 0, $v1$i = 0, $v2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i$i$i = sp + 48|0;
 $v1$i = sp;
 $v2$i = sp + 16|0;
 $res$i = sp + 32|0;
 $0 = ($op>>>0)<(27);
 L1: do {
  if ($0) {
   $1 = (($op) + -13)|0;
   $2 = (($e1) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(-1);
   if ($4) {
    $5 = (($e1) + 20|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     $8 = HEAP32[$e1>>2]|0;
     if ((($8|0) == 6)) {
      $9 = (($e1) + 8|0);
      $10 = $9;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($10) + 4)|0;
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = $v1$i;
      $17 = $16;
      HEAP32[$17>>2] = $12;
      $18 = (($16) + 4)|0;
      $19 = $18;
      HEAP32[$19>>2] = $15;
      $20 = (($v1$i) + 8|0);
      HEAP32[$20>>2] = 19;
      $51 = 19;$55 = $12;$58 = $15;
     } else if ((($8|0) == 5)) {
      $21 = (($e1) + 8|0);
      $22 = +HEAPF64[$21>>3];
      HEAPF64[$v1$i>>3] = $22;
      $23 = (($v1$i) + 8|0);
      HEAP32[$23>>2] = 3;
      HEAPF64[tempDoublePtr>>3] = $22;$24 = HEAP32[tempDoublePtr>>2]|0;
      $25 = HEAP32[tempDoublePtr+4>>2]|0;
      $51 = 3;$55 = $24;$58 = $25;
     } else {
      break;
     }
     $26 = (($e2) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(-1);
     if ($28) {
      $29 = (($e2) + 20|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($30|0)==(-1);
      if ($31) {
       $32 = HEAP32[$e2>>2]|0;
       if ((($32|0) == 5)) {
        $46 = (($e2) + 8|0);
        $47 = +HEAPF64[$46>>3];
        HEAPF64[$v2$i>>3] = $47;
        $48 = (($v2$i) + 8|0);
        HEAP32[$48>>2] = 3;
        HEAPF64[tempDoublePtr>>3] = $47;$49 = HEAP32[tempDoublePtr>>2]|0;
        $50 = HEAP32[tempDoublePtr+4>>2]|0;
        $162 = $47;$63 = 3;$66 = $49;$67 = $50;
       } else if ((($32|0) == 6)) {
        $33 = (($e2) + 8|0);
        $34 = $33;
        $35 = $34;
        $36 = HEAP32[$35>>2]|0;
        $37 = (($34) + 4)|0;
        $38 = $37;
        $39 = HEAP32[$38>>2]|0;
        $40 = $v2$i;
        $41 = $40;
        HEAP32[$41>>2] = $36;
        $42 = (($40) + 4)|0;
        $43 = $42;
        HEAP32[$43>>2] = $39;
        $44 = (($v2$i) + 8|0);
        HEAP32[$44>>2] = 19;
        HEAP32[tempDoublePtr>>2] = $36;HEAP32[tempDoublePtr+4>>2] = $39;$45 = +HEAPF64[tempDoublePtr>>3];
        $162 = $45;$63 = 19;$66 = $36;$67 = $39;
       } else {
        break;
       }
       switch ($op|0) {
       case 26: case 24: case 23: case 22: case 21: case 20:  {
        $52 = ($51|0)==(19);
        if ($52) {
         $53 = $i$i$i;
         $54 = $53;
         HEAP32[$54>>2] = $55;
         $56 = (($53) + 4)|0;
         $57 = $56;
         HEAP32[$57>>2] = $58;
         $61 = $63;
        } else {
         $59 = (_luaV_tointeger($v1$i,$i$i$i,0)|0);
         $60 = ($59|0)==(0);
         if ($60) {
          break L1;
         }
         $$phi$trans$insert$i = (($v2$i) + 8|0);
         $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
         $61 = $$pre$i;
        }
        $62 = ($61|0)==(19);
        if (!($62)) {
         $70 = (_luaV_tointeger($v2$i,$i$i$i,0)|0);
         $phitmp$i$i = ($70|0)==(0);
         if ($phitmp$i$i) {
          break L1;
         }
        }
        break;
       }
       case 16: case 19: case 18:  {
        $64 = ($63|0)==(19);
        if ($64) {
         $65 = (+($66>>>0)) + (4294967296.0*(+($67|0)));
         $69 = $65;
        } else {
         $69 = $162;
        }
        $68 = $69 != 0.0;
        if (!($68)) {
         break L1;
        }
        break;
       }
       default: {
       }
       }
       $71 = (($fs) + 8|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (($72) + 52|0);
       $74 = HEAP32[$73>>2]|0;
       _luaO_arith($74,$1,$v1$i,$v2$i,$res$i);
       $75 = (($res$i) + 8|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(19);
       if ($77) {
        HEAP32[$e1>>2] = 6;
        $78 = $res$i;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($e1) + 8|0);
        $85 = $84;
        $86 = $85;
        HEAP32[$86>>2] = $80;
        $87 = (($85) + 4)|0;
        $88 = $87;
        HEAP32[$88>>2] = $83;
        STACKTOP = sp;return;
       }
       $89 = +HEAPF64[$res$i>>3];
       $90 = ($89 != $89) | (0.0 != 0.0);
       $91 = $89 == 0.0;
       $or$cond$i = $90 | $91;
       if (!($or$cond$i)) {
        HEAP32[$e1>>2] = 5;
        $92 = (($e1) + 8|0);
        HEAPF64[$92>>3] = $89;
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((($op|0) == 25) | (($op|0) == 26) | (($op|0) == 28)) {
  $93 = (_luaK_exp2anyreg($fs,$e1)|0);
  $o1$0 = $93;$o2$0 = 0;
 } else {
  $94 = (_luaK_exp2RK($fs,$e2)|0);
  $95 = (_luaK_exp2RK($fs,$e1)|0);
  $o1$0 = $95;$o2$0 = $94;
 }
 $96 = ($o1$0|0)>($o2$0|0);
 if ($96) {
  $97 = HEAP32[$e1>>2]|0;
  $98 = ($97|0)==(7);
  if ($98) {
   $99 = (($e1) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $100 & 256;
   $102 = ($101|0)==(0);
   if ($102) {
    $103 = (($fs) + 42|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($105|0)>($100|0);
    if (!($106)) {
     $107 = (($fs) + 44|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = (($108) + -1)<<24>>24;
     HEAP8[$107>>0] = $109;
    }
   }
  }
  $110 = HEAP32[$e2>>2]|0;
  $111 = ($110|0)==(7);
  if ($111) {
   $112 = (($e2) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 & 256;
   $115 = ($114|0)==(0);
   if ($115) {
    $116 = (($fs) + 42|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = ($118|0)>($113|0);
    if (!($119)) {
     $120 = (($fs) + 44|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = (($121) + -1)<<24>>24;
     HEAP8[$120>>0] = $122;
    }
   }
  }
 } else {
  $123 = HEAP32[$e2>>2]|0;
  $124 = ($123|0)==(7);
  if ($124) {
   $125 = (($e2) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 & 256;
   $128 = ($127|0)==(0);
   if ($128) {
    $129 = (($fs) + 42|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ($131|0)>($126|0);
    if (!($132)) {
     $133 = (($fs) + 44|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = (($134) + -1)<<24>>24;
     HEAP8[$133>>0] = $135;
    }
   }
  }
  $136 = HEAP32[$e1>>2]|0;
  $137 = ($136|0)==(7);
  if ($137) {
   $138 = (($e1) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $139 & 256;
   $141 = ($140|0)==(0);
   if ($141) {
    $142 = (($fs) + 42|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = ($144|0)>($139|0);
    if (!($145)) {
     $146 = (($fs) + 44|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = (($147) + -1)<<24>>24;
     HEAP8[$146>>0] = $148;
    }
   }
  }
 }
 $149 = $o1$0 << 23;
 $150 = $149 | $op;
 $151 = $o2$0 << 14;
 $152 = $150 | $151;
 $153 = (_luaK_code($fs,$152)|0);
 $154 = (($e1) + 8|0);
 HEAP32[$154>>2] = $153;
 HEAP32[$e1>>2] = 12;
 $155 = (($fs) + 16|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + -1)|0;
 $158 = HEAP32[$fs>>2]|0;
 $159 = (($158) + 56|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + ($157<<2)|0);
 HEAP32[$161>>2] = $line;
 STACKTOP = sp;return;
}
function _codecomp($fs,$op,$cond,$e1,$e2) {
 $fs = $fs|0;
 $op = $op|0;
 $cond = $cond|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $$ = 0, $$2 = 0, $$lcssa = 0, $$lcssa6 = 0, $$neg$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$op = 0, $fs$idx$val$i$i$i = 0, $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $ispos$i$i$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $neg$i$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaK_exp2RK($fs,$e1)|0);
 $1 = (_luaK_exp2RK($fs,$e2)|0);
 $2 = HEAP32[$e2>>2]|0;
 $3 = ($2|0)==(7);
 if ($3) {
  $4 = (($e2) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 256;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = (($fs) + 42|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($10|0)>($5|0);
   if (!($11)) {
    $12 = (($fs) + 44|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = (($13) + -1)<<24>>24;
    HEAP8[$12>>0] = $14;
   }
  }
 }
 $15 = HEAP32[$e1>>2]|0;
 $16 = ($15|0)==(7);
 if ($16) {
  $17 = (($e1) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 256;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = (($fs) + 42|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)>($18|0);
   if (!($24)) {
    $25 = (($fs) + 44|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = (($26) + -1)<<24>>24;
    HEAP8[$25>>0] = $27;
   }
  }
 }
 $28 = ($cond|0)==(0);
 $29 = ($op|0)!=(31);
 $or$cond = $28 & $29;
 $$ = $or$cond ? $1 : $0;
 $$2 = $or$cond ? $0 : $1;
 $cond$op = $cond << 6;
 $30 = $or$cond ? 64 : $cond$op;
 $31 = $30 | $op;
 $32 = $$ << 23;
 $33 = $31 | $32;
 $34 = $$2 << 14;
 $35 = $33 | $34;
 (_luaK_code($fs,$35)|0);
 $36 = (($fs) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$36>>2] = -1;
 $38 = (_luaK_code($fs,2147450910)|0);
 $39 = ($37|0)==(-1);
 if ($39) {
  $59 = $38;
  $58 = (($e1) + 8|0);
  HEAP32[$58>>2] = $59;
  HEAP32[$e1>>2] = 11;
  return;
 }
 $40 = ($38|0)==(-1);
 if ($40) {
  $59 = $37;
  $58 = (($e1) + 8|0);
  HEAP32[$58>>2] = $59;
  HEAP32[$e1>>2] = 11;
  return;
 }
 $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i$i = (($fs$idx$val$i$i$i) + 48|0);
 $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
 $list$0$i$i$i = $38;
 while(1) {
  $41 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 >>> 14;
  $44 = (($43) + -131071)|0;
  $45 = ($44|0)==(-1);
  if ($45) {
   $$lcssa = $41;$$lcssa6 = $42;$list$0$i$i$i$lcssa = $list$0$i$i$i;
   break;
  }
  $46 = (($list$0$i$i$i) + 1)|0;
  $47 = (($46) + ($44))|0;
  $48 = ($47|0)==(-1);
  if ($48) {
   $$lcssa = $41;$$lcssa6 = $42;$list$0$i$i$i$lcssa = $list$0$i$i$i;
   break;
  } else {
   $list$0$i$i$i = $47;
  }
 }
 $$neg$i$i$i$i = $list$0$i$i$i$lcssa ^ -1;
 $49 = (($37) + ($$neg$i$i$i$i))|0;
 $ispos$i$i$i$i = ($49|0)>(-1);
 $neg$i$i$i$i = (0 - ($49))|0;
 $50 = $ispos$i$i$i$i ? $49 : $neg$i$i$i$i;
 $51 = ($50|0)>(131071);
 if ($51) {
  $52 = (($fs) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  _luaX_syntaxerror($53,12648);
  // unreachable;
 }
 $54 = $$lcssa6 & 16383;
 $55 = $49 << 14;
 $56 = (($55) + 2147467264)|0;
 $57 = $56 | $54;
 HEAP32[$$lcssa>>2] = $57;
 $59 = $38;
 $58 = (($e1) + 8|0);
 HEAP32[$58>>2] = $59;
 HEAP32[$e1>>2] = 11;
 return;
}
function _luaopen_coroutine($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,7);
 _luaL_setfuncs($L,12680,0);
 return 1;
}
function _luaB_cocreate($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,6);
 $0 = (_lua_newthread($L)|0);
 _lua_pushvalue($L,1);
 _lua_xmove($L,$0,1);
 return 1;
}
function _luaB_coresume($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tothread($L,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_luaL_argerror($L,1,12936)|0);
 }
 $2 = (_lua_gettop($L)|0);
 $3 = (($2) + -1)|0;
 $4 = (_auxresume($L,$0,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  _lua_pushboolean($L,0);
  _lua_rotate($L,-2,1);
  $$0 = 2;
  return ($$0|0);
 } else {
  _lua_pushboolean($L,1);
  $6 = (($4) + 1)|0;
  $7 = $4 ^ -1;
  _lua_rotate($L,$7,1);
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaB_corunning($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_pushthread($L)|0);
 _lua_pushboolean($L,$0);
 return 2;
}
function _luaB_costatus($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = (_lua_tothread($L,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_luaL_argerror($L,1,12936)|0);
 }
 $2 = ($0|0)==($L|0);
 do {
  if ($2) {
   (_lua_pushstring($L,12760)|0);
  } else {
   $3 = (_lua_status($0)|0);
   if ((($3|0) == 0)) {
    $4 = (_lua_getstack($0,0,$ar)|0);
    $5 = ($4|0)>(0);
    if ($5) {
     (_lua_pushstring($L,12920)|0);
     break;
    }
    $6 = (_lua_gettop($0)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     (_lua_pushstring($L,12928)|0);
     break;
    } else {
     (_lua_pushstring($L,12904)|0);
     break;
    }
   } else if ((($3|0) == 1)) {
    (_lua_pushstring($L,12904)|0);
    break;
   } else {
    (_lua_pushstring($L,12928)|0);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return 1;
}
function _luaB_cowrap($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,6);
 $0 = (_lua_newthread($L)|0);
 _lua_pushvalue($L,1);
 _lua_xmove($L,$0,1);
 _lua_pushcclosure($L,238,1);
 return 1;
}
function _luaB_yield($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (_lua_yieldk($L,$0,0,0)|0);
 return ($1|0);
}
function _luaB_yieldable($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_isyieldable($L)|0);
 _lua_pushboolean($L,$0);
 return 1;
}
function _auxresume($L,$co,$narg) {
 $L = $L|0;
 $co = $co|0;
 $narg = $narg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_checkstack($co,$narg)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  (_lua_pushstring($L,12808)|0);
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_lua_status($co)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_lua_gettop($co)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   (_lua_pushstring($L,12840)|0);
   $$0 = -1;
   return ($$0|0);
  }
 }
 _lua_xmove($L,$co,$narg);
 $6 = (_lua_resume($co,$L,$narg)|0);
 $7 = ($6>>>0)<(2);
 if (!($7)) {
  _lua_xmove($co,$L,1);
  $$0 = -1;
  return ($$0|0);
 }
 $8 = (_lua_gettop($co)|0);
 $9 = (($8) + 1)|0;
 $10 = (_lua_checkstack($L,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $8 ^ -1;
  _lua_settop($co,$12);
  (_lua_pushstring($L,12872)|0);
  $$0 = -1;
  return ($$0|0);
 } else {
  _lua_xmove($co,$L,$8);
  $$0 = $8;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaB_auxwrap($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tothread($L,-1001001)|0);
 $1 = (_lua_gettop($L)|0);
 $2 = (_auxresume($L,$0,$1)|0);
 $3 = ($2|0)<(0);
 if (!($3)) {
  return ($2|0);
 }
 $4 = (_lua_isstring($L,-1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _luaL_where($L,1);
 _lua_rotate($L,-2,1);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return (0)|0;
}
function _luaopen_debug($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,503.0,136);
 _lua_createtable($L,0,16);
 _luaL_setfuncs($L,13216,0);
 return 1;
}
function _db_debug($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 4|0;
 $0 = HEAP32[_stderr>>2]|0;
 (_fwrite((14000|0),11,1,($0|0))|0);
 (_fflush(($0|0))|0);
 $1 = HEAP32[_stdin>>2]|0;
 $2 = (_fgets(($buffer|0),250,($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $4 = (_strcmp($buffer,14016)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  }
  $6 = (_strlen(($buffer|0))|0);
  $7 = (_luaL_loadbufferx($L,$buffer,$6,14024,0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (_lua_pcallk($L,0,0,0,0,0)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $11 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer>>2] = $11;
   (_fprintf(($0|0),(14048|0),($vararg_buffer|0))|0);
   (_fflush(($0|0))|0);
  }
  _lua_settop($L,0);
  (_fwrite((14000|0),11,1,($0|0))|0);
  (_fflush(($0|0))|0);
  $12 = (_fgets(($buffer|0),250,($1|0))|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _db_getuservalue($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(7);
 if ($1) {
  (_lua_getuservalue($L,1)|0);
  return 1;
 } else {
  _lua_pushnil($L);
  return 1;
 }
 return (0)|0;
}
function _db_gethook($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $i$0$i = 0, $i$1$i = 0, $i$2$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff = sp + 4|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;
 } else {
  $$0$i = $L;
 }
 $3 = (_lua_gethookmask($$0$i)|0);
 $4 = (_lua_gethook($$0$i)|0);
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   _lua_pushnil($L);
  } else {
   $6 = ($4|0)==(239|0);
   if (!($6)) {
    (_lua_pushstring($L,13984)|0);
    break;
   }
   (_lua_rawgetp($L,-1001000,13640)|0);
   $7 = ($$0$i|0)==($L|0);
   if (!($7)) {
    $8 = (_lua_checkstack($$0$i,1)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     (_luaL_error($L,13624,$vararg_buffer)|0);
    }
   }
   (_lua_pushthread($$0$i)|0);
   _lua_xmove($$0$i,$L,1);
   (_lua_rawget($L,-2)|0);
   _lua_rotate($L,-2,-1);
   _lua_settop($L,-2);
  }
 } while(0);
 $10 = $3 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $i$0$i = 0;
 } else {
  HEAP8[$buff>>0] = 99;
  $i$0$i = 1;
 }
 $12 = $3 & 2;
 $13 = ($12|0)==(0);
 if ($13) {
  $i$1$i = $i$0$i;
 } else {
  $14 = (($i$0$i) + 1)|0;
  $15 = (($buff) + ($i$0$i)|0);
  HEAP8[$15>>0] = 114;
  $i$1$i = $14;
 }
 $16 = $3 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $i$2$i = $i$1$i;
 } else {
  $18 = (($i$1$i) + 1)|0;
  $19 = (($buff) + ($i$1$i)|0);
  HEAP8[$19>>0] = 108;
  $i$2$i = $18;
 }
 $20 = (($buff) + ($i$2$i)|0);
 HEAP8[$20>>0] = 0;
 (_lua_pushstring($L,$buff)|0);
 $21 = (_lua_gethookcount($$0$i)|0);
 $22 = ($21|0)<(0);
 $23 = $22 << 31 >> 31;
 _lua_pushinteger($L,$21,$23);
 STACKTOP = sp;return 3;
}
function _db_getinfo($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $options$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ar = sp + 12|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $3 = (_lua_tothread($L,1)|0);
  $4 = (_luaL_optlstring($L,3,13776,0)|0);
  $5 = ($3|0)==($L|0);
  if ($5) {
   $$0$i2 = $3;$11 = $4;$19 = 3;$68 = 1;$8 = 2;
  } else {
   $6 = (_lua_checkstack($3,3)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    (_luaL_error($L,13624,$vararg_buffer)|0);
    $$0$i2 = $3;$11 = $4;$19 = 3;$68 = $5;$8 = 2;
   } else {
    $$0$i2 = $3;$11 = $4;$19 = 3;$68 = 0;$8 = 2;
   }
  }
 } else {
  $2 = (_luaL_optlstring($L,2,13776,0)|0);
  $$0$i2 = $L;$11 = $2;$19 = 2;$68 = 1;$8 = 1;
 }
 $9 = (_lua_type($L,$8)|0);
 $10 = ($9|0)==(6);
 if ($10) {
  HEAP32[$vararg_buffer1>>2] = $11;
  $12 = (_lua_pushfstring($L,13784,$vararg_buffer1)|0);
  _lua_pushvalue($L,$8);
  _lua_xmove($L,$$0$i2,1);
  $options$0 = $12;
 } else {
  $13 = (_luaL_checkinteger($L,$8)|0);
  $14 = tempRet0;
  $15 = (_lua_getstack($$0$i2,$13,$ar)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   _lua_pushnil($L);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $options$0 = $11;
  }
 }
 $17 = (_lua_getinfo($$0$i2,$options$0,$ar)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $20 = (_luaL_argerror($L,$19,13792)|0);
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_createtable($L,0,0);
 $21 = (_strchr($options$0,83)|0);
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = (($ar) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  (_lua_pushstring($L,$24)|0);
  _lua_setfield($L,-2,13808);
  $25 = (($ar) + 36|0);
  (_lua_pushstring($L,$25)|0);
  _lua_setfield($L,-2,13816);
  $26 = (($ar) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  _lua_pushinteger($L,$27,$29);
  _lua_setfield($L,-2,13832);
  $30 = (($ar) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  _lua_pushinteger($L,$31,$33);
  _lua_setfield($L,-2,13848);
  $34 = (($ar) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  (_lua_pushstring($L,$35)|0);
  _lua_setfield($L,-2,13864);
 }
 $36 = (_strchr($options$0,108)|0);
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = (($ar) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  _lua_pushinteger($L,$39,$41);
  _lua_setfield($L,-2,13872);
 }
 $42 = (_strchr($options$0,117)|0);
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  $44 = (($ar) + 32|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  _lua_pushinteger($L,$46,0);
  _lua_setfield($L,-2,13888);
  $47 = (($ar) + 33|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  _lua_pushinteger($L,$49,0);
  _lua_setfield($L,-2,13896);
  $50 = (($ar) + 34|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  _lua_pushboolean($L,$52);
  _lua_setfield($L,-2,13904);
 }
 $53 = (_strchr($options$0,110)|0);
 $54 = ($53|0)==(0|0);
 if (!($54)) {
  $55 = (($ar) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  (_lua_pushstring($L,$56)|0);
  _lua_setfield($L,-2,13920);
  $57 = (($ar) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  (_lua_pushstring($L,$58)|0);
  _lua_setfield($L,-2,13928);
 }
 $59 = (_strchr($options$0,116)|0);
 $60 = ($59|0)==(0|0);
 if (!($60)) {
  $61 = (($ar) + 35|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  _lua_pushboolean($L,$63);
  _lua_setfield($L,-2,13944);
 }
 $64 = (_strchr($options$0,76)|0);
 $65 = ($64|0)==(0|0);
 if (!($65)) {
  if ($68) {
   _lua_rotate($L,-2,1);
  } else {
   _lua_xmove($$0$i2,$L,1);
  }
  _lua_setfield($L,-2,13960);
 }
 $66 = (_strchr($options$0,102)|0);
 $67 = ($66|0)==(0|0);
 if ($67) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 if ($68) {
  _lua_rotate($L,-2,1);
 } else {
  _lua_xmove($$0$i2,$L,1);
 }
 _lua_setfield($L,-2,13976);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _db_getlocal($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 4|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = $4 | 2;
 $5 = (_luaL_checkinteger($L,$3)|0);
 $6 = tempRet0;
 $7 = (($4) + 1)|0;
 $8 = (_lua_type($L,$7)|0);
 $9 = ($8|0)==(6);
 if ($9) {
  _lua_pushvalue($L,$7);
  $10 = (_lua_getlocal($L,0,$5)|0);
  (_lua_pushstring($L,$10)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_luaL_checkinteger($L,$7)|0);
 $12 = tempRet0;
 $13 = (_lua_getstack($$0$i,$11,$ar)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = (_luaL_argerror($L,$7,13600)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ($$0$i|0)==($L|0);
 if (!($16)) {
  $17 = (_lua_checkstack($$0$i,1)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   (_luaL_error($L,13624,$vararg_buffer)|0);
  }
 }
 $19 = (_lua_getlocal($$0$i,$ar,$5)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_xmove($$0$i,$L,1);
  (_lua_pushstring($L,$19)|0);
  _lua_rotate($L,-2,1);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _db_getregistry($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushvalue($L,-1001000);
 return 1;
}
function _db_getmetatable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return 1;
 }
 _lua_pushnil($L);
 return 1;
}
function _db_getupvalue($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 _luaL_checktype($L,1,6);
 $2 = (_lua_getupvalue($L,1,$0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 (_lua_pushstring($L,$2)|0);
 _lua_rotate($L,-2,1);
 $$0$i = 2;
 return ($$0$i|0);
}
function _db_upvaluejoin($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 _luaL_checktype($L,1,6);
 $2 = (_lua_getupvalue($L,1,$0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_argerror($L,2,13728)|0);
 }
 $4 = (_luaL_checkinteger($L,4)|0);
 $5 = tempRet0;
 _luaL_checktype($L,3,6);
 $6 = (_lua_getupvalue($L,3,$4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  (_luaL_argerror($L,4,13728)|0);
 }
 $8 = (_lua_iscfunction($L,1)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  (_luaL_argerror($L,1,13752)|0);
 }
 $10 = (_lua_iscfunction($L,3)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _lua_upvaluejoin($L,1,$0,3,$4);
  return 0;
 }
 (_luaL_argerror($L,3,13752)|0);
 _lua_upvaluejoin($L,1,$0,3,$4);
 return 0;
}
function _db_upvalueid($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 _luaL_checktype($L,1,6);
 $2 = (_lua_getupvalue($L,1,$0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_argerror($L,2,13728)|0);
 }
 $4 = (_lua_upvalueid($L,1,$0)|0);
 _lua_pushlightuserdata($L,$4);
 return 1;
}
function _db_setuservalue($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,7);
 _luaL_checkany($L,2);
 _lua_settop($L,2);
 _lua_setuservalue($L,1);
 return 1;
}
function _db_sethook($L) {
 $L = $L|0;
 var $$$i = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $func$0 = 0, $mask$0 = 0, $mask$1$$i = 0, $mask$1$i = 0, $mask$3$i = 0, $not$$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = (($4) + 1)|0;
 $5 = (_lua_type($L,$3)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  _lua_settop($L,$3);
  $count$0 = 0;$func$0 = 0;$mask$0 = 0;
 } else {
  $7 = $4 | 2;
  $8 = (_luaL_checklstring($L,$7,0)|0);
  _luaL_checktype($L,$3,6);
  $9 = (($4) + 3)|0;
  $10 = (_luaL_optinteger($L,$9,0,0)|0);
  $11 = tempRet0;
  $12 = (_strchr($8,99)|0);
  $not$$i = ($12|0)!=(0|0);
  $$$i = $not$$i&1;
  $13 = (_strchr($8,114)|0);
  $14 = ($13|0)==(0|0);
  $15 = $$$i | 2;
  $mask$1$i = $14 ? $$$i : $15;
  $16 = (_strchr($8,108)|0);
  $17 = ($16|0)==(0|0);
  $18 = $mask$1$i | 4;
  $mask$1$$i = $17 ? $mask$1$i : $18;
  $19 = ($10|0)>(0);
  $20 = $mask$1$$i | 8;
  $mask$3$i = $19 ? $20 : $mask$1$$i;
  $count$0 = $10;$func$0 = 239;$mask$0 = $mask$3$i;
 }
 $21 = (_lua_rawgetp($L,-1001000,13640)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  _lua_createtable($L,0,2);
  _lua_pushvalue($L,-1);
  _lua_rawsetp($L,-1001000,13640);
  (_lua_pushstring($L,13648)|0);
  _lua_setfield($L,-2,13656);
  _lua_pushvalue($L,-1);
  (_lua_setmetatable($L,-2)|0);
 }
 $23 = ($$0$i|0)==($L|0);
 if (!($23)) {
  $24 = (_lua_checkstack($$0$i,1)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   (_luaL_error($L,13624,$vararg_buffer)|0);
  }
 }
 (_lua_pushthread($$0$i)|0);
 _lua_xmove($$0$i,$L,1);
 _lua_pushvalue($L,$3);
 _lua_rawset($L,-3);
 _lua_sethook($$0$i,$func$0,$mask$0,$count$0);
 STACKTOP = sp;return 0;
}
function _db_setlocal($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ar = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 4|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = (($4) + 1)|0;
 $5 = (_luaL_checkinteger($L,$3)|0);
 $6 = tempRet0;
 $7 = $4 | 2;
 $8 = (_luaL_checkinteger($L,$7)|0);
 $9 = tempRet0;
 $10 = (_lua_getstack($$0$i,$5,$ar)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (_luaL_argerror($L,$3,13600)|0);
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($4) + 3)|0;
 _luaL_checkany($L,$13);
 _lua_settop($L,$13);
 $14 = ($$0$i|0)==($L|0);
 if (!($14)) {
  $15 = (_lua_checkstack($$0$i,1)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   (_luaL_error($L,13624,$vararg_buffer)|0);
  }
 }
 _lua_xmove($L,$$0$i,1);
 $17 = (_lua_setlocal($$0$i,$ar,$8)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  _lua_settop($$0$i,-2);
 }
 (_lua_pushstring($L,$17)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _db_setmetatable($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,2)|0);
 if (!((($0|0) == 0) | (($0|0) == 5))) {
  (_luaL_argerror($L,2,13576)|0);
 }
 _lua_settop($L,2);
 (_lua_setmetatable($L,1)|0);
 return 1;
}
function _db_setupvalue($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,3);
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = tempRet0;
 _luaL_checktype($L,1,6);
 $2 = (_lua_setupvalue($L,1,$0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 (_lua_pushstring($L,$2)|0);
 _lua_rotate($L,-1,1);
 $$0$i = 1;
 return ($$0$i|0);
}
function _db_traceback($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = (($4) + 1)|0;
 $5 = (_lua_tolstring($L,$3,0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_lua_type($L,$3)|0);
  $8 = ($7|0)<(1);
  if (!($8)) {
   _lua_pushvalue($L,$3);
   return 1;
  }
 }
 $9 = $4 | 2;
 $10 = ($$0$i|0)==($L|0);
 $11 = $10&1;
 $12 = (_luaL_optinteger($L,$9,$11,0)|0);
 $13 = tempRet0;
 _luaL_traceback($L,$$0$i,$5,$12);
 return 1;
}
function _hookf($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_rawgetp($L,-1001000,13640)|0);
 (_lua_pushthread($L)|0);
 $0 = (_lua_rawget($L,-2)|0);
 $1 = ($0|0)==(6);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[$ar>>2]|0;
 $3 = (13664 + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 (_lua_pushstring($L,$4)|0);
 $5 = (($ar) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = ($6|0)<(0);
  $9 = $8 << 31 >> 31;
  _lua_pushinteger($L,$6,$9);
 } else {
  _lua_pushnil($L);
 }
 _lua_callk($L,2,0,0,0);
 return;
}
function _luaX_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaS_newlstr($L,14056,4)|0);
 _luaC_fix($L,$0);
 $i$01 = 0;
 while(1) {
  $1 = (14064 + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_luaS_new($L,$2)|0);
  _luaC_fix($L,$3);
  $4 = (($i$01) + 1)|0;
  $5 = $4&255;
  $6 = (($3) + 6|0);
  HEAP8[$6>>0] = $5;
  $exitcond = ($4|0)==(22);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $4;
  }
 }
 return;
}
function _luaX_token2str($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($token|0)<(257);
 if ($0) {
  $1 = (($ls) + 52|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer>>2] = $token;
  $3 = (_luaO_pushfstring($2,14216,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($token) + -257)|0;
 $5 = (14064 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($token|0)<(289);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($ls) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $6;
 $10 = (_luaO_pushfstring($9,14224,$vararg_buffer1)|0);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _luaX_syntaxerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 _lexerror($ls,$msg,$1);
 // unreachable;
}
function _luaX_newstring($ls,$str,$l) {
 $ls = $ls|0;
 $str = $str|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ts$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaS_newlstr($1,$str,$l)|0);
 $3 = (($1) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$3>>2] = $5;
 HEAP32[$4>>2] = $2;
 $6 = (($2) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 64;
 $10 = (($4) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($ls) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) + -16|0);
 $15 = (_luaH_set($1,$12,$14)|0);
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$15>>2] = 1;
  HEAP32[$16>>2] = 1;
  $19 = (($1) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   _luaC_step($1);
   $ts$0 = $2;
  } else {
   $ts$0 = $2;
  }
 } else {
  $24 = (($15) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $ts$0 = $25;
 }
 $26 = HEAP32[$3>>2]|0;
 $27 = (($26) + -16|0);
 HEAP32[$3>>2] = $27;
 return ($ts$0|0);
}
function _luaX_setinput($L,$ls,$z,$source,$firstchar) {
 $L = $L|0;
 $ls = $ls|0;
 $z = $z|0;
 $source = $source|0;
 $firstchar = $firstchar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = (($ls) + 80|0);
 HEAP8[$1>>0] = 46;
 $2 = (($ls) + 52|0);
 HEAP32[$2>>2] = $L;
 HEAP32[$ls>>2] = $firstchar;
 $3 = (($ls) + 32|0);
 HEAP32[$3>>2] = 289;
 $4 = (($ls) + 56|0);
 HEAP32[$4>>2] = $z;
 $5 = (($ls) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = (($ls) + 4|0);
 HEAP32[$6>>2] = 1;
 $7 = (($ls) + 8|0);
 HEAP32[$7>>2] = 1;
 $8 = (($ls) + 72|0);
 HEAP32[$8>>2] = $source;
 $9 = (_luaS_newlstr($L,14056,4)|0);
 $10 = (($ls) + 76|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($ls) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($13) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_luaM_realloc_($11,$14,$16,32)|0);
 $18 = HEAP32[$12>>2]|0;
 HEAP32[$18>>2] = $17;
 $19 = (($18) + 8|0);
 HEAP32[$19>>2] = 32;
 return;
}
function _luaX_next($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($ls) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(289);
 if ($5) {
  $7 = (($ls) + 24|0);
  $8 = (_llex($ls,$7)|0);
  $9 = (($ls) + 16|0);
  HEAP32[$9>>2] = $8;
  return;
 } else {
  $6 = (($ls) + 16|0);
  ;HEAP32[$6+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$3+12>>2]|0;
  HEAP32[$3>>2] = 289;
  return;
 }
}
function _luaX_lookahead($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 40|0);
 $1 = (_llex($ls,$0)|0);
 $2 = (($ls) + 32|0);
 HEAP32[$2>>2] = $1;
 return ($1|0);
}
function _lexerror($ls,$msg,$token) {
 $ls = $ls|0;
 $msg = $msg|0;
 $token = $token|0;
 var $$0$i = 0, $$off$i = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $switch$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ls) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_luaG_addinfo($1,$msg,$3,$5)|0);
 $7 = ($token|0)==(0);
 if ($7) {
  $36 = HEAP32[$0>>2]|0;
  _luaD_throw($36,3);
  // unreachable;
 }
 $8 = HEAP32[$0>>2]|0;
 $$off$i = (($token) + -290)|0;
 $switch$i = ($$off$i>>>0)<(4);
 do {
  if ($switch$i) {
   $9 = (($ls) + 60|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 1)|0;
   $14 = (($10) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)>($15>>>0);
   do {
    if ($16) {
     $17 = ($15>>>0)>(2147483646);
     if ($17) {
      _lexerror($ls,14304,0);
      // unreachable;
     } else {
      $18 = $15 << 1;
      $19 = HEAP32[$10>>2]|0;
      $20 = (_luaM_realloc_($8,$19,$15,$18)|0);
      HEAP32[$10>>2] = $20;
      HEAP32[$14>>2] = $18;
      $$pre = HEAP32[$11>>2]|0;
      $22 = $$pre;$24 = $20;
      break;
     }
    } else {
     $$pre1 = HEAP32[$10>>2]|0;
     $22 = $12;$24 = $$pre1;
    }
   } while(0);
   $21 = (($22) + 1)|0;
   HEAP32[$11>>2] = $21;
   $23 = (($24) + ($22)|0);
   HEAP8[$23>>0] = 0;
   $25 = HEAP32[$0>>2]|0;
   $26 = HEAP32[$9>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer>>2] = $27;
   $28 = (_luaO_pushfstring($25,14224,$vararg_buffer)|0);
   $$0$i = $28;
  } else {
   $29 = ($token|0)<(257);
   if ($29) {
    HEAP32[$vararg_buffer1>>2] = $token;
    $30 = (_luaO_pushfstring($8,14216,$vararg_buffer1)|0);
    $$0$i = $30;
    break;
   }
   $31 = (($token) + -257)|0;
   $32 = (14064 + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($token|0)<(289);
   if ($34) {
    HEAP32[$vararg_buffer4>>2] = $33;
    $35 = (_luaO_pushfstring($8,14224,$vararg_buffer4)|0);
    $$0$i = $35;
   } else {
    $$0$i = $33;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer7>>2] = $6;
 $vararg_ptr10 = (($vararg_buffer7) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $$0$i;
 (_luaO_pushfstring($8,14600,$vararg_buffer7)|0);
 $36 = HEAP32[$0>>2]|0;
 _luaD_throw($36,3);
 // unreachable;
}
function _llex($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$0 = 0, $$be$i = 0, $$be44$i = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa191 = 0, $$lcssa195 = 0, $$lcssa204 = 0, $$lcssa212 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa218 = 0, $$lcssa227 = 0, $$ph = 0, $$pr = 0, $$pr$i = 0, $$pr167 = 0, $$pr40$i = 0, $$pre$i = 0;
 var $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i17$i = 0, $$pre$i$i9$i = 0, $$pre$i11$i$i = 0, $$pre$i11$i$i$i = 0, $$pre$i16$i$i = 0, $$pre$i16$i$i$i = 0, $$pre$i22$i$i$i = 0, $$pre$i23$i = 0, $$pre$i27$i$i$i = 0, $$pre$i28$i = 0, $$pre$i30 = 0, $$pre$i32$i$i$i = 0, $$pre$i33$i = 0, $$pre$i38$i = 0, $$pre$i4$i = 0, $$pre$i4$i$i = 0, $$pre$i4$i$i$i = 0;
 var $$pre$i5$i$i = 0, $$pre1$i = 0, $$pre1$i$i = 0, $$pre1$i$i$i = 0, $$pre1$i$i$i$i = 0, $$pre1$i$i15$i = 0, $$pre1$i$i7$i = 0, $$pre1$i14$i$i = 0, $$pre1$i14$i$i$i = 0, $$pre1$i2$i = 0, $$pre1$i2$i$i = 0, $$pre1$i2$i$i$i = 0, $$pre1$i20$i$i$i = 0, $$pre1$i21$i = 0, $$pre1$i25$i$i$i = 0, $$pre1$i26$i = 0, $$pre1$i28 = 0, $$pre1$i3$i$i = 0, $$pre1$i30$i$i$i = 0, $$pre1$i31$i = 0;
 var $$pre1$i36$i = 0, $$pre1$i9$i$i = 0, $$pre1$i9$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $buff$i$i = 0, $c$0$i = 0, $c$1$i = 0;
 var $i$0$i$i$i = 0, $i$0$i$i$i$lcssa172 = 0, $i$0$lcssa$i$i = 0, $i$08$i$i = 0, $n$06$i$i = 0, $r$0$i$i$i = 0, $r$0$i$i$i$lcssa170 = 0, $r$0$lcssa$i$i = 0, $r$09$i$i = 0, $ts$0$i = 0, $ts$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buff$i$i = sp;
 $0 = (($ls) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($ls) + 56|0);
 $4 = (($ls) + 4|0);
 L1: while(1) {
  $$pr167 = HEAP32[$ls>>2]|0;
  $5 = $$pr167;
  L3: while(1) {
   switch ($5|0) {
   case 13: case 10:  {
    $$lcssa218 = $5;
    label = 5;
    break L3;
    break;
   }
   case 11: case 9: case 12: case 32:  {
    break;
   }
   case 91:  {
    label = 38;
    break L1;
    break;
   }
   case 45:  {
    label = 21;
    break L3;
    break;
   }
   case 61:  {
    label = 42;
    break L1;
    break;
   }
   case 58:  {
    label = 90;
    break L1;
    break;
   }
   case 60:  {
    label = 50;
    break L1;
    break;
   }
   case 39: case 34:  {
    $$lcssa227 = $5;
    label = 98;
    break L1;
    break;
   }
   case 62:  {
    label = 62;
    break L1;
    break;
   }
   case 47:  {
    label = 74;
    break L1;
    break;
   }
   case 126:  {
    label = 82;
    break L1;
    break;
   }
   case 46:  {
    label = 359;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
    label = 378;
    break L1;
    break;
   }
   case -1:  {
    label = 401;
    break L1;
    break;
   }
   default: {
    $$lcssa217 = $5;
    label = 379;
    break L1;
   }
   }
   $32 = HEAP32[$3>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + -1)|0;
   HEAP32[$32>>2] = $34;
   $35 = ($33|0)==(0);
   if ($35) {
    $41 = (_luaZ_fill($32)|0);
    $42 = $41;
   } else {
    $36 = (($32) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 1|0);
    HEAP32[$36>>2] = $38;
    $39 = HEAP8[$37>>0]|0;
    $40 = $39&255;
    $42 = $40;
   }
   HEAP32[$ls>>2] = $42;
   $5 = $42;
  }
  L10: do {
   if ((label|0) == 5) {
    label = 0;
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + -1)|0;
    HEAP32[$6>>2] = $8;
    $9 = ($7|0)==(0);
    if ($9) {
     $15 = (_luaZ_fill($6)|0);
     $16 = $15;
    } else {
     $10 = (($6) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + 1|0);
     HEAP32[$10>>2] = $12;
     $13 = HEAP8[$11>>0]|0;
     $14 = $13&255;
     $16 = $14;
    }
    HEAP32[$ls>>2] = $16;
    if ((($16|0) == 13) | (($16|0) == 10)) {
     $17 = ($16|0)==($$lcssa218|0);
     if (!($17)) {
      $18 = HEAP32[$3>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + -1)|0;
      HEAP32[$18>>2] = $20;
      $21 = ($19|0)==(0);
      if ($21) {
       $27 = (_luaZ_fill($18)|0);
       $28 = $27;
      } else {
       $22 = (($18) + 4|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (($23) + 1|0);
       HEAP32[$22>>2] = $24;
       $25 = HEAP8[$23>>0]|0;
       $26 = $25&255;
       $28 = $26;
      }
      HEAP32[$ls>>2] = $28;
     }
    }
    $29 = HEAP32[$4>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[$4>>2] = $30;
    $31 = ($30|0)==(2147483647);
    if ($31) {
     label = 16;
     break L1;
    }
   }
   else if ((label|0) == 21) {
    label = 0;
    $43 = HEAP32[$3>>2]|0;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + -1)|0;
    HEAP32[$43>>2] = $45;
    $46 = ($44|0)==(0);
    if ($46) {
     $52 = (_luaZ_fill($43)|0);
     $53 = $52;
    } else {
     $47 = (($43) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + 1|0);
     HEAP32[$47>>2] = $49;
     $50 = HEAP8[$48>>0]|0;
     $51 = $50&255;
     $53 = $51;
    }
    HEAP32[$ls>>2] = $53;
    $54 = ($53|0)==(45);
    if (!($54)) {
     label = 402;
     break L1;
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + -1)|0;
    HEAP32[$55>>2] = $57;
    $58 = ($56|0)==(0);
    if ($58) {
     $64 = (_luaZ_fill($55)|0);
     $65 = $64;
    } else {
     $59 = (($55) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + 1|0);
     HEAP32[$59>>2] = $61;
     $62 = HEAP8[$60>>0]|0;
     $63 = $62&255;
     $65 = $63;
    }
    HEAP32[$ls>>2] = $65;
    $66 = ($65|0)==(91);
    do {
     if ($66) {
      $67 = (_skip_sep($ls)|0);
      $68 = HEAP32[$0>>2]|0;
      $69 = (($68) + 4|0);
      HEAP32[$69>>2] = 0;
      $70 = ($67|0)>(-1);
      if ($70) {
       _read_long_string($ls,0,$67);
       $71 = HEAP32[$0>>2]|0;
       $72 = (($71) + 4|0);
       HEAP32[$72>>2] = 0;
       break L10;
      } else {
       $$pr = HEAP32[$ls>>2]|0;
       $$ph = $$pr;
       break;
      }
     } else {
      $$ph = $65;
     }
    } while(0);
    $1152 = $$ph;
    while(1) {
     if ((($1152|0) == -1) | (($1152|0) == 13) | (($1152|0) == 10)) {
      break;
     }
     $73 = HEAP32[$3>>2]|0;
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + -1)|0;
     HEAP32[$73>>2] = $75;
     $76 = ($74|0)==(0);
     if ($76) {
      $82 = (_luaZ_fill($73)|0);
      $83 = $82;
     } else {
      $77 = (($73) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($78) + 1|0);
      HEAP32[$77>>2] = $79;
      $80 = HEAP8[$78>>0]|0;
      $81 = $80&255;
      $83 = $81;
     }
     HEAP32[$ls>>2] = $83;
     $1152 = $83;
    }
   }
  } while(0);
 }
 switch (label|0) {
  case 16: {
   _lexerror($ls,14568,0);
   // unreachable;
   break;
  }
  case 38: {
   $84 = (_skip_sep($ls)|0);
   $85 = ($84|0)>(-1);
   if ($85) {
    _read_long_string($ls,$seminfo,$84);
    $$0 = 293;
    STACKTOP = sp;return ($$0|0);
   }
   $86 = ($84|0)==(-1);
   if ($86) {
    $$0 = 91;
    STACKTOP = sp;return ($$0|0);
   } else {
    _lexerror($ls,14232,293);
    // unreachable;
   }
   break;
  }
  case 42: {
   $87 = HEAP32[$3>>2]|0;
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + -1)|0;
   HEAP32[$87>>2] = $89;
   $90 = ($88|0)==(0);
   if ($90) {
    $96 = (_luaZ_fill($87)|0);
    $97 = $96;
   } else {
    $91 = (($87) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + 1|0);
    HEAP32[$91>>2] = $93;
    $94 = HEAP8[$92>>0]|0;
    $95 = $94&255;
    $97 = $95;
   }
   HEAP32[$ls>>2] = $97;
   $98 = ($97|0)==(61);
   if (!($98)) {
    $$0 = 61;
    STACKTOP = sp;return ($$0|0);
   }
   $99 = HEAP32[$3>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + -1)|0;
   HEAP32[$99>>2] = $101;
   $102 = ($100|0)==(0);
   if ($102) {
    $108 = (_luaZ_fill($99)|0);
    $109 = $108;
   } else {
    $103 = (($99) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 1|0);
    HEAP32[$103>>2] = $105;
    $106 = HEAP8[$104>>0]|0;
    $107 = $106&255;
    $109 = $107;
   }
   HEAP32[$ls>>2] = $109;
   $$0 = 282;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 50: {
   $110 = HEAP32[$3>>2]|0;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + -1)|0;
   HEAP32[$110>>2] = $112;
   $113 = ($111|0)==(0);
   if ($113) {
    $119 = (_luaZ_fill($110)|0);
    $120 = $119;
   } else {
    $114 = (($110) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + 1|0);
    HEAP32[$114>>2] = $116;
    $117 = HEAP8[$115>>0]|0;
    $118 = $117&255;
    $120 = $118;
   }
   HEAP32[$ls>>2] = $120;
   if ((($120|0) == 61)) {
    $121 = HEAP32[$3>>2]|0;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($122) + -1)|0;
    HEAP32[$121>>2] = $123;
    $124 = ($122|0)==(0);
    if ($124) {
     $130 = (_luaZ_fill($121)|0);
     $131 = $130;
    } else {
     $125 = (($121) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($126) + 1|0);
     HEAP32[$125>>2] = $127;
     $128 = HEAP8[$126>>0]|0;
     $129 = $128&255;
     $131 = $129;
    }
    HEAP32[$ls>>2] = $131;
    $$0 = 284;
    STACKTOP = sp;return ($$0|0);
   } else if ((($120|0) == 60)) {
    $132 = HEAP32[$3>>2]|0;
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + -1)|0;
    HEAP32[$132>>2] = $134;
    $135 = ($133|0)==(0);
    if ($135) {
     $141 = (_luaZ_fill($132)|0);
     $142 = $141;
    } else {
     $136 = (($132) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + 1|0);
     HEAP32[$136>>2] = $138;
     $139 = HEAP8[$137>>0]|0;
     $140 = $139&255;
     $142 = $140;
    }
    HEAP32[$ls>>2] = $142;
    $$0 = 286;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = 60;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 62: {
   $143 = HEAP32[$3>>2]|0;
   $144 = HEAP32[$143>>2]|0;
   $145 = (($144) + -1)|0;
   HEAP32[$143>>2] = $145;
   $146 = ($144|0)==(0);
   if ($146) {
    $152 = (_luaZ_fill($143)|0);
    $153 = $152;
   } else {
    $147 = (($143) + 4|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + 1|0);
    HEAP32[$147>>2] = $149;
    $150 = HEAP8[$148>>0]|0;
    $151 = $150&255;
    $153 = $151;
   }
   HEAP32[$ls>>2] = $153;
   if ((($153|0) == 62)) {
    $165 = HEAP32[$3>>2]|0;
    $166 = HEAP32[$165>>2]|0;
    $167 = (($166) + -1)|0;
    HEAP32[$165>>2] = $167;
    $168 = ($166|0)==(0);
    if ($168) {
     $174 = (_luaZ_fill($165)|0);
     $175 = $174;
    } else {
     $169 = (($165) + 4|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (($170) + 1|0);
     HEAP32[$169>>2] = $171;
     $172 = HEAP8[$170>>0]|0;
     $173 = $172&255;
     $175 = $173;
    }
    HEAP32[$ls>>2] = $175;
    $$0 = 287;
    STACKTOP = sp;return ($$0|0);
   } else if ((($153|0) == 61)) {
    $154 = HEAP32[$3>>2]|0;
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + -1)|0;
    HEAP32[$154>>2] = $156;
    $157 = ($155|0)==(0);
    if ($157) {
     $163 = (_luaZ_fill($154)|0);
     $164 = $163;
    } else {
     $158 = (($154) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (($159) + 1|0);
     HEAP32[$158>>2] = $160;
     $161 = HEAP8[$159>>0]|0;
     $162 = $161&255;
     $164 = $162;
    }
    HEAP32[$ls>>2] = $164;
    $$0 = 283;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = 62;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 74: {
   $176 = HEAP32[$3>>2]|0;
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + -1)|0;
   HEAP32[$176>>2] = $178;
   $179 = ($177|0)==(0);
   if ($179) {
    $185 = (_luaZ_fill($176)|0);
    $186 = $185;
   } else {
    $180 = (($176) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) + 1|0);
    HEAP32[$180>>2] = $182;
    $183 = HEAP8[$181>>0]|0;
    $184 = $183&255;
    $186 = $184;
   }
   HEAP32[$ls>>2] = $186;
   $187 = ($186|0)==(47);
   if (!($187)) {
    $$0 = 47;
    STACKTOP = sp;return ($$0|0);
   }
   $188 = HEAP32[$3>>2]|0;
   $189 = HEAP32[$188>>2]|0;
   $190 = (($189) + -1)|0;
   HEAP32[$188>>2] = $190;
   $191 = ($189|0)==(0);
   if ($191) {
    $197 = (_luaZ_fill($188)|0);
    $198 = $197;
   } else {
    $192 = (($188) + 4|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + 1|0);
    HEAP32[$192>>2] = $194;
    $195 = HEAP8[$193>>0]|0;
    $196 = $195&255;
    $198 = $196;
   }
   HEAP32[$ls>>2] = $198;
   $$0 = 279;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 82: {
   $199 = HEAP32[$3>>2]|0;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + -1)|0;
   HEAP32[$199>>2] = $201;
   $202 = ($200|0)==(0);
   if ($202) {
    $208 = (_luaZ_fill($199)|0);
    $209 = $208;
   } else {
    $203 = (($199) + 4|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (($204) + 1|0);
    HEAP32[$203>>2] = $205;
    $206 = HEAP8[$204>>0]|0;
    $207 = $206&255;
    $209 = $207;
   }
   HEAP32[$ls>>2] = $209;
   $210 = ($209|0)==(61);
   if (!($210)) {
    $$0 = 126;
    STACKTOP = sp;return ($$0|0);
   }
   $211 = HEAP32[$3>>2]|0;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($212) + -1)|0;
   HEAP32[$211>>2] = $213;
   $214 = ($212|0)==(0);
   if ($214) {
    $220 = (_luaZ_fill($211)|0);
    $221 = $220;
   } else {
    $215 = (($211) + 4|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (($216) + 1|0);
    HEAP32[$215>>2] = $217;
    $218 = HEAP8[$216>>0]|0;
    $219 = $218&255;
    $221 = $219;
   }
   HEAP32[$ls>>2] = $221;
   $$0 = 285;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 90: {
   $222 = HEAP32[$3>>2]|0;
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + -1)|0;
   HEAP32[$222>>2] = $224;
   $225 = ($223|0)==(0);
   if ($225) {
    $231 = (_luaZ_fill($222)|0);
    $232 = $231;
   } else {
    $226 = (($222) + 4|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = (($227) + 1|0);
    HEAP32[$226>>2] = $228;
    $229 = HEAP8[$227>>0]|0;
    $230 = $229&255;
    $232 = $230;
   }
   HEAP32[$ls>>2] = $232;
   $233 = ($232|0)==(58);
   if (!($233)) {
    $$0 = 58;
    STACKTOP = sp;return ($$0|0);
   }
   $234 = HEAP32[$3>>2]|0;
   $235 = HEAP32[$234>>2]|0;
   $236 = (($235) + -1)|0;
   HEAP32[$234>>2] = $236;
   $237 = ($235|0)==(0);
   if ($237) {
    $243 = (_luaZ_fill($234)|0);
    $244 = $243;
   } else {
    $238 = (($234) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) + 1|0);
    HEAP32[$238>>2] = $240;
    $241 = HEAP8[$239>>0]|0;
    $242 = $241&255;
    $244 = $242;
   }
   HEAP32[$ls>>2] = $244;
   $$0 = 288;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 98: {
   $245 = HEAP32[$0>>2]|0;
   $246 = (($245) + 4|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + 1)|0;
   $249 = (($245) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($248>>>0)>($250>>>0);
   do {
    if ($251) {
     $252 = ($250>>>0)>(2147483646);
     if ($252) {
      _lexerror($ls,14304,0);
      // unreachable;
     } else {
      $253 = $250 << 1;
      $254 = (($ls) + 52|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = HEAP32[$245>>2]|0;
      $257 = (_luaM_realloc_($255,$256,$250,$253)|0);
      HEAP32[$245>>2] = $257;
      HEAP32[$249>>2] = $253;
      $$pre$i$i = HEAP32[$246>>2]|0;
      $260 = $$pre$i$i;$262 = $257;
      break;
     }
    } else {
     $$pre1$i$i = HEAP32[$245>>2]|0;
     $260 = $247;$262 = $$pre1$i$i;
    }
   } while(0);
   $258 = $$lcssa227&255;
   $259 = (($260) + 1)|0;
   HEAP32[$246>>2] = $259;
   $261 = (($262) + ($260)|0);
   HEAP8[$261>>0] = $258;
   $263 = HEAP32[$3>>2]|0;
   $264 = HEAP32[$263>>2]|0;
   $265 = (($264) + -1)|0;
   HEAP32[$263>>2] = $265;
   $266 = ($264|0)==(0);
   if ($266) {
    $272 = (_luaZ_fill($263)|0);
    $273 = $272;
   } else {
    $267 = (($263) + 4|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = (($268) + 1|0);
    HEAP32[$267>>2] = $269;
    $270 = HEAP8[$268>>0]|0;
    $271 = $270&255;
    $273 = $271;
   }
   HEAP32[$ls>>2] = $273;
   $274 = ($273|0)==($$lcssa227|0);
   L116: do {
    if (!($274)) {
     $275 = (($ls) + 52|0);
     $925 = $273;
     L118: while(1) {
      L120: do {
       if ((($925|0) == 13) | (($925|0) == 10)) {
        label = 113;
        break L118;
       } else if ((($925|0) == 92)) {
        $276 = HEAP32[$0>>2]|0;
        $277 = (($276) + 4|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = (($278) + 1)|0;
        $280 = (($276) + 8|0);
        $281 = HEAP32[$280>>2]|0;
        $282 = ($279>>>0)>($281>>>0);
        if ($282) {
         $283 = ($281>>>0)>(2147483646);
         if ($283) {
          label = 117;
          break L118;
         }
         $284 = $281 << 1;
         $285 = HEAP32[$275>>2]|0;
         $286 = HEAP32[$276>>2]|0;
         $287 = (_luaM_realloc_($285,$286,$281,$284)|0);
         HEAP32[$276>>2] = $287;
         HEAP32[$280>>2] = $284;
         $$pre$i4$i = HEAP32[$277>>2]|0;
         $289 = $$pre$i4$i;$291 = $287;
        } else {
         $$pre1$i2$i = HEAP32[$276>>2]|0;
         $289 = $278;$291 = $$pre1$i2$i;
        }
        $288 = (($289) + 1)|0;
        HEAP32[$277>>2] = $288;
        $290 = (($291) + ($289)|0);
        HEAP8[$290>>0] = 92;
        $292 = HEAP32[$3>>2]|0;
        $293 = HEAP32[$292>>2]|0;
        $294 = (($293) + -1)|0;
        HEAP32[$292>>2] = $294;
        $295 = ($293|0)==(0);
        if ($295) {
         $301 = (_luaZ_fill($292)|0);
         $302 = $301;
        } else {
         $296 = (($292) + 4|0);
         $297 = HEAP32[$296>>2]|0;
         $298 = (($297) + 1|0);
         HEAP32[$296>>2] = $298;
         $299 = HEAP8[$297>>0]|0;
         $300 = $299&255;
         $302 = $300;
        }
        HEAP32[$ls>>2] = $302;
        do {
         switch ($302|0) {
         case 97:  {
          $c$0$i = 7;
          label = 326;
          break;
         }
         case 98:  {
          $c$0$i = 8;
          label = 326;
          break;
         }
         case 102:  {
          $c$0$i = 12;
          label = 326;
          break;
         }
         case 114:  {
          $c$0$i = 13;
          label = 326;
          break;
         }
         case 116:  {
          $c$0$i = 9;
          label = 326;
          break;
         }
         case 120:  {
          $304 = HEAP32[$0>>2]|0;
          $305 = (($304) + 4|0);
          $306 = HEAP32[$305>>2]|0;
          $307 = (($306) + 1)|0;
          $308 = (($304) + 8|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = ($307>>>0)>($309>>>0);
          if ($310) {
           $311 = ($309>>>0)>(2147483646);
           if ($311) {
            label = 133;
            break L118;
           }
           $312 = $309 << 1;
           $313 = HEAP32[$275>>2]|0;
           $314 = HEAP32[$304>>2]|0;
           $315 = (_luaM_realloc_($313,$314,$309,$312)|0);
           HEAP32[$304>>2] = $315;
           HEAP32[$308>>2] = $312;
           $$pre$i$i$i = HEAP32[$305>>2]|0;
           $317 = $$pre$i$i$i;$319 = $315;
          } else {
           $$pre1$i$i$i = HEAP32[$304>>2]|0;
           $317 = $306;$319 = $$pre1$i$i$i;
          }
          $316 = (($317) + 1)|0;
          HEAP32[$305>>2] = $316;
          $318 = (($319) + ($317)|0);
          HEAP8[$318>>0] = 120;
          $320 = HEAP32[$3>>2]|0;
          $321 = HEAP32[$320>>2]|0;
          $322 = (($321) + -1)|0;
          HEAP32[$320>>2] = $322;
          $323 = ($321|0)==(0);
          if ($323) {
           $329 = (_luaZ_fill($320)|0);
           $330 = $329;
          } else {
           $324 = (($320) + 4|0);
           $325 = HEAP32[$324>>2]|0;
           $326 = (($325) + 1|0);
           HEAP32[$324>>2] = $326;
           $327 = HEAP8[$325>>0]|0;
           $328 = $327&255;
           $330 = $328;
          }
          HEAP32[$ls>>2] = $330;
          $331 = (($330) + 1)|0;
          $332 = (12952 + ($331)|0);
          $333 = HEAP8[$332>>0]|0;
          $334 = $333 & 16;
          $335 = ($334<<24>>24)==(0);
          if ($335) {
           $$lcssa212 = $330;
           label = 139;
           break L118;
          }
          $365 = (_luaO_hexavalue($330)|0);
          $366 = $365 << 4;
          $367 = HEAP32[$ls>>2]|0;
          $368 = HEAP32[$0>>2]|0;
          $369 = (($368) + 4|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = (($370) + 1)|0;
          $372 = (($368) + 8|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($371>>>0)>($373>>>0);
          if ($374) {
           $375 = ($373>>>0)>(2147483646);
           if ($375) {
            label = 153;
            break L118;
           }
           $376 = $373 << 1;
           $377 = HEAP32[$275>>2]|0;
           $378 = HEAP32[$368>>2]|0;
           $379 = (_luaM_realloc_($377,$378,$373,$376)|0);
           HEAP32[$368>>2] = $379;
           HEAP32[$372>>2] = $376;
           $$pre$i5$i$i = HEAP32[$369>>2]|0;
           $382 = $$pre$i5$i$i;$384 = $379;
          } else {
           $$pre1$i3$i$i = HEAP32[$368>>2]|0;
           $382 = $370;$384 = $$pre1$i3$i$i;
          }
          $380 = $367&255;
          $381 = (($382) + 1)|0;
          HEAP32[$369>>2] = $381;
          $383 = (($384) + ($382)|0);
          HEAP8[$383>>0] = $380;
          $385 = HEAP32[$3>>2]|0;
          $386 = HEAP32[$385>>2]|0;
          $387 = (($386) + -1)|0;
          HEAP32[$385>>2] = $387;
          $388 = ($386|0)==(0);
          if ($388) {
           $394 = (_luaZ_fill($385)|0);
           $395 = $394;
          } else {
           $389 = (($385) + 4|0);
           $390 = HEAP32[$389>>2]|0;
           $391 = (($390) + 1|0);
           HEAP32[$389>>2] = $391;
           $392 = HEAP8[$390>>0]|0;
           $393 = $392&255;
           $395 = $393;
          }
          HEAP32[$ls>>2] = $395;
          $396 = (($395) + 1)|0;
          $397 = (12952 + ($396)|0);
          $398 = HEAP8[$397>>0]|0;
          $399 = $398 & 16;
          $400 = ($399<<24>>24)==(0);
          if ($400) {
           $$lcssa215 = $395;
           label = 159;
           break L118;
          }
          $430 = (_luaO_hexavalue($395)|0);
          $431 = (($430) + ($366))|0;
          $432 = HEAP32[$0>>2]|0;
          $433 = (($432) + 4|0);
          $434 = HEAP32[$433>>2]|0;
          $435 = (($434) + -2)|0;
          HEAP32[$433>>2] = $435;
          $c$0$i = $431;
          label = 326;
          break;
         }
         case 118:  {
          $c$0$i = 11;
          label = 326;
          break;
         }
         case -1:  {
          $$be44$i = -1;
          break L120;
          break;
         }
         case 110:  {
          $c$0$i = 10;
          label = 326;
          break;
         }
         case 117:  {
          $436 = HEAP32[$0>>2]|0;
          $437 = (($436) + 4|0);
          $438 = HEAP32[$437>>2]|0;
          $439 = (($438) + 1)|0;
          $440 = (($436) + 8|0);
          $441 = HEAP32[$440>>2]|0;
          $442 = ($439>>>0)>($441>>>0);
          if ($442) {
           $443 = ($441>>>0)>(2147483646);
           if ($443) {
            label = 174;
            break L118;
           }
           $444 = $441 << 1;
           $445 = HEAP32[$275>>2]|0;
           $446 = HEAP32[$436>>2]|0;
           $447 = (_luaM_realloc_($445,$446,$441,$444)|0);
           HEAP32[$436>>2] = $447;
           HEAP32[$440>>2] = $444;
           $$pre$i$i$i$i = HEAP32[$437>>2]|0;
           $449 = $$pre$i$i$i$i;$451 = $447;
          } else {
           $$pre1$i$i$i$i = HEAP32[$436>>2]|0;
           $449 = $438;$451 = $$pre1$i$i$i$i;
          }
          $448 = (($449) + 1)|0;
          HEAP32[$437>>2] = $448;
          $450 = (($451) + ($449)|0);
          HEAP8[$450>>0] = 117;
          $452 = HEAP32[$3>>2]|0;
          $453 = HEAP32[$452>>2]|0;
          $454 = (($453) + -1)|0;
          HEAP32[$452>>2] = $454;
          $455 = ($453|0)==(0);
          if ($455) {
           $461 = (_luaZ_fill($452)|0);
           $462 = $461;
          } else {
           $456 = (($452) + 4|0);
           $457 = HEAP32[$456>>2]|0;
           $458 = (($457) + 1|0);
           HEAP32[$456>>2] = $458;
           $459 = HEAP8[$457>>0]|0;
           $460 = $459&255;
           $462 = $460;
          }
          HEAP32[$ls>>2] = $462;
          if ((($462|0) == -1)) {
           label = 189;
           break L118;
          } else if (!((($462|0) == 123))) {
           $$lcssa195 = $462;
           label = 180;
           break L118;
          }
          $491 = HEAP32[$0>>2]|0;
          $492 = (($491) + 4|0);
          $493 = HEAP32[$492>>2]|0;
          $494 = (($493) + 1)|0;
          $495 = (($491) + 8|0);
          $496 = HEAP32[$495>>2]|0;
          $497 = ($494>>>0)>($496>>>0);
          if ($497) {
           $498 = ($496>>>0)>(2147483646);
           if ($498) {
            label = 194;
            break L118;
           }
           $499 = $496 << 1;
           $500 = HEAP32[$275>>2]|0;
           $501 = HEAP32[$491>>2]|0;
           $502 = (_luaM_realloc_($500,$501,$496,$499)|0);
           HEAP32[$491>>2] = $502;
           HEAP32[$495>>2] = $499;
           $$pre$i16$i$i$i = HEAP32[$492>>2]|0;
           $504 = $$pre$i16$i$i$i;$506 = $502;
          } else {
           $$pre1$i14$i$i$i = HEAP32[$491>>2]|0;
           $504 = $493;$506 = $$pre1$i14$i$i$i;
          }
          $503 = (($504) + 1)|0;
          HEAP32[$492>>2] = $503;
          $505 = (($506) + ($504)|0);
          HEAP8[$505>>0] = 123;
          $507 = HEAP32[$3>>2]|0;
          $508 = HEAP32[$507>>2]|0;
          $509 = (($508) + -1)|0;
          HEAP32[$507>>2] = $509;
          $510 = ($508|0)==(0);
          if ($510) {
           $516 = (_luaZ_fill($507)|0);
           $517 = $516;
          } else {
           $511 = (($507) + 4|0);
           $512 = HEAP32[$511>>2]|0;
           $513 = (($512) + 1|0);
           HEAP32[$511>>2] = $513;
           $514 = HEAP8[$512>>0]|0;
           $515 = $514&255;
           $517 = $515;
          }
          HEAP32[$ls>>2] = $517;
          $518 = (($517) + 1)|0;
          $519 = (12952 + ($518)|0);
          $520 = HEAP8[$519>>0]|0;
          $521 = $520 & 16;
          $522 = ($521<<24>>24)==(0);
          if ($522) {
           $$lcssa204 = $517;
           label = 200;
           break L118;
          }
          $552 = (_luaO_hexavalue($517)|0);
          $i$0$i$i$i = 4;$r$0$i$i$i = $552;
          while(1) {
           $553 = HEAP32[$ls>>2]|0;
           $554 = HEAP32[$0>>2]|0;
           $555 = (($554) + 4|0);
           $556 = HEAP32[$555>>2]|0;
           $557 = (($556) + 1)|0;
           $558 = (($554) + 8|0);
           $559 = HEAP32[$558>>2]|0;
           $560 = ($557>>>0)>($559>>>0);
           if ($560) {
            $561 = ($559>>>0)>(2147483646);
            if ($561) {
             label = 215;
             break L118;
            }
            $562 = $559 << 1;
            $563 = HEAP32[$275>>2]|0;
            $564 = HEAP32[$554>>2]|0;
            $565 = (_luaM_realloc_($563,$564,$559,$562)|0);
            HEAP32[$554>>2] = $565;
            HEAP32[$558>>2] = $562;
            $$pre$i4$i$i$i = HEAP32[$555>>2]|0;
            $568 = $$pre$i4$i$i$i;$570 = $565;
           } else {
            $$pre1$i2$i$i$i = HEAP32[$554>>2]|0;
            $568 = $556;$570 = $$pre1$i2$i$i$i;
           }
           $566 = $553&255;
           $567 = (($568) + 1)|0;
           HEAP32[$555>>2] = $567;
           $569 = (($570) + ($568)|0);
           HEAP8[$569>>0] = $566;
           $571 = HEAP32[$3>>2]|0;
           $572 = HEAP32[$571>>2]|0;
           $573 = (($572) + -1)|0;
           HEAP32[$571>>2] = $573;
           $574 = ($572|0)==(0);
           if ($574) {
            $580 = (_luaZ_fill($571)|0);
            $581 = $580;
           } else {
            $575 = (($571) + 4|0);
            $576 = HEAP32[$575>>2]|0;
            $577 = (($576) + 1|0);
            HEAP32[$575>>2] = $577;
            $578 = HEAP8[$576>>0]|0;
            $579 = $578&255;
            $581 = $579;
           }
           HEAP32[$ls>>2] = $581;
           $582 = (($581) + 1)|0;
           $583 = (12952 + ($582)|0);
           $584 = HEAP8[$583>>0]|0;
           $585 = $584 & 16;
           $586 = ($585<<24>>24)==(0);
           if ($586) {
            $$lcssa = $581;$i$0$i$i$i$lcssa172 = $i$0$i$i$i;$r$0$i$i$i$lcssa170 = $r$0$i$i$i;
            break;
           }
           $587 = (($i$0$i$i$i) + 1)|0;
           $588 = $r$0$i$i$i << 4;
           $589 = (_luaO_hexavalue($581)|0);
           $590 = (($589) + ($588))|0;
           $591 = ($590>>>0)<(1114112);
           if ($591) {
            $i$0$i$i$i = $587;$r$0$i$i$i = $590;
           } else {
            label = 222;
            break L118;
           }
          }
          if ((($$lcssa|0) == -1)) {
           label = 243;
           break L118;
          } else if (!((($$lcssa|0) == 125))) {
           $$lcssa$lcssa = $$lcssa;
           label = 234;
           break L118;
          }
          $650 = HEAP32[$3>>2]|0;
          $651 = HEAP32[$650>>2]|0;
          $652 = (($651) + -1)|0;
          HEAP32[$650>>2] = $652;
          $653 = ($651|0)==(0);
          if ($653) {
           $659 = (_luaZ_fill($650)|0);
           $660 = $659;
          } else {
           $654 = (($650) + 4|0);
           $655 = HEAP32[$654>>2]|0;
           $656 = (($655) + 1|0);
           HEAP32[$654>>2] = $656;
           $657 = HEAP8[$655>>0]|0;
           $658 = $657&255;
           $660 = $658;
          }
          HEAP32[$ls>>2] = $660;
          $661 = HEAP32[$0>>2]|0;
          $662 = (($661) + 4|0);
          $663 = HEAP32[$662>>2]|0;
          $664 = (($663) - ($i$0$i$i$i$lcssa172))|0;
          HEAP32[$662>>2] = $664;
          $665 = (_luaO_utf8esc($buff$i$i,$r$0$i$i$i$lcssa170)|0);
          $666 = ($665|0)>(0);
          if ($666) {
           $n$06$i$i = $665;
           while(1) {
            $667 = (8 - ($n$06$i$i))|0;
            $668 = (($buff$i$i) + ($667)|0);
            $669 = HEAP8[$668>>0]|0;
            $670 = HEAP32[$0>>2]|0;
            $671 = (($670) + 4|0);
            $672 = HEAP32[$671>>2]|0;
            $673 = (($672) + 1)|0;
            $674 = (($670) + 8|0);
            $675 = HEAP32[$674>>2]|0;
            $676 = ($673>>>0)>($675>>>0);
            if ($676) {
             $677 = ($675>>>0)>(2147483646);
             if ($677) {
              label = 253;
              break L118;
             }
             $678 = $675 << 1;
             $679 = HEAP32[$275>>2]|0;
             $680 = HEAP32[$670>>2]|0;
             $681 = (_luaM_realloc_($679,$680,$675,$678)|0);
             HEAP32[$670>>2] = $681;
             HEAP32[$674>>2] = $678;
             $$pre$i$i9$i = HEAP32[$671>>2]|0;
             $683 = $$pre$i$i9$i;$685 = $681;
            } else {
             $$pre1$i$i7$i = HEAP32[$670>>2]|0;
             $683 = $672;$685 = $$pre1$i$i7$i;
            }
            $682 = (($683) + 1)|0;
            HEAP32[$671>>2] = $682;
            $684 = (($685) + ($683)|0);
            HEAP8[$684>>0] = $669;
            $686 = (($n$06$i$i) + -1)|0;
            $687 = ($686|0)>(0);
            if ($687) {
             $n$06$i$i = $686;
            } else {
             break;
            }
           }
          }
          break;
         }
         case 13: case 10:  {
          $688 = HEAP32[$3>>2]|0;
          $689 = HEAP32[$688>>2]|0;
          $690 = (($689) + -1)|0;
          HEAP32[$688>>2] = $690;
          $691 = ($689|0)==(0);
          if ($691) {
           $697 = (_luaZ_fill($688)|0);
           $698 = $697;
          } else {
           $692 = (($688) + 4|0);
           $693 = HEAP32[$692>>2]|0;
           $694 = (($693) + 1|0);
           HEAP32[$692>>2] = $694;
           $695 = HEAP8[$693>>0]|0;
           $696 = $695&255;
           $698 = $696;
          }
          HEAP32[$ls>>2] = $698;
          if ((($698|0) == 13) | (($698|0) == 10)) {
           $699 = ($698|0)==($302|0);
           if (!($699)) {
            $700 = HEAP32[$3>>2]|0;
            $701 = HEAP32[$700>>2]|0;
            $702 = (($701) + -1)|0;
            HEAP32[$700>>2] = $702;
            $703 = ($701|0)==(0);
            if ($703) {
             $709 = (_luaZ_fill($700)|0);
             $710 = $709;
            } else {
             $704 = (($700) + 4|0);
             $705 = HEAP32[$704>>2]|0;
             $706 = (($705) + 1|0);
             HEAP32[$704>>2] = $706;
             $707 = HEAP8[$705>>0]|0;
             $708 = $707&255;
             $710 = $708;
            }
            HEAP32[$ls>>2] = $710;
           }
          }
          $711 = HEAP32[$4>>2]|0;
          $712 = (($711) + 1)|0;
          HEAP32[$4>>2] = $712;
          $713 = ($712|0)==(2147483647);
          if ($713) {
           label = 266;
           break L118;
          } else {
           $c$1$i = 10;
           label = 330;
          }
          break;
         }
         case 39: case 34: case 92:  {
          $c$0$i = $302;
          label = 326;
          break;
         }
         case 122:  {
          $714 = HEAP32[$0>>2]|0;
          $715 = (($714) + 4|0);
          $716 = HEAP32[$715>>2]|0;
          $717 = (($716) + -1)|0;
          HEAP32[$715>>2] = $717;
          $718 = HEAP32[$3>>2]|0;
          $719 = HEAP32[$718>>2]|0;
          $720 = (($719) + -1)|0;
          HEAP32[$718>>2] = $720;
          $721 = ($719|0)==(0);
          if ($721) {
           $727 = (_luaZ_fill($718)|0);
           $728 = $727;
          } else {
           $722 = (($718) + 4|0);
           $723 = HEAP32[$722>>2]|0;
           $724 = (($723) + 1|0);
           HEAP32[$722>>2] = $724;
           $725 = HEAP8[$723>>0]|0;
           $726 = $725&255;
           $728 = $726;
          }
          HEAP32[$ls>>2] = $728;
          $729 = (($728) + 1)|0;
          $730 = (12952 + ($729)|0);
          $731 = HEAP8[$730>>0]|0;
          $732 = $731 & 8;
          $733 = ($732<<24>>24)==(0);
          if (!($733)) {
           $746 = $728;
           while(1) {
            if ((($746|0) == 13) | (($746|0) == 10)) {
             $734 = HEAP32[$3>>2]|0;
             $735 = HEAP32[$734>>2]|0;
             $736 = (($735) + -1)|0;
             HEAP32[$734>>2] = $736;
             $737 = ($735|0)==(0);
             if ($737) {
              $743 = (_luaZ_fill($734)|0);
              $744 = $743;
             } else {
              $738 = (($734) + 4|0);
              $739 = HEAP32[$738>>2]|0;
              $740 = (($739) + 1|0);
              HEAP32[$738>>2] = $740;
              $741 = HEAP8[$739>>0]|0;
              $742 = $741&255;
              $744 = $742;
             }
             HEAP32[$ls>>2] = $744;
             if ((($744|0) == 13) | (($744|0) == 10)) {
              $745 = ($744|0)==($746|0);
              if ($745) {
               $$pr40$i = $746;
              } else {
               $747 = HEAP32[$3>>2]|0;
               $748 = HEAP32[$747>>2]|0;
               $749 = (($748) + -1)|0;
               HEAP32[$747>>2] = $749;
               $750 = ($748|0)==(0);
               if ($750) {
                $756 = (_luaZ_fill($747)|0);
                $757 = $756;
               } else {
                $751 = (($747) + 4|0);
                $752 = HEAP32[$751>>2]|0;
                $753 = (($752) + 1|0);
                HEAP32[$751>>2] = $753;
                $754 = HEAP8[$752>>0]|0;
                $755 = $754&255;
                $757 = $755;
               }
               HEAP32[$ls>>2] = $757;
               $$pr40$i = $757;
              }
             } else {
              $$pr40$i = $744;
             }
             $758 = HEAP32[$4>>2]|0;
             $759 = (($758) + 1)|0;
             HEAP32[$4>>2] = $759;
             $760 = ($759|0)==(2147483647);
             if ($760) {
              label = 284;
              break L118;
             } else {
              $$be$i = $$pr40$i;
             }
            } else {
             $761 = HEAP32[$3>>2]|0;
             $762 = HEAP32[$761>>2]|0;
             $763 = (($762) + -1)|0;
             HEAP32[$761>>2] = $763;
             $764 = ($762|0)==(0);
             if ($764) {
              $770 = (_luaZ_fill($761)|0);
              $771 = $770;
             } else {
              $765 = (($761) + 4|0);
              $766 = HEAP32[$765>>2]|0;
              $767 = (($766) + 1|0);
              HEAP32[$765>>2] = $767;
              $768 = HEAP8[$766>>0]|0;
              $769 = $768&255;
              $771 = $769;
             }
             HEAP32[$ls>>2] = $771;
             $$be$i = $771;
            }
            $772 = (($$be$i) + 1)|0;
            $773 = (12952 + ($772)|0);
            $774 = HEAP8[$773>>0]|0;
            $775 = $774 & 8;
            $776 = ($775<<24>>24)==(0);
            if ($776) {
             break;
            } else {
             $746 = $$be$i;
            }
           }
          }
          break;
         }
         default: {
          $777 = (($302) + 1)|0;
          $778 = (12952 + ($777)|0);
          $779 = HEAP8[$778>>0]|0;
          $780 = $779 & 2;
          $781 = ($780<<24>>24)==(0);
          if ($781) {
           $$lcssa191 = $302;
           label = 292;
           break L118;
          }
          $812 = $302;$i$08$i$i = 0;$r$09$i$i = 0;
          while(1) {
           $811 = (($812) + 1)|0;
           $813 = (12952 + ($811)|0);
           $814 = HEAP8[$813>>0]|0;
           $815 = $814 & 2;
           $816 = ($815<<24>>24)==(0);
           if ($816) {
            $1153 = $812;$i$0$lcssa$i$i = $i$08$i$i;$r$0$lcssa$i$i = $r$09$i$i;
            break;
           }
           $817 = ($r$09$i$i*10)|0;
           $818 = (($812) + -48)|0;
           $819 = (($818) + ($817))|0;
           $820 = HEAP32[$0>>2]|0;
           $821 = (($820) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = (($822) + 1)|0;
           $824 = (($820) + 8|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($823>>>0)>($825>>>0);
           if ($826) {
            $827 = ($825>>>0)>(2147483646);
            if ($827) {
             label = 307;
             break L118;
            }
            $828 = $825 << 1;
            $829 = HEAP32[$275>>2]|0;
            $830 = HEAP32[$820>>2]|0;
            $831 = (_luaM_realloc_($829,$830,$825,$828)|0);
            HEAP32[$820>>2] = $831;
            HEAP32[$824>>2] = $828;
            $$pre$i$i17$i = HEAP32[$821>>2]|0;
            $834 = $$pre$i$i17$i;$836 = $831;
           } else {
            $$pre1$i$i15$i = HEAP32[$820>>2]|0;
            $834 = $822;$836 = $$pre1$i$i15$i;
           }
           $832 = $812&255;
           $833 = (($834) + 1)|0;
           HEAP32[$821>>2] = $833;
           $835 = (($836) + ($834)|0);
           HEAP8[$835>>0] = $832;
           $837 = HEAP32[$3>>2]|0;
           $838 = HEAP32[$837>>2]|0;
           $839 = (($838) + -1)|0;
           HEAP32[$837>>2] = $839;
           $840 = ($838|0)==(0);
           if ($840) {
            $846 = (_luaZ_fill($837)|0);
            $847 = $846;
           } else {
            $841 = (($837) + 4|0);
            $842 = HEAP32[$841>>2]|0;
            $843 = (($842) + 1|0);
            HEAP32[$841>>2] = $843;
            $844 = HEAP8[$842>>0]|0;
            $845 = $844&255;
            $847 = $845;
           }
           HEAP32[$ls>>2] = $847;
           $848 = (($i$08$i$i) + 1)|0;
           $849 = ($848|0)<(3);
           if ($849) {
            $812 = $847;$i$08$i$i = $848;$r$09$i$i = $819;
           } else {
            $1153 = $847;$i$0$lcssa$i$i = $848;$r$0$lcssa$i$i = $819;
            break;
           }
          }
          $850 = ($r$0$lcssa$i$i|0)<(256);
          if (!($850)) {
           $$lcssa216 = $1153;
           label = 314;
           break L118;
          }
          $880 = HEAP32[$0>>2]|0;
          $881 = (($880) + 4|0);
          $882 = HEAP32[$881>>2]|0;
          $883 = (($882) - ($i$0$lcssa$i$i))|0;
          HEAP32[$881>>2] = $883;
          $c$1$i = $r$0$lcssa$i$i;
          label = 330;
         }
         }
        } while(0);
        if ((label|0) == 326) {
         label = 0;
         $884 = HEAP32[$3>>2]|0;
         $885 = HEAP32[$884>>2]|0;
         $886 = (($885) + -1)|0;
         HEAP32[$884>>2] = $886;
         $887 = ($885|0)==(0);
         if ($887) {
          $893 = (_luaZ_fill($884)|0);
          $894 = $893;
         } else {
          $888 = (($884) + 4|0);
          $889 = HEAP32[$888>>2]|0;
          $890 = (($889) + 1|0);
          HEAP32[$888>>2] = $890;
          $891 = HEAP8[$889>>0]|0;
          $892 = $891&255;
          $894 = $892;
         }
         HEAP32[$ls>>2] = $894;
         $c$1$i = $c$0$i;
         label = 330;
        }
        if ((label|0) == 330) {
         label = 0;
         $895 = HEAP32[$0>>2]|0;
         $896 = (($895) + 4|0);
         $897 = HEAP32[$896>>2]|0;
         $898 = (($897) + -1)|0;
         HEAP32[$896>>2] = $898;
         $899 = (($895) + 8|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = ($897>>>0)>($900>>>0);
         if ($901) {
          $902 = ($900>>>0)>(2147483646);
          if ($902) {
           label = 333;
           break L118;
          }
          $903 = $900 << 1;
          $904 = HEAP32[$275>>2]|0;
          $905 = HEAP32[$895>>2]|0;
          $906 = (_luaM_realloc_($904,$905,$900,$903)|0);
          HEAP32[$895>>2] = $906;
          HEAP32[$899>>2] = $903;
          $$pre$i23$i = HEAP32[$896>>2]|0;
          $909 = $$pre$i23$i;$911 = $906;
         } else {
          $$pre1$i21$i = HEAP32[$895>>2]|0;
          $909 = $898;$911 = $$pre1$i21$i;
         }
         $907 = $c$1$i&255;
         $908 = (($909) + 1)|0;
         HEAP32[$896>>2] = $908;
         $910 = (($911) + ($909)|0);
         HEAP8[$910>>0] = $907;
        }
        $$pr$i = HEAP32[$ls>>2]|0;
        $$be44$i = $$pr$i;
       } else if ((($925|0) == -1)) {
        label = 112;
        break L118;
       } else {
        $912 = HEAP32[$0>>2]|0;
        $913 = (($912) + 4|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = (($914) + 1)|0;
        $916 = (($912) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = ($915>>>0)>($917>>>0);
        if ($918) {
         $919 = ($917>>>0)>(2147483646);
         if ($919) {
          label = 339;
          break L118;
         }
         $920 = $917 << 1;
         $921 = HEAP32[$275>>2]|0;
         $922 = HEAP32[$912>>2]|0;
         $923 = (_luaM_realloc_($921,$922,$917,$920)|0);
         HEAP32[$912>>2] = $923;
         HEAP32[$916>>2] = $920;
         $$pre$i28$i = HEAP32[$913>>2]|0;
         $927 = $$pre$i28$i;$929 = $923;
        } else {
         $$pre1$i26$i = HEAP32[$912>>2]|0;
         $927 = $914;$929 = $$pre1$i26$i;
        }
        $924 = $925&255;
        $926 = (($927) + 1)|0;
        HEAP32[$913>>2] = $926;
        $928 = (($929) + ($927)|0);
        HEAP8[$928>>0] = $924;
        $930 = HEAP32[$3>>2]|0;
        $931 = HEAP32[$930>>2]|0;
        $932 = (($931) + -1)|0;
        HEAP32[$930>>2] = $932;
        $933 = ($931|0)==(0);
        if ($933) {
         $939 = (_luaZ_fill($930)|0);
         $940 = $939;
        } else {
         $934 = (($930) + 4|0);
         $935 = HEAP32[$934>>2]|0;
         $936 = (($935) + 1|0);
         HEAP32[$934>>2] = $936;
         $937 = HEAP8[$935>>0]|0;
         $938 = $937&255;
         $940 = $938;
        }
        HEAP32[$ls>>2] = $940;
        $$be44$i = $940;
       }
      } while(0);
      $303 = ($$be44$i|0)==($$lcssa227|0);
      if ($303) {
       label = 345;
       break;
      } else {
       $925 = $$be44$i;
      }
     }
     switch (label|0) {
      case 112: {
       _lexerror($ls,14336,289);
       // unreachable;
       break;
      }
      case 113: {
       _lexerror($ls,14336,293);
       // unreachable;
       break;
      }
      case 117: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 133: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 139: {
       $336 = ($$lcssa212|0)==(-1);
       if ($336) {
        _lexerror($ls,14472,293);
        // unreachable;
       }
       $337 = HEAP32[$0>>2]|0;
       $338 = (($337) + 4|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = (($339) + 1)|0;
       $341 = (($337) + 8|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($340>>>0)>($342>>>0);
       do {
        if ($343) {
         $344 = ($342>>>0)>(2147483646);
         if ($344) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $345 = $342 << 1;
          $346 = HEAP32[$275>>2]|0;
          $347 = HEAP32[$337>>2]|0;
          $348 = (_luaM_realloc_($346,$347,$342,$345)|0);
          HEAP32[$337>>2] = $348;
          HEAP32[$341>>2] = $345;
          $$pre$i11$i$i = HEAP32[$338>>2]|0;
          $351 = $$pre$i11$i$i;$353 = $348;
          break;
         }
        } else {
         $$pre1$i9$i$i = HEAP32[$337>>2]|0;
         $351 = $339;$353 = $$pre1$i9$i$i;
        }
       } while(0);
       $349 = $$lcssa212&255;
       $350 = (($351) + 1)|0;
       HEAP32[$338>>2] = $350;
       $352 = (($353) + ($351)|0);
       HEAP8[$352>>0] = $349;
       $354 = HEAP32[$3>>2]|0;
       $355 = HEAP32[$354>>2]|0;
       $356 = (($355) + -1)|0;
       HEAP32[$354>>2] = $356;
       $357 = ($355|0)==(0);
       if ($357) {
        $363 = (_luaZ_fill($354)|0);
        $364 = $363;
       } else {
        $358 = (($354) + 4|0);
        $359 = HEAP32[$358>>2]|0;
        $360 = (($359) + 1|0);
        HEAP32[$358>>2] = $360;
        $361 = HEAP8[$359>>0]|0;
        $362 = $361&255;
        $364 = $362;
       }
       HEAP32[$ls>>2] = $364;
       _lexerror($ls,14472,293);
       // unreachable;
       break;
      }
      case 153: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 159: {
       $401 = ($$lcssa215|0)==(-1);
       if ($401) {
        _lexerror($ls,14472,293);
        // unreachable;
       }
       $402 = HEAP32[$0>>2]|0;
       $403 = (($402) + 4|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = (($404) + 1)|0;
       $406 = (($402) + 8|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = ($405>>>0)>($407>>>0);
       do {
        if ($408) {
         $409 = ($407>>>0)>(2147483646);
         if ($409) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $410 = $407 << 1;
          $411 = HEAP32[$275>>2]|0;
          $412 = HEAP32[$402>>2]|0;
          $413 = (_luaM_realloc_($411,$412,$407,$410)|0);
          HEAP32[$402>>2] = $413;
          HEAP32[$406>>2] = $410;
          $$pre$i16$i$i = HEAP32[$403>>2]|0;
          $416 = $$pre$i16$i$i;$418 = $413;
          break;
         }
        } else {
         $$pre1$i14$i$i = HEAP32[$402>>2]|0;
         $416 = $404;$418 = $$pre1$i14$i$i;
        }
       } while(0);
       $414 = $$lcssa215&255;
       $415 = (($416) + 1)|0;
       HEAP32[$403>>2] = $415;
       $417 = (($418) + ($416)|0);
       HEAP8[$417>>0] = $414;
       $419 = HEAP32[$3>>2]|0;
       $420 = HEAP32[$419>>2]|0;
       $421 = (($420) + -1)|0;
       HEAP32[$419>>2] = $421;
       $422 = ($420|0)==(0);
       if ($422) {
        $428 = (_luaZ_fill($419)|0);
        $429 = $428;
       } else {
        $423 = (($419) + 4|0);
        $424 = HEAP32[$423>>2]|0;
        $425 = (($424) + 1|0);
        HEAP32[$423>>2] = $425;
        $426 = HEAP8[$424>>0]|0;
        $427 = $426&255;
        $429 = $427;
       }
       HEAP32[$ls>>2] = $429;
       _lexerror($ls,14472,293);
       // unreachable;
       break;
      }
      case 174: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 180: {
       $463 = HEAP32[$0>>2]|0;
       $464 = (($463) + 4|0);
       $465 = HEAP32[$464>>2]|0;
       $466 = (($465) + 1)|0;
       $467 = (($463) + 8|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = ($466>>>0)>($468>>>0);
       do {
        if ($469) {
         $470 = ($468>>>0)>(2147483646);
         if ($470) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $471 = $468 << 1;
          $472 = HEAP32[$275>>2]|0;
          $473 = HEAP32[$463>>2]|0;
          $474 = (_luaM_realloc_($472,$473,$468,$471)|0);
          HEAP32[$463>>2] = $474;
          HEAP32[$467>>2] = $471;
          $$pre$i11$i$i$i = HEAP32[$464>>2]|0;
          $477 = $$pre$i11$i$i$i;$479 = $474;
          break;
         }
        } else {
         $$pre1$i9$i$i$i = HEAP32[$463>>2]|0;
         $477 = $465;$479 = $$pre1$i9$i$i$i;
        }
       } while(0);
       $475 = $$lcssa195&255;
       $476 = (($477) + 1)|0;
       HEAP32[$464>>2] = $476;
       $478 = (($479) + ($477)|0);
       HEAP8[$478>>0] = $475;
       $480 = HEAP32[$3>>2]|0;
       $481 = HEAP32[$480>>2]|0;
       $482 = (($481) + -1)|0;
       HEAP32[$480>>2] = $482;
       $483 = ($481|0)==(0);
       if ($483) {
        $489 = (_luaZ_fill($480)|0);
        $490 = $489;
       } else {
        $484 = (($480) + 4|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = (($485) + 1|0);
        HEAP32[$484>>2] = $486;
        $487 = HEAP8[$485>>0]|0;
        $488 = $487&255;
        $490 = $488;
       }
       HEAP32[$ls>>2] = $490;
       _lexerror($ls,14416,293);
       // unreachable;
       break;
      }
      case 189: {
       _lexerror($ls,14416,293);
       // unreachable;
       break;
      }
      case 194: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 200: {
       $523 = ($$lcssa204|0)==(-1);
       if ($523) {
        _lexerror($ls,14472,293);
        // unreachable;
       }
       $524 = HEAP32[$0>>2]|0;
       $525 = (($524) + 4|0);
       $526 = HEAP32[$525>>2]|0;
       $527 = (($526) + 1)|0;
       $528 = (($524) + 8|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = ($527>>>0)>($529>>>0);
       do {
        if ($530) {
         $531 = ($529>>>0)>(2147483646);
         if ($531) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $532 = $529 << 1;
          $533 = HEAP32[$275>>2]|0;
          $534 = HEAP32[$524>>2]|0;
          $535 = (_luaM_realloc_($533,$534,$529,$532)|0);
          HEAP32[$524>>2] = $535;
          HEAP32[$528>>2] = $532;
          $$pre$i32$i$i$i = HEAP32[$525>>2]|0;
          $538 = $$pre$i32$i$i$i;$540 = $535;
          break;
         }
        } else {
         $$pre1$i30$i$i$i = HEAP32[$524>>2]|0;
         $538 = $526;$540 = $$pre1$i30$i$i$i;
        }
       } while(0);
       $536 = $$lcssa204&255;
       $537 = (($538) + 1)|0;
       HEAP32[$525>>2] = $537;
       $539 = (($540) + ($538)|0);
       HEAP8[$539>>0] = $536;
       $541 = HEAP32[$3>>2]|0;
       $542 = HEAP32[$541>>2]|0;
       $543 = (($542) + -1)|0;
       HEAP32[$541>>2] = $543;
       $544 = ($542|0)==(0);
       if ($544) {
        $550 = (_luaZ_fill($541)|0);
        $551 = $550;
       } else {
        $545 = (($541) + 4|0);
        $546 = HEAP32[$545>>2]|0;
        $547 = (($546) + 1|0);
        HEAP32[$545>>2] = $547;
        $548 = HEAP8[$546>>0]|0;
        $549 = $548&255;
        $551 = $549;
       }
       HEAP32[$ls>>2] = $551;
       _lexerror($ls,14472,293);
       // unreachable;
       break;
      }
      case 215: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 222: {
       $592 = HEAP32[$ls>>2]|0;
       $593 = ($592|0)==(-1);
       if ($593) {
        _lexerror($ls,14432,293);
        // unreachable;
       }
       $594 = HEAP32[$0>>2]|0;
       $595 = (($594) + 4|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = (($596) + 1)|0;
       $598 = (($594) + 8|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = ($597>>>0)>($599>>>0);
       do {
        if ($600) {
         $601 = ($599>>>0)>(2147483646);
         if ($601) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $602 = $599 << 1;
          $603 = HEAP32[$275>>2]|0;
          $604 = HEAP32[$594>>2]|0;
          $605 = (_luaM_realloc_($603,$604,$599,$602)|0);
          HEAP32[$594>>2] = $605;
          HEAP32[$598>>2] = $602;
          $$pre$i22$i$i$i = HEAP32[$595>>2]|0;
          $608 = $$pre$i22$i$i$i;$610 = $605;
          break;
         }
        } else {
         $$pre1$i20$i$i$i = HEAP32[$594>>2]|0;
         $608 = $596;$610 = $$pre1$i20$i$i$i;
        }
       } while(0);
       $606 = $592&255;
       $607 = (($608) + 1)|0;
       HEAP32[$595>>2] = $607;
       $609 = (($610) + ($608)|0);
       HEAP8[$609>>0] = $606;
       $611 = HEAP32[$3>>2]|0;
       $612 = HEAP32[$611>>2]|0;
       $613 = (($612) + -1)|0;
       HEAP32[$611>>2] = $613;
       $614 = ($612|0)==(0);
       if ($614) {
        $620 = (_luaZ_fill($611)|0);
        $621 = $620;
       } else {
        $615 = (($611) + 4|0);
        $616 = HEAP32[$615>>2]|0;
        $617 = (($616) + 1|0);
        HEAP32[$615>>2] = $617;
        $618 = HEAP8[$616>>0]|0;
        $619 = $618&255;
        $621 = $619;
       }
       HEAP32[$ls>>2] = $621;
       _lexerror($ls,14432,293);
       // unreachable;
       break;
      }
      case 234: {
       $622 = HEAP32[$0>>2]|0;
       $623 = (($622) + 4|0);
       $624 = HEAP32[$623>>2]|0;
       $625 = (($624) + 1)|0;
       $626 = (($622) + 8|0);
       $627 = HEAP32[$626>>2]|0;
       $628 = ($625>>>0)>($627>>>0);
       do {
        if ($628) {
         $629 = ($627>>>0)>(2147483646);
         if ($629) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $630 = $627 << 1;
          $631 = HEAP32[$275>>2]|0;
          $632 = HEAP32[$622>>2]|0;
          $633 = (_luaM_realloc_($631,$632,$627,$630)|0);
          HEAP32[$622>>2] = $633;
          HEAP32[$626>>2] = $630;
          $$pre$i27$i$i$i = HEAP32[$623>>2]|0;
          $636 = $$pre$i27$i$i$i;$638 = $633;
          break;
         }
        } else {
         $$pre1$i25$i$i$i = HEAP32[$622>>2]|0;
         $636 = $624;$638 = $$pre1$i25$i$i$i;
        }
       } while(0);
       $634 = $$lcssa$lcssa&255;
       $635 = (($636) + 1)|0;
       HEAP32[$623>>2] = $635;
       $637 = (($638) + ($636)|0);
       HEAP8[$637>>0] = $634;
       $639 = HEAP32[$3>>2]|0;
       $640 = HEAP32[$639>>2]|0;
       $641 = (($640) + -1)|0;
       HEAP32[$639>>2] = $641;
       $642 = ($640|0)==(0);
       if ($642) {
        $648 = (_luaZ_fill($639)|0);
        $649 = $648;
       } else {
        $643 = (($639) + 4|0);
        $644 = HEAP32[$643>>2]|0;
        $645 = (($644) + 1|0);
        HEAP32[$643>>2] = $645;
        $646 = HEAP8[$644>>0]|0;
        $647 = $646&255;
        $649 = $647;
       }
       HEAP32[$ls>>2] = $649;
       _lexerror($ls,14456,293);
       // unreachable;
       break;
      }
      case 243: {
       _lexerror($ls,14456,293);
       // unreachable;
       break;
      }
      case 253: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 266: {
       _lexerror($ls,14568,0);
       // unreachable;
       break;
      }
      case 284: {
       _lexerror($ls,14568,0);
       // unreachable;
       break;
      }
      case 292: {
       $782 = ($$lcssa191|0)==(-1);
       if ($782) {
        _lexerror($ls,14360,293);
        // unreachable;
       }
       $783 = HEAP32[$0>>2]|0;
       $784 = (($783) + 4|0);
       $785 = HEAP32[$784>>2]|0;
       $786 = (($785) + 1)|0;
       $787 = (($783) + 8|0);
       $788 = HEAP32[$787>>2]|0;
       $789 = ($786>>>0)>($788>>>0);
       do {
        if ($789) {
         $790 = ($788>>>0)>(2147483646);
         if ($790) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $791 = $788 << 1;
          $792 = HEAP32[$275>>2]|0;
          $793 = HEAP32[$783>>2]|0;
          $794 = (_luaM_realloc_($792,$793,$788,$791)|0);
          HEAP32[$783>>2] = $794;
          HEAP32[$787>>2] = $791;
          $$pre$i38$i = HEAP32[$784>>2]|0;
          $797 = $$pre$i38$i;$799 = $794;
          break;
         }
        } else {
         $$pre1$i36$i = HEAP32[$783>>2]|0;
         $797 = $785;$799 = $$pre1$i36$i;
        }
       } while(0);
       $795 = $$lcssa191&255;
       $796 = (($797) + 1)|0;
       HEAP32[$784>>2] = $796;
       $798 = (($799) + ($797)|0);
       HEAP8[$798>>0] = $795;
       $800 = HEAP32[$3>>2]|0;
       $801 = HEAP32[$800>>2]|0;
       $802 = (($801) + -1)|0;
       HEAP32[$800>>2] = $802;
       $803 = ($801|0)==(0);
       if ($803) {
        $809 = (_luaZ_fill($800)|0);
        $810 = $809;
       } else {
        $804 = (($800) + 4|0);
        $805 = HEAP32[$804>>2]|0;
        $806 = (($805) + 1|0);
        HEAP32[$804>>2] = $806;
        $807 = HEAP8[$805>>0]|0;
        $808 = $807&255;
        $810 = $808;
       }
       HEAP32[$ls>>2] = $810;
       _lexerror($ls,14360,293);
       // unreachable;
       break;
      }
      case 307: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 314: {
       $851 = ($$lcssa216|0)==(-1);
       if ($851) {
        _lexerror($ls,14384,293);
        // unreachable;
       }
       $852 = HEAP32[$0>>2]|0;
       $853 = (($852) + 4|0);
       $854 = HEAP32[$853>>2]|0;
       $855 = (($854) + 1)|0;
       $856 = (($852) + 8|0);
       $857 = HEAP32[$856>>2]|0;
       $858 = ($855>>>0)>($857>>>0);
       do {
        if ($858) {
         $859 = ($857>>>0)>(2147483646);
         if ($859) {
          _lexerror($ls,14304,0);
          // unreachable;
         } else {
          $860 = $857 << 1;
          $861 = HEAP32[$275>>2]|0;
          $862 = HEAP32[$852>>2]|0;
          $863 = (_luaM_realloc_($861,$862,$857,$860)|0);
          HEAP32[$852>>2] = $863;
          HEAP32[$856>>2] = $860;
          $$pre$i4$i$i = HEAP32[$853>>2]|0;
          $866 = $$pre$i4$i$i;$868 = $863;
          break;
         }
        } else {
         $$pre1$i2$i$i = HEAP32[$852>>2]|0;
         $866 = $854;$868 = $$pre1$i2$i$i;
        }
       } while(0);
       $864 = $$lcssa216&255;
       $865 = (($866) + 1)|0;
       HEAP32[$853>>2] = $865;
       $867 = (($868) + ($866)|0);
       HEAP8[$867>>0] = $864;
       $869 = HEAP32[$3>>2]|0;
       $870 = HEAP32[$869>>2]|0;
       $871 = (($870) + -1)|0;
       HEAP32[$869>>2] = $871;
       $872 = ($870|0)==(0);
       if ($872) {
        $878 = (_luaZ_fill($869)|0);
        $879 = $878;
       } else {
        $873 = (($869) + 4|0);
        $874 = HEAP32[$873>>2]|0;
        $875 = (($874) + 1|0);
        HEAP32[$873>>2] = $875;
        $876 = HEAP8[$874>>0]|0;
        $877 = $876&255;
        $879 = $877;
       }
       HEAP32[$ls>>2] = $879;
       _lexerror($ls,14384,293);
       // unreachable;
       break;
      }
      case 333: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 339: {
       _lexerror($ls,14304,0);
       // unreachable;
       break;
      }
      case 345: {
       break L116;
       break;
      }
     }
    }
   } while(0);
   $941 = HEAP32[$0>>2]|0;
   $942 = (($941) + 4|0);
   $943 = HEAP32[$942>>2]|0;
   $944 = (($943) + 1)|0;
   $945 = (($941) + 8|0);
   $946 = HEAP32[$945>>2]|0;
   $947 = ($944>>>0)>($946>>>0);
   do {
    if ($947) {
     $948 = ($946>>>0)>(2147483646);
     if ($948) {
      _lexerror($ls,14304,0);
      // unreachable;
     } else {
      $949 = $946 << 1;
      $950 = (($ls) + 52|0);
      $951 = HEAP32[$950>>2]|0;
      $952 = HEAP32[$941>>2]|0;
      $953 = (_luaM_realloc_($951,$952,$946,$949)|0);
      HEAP32[$941>>2] = $953;
      HEAP32[$945>>2] = $949;
      $$pre$i33$i = HEAP32[$942>>2]|0;
      $955 = $$pre$i33$i;$957 = $953;
      break;
     }
    } else {
     $$pre1$i31$i = HEAP32[$941>>2]|0;
     $955 = $943;$957 = $$pre1$i31$i;
    }
   } while(0);
   $954 = (($955) + 1)|0;
   HEAP32[$942>>2] = $954;
   $956 = (($957) + ($955)|0);
   HEAP8[$956>>0] = $258;
   $958 = HEAP32[$3>>2]|0;
   $959 = HEAP32[$958>>2]|0;
   $960 = (($959) + -1)|0;
   HEAP32[$958>>2] = $960;
   $961 = ($959|0)==(0);
   if ($961) {
    $967 = (_luaZ_fill($958)|0);
    $968 = $967;
   } else {
    $962 = (($958) + 4|0);
    $963 = HEAP32[$962>>2]|0;
    $964 = (($963) + 1|0);
    HEAP32[$962>>2] = $964;
    $965 = HEAP8[$963>>0]|0;
    $966 = $965&255;
    $968 = $966;
   }
   HEAP32[$ls>>2] = $968;
   $969 = HEAP32[$0>>2]|0;
   $970 = HEAP32[$969>>2]|0;
   $971 = (($970) + 1|0);
   $972 = (($969) + 4|0);
   $973 = HEAP32[$972>>2]|0;
   $974 = (($973) + -2)|0;
   $975 = (($ls) + 52|0);
   $976 = HEAP32[$975>>2]|0;
   $977 = (_luaS_newlstr($976,$971,$974)|0);
   $978 = (($976) + 8|0);
   $979 = HEAP32[$978>>2]|0;
   $980 = (($979) + 16|0);
   HEAP32[$978>>2] = $980;
   HEAP32[$979>>2] = $977;
   $981 = (($977) + 4|0);
   $982 = HEAP8[$981>>0]|0;
   $983 = $982&255;
   $984 = $983 | 64;
   $985 = (($979) + 8|0);
   HEAP32[$985>>2] = $984;
   $986 = (($ls) + 64|0);
   $987 = HEAP32[$986>>2]|0;
   $988 = HEAP32[$978>>2]|0;
   $989 = (($988) + -16|0);
   $990 = (_luaH_set($976,$987,$989)|0);
   $991 = (($990) + 8|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = ($992|0)==(0);
   if ($993) {
    HEAP32[$990>>2] = 1;
    HEAP32[$991>>2] = 1;
    $994 = (($976) + 12|0);
    $995 = HEAP32[$994>>2]|0;
    $996 = (($995) + 12|0);
    $997 = HEAP32[$996>>2]|0;
    $998 = ($997|0)>(0);
    if ($998) {
     _luaC_step($976);
     $ts$0$i$i = $977;
    } else {
     $ts$0$i$i = $977;
    }
   } else {
    $999 = (($990) + 16|0);
    $1000 = HEAP32[$999>>2]|0;
    $ts$0$i$i = $1000;
   }
   $1001 = HEAP32[$978>>2]|0;
   $1002 = (($1001) + -16|0);
   HEAP32[$978>>2] = $1002;
   HEAP32[$seminfo>>2] = $ts$0$i$i;
   $$0 = 293;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 359: {
   $1003 = HEAP32[$0>>2]|0;
   $1004 = (($1003) + 4|0);
   $1005 = HEAP32[$1004>>2]|0;
   $1006 = (($1005) + 1)|0;
   $1007 = (($1003) + 8|0);
   $1008 = HEAP32[$1007>>2]|0;
   $1009 = ($1006>>>0)>($1008>>>0);
   do {
    if ($1009) {
     $1010 = ($1008>>>0)>(2147483646);
     if ($1010) {
      _lexerror($ls,14304,0);
      // unreachable;
     } else {
      $1011 = $1008 << 1;
      $1012 = (($ls) + 52|0);
      $1013 = HEAP32[$1012>>2]|0;
      $1014 = HEAP32[$1003>>2]|0;
      $1015 = (_luaM_realloc_($1013,$1014,$1008,$1011)|0);
      HEAP32[$1003>>2] = $1015;
      HEAP32[$1007>>2] = $1011;
      $$pre$i = HEAP32[$1004>>2]|0;
      $1017 = $$pre$i;$1019 = $1015;
      break;
     }
    } else {
     $$pre1$i = HEAP32[$1003>>2]|0;
     $1017 = $1005;$1019 = $$pre1$i;
    }
   } while(0);
   $1016 = (($1017) + 1)|0;
   HEAP32[$1004>>2] = $1016;
   $1018 = (($1019) + ($1017)|0);
   HEAP8[$1018>>0] = 46;
   $1020 = HEAP32[$3>>2]|0;
   $1021 = HEAP32[$1020>>2]|0;
   $1022 = (($1021) + -1)|0;
   HEAP32[$1020>>2] = $1022;
   $1023 = ($1021|0)==(0);
   if ($1023) {
    $1029 = (_luaZ_fill($1020)|0);
    $1030 = $1029;
   } else {
    $1024 = (($1020) + 4|0);
    $1025 = HEAP32[$1024>>2]|0;
    $1026 = (($1025) + 1|0);
    HEAP32[$1024>>2] = $1026;
    $1027 = HEAP8[$1025>>0]|0;
    $1028 = $1027&255;
    $1030 = $1028;
   }
   HEAP32[$ls>>2] = $1030;
   $1031 = ($1030|0)==(46);
   if (!($1031)) {
    $1055 = (($1030) + 1)|0;
    $1056 = (12952 + ($1055)|0);
    $1057 = HEAP8[$1056>>0]|0;
    $1058 = $1057 & 2;
    $1059 = ($1058<<24>>24)==(0);
    if ($1059) {
     $$0 = 46;
     STACKTOP = sp;return ($$0|0);
    }
    $1060 = (_read_numeral($ls,$seminfo)|0);
    $$0 = $1060;
    STACKTOP = sp;return ($$0|0);
   }
   $1032 = HEAP32[$3>>2]|0;
   $1033 = HEAP32[$1032>>2]|0;
   $1034 = (($1033) + -1)|0;
   HEAP32[$1032>>2] = $1034;
   $1035 = ($1033|0)==(0);
   if ($1035) {
    $1041 = (_luaZ_fill($1032)|0);
    $1042 = $1041;
   } else {
    $1036 = (($1032) + 4|0);
    $1037 = HEAP32[$1036>>2]|0;
    $1038 = (($1037) + 1|0);
    HEAP32[$1036>>2] = $1038;
    $1039 = HEAP8[$1037>>0]|0;
    $1040 = $1039&255;
    $1042 = $1040;
   }
   HEAP32[$ls>>2] = $1042;
   $1043 = ($1042|0)==(46);
   if (!($1043)) {
    $$0 = 280;
    STACKTOP = sp;return ($$0|0);
   }
   $1044 = HEAP32[$3>>2]|0;
   $1045 = HEAP32[$1044>>2]|0;
   $1046 = (($1045) + -1)|0;
   HEAP32[$1044>>2] = $1046;
   $1047 = ($1045|0)==(0);
   if ($1047) {
    $1053 = (_luaZ_fill($1044)|0);
    $1054 = $1053;
   } else {
    $1048 = (($1044) + 4|0);
    $1049 = HEAP32[$1048>>2]|0;
    $1050 = (($1049) + 1|0);
    HEAP32[$1048>>2] = $1050;
    $1051 = HEAP8[$1049>>0]|0;
    $1052 = $1051&255;
    $1054 = $1052;
   }
   HEAP32[$ls>>2] = $1054;
   $$0 = 281;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 378: {
   $1061 = (_read_numeral($ls,$seminfo)|0);
   $$0 = $1061;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 379: {
   $1062 = (($$lcssa217) + 1)|0;
   $1063 = (12952 + ($1062)|0);
   $1064 = HEAP8[$1063>>0]|0;
   $1065 = $1064 & 1;
   $1066 = ($1065<<24>>24)==(0);
   if ($1066) {
    $1141 = HEAP32[$3>>2]|0;
    $1142 = HEAP32[$1141>>2]|0;
    $1143 = (($1142) + -1)|0;
    HEAP32[$1141>>2] = $1143;
    $1144 = ($1142|0)==(0);
    if ($1144) {
     $1150 = (_luaZ_fill($1141)|0);
     $1151 = $1150;
    } else {
     $1145 = (($1141) + 4|0);
     $1146 = HEAP32[$1145>>2]|0;
     $1147 = (($1146) + 1|0);
     HEAP32[$1145>>2] = $1147;
     $1148 = HEAP8[$1146>>0]|0;
     $1149 = $1148&255;
     $1151 = $1149;
    }
    HEAP32[$ls>>2] = $1151;
    $$0 = $$lcssa217;
    STACKTOP = sp;return ($$0|0);
   }
   $1067 = (($ls) + 52|0);
   $1081 = $$lcssa217;
   while(1) {
    $1068 = HEAP32[$0>>2]|0;
    $1069 = (($1068) + 4|0);
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = (($1070) + 1)|0;
    $1072 = (($1068) + 8|0);
    $1073 = HEAP32[$1072>>2]|0;
    $1074 = ($1071>>>0)>($1073>>>0);
    if ($1074) {
     $1075 = ($1073>>>0)>(2147483646);
     if ($1075) {
      label = 384;
      break;
     }
     $1076 = $1073 << 1;
     $1077 = HEAP32[$1067>>2]|0;
     $1078 = HEAP32[$1068>>2]|0;
     $1079 = (_luaM_realloc_($1077,$1078,$1073,$1076)|0);
     HEAP32[$1068>>2] = $1079;
     HEAP32[$1072>>2] = $1076;
     $$pre$i30 = HEAP32[$1069>>2]|0;
     $1083 = $$pre$i30;$1085 = $1079;
    } else {
     $$pre1$i28 = HEAP32[$1068>>2]|0;
     $1083 = $1070;$1085 = $$pre1$i28;
    }
    $1080 = $1081&255;
    $1082 = (($1083) + 1)|0;
    HEAP32[$1069>>2] = $1082;
    $1084 = (($1085) + ($1083)|0);
    HEAP8[$1084>>0] = $1080;
    $1086 = HEAP32[$3>>2]|0;
    $1087 = HEAP32[$1086>>2]|0;
    $1088 = (($1087) + -1)|0;
    HEAP32[$1086>>2] = $1088;
    $1089 = ($1087|0)==(0);
    if ($1089) {
     $1095 = (_luaZ_fill($1086)|0);
     $1096 = $1095;
    } else {
     $1090 = (($1086) + 4|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = (($1091) + 1|0);
     HEAP32[$1090>>2] = $1092;
     $1093 = HEAP8[$1091>>0]|0;
     $1094 = $1093&255;
     $1096 = $1094;
    }
    HEAP32[$ls>>2] = $1096;
    $1097 = (($1096) + 1)|0;
    $1098 = (12952 + ($1097)|0);
    $1099 = HEAP8[$1098>>0]|0;
    $1100 = $1099 & 3;
    $1101 = ($1100<<24>>24)==(0);
    if ($1101) {
     break;
    } else {
     $1081 = $1096;
    }
   }
   if ((label|0) == 384) {
    _lexerror($ls,14304,0);
    // unreachable;
   }
   $1102 = HEAP32[$0>>2]|0;
   $1103 = HEAP32[$1102>>2]|0;
   $1104 = (($1102) + 4|0);
   $1105 = HEAP32[$1104>>2]|0;
   $1106 = HEAP32[$1067>>2]|0;
   $1107 = (_luaS_newlstr($1106,$1103,$1105)|0);
   $1108 = (($1106) + 8|0);
   $1109 = HEAP32[$1108>>2]|0;
   $1110 = (($1109) + 16|0);
   HEAP32[$1108>>2] = $1110;
   HEAP32[$1109>>2] = $1107;
   $1111 = (($1107) + 4|0);
   $1112 = HEAP8[$1111>>0]|0;
   $1113 = $1112&255;
   $1114 = $1113 | 64;
   $1115 = (($1109) + 8|0);
   HEAP32[$1115>>2] = $1114;
   $1116 = (($ls) + 64|0);
   $1117 = HEAP32[$1116>>2]|0;
   $1118 = HEAP32[$1108>>2]|0;
   $1119 = (($1118) + -16|0);
   $1120 = (_luaH_set($1106,$1117,$1119)|0);
   $1121 = (($1120) + 8|0);
   $1122 = HEAP32[$1121>>2]|0;
   $1123 = ($1122|0)==(0);
   if ($1123) {
    HEAP32[$1120>>2] = 1;
    HEAP32[$1121>>2] = 1;
    $1124 = (($1106) + 12|0);
    $1125 = HEAP32[$1124>>2]|0;
    $1126 = (($1125) + 12|0);
    $1127 = HEAP32[$1126>>2]|0;
    $1128 = ($1127|0)>(0);
    if ($1128) {
     _luaC_step($1106);
     $ts$0$i = $1107;
    } else {
     $ts$0$i = $1107;
    }
   } else {
    $1129 = (($1120) + 16|0);
    $1130 = HEAP32[$1129>>2]|0;
    $ts$0$i = $1130;
   }
   $1131 = HEAP32[$1108>>2]|0;
   $1132 = (($1131) + -16|0);
   HEAP32[$1108>>2] = $1132;
   HEAP32[$seminfo>>2] = $ts$0$i;
   $1133 = (($ts$0$i) + 4|0);
   $1134 = HEAP8[$1133>>0]|0;
   $1135 = ($1134<<24>>24)==(4);
   if (!($1135)) {
    $$0 = 292;
    STACKTOP = sp;return ($$0|0);
   }
   $1136 = (($ts$0$i) + 6|0);
   $1137 = HEAP8[$1136>>0]|0;
   $1138 = ($1137<<24>>24)==(0);
   if ($1138) {
    $$0 = 292;
    STACKTOP = sp;return ($$0|0);
   }
   $1139 = $1137&255;
   $1140 = $1139 | 256;
   $$0 = $1140;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 401: {
   $$0 = 289;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 402: {
   $$0 = 45;
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 return (0)|0;
}
function _skip_sep($ls) {
 $ls = $ls|0;
 var $$lcssa = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$pre$i = 0, $$pre$i4 = 0, $$pre1$i = 0, $$pre1$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$ = 0, $count$0$lcssa = 0, $count$08 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 $1 = (($ls) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (($2) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 do {
  if ($8) {
   $9 = ($7>>>0)>(2147483646);
   if ($9) {
    _lexerror($ls,14304,0);
    // unreachable;
   } else {
    $10 = $7 << 1;
    $11 = (($ls) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$2>>2]|0;
    $14 = (_luaM_realloc_($12,$13,$7,$10)|0);
    HEAP32[$2>>2] = $14;
    HEAP32[$6>>2] = $10;
    $$pre$i = HEAP32[$3>>2]|0;
    $17 = $$pre$i;$19 = $14;
    break;
   }
  } else {
   $$pre1$i = HEAP32[$2>>2]|0;
   $17 = $4;$19 = $$pre1$i;
  }
 } while(0);
 $15 = $0&255;
 $16 = (($17) + 1)|0;
 HEAP32[$3>>2] = $16;
 $18 = (($19) + ($17)|0);
 HEAP8[$18>>0] = $15;
 $20 = (($ls) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + -1)|0;
 HEAP32[$21>>2] = $23;
 $24 = ($22|0)==(0);
 if ($24) {
  $30 = (_luaZ_fill($21)|0);
  $31 = $30;
 } else {
  $25 = (($21) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1|0);
  HEAP32[$25>>2] = $27;
  $28 = HEAP8[$26>>0]|0;
  $29 = $28&255;
  $31 = $29;
 }
 HEAP32[$ls>>2] = $31;
 $32 = ($31|0)==(61);
 if (!($32)) {
  $$lcssa = $31;$count$0$lcssa = 0;
  $not$ = ($$lcssa|0)!=($0|0);
  $63 = $not$ << 31 >> 31;
  $count$0$ = $63 ^ $count$0$lcssa;
  return ($count$0$|0);
 }
 $33 = (($ls) + 52|0);
 $count$08 = 0;
 while(1) {
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  $38 = (($34) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37>>>0)>($39>>>0);
  if ($40) {
   $41 = ($39>>>0)>(2147483646);
   if ($41) {
    label = 14;
    break;
   }
   $42 = $39 << 1;
   $43 = HEAP32[$33>>2]|0;
   $44 = HEAP32[$34>>2]|0;
   $45 = (_luaM_realloc_($43,$44,$39,$42)|0);
   HEAP32[$34>>2] = $45;
   HEAP32[$38>>2] = $42;
   $$pre$i4 = HEAP32[$35>>2]|0;
   $47 = $$pre$i4;$49 = $45;
  } else {
   $$pre1$i2 = HEAP32[$34>>2]|0;
   $47 = $36;$49 = $$pre1$i2;
  }
  $46 = (($47) + 1)|0;
  HEAP32[$35>>2] = $46;
  $48 = (($49) + ($47)|0);
  HEAP8[$48>>0] = 61;
  $50 = HEAP32[$20>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + -1)|0;
  HEAP32[$50>>2] = $52;
  $53 = ($51|0)==(0);
  if ($53) {
   $59 = (_luaZ_fill($50)|0);
   $60 = $59;
  } else {
   $54 = (($50) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1|0);
   HEAP32[$54>>2] = $56;
   $57 = HEAP8[$55>>0]|0;
   $58 = $57&255;
   $60 = $58;
  }
  HEAP32[$ls>>2] = $60;
  $61 = (($count$08) + 1)|0;
  $62 = ($60|0)==(61);
  if ($62) {
   $count$08 = $61;
  } else {
   $$lcssa12 = $60;$$lcssa13 = $61;
   break;
  }
 }
 if ((label|0) == 14) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
 $$lcssa = $$lcssa12;$count$0$lcssa = $$lcssa13;
 $not$ = ($$lcssa|0)!=($0|0);
 $63 = $not$ << 31 >> 31;
 $count$0$ = $63 ^ $count$0$lcssa;
 return ($count$0$|0);
}
function _read_long_string($ls,$seminfo,$sep) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 $sep = $sep|0;
 var $$lcssa = 0, $$lcssa31 = 0, $$lcssa33 = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$ph = 0, $$ph$be = 0, $$ph$ph = 0, $$pr21 = 0, $$pr22 = 0, $$pre$i = 0, $$pre$i15 = 0, $$pre$i4 = 0, $$pre$i9 = 0, $$pre1$i = 0, $$pre1$i13 = 0, $$pre1$i2 = 0, $$pre1$i7 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ts$0$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$ls>>2]|0;
 $3 = (($ls) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (($4) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 do {
  if ($10) {
   $11 = ($9>>>0)>(2147483646);
   if ($11) {
    _lexerror($ls,14304,0);
    // unreachable;
   } else {
    $12 = $9 << 1;
    $13 = (($ls) + 52|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$4>>2]|0;
    $16 = (_luaM_realloc_($14,$15,$9,$12)|0);
    HEAP32[$4>>2] = $16;
    HEAP32[$8>>2] = $12;
    $$pre$i = HEAP32[$5>>2]|0;
    $19 = $$pre$i;$21 = $16;
    break;
   }
  } else {
   $$pre1$i = HEAP32[$4>>2]|0;
   $19 = $6;$21 = $$pre1$i;
  }
 } while(0);
 $17 = $2&255;
 $18 = (($19) + 1)|0;
 HEAP32[$5>>2] = $18;
 $20 = (($21) + ($19)|0);
 HEAP8[$20>>0] = $17;
 $22 = (($ls) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + -1)|0;
 HEAP32[$23>>2] = $25;
 $26 = ($24|0)==(0);
 if ($26) {
  $32 = (_luaZ_fill($23)|0);
  $33 = $32;
 } else {
  $27 = (($23) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1|0);
  HEAP32[$27>>2] = $29;
  $30 = HEAP8[$28>>0]|0;
  $31 = $30&255;
  $33 = $31;
 }
 HEAP32[$ls>>2] = $33;
 if ((($33|0) == 13) | (($33|0) == 10)) {
  $34 = HEAP32[$22>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + -1)|0;
  HEAP32[$34>>2] = $36;
  $37 = ($35|0)==(0);
  if ($37) {
   $43 = (_luaZ_fill($34)|0);
   $44 = $43;
  } else {
   $38 = (($34) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 1|0);
   HEAP32[$38>>2] = $40;
   $41 = HEAP8[$39>>0]|0;
   $42 = $41&255;
   $44 = $42;
  }
  HEAP32[$ls>>2] = $44;
  if ((($44|0) == 13) | (($44|0) == 10)) {
   $45 = ($44|0)==($33|0);
   if ($45) {
    $$pr21 = $33;
   } else {
    $46 = HEAP32[$22>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + -1)|0;
    HEAP32[$46>>2] = $48;
    $49 = ($47|0)==(0);
    if ($49) {
     $55 = (_luaZ_fill($46)|0);
     $56 = $55;
    } else {
     $50 = (($46) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + 1|0);
     HEAP32[$50>>2] = $52;
     $53 = HEAP8[$51>>0]|0;
     $54 = $53&255;
     $56 = $54;
    }
    HEAP32[$ls>>2] = $56;
    $$pr21 = $56;
   }
  } else {
   $$pr21 = $44;
  }
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$0>>2] = $58;
  $59 = ($58|0)==(2147483647);
  if ($59) {
   _lexerror($ls,14568,0);
   // unreachable;
  } else {
   $$ph$ph = $$pr21;
  }
 } else {
  $$ph$ph = $33;
 }
 $$ph = $$ph$ph;
 L28: while(1) {
  $60 = ($seminfo|0)==(0|0);
  $61 = (($ls) + 52|0);
  do {
   if ($60) {
    $218 = $$ph;
    while(1) {
     if ((($218|0) == -1)) {
      $$lcssa33 = $61;
      label = 31;
      break L28;
     } else if ((($218|0) == 93)) {
      label = 34;
      break;
     } else if ((($218|0) == 13) | (($218|0) == 10)) {
      label = 46;
      break;
     }
     $62 = HEAP32[$22>>2]|0;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + -1)|0;
     HEAP32[$62>>2] = $64;
     $65 = ($63|0)==(0);
     if ($65) {
      $71 = (_luaZ_fill($62)|0);
      $72 = $71;
     } else {
      $66 = (($62) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + 1|0);
      HEAP32[$66>>2] = $68;
      $69 = HEAP8[$67>>0]|0;
      $70 = $69&255;
      $72 = $70;
     }
     HEAP32[$ls>>2] = $72;
     $218 = $72;
    }
    if ((label|0) == 34) {
     label = 0;
     label = 36;
     break;
    }
    else if ((label|0) == 46) {
     label = 0;
     label = 48;
     break;
    }
   } else {
    $167 = $$ph;
    while(1) {
     if ((($167|0) == 93)) {
      label = 35;
      break;
     } else if ((($167|0) == -1)) {
      $$lcssa = $61;
      label = 32;
      break L28;
     } else if ((($167|0) == 13) | (($167|0) == 10)) {
      label = 47;
      break;
     }
     $154 = HEAP32[$3>>2]|0;
     $155 = (($154) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) + 1)|0;
     $158 = (($154) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157>>>0)>($159>>>0);
     if ($160) {
      $161 = ($159>>>0)>(2147483646);
      if ($161) {
       label = 70;
       break L28;
      }
      $162 = $159 << 1;
      $163 = HEAP32[$61>>2]|0;
      $164 = HEAP32[$154>>2]|0;
      $165 = (_luaM_realloc_($163,$164,$159,$162)|0);
      HEAP32[$154>>2] = $165;
      HEAP32[$158>>2] = $162;
      $$pre$i15 = HEAP32[$155>>2]|0;
      $169 = $$pre$i15;$171 = $165;
     } else {
      $$pre1$i13 = HEAP32[$154>>2]|0;
      $169 = $156;$171 = $$pre1$i13;
     }
     $166 = $167&255;
     $168 = (($169) + 1)|0;
     HEAP32[$155>>2] = $168;
     $170 = (($171) + ($169)|0);
     HEAP8[$170>>0] = $166;
     $172 = HEAP32[$22>>2]|0;
     $173 = HEAP32[$172>>2]|0;
     $174 = (($173) + -1)|0;
     HEAP32[$172>>2] = $174;
     $175 = ($173|0)==(0);
     if ($175) {
      $181 = (_luaZ_fill($172)|0);
      $182 = $181;
     } else {
      $176 = (($172) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($177) + 1|0);
      HEAP32[$176>>2] = $178;
      $179 = HEAP8[$177>>0]|0;
      $180 = $179&255;
      $182 = $180;
     }
     HEAP32[$ls>>2] = $182;
     $167 = $182;
    }
    if ((label|0) == 35) {
     label = 0;
     label = 36;
     break;
    }
    else if ((label|0) == 47) {
     label = 0;
     label = 48;
     break;
    }
   }
  } while(0);
  if ((label|0) == 36) {
   label = 0;
   $78 = (_skip_sep($ls)|0);
   $79 = ($78|0)==($sep|0);
   $80 = HEAP32[$ls>>2]|0;
   if ($79) {
    $$lcssa31 = $60;$$lcssa36 = $61;$$lcssa37 = $80;
    label = 37;
    break;
   } else {
    $$ph$be = $80;
   }
  }
  else if ((label|0) == 48) {
   label = 0;
   $109 = HEAP32[$3>>2]|0;
   $110 = (($109) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 1)|0;
   $113 = (($109) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($112>>>0)>($114>>>0);
   if ($115) {
    $116 = ($114>>>0)>(2147483646);
    if ($116) {
     label = 51;
     break;
    }
    $117 = $114 << 1;
    $118 = HEAP32[$61>>2]|0;
    $119 = HEAP32[$109>>2]|0;
    $120 = (_luaM_realloc_($118,$119,$114,$117)|0);
    HEAP32[$109>>2] = $120;
    HEAP32[$113>>2] = $117;
    $$pre$i9 = HEAP32[$110>>2]|0;
    $122 = $$pre$i9;$124 = $120;
   } else {
    $$pre1$i7 = HEAP32[$109>>2]|0;
    $122 = $111;$124 = $$pre1$i7;
   }
   $121 = (($122) + 1)|0;
   HEAP32[$110>>2] = $121;
   $123 = (($124) + ($122)|0);
   HEAP8[$123>>0] = 10;
   $125 = HEAP32[$ls>>2]|0;
   $126 = HEAP32[$22>>2]|0;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + -1)|0;
   HEAP32[$126>>2] = $128;
   $129 = ($127|0)==(0);
   if ($129) {
    $135 = (_luaZ_fill($126)|0);
    $136 = $135;
   } else {
    $130 = (($126) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + 1|0);
    HEAP32[$130>>2] = $132;
    $133 = HEAP8[$131>>0]|0;
    $134 = $133&255;
    $136 = $134;
   }
   HEAP32[$ls>>2] = $136;
   if ((($136|0) == 13) | (($136|0) == 10)) {
    $137 = ($136|0)==($125|0);
    if ($137) {
     $$pr22 = $125;
    } else {
     $138 = HEAP32[$22>>2]|0;
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + -1)|0;
     HEAP32[$138>>2] = $140;
     $141 = ($139|0)==(0);
     if ($141) {
      $147 = (_luaZ_fill($138)|0);
      $148 = $147;
     } else {
      $142 = (($138) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (($143) + 1|0);
      HEAP32[$142>>2] = $144;
      $145 = HEAP8[$143>>0]|0;
      $146 = $145&255;
      $148 = $146;
     }
     HEAP32[$ls>>2] = $148;
     $$pr22 = $148;
    }
   } else {
    $$pr22 = $136;
   }
   $149 = HEAP32[$0>>2]|0;
   $150 = (($149) + 1)|0;
   HEAP32[$0>>2] = $150;
   $151 = ($150|0)==(2147483647);
   if ($151) {
    label = 63;
    break;
   }
   if ($60) {
    $152 = HEAP32[$3>>2]|0;
    $153 = (($152) + 4|0);
    HEAP32[$153>>2] = 0;
    $$ph$be = $$pr22;
   } else {
    $$ph$be = $$pr22;
   }
  }
  $$ph = $$ph$be;
 }
 if ((label|0) == 31) {
  $76 = $$lcssa33;
  $73 = ($seminfo|0)!=(0|0);
  $74 = $73 ? 14504 : 14512;
  $75 = HEAP32[$76>>2]|0;
  HEAP32[$vararg_buffer>>2] = $74;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $77 = (_luaO_pushfstring($75,14520,$vararg_buffer)|0);
  _lexerror($ls,$77,289);
  // unreachable;
 }
 else if ((label|0) == 32) {
  $76 = $$lcssa;
  $73 = ($seminfo|0)!=(0|0);
  $74 = $73 ? 14504 : 14512;
  $75 = HEAP32[$76>>2]|0;
  HEAP32[$vararg_buffer>>2] = $74;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $77 = (_luaO_pushfstring($75,14520,$vararg_buffer)|0);
  _lexerror($ls,$77,289);
  // unreachable;
 }
 else if ((label|0) == 37) {
  $81 = HEAP32[$3>>2]|0;
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 1)|0;
  $85 = (($81) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($84>>>0)>($86>>>0);
  do {
   if ($87) {
    $88 = ($86>>>0)>(2147483646);
    if ($88) {
     _lexerror($ls,14304,0);
     // unreachable;
    } else {
     $89 = $86 << 1;
     $90 = HEAP32[$$lcssa36>>2]|0;
     $91 = HEAP32[$81>>2]|0;
     $92 = (_luaM_realloc_($90,$91,$86,$89)|0);
     HEAP32[$81>>2] = $92;
     HEAP32[$85>>2] = $89;
     $$pre$i4 = HEAP32[$82>>2]|0;
     $95 = $$pre$i4;$97 = $92;
     break;
    }
   } else {
    $$pre1$i2 = HEAP32[$81>>2]|0;
    $95 = $83;$97 = $$pre1$i2;
   }
  } while(0);
  $93 = $$lcssa37&255;
  $94 = (($95) + 1)|0;
  HEAP32[$82>>2] = $94;
  $96 = (($97) + ($95)|0);
  HEAP8[$96>>0] = $93;
  $98 = HEAP32[$22>>2]|0;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + -1)|0;
  HEAP32[$98>>2] = $100;
  $101 = ($99|0)==(0);
  if ($101) {
   $107 = (_luaZ_fill($98)|0);
   $108 = $107;
  } else {
   $102 = (($98) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + 1|0);
   HEAP32[$102>>2] = $104;
   $105 = HEAP8[$103>>0]|0;
   $106 = $105&255;
   $108 = $106;
  }
  HEAP32[$ls>>2] = $108;
  if ($$lcssa31) {
   STACKTOP = sp;return;
  }
  $183 = HEAP32[$3>>2]|0;
  $184 = HEAP32[$183>>2]|0;
  $185 = (($sep) + 2)|0;
  $186 = (($184) + ($185)|0);
  $187 = (($183) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $185 << 1;
  $190 = (($188) - ($189))|0;
  $191 = HEAP32[$$lcssa36>>2]|0;
  $192 = (_luaS_newlstr($191,$186,$190)|0);
  $193 = (($191) + 8|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + 16|0);
  HEAP32[$193>>2] = $195;
  HEAP32[$194>>2] = $192;
  $196 = (($192) + 4|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = $197&255;
  $199 = $198 | 64;
  $200 = (($194) + 8|0);
  HEAP32[$200>>2] = $199;
  $201 = (($ls) + 64|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = HEAP32[$193>>2]|0;
  $204 = (($203) + -16|0);
  $205 = (_luaH_set($191,$202,$204)|0);
  $206 = (($205) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($207|0)==(0);
  if ($208) {
   HEAP32[$205>>2] = 1;
   HEAP32[$206>>2] = 1;
   $209 = (($191) + 12|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + 12|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ($212|0)>(0);
   if ($213) {
    _luaC_step($191);
    $ts$0$i = $192;
   } else {
    $ts$0$i = $192;
   }
  } else {
   $214 = (($205) + 16|0);
   $215 = HEAP32[$214>>2]|0;
   $ts$0$i = $215;
  }
  $216 = HEAP32[$193>>2]|0;
  $217 = (($216) + -16|0);
  HEAP32[$193>>2] = $217;
  HEAP32[$seminfo>>2] = $ts$0$i;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 51) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
 else if ((label|0) == 63) {
  _lexerror($ls,14568,0);
  // unreachable;
 }
 else if ((label|0) == 70) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
}
function _read_numeral($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$0 = 0, $$in$i = 0, $$in$i$i = 0, $$in$i1$i = 0, $$lcssa = 0, $$lcssa60 = 0, $$lcssa62 = 0, $$lcssa64 = 0, $$lcssa66 = 0, $$lcssa68 = 0, $$pre$i = 0, $$pre$i13 = 0, $$pre$i18 = 0, $$pre$i24 = 0, $$pre$i29 = 0, $$pre$i34 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i11 = 0, $$pre1$i16 = 0;
 var $$pre1$i22 = 0, $$pre1$i27 = 0, $$pre1$i32 = 0, $$pre1$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0.0, $258 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $expo$0$ph = 0, $obj = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 $0 = HEAP32[$ls>>2]|0;
 $1 = (($ls) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (($2) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 do {
  if ($8) {
   $9 = ($7>>>0)>(2147483646);
   if ($9) {
    _lexerror($ls,14304,0);
    // unreachable;
   } else {
    $10 = $7 << 1;
    $11 = (($ls) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$2>>2]|0;
    $14 = (_luaM_realloc_($12,$13,$7,$10)|0);
    HEAP32[$2>>2] = $14;
    HEAP32[$6>>2] = $10;
    $$pre$i = HEAP32[$3>>2]|0;
    $17 = $$pre$i;$19 = $14;
    break;
   }
  } else {
   $$pre1$i = HEAP32[$2>>2]|0;
   $17 = $4;$19 = $$pre1$i;
  }
 } while(0);
 $15 = $0&255;
 $16 = (($17) + 1)|0;
 HEAP32[$3>>2] = $16;
 $18 = (($19) + ($17)|0);
 HEAP8[$18>>0] = $15;
 $20 = (($ls) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + -1)|0;
 HEAP32[$21>>2] = $23;
 $24 = ($22|0)==(0);
 if ($24) {
  $30 = (_luaZ_fill($21)|0);
  $31 = $30;
 } else {
  $25 = (($21) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1|0);
  HEAP32[$25>>2] = $27;
  $28 = HEAP8[$26>>0]|0;
  $29 = $28&255;
  $31 = $29;
 }
 HEAP32[$ls>>2] = $31;
 $32 = ($0|0)==(48);
 if ($32) {
  if ((($31|0) == 88) | (($31|0) == 120)) {
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 1)|0;
   $37 = (($33) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36>>>0)>($38>>>0);
   do {
    if ($39) {
     $40 = ($38>>>0)>(2147483646);
     if ($40) {
      _lexerror($ls,14304,0);
      // unreachable;
     } else {
      $41 = $38 << 1;
      $42 = (($ls) + 52|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = HEAP32[$33>>2]|0;
      $45 = (_luaM_realloc_($43,$44,$38,$41)|0);
      HEAP32[$33>>2] = $45;
      HEAP32[$37>>2] = $41;
      $$pre$i24 = HEAP32[$34>>2]|0;
      $48 = $$pre$i24;$50 = $45;
      break;
     }
    } else {
     $$pre1$i22 = HEAP32[$33>>2]|0;
     $48 = $35;$50 = $$pre1$i22;
    }
   } while(0);
   $46 = $31&255;
   $47 = (($48) + 1)|0;
   HEAP32[$34>>2] = $47;
   $49 = (($50) + ($48)|0);
   HEAP8[$49>>0] = $46;
   $51 = HEAP32[$20>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + -1)|0;
   HEAP32[$51>>2] = $53;
   $54 = ($52|0)==(0);
   if ($54) {
    $60 = (_luaZ_fill($51)|0);
    $61 = $60;
   } else {
    $55 = (($51) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 1|0);
    HEAP32[$55>>2] = $57;
    $58 = HEAP8[$56>>0]|0;
    $59 = $58&255;
    $61 = $59;
   }
   HEAP32[$ls>>2] = $61;
   $258 = $61;$expo$0$ph = 14272;
  } else {
   $258 = $31;$expo$0$ph = 14264;
  }
 } else {
  $258 = $31;$expo$0$ph = 14264;
 }
 $62 = (($ls) + 52|0);
 $63 = (($expo$0$ph) + 1|0);
 $66 = $258;
 L27: while(1) {
  $64 = HEAP8[$expo$0$ph>>0]|0;
  $65 = $64 << 24 >> 24;
  $67 = ($66|0)==($65|0);
  if ($67) {
   label = 23;
  } else {
   $68 = HEAP8[$63>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = ($66|0)==($69|0);
   if ($70) {
    label = 23;
   } else {
    $128 = $66;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $71 = HEAP32[$1>>2]|0;
   $72 = (($71) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 1)|0;
   $75 = (($71) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74>>>0)>($76>>>0);
   if ($77) {
    $78 = ($76>>>0)>(2147483646);
    if ($78) {
     label = 26;
     break;
    }
    $79 = $76 << 1;
    $80 = HEAP32[$62>>2]|0;
    $81 = HEAP32[$71>>2]|0;
    $82 = (_luaM_realloc_($80,$81,$76,$79)|0);
    HEAP32[$71>>2] = $82;
    HEAP32[$75>>2] = $79;
    $$pre$i29 = HEAP32[$72>>2]|0;
    $85 = $$pre$i29;$87 = $82;
   } else {
    $$pre1$i27 = HEAP32[$71>>2]|0;
    $85 = $73;$87 = $$pre1$i27;
   }
   $83 = $66&255;
   $84 = (($85) + 1)|0;
   HEAP32[$72>>2] = $84;
   $86 = (($87) + ($85)|0);
   HEAP8[$86>>0] = $83;
   $88 = HEAP32[$20>>2]|0;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + -1)|0;
   HEAP32[$88>>2] = $90;
   $91 = ($89|0)==(0);
   if ($91) {
    $97 = (_luaZ_fill($88)|0);
    $98 = $97;
   } else {
    $92 = (($88) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + 1|0);
    HEAP32[$92>>2] = $94;
    $95 = HEAP8[$93>>0]|0;
    $96 = $95&255;
    $98 = $96;
   }
   HEAP32[$ls>>2] = $98;
   if ((($98|0) == 43) | (($98|0) == 45)) {
    $99 = HEAP32[$1>>2]|0;
    $100 = (($99) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + 1)|0;
    $103 = (($99) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($102>>>0)>($104>>>0);
    if ($105) {
     $106 = ($104>>>0)>(2147483646);
     if ($106) {
      label = 35;
      break;
     }
     $107 = $104 << 1;
     $108 = HEAP32[$62>>2]|0;
     $109 = HEAP32[$99>>2]|0;
     $110 = (_luaM_realloc_($108,$109,$104,$107)|0);
     HEAP32[$99>>2] = $110;
     HEAP32[$103>>2] = $107;
     $$pre$i34 = HEAP32[$100>>2]|0;
     $113 = $$pre$i34;$115 = $110;
    } else {
     $$pre1$i32 = HEAP32[$99>>2]|0;
     $113 = $101;$115 = $$pre1$i32;
    }
    $111 = $98&255;
    $112 = (($113) + 1)|0;
    HEAP32[$100>>2] = $112;
    $114 = (($115) + ($113)|0);
    HEAP8[$114>>0] = $111;
    $116 = HEAP32[$20>>2]|0;
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + -1)|0;
    HEAP32[$116>>2] = $118;
    $119 = ($117|0)==(0);
    if ($119) {
     $125 = (_luaZ_fill($116)|0);
     $126 = $125;
    } else {
     $120 = (($116) + 4|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($121) + 1|0);
     HEAP32[$120>>2] = $122;
     $123 = HEAP8[$121>>0]|0;
     $124 = $123&255;
     $126 = $124;
    }
    HEAP32[$ls>>2] = $126;
    $128 = $126;
   } else {
    $128 = $98;
   }
  }
  $127 = (($128) + 1)|0;
  $129 = (12952 + ($127)|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130 & 16;
  $132 = ($131<<24>>24)==(0);
  do {
   if ($132) {
    $160 = ($128|0)==(46);
    $161 = HEAP32[$1>>2]|0;
    $162 = (($161) + 4|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = (($163) + 1)|0;
    $165 = (($161) + 8|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($164>>>0)>($166>>>0);
    if (!($160)) {
     $$lcssa = $161;$$lcssa60 = $162;$$lcssa62 = $163;$$lcssa64 = $165;$$lcssa66 = $166;$$lcssa68 = $167;
     label = 60;
     break L27;
    }
    if ($167) {
     $168 = ($166>>>0)>(2147483646);
     if ($168) {
      label = 54;
      break L27;
     }
     $169 = $166 << 1;
     $170 = HEAP32[$62>>2]|0;
     $171 = HEAP32[$161>>2]|0;
     $172 = (_luaM_realloc_($170,$171,$166,$169)|0);
     HEAP32[$161>>2] = $172;
     HEAP32[$165>>2] = $169;
     $$pre$i13 = HEAP32[$162>>2]|0;
     $174 = $$pre$i13;$176 = $172;
    } else {
     $$pre1$i11 = HEAP32[$161>>2]|0;
     $174 = $163;$176 = $$pre1$i11;
    }
    $173 = (($174) + 1)|0;
    HEAP32[$162>>2] = $173;
    $175 = (($176) + ($174)|0);
    HEAP8[$175>>0] = 46;
    $177 = HEAP32[$20>>2]|0;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($178) + -1)|0;
    HEAP32[$177>>2] = $179;
    $180 = ($178|0)==(0);
    if ($180) {
     $186 = (_luaZ_fill($177)|0);
     $storemerge = $186;
     break;
    } else {
     $181 = (($177) + 4|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (($182) + 1|0);
     HEAP32[$181>>2] = $183;
     $184 = HEAP8[$182>>0]|0;
     $185 = $184&255;
     $storemerge = $185;
     break;
    }
   } else {
    $133 = HEAP32[$1>>2]|0;
    $134 = (($133) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 1)|0;
    $137 = (($133) + 8|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($136>>>0)>($138>>>0);
    if ($139) {
     $140 = ($138>>>0)>(2147483646);
     if ($140) {
      label = 45;
      break L27;
     }
     $141 = $138 << 1;
     $142 = HEAP32[$62>>2]|0;
     $143 = HEAP32[$133>>2]|0;
     $144 = (_luaM_realloc_($142,$143,$138,$141)|0);
     HEAP32[$133>>2] = $144;
     HEAP32[$137>>2] = $141;
     $$pre$i8 = HEAP32[$134>>2]|0;
     $147 = $$pre$i8;$149 = $144;
    } else {
     $$pre1$i6 = HEAP32[$133>>2]|0;
     $147 = $135;$149 = $$pre1$i6;
    }
    $145 = $128&255;
    $146 = (($147) + 1)|0;
    HEAP32[$134>>2] = $146;
    $148 = (($149) + ($147)|0);
    HEAP8[$148>>0] = $145;
    $150 = HEAP32[$20>>2]|0;
    $151 = HEAP32[$150>>2]|0;
    $152 = (($151) + -1)|0;
    HEAP32[$150>>2] = $152;
    $153 = ($151|0)==(0);
    if ($153) {
     $159 = (_luaZ_fill($150)|0);
     $storemerge = $159;
     break;
    } else {
     $154 = (($150) + 4|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 1|0);
     HEAP32[$154>>2] = $156;
     $157 = HEAP8[$155>>0]|0;
     $158 = $157&255;
     $storemerge = $158;
     break;
    }
   }
  } while(0);
  HEAP32[$ls>>2] = $storemerge;
  $66 = $storemerge;
 }
 if ((label|0) == 26) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
 else if ((label|0) == 35) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
 else if ((label|0) == 45) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
 else if ((label|0) == 54) {
  _lexerror($ls,14304,0);
  // unreachable;
 }
 else if ((label|0) == 60) {
  do {
   if ($$lcssa68) {
    $187 = ($$lcssa66>>>0)>(2147483646);
    if ($187) {
     _lexerror($ls,14304,0);
     // unreachable;
    } else {
     $188 = $$lcssa66 << 1;
     $189 = HEAP32[$62>>2]|0;
     $190 = HEAP32[$$lcssa>>2]|0;
     $191 = (_luaM_realloc_($189,$190,$$lcssa66,$188)|0);
     HEAP32[$$lcssa>>2] = $191;
     HEAP32[$$lcssa64>>2] = $188;
     $$pre$i18 = HEAP32[$$lcssa60>>2]|0;
     $193 = $$pre$i18;$195 = $191;
     break;
    }
   } else {
    $$pre1$i16 = HEAP32[$$lcssa>>2]|0;
    $193 = $$lcssa62;$195 = $$pre1$i16;
   }
  } while(0);
  $192 = (($193) + 1)|0;
  HEAP32[$$lcssa60>>2] = $192;
  $194 = (($195) + ($193)|0);
  HEAP8[$194>>0] = 0;
  $196 = (($ls) + 80|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = ($197<<24>>24)==(46);
  if (!($198)) {
   $199 = HEAP32[$1>>2]|0;
   $200 = (($199) + 4|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = HEAP32[$199>>2]|0;
   $203 = ($201|0)==(0);
   if (!($203)) {
    $$in$i = $201;
    while(1) {
     $204 = (($$in$i) + -1)|0;
     $205 = (($202) + ($204)|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = ($206<<24>>24)==(46);
     if ($207) {
      HEAP8[$205>>0] = $197;
     }
     $208 = ($204|0)==(0);
     if ($208) {
      break;
     } else {
      $$in$i = $204;
     }
    }
   }
  }
  $209 = HEAP32[$1>>2]|0;
  $210 = HEAP32[$209>>2]|0;
  $211 = (_luaO_str2num($210,$obj)|0);
  $212 = ($211|0)==(0);
  if ($212) {
   $213 = HEAP8[$196>>0]|0;
   $214 = (_localeconv()|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = HEAP8[$215>>0]|0;
   HEAP8[$196>>0] = $216;
   $217 = ($213<<24>>24)==($216<<24>>24);
   if (!($217)) {
    $218 = HEAP32[$1>>2]|0;
    $219 = (($218) + 4|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = HEAP32[$218>>2]|0;
    $222 = ($220|0)==(0);
    if (!($222)) {
     $$in$i$i = $220;
     while(1) {
      $223 = (($$in$i$i) + -1)|0;
      $224 = (($221) + ($223)|0);
      $225 = HEAP8[$224>>0]|0;
      $226 = ($225<<24>>24)==($213<<24>>24);
      if ($226) {
       HEAP8[$224>>0] = $216;
      }
      $227 = ($223|0)==(0);
      if ($227) {
       break;
      } else {
       $$in$i$i = $223;
      }
     }
    }
   }
   $228 = HEAP32[$1>>2]|0;
   $229 = HEAP32[$228>>2]|0;
   $230 = (_luaO_str2num($229,$obj)|0);
   $231 = ($230|0)==(0);
   if ($231) {
    $232 = HEAP8[$196>>0]|0;
    $233 = ($232<<24>>24)==(46);
    if ($233) {
     _lexerror($ls,14280,290);
     // unreachable;
    }
    $234 = HEAP32[$1>>2]|0;
    $235 = (($234) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = HEAP32[$234>>2]|0;
    $238 = ($236|0)==(0);
    if ($238) {
     _lexerror($ls,14280,290);
     // unreachable;
    }
    $$in$i1$i = $236;
    while(1) {
     $239 = (($$in$i1$i) + -1)|0;
     $240 = (($237) + ($239)|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = ($241<<24>>24)==($232<<24>>24);
     if ($242) {
      HEAP8[$240>>0] = 46;
     }
     $243 = ($239|0)==(0);
     if ($243) {
      break;
     } else {
      $$in$i1$i = $239;
     }
    }
    _lexerror($ls,14280,290);
    // unreachable;
   }
  }
  $244 = (($obj) + 8|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ($245|0)==(19);
  if ($246) {
   $247 = $obj;
   $248 = $247;
   $249 = HEAP32[$248>>2]|0;
   $250 = (($247) + 4)|0;
   $251 = $250;
   $252 = HEAP32[$251>>2]|0;
   $253 = $seminfo;
   $254 = $253;
   HEAP32[$254>>2] = $249;
   $255 = (($253) + 4)|0;
   $256 = $255;
   HEAP32[$256>>2] = $252;
   $$0 = 291;
   STACKTOP = sp;return ($$0|0);
  } else {
   $257 = +HEAPF64[$obj>>3];
   HEAPF64[$seminfo>>3] = $257;
   $$0 = 290;
   STACKTOP = sp;return ($$0|0);
  }
 }
 return (0)|0;
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $3 = 1;
  $2 = $3&1;
  return ($2|0);
 }
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $3 = $isdigit;
 $2 = $3&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _iscntrl($c) {
 $c = $c|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(32);
 $1 = ($c|0)==(127);
 $$ = $0 | $1;
 $2 = $$&1;
 return ($2|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _ispunct($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_isalnum($c)|0);
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 return ($0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$0211$lcssa = 0, $$1 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $12 = HEAP8[$$0211>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $8 = (($$0211) + 1|0);
    if ($or$cond) {
     $$0211$lcssa = $$0211;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa20 = $8;
     label = 7;
     break;
    } else {
     $$0211 = $8;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa20;
    break;
   }
   $$0 = $$0211$lcssa;
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 if ($21) {
  $30 = $16;$w$08 = $$02$lcssa;
  while(1) {
   $29 = $30 ^ $15;
   $31 = (($29) + -16843009)|0;
   $32 = $29 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   $23 = (($w$08) + 4|0);
   if (!($35)) {
    $w$0$lcssa$ph = $w$08;
    break;
   }
   $22 = HEAP32[$23>>2]|0;
   $24 = (($22) + -16843009)|0;
   $25 = $22 & -2139062144;
   $26 = $25 ^ -2139062144;
   $27 = $26 & $24;
   $28 = ($27|0)==(0);
   if ($28) {
    $30 = $22;$w$08 = $23;
   } else {
    $w$0$lcssa$ph = $23;
    break;
   }
  }
  $w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $w$0$lcssa = $$02$lcssa;
 }
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond5) {
   $$1$lcssa = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 $$0 = $$1$lcssa;
 return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$03$lcssa$ph = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$027) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$03$lcssa = $s;
   } else {
    $$035 = $s;$26 = $10;
    while(1) {
     $div = ($26&255) >>> 5;
     $27 = $div&255;
     $28 = (($byteset) + ($27<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $26 & 31;
     $31 = $30&255;
     $32 = 1 << $31;
     $33 = $29 & $32;
     $34 = ($33|0)==(0);
     $24 = (($$035) + 1|0);
     if (!($34)) {
      $$03$lcssa$ph = $$035;
      break;
     }
     $23 = HEAP8[$24>>0]|0;
     $25 = ($23<<24>>24)==(0);
     if ($25) {
      $$03$lcssa$ph = $24;
      break;
     } else {
      $$035 = $24;$26 = $23;
     }
    }
    $$03$lcssa = $$03$lcssa$ph;
   }
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strpbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcspn($s,$b)|0);
 $1 = (($s) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? $1 : 0;
 return ($4|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    $$03$lcssa = $$03;
    break;
   }
  }
  $8 = $$03$lcssa;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $$028 = $c;$14 = $0;
 while(1) {
  $13 = $14 & 31;
  $15 = $13&255;
  $16 = 1 << $15;
  $div4 = ($14&255) >>> 5;
  $17 = $div4&255;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$028) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$028 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$1$lcssa = $s;
 } else {
  $$16 = $s;$27 = $11;
  while(1) {
   $div = ($27&255) >>> 5;
   $28 = $div&255;
   $29 = (($byteset) + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $27 & 31;
   $32 = $31&255;
   $33 = 1 << $32;
   $34 = $30 & $33;
   $35 = ($34|0)==(0);
   $25 = (($$16) + 1|0);
   if ($35) {
    $$1$lcssa$ph = $$16;
    break;
   }
   $24 = HEAP8[$25>>0]|0;
   $26 = ($24<<24>>24)==(0);
   if ($26) {
    $$1$lcssa$ph = $25;
    break;
   } else {
    $$16 = $25;$27 = $24;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;
 }
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i15 = 0, $$$i7 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i14 = 0, $$01$i = 0, $$02$i = 0, $$02$i10 = 0, $$03$i = 0, $$03$i$be = 0, $$03$i$lcssa136 = 0, $$03$us$i = 0, $$03$us$i$be = 0, $$03$us$i$lcssa138 = 0, $$lcssa = 0, $$lcssa$i = 0, $$lcssa$i13 = 0, $$lcssa$i6 = 0, $$lcssa132 = 0;
 var $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa139 = 0, $$lcssa142 = 0, $$lcssa145 = 0, $$lcssa155 = 0, $$lcssa159 = 0, $$lcssa162 = 0, $$lcssa165 = 0, $$lcssa175 = 0, $$lcssa180 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $27$phi = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div$us$i = 0;
 var $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i9 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$0$ph76$i$lcssa176 = 0, $ip$0$ph76$i$lcssa177 = 0, $ip$0$ph76$i$lcssa178 = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $ip$1$ph55$i$lcssa156 = 0, $ip$1$ph55$i$lcssa157 = 0, $ip$1$ph55$i$lcssa158 = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0;
 var $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa179 = 0;
 var $mem$0$us$i = 0, $mem$0$us$i$be = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$0$ph$ph71$i$lcssa171 = 0, $p$0$ph$ph71$i$lcssa172 = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph50$i$lcssa151 = 0, $p$1$ph$ph50$i$lcssa152 = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0;
 var $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$27 = $3;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $27;$32 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($27) + 2|0);
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $29 | $25;
   $31 = ($28<<24>>24)==(0);
   if ($31) {
    $$lcssa$i = $$01$i;$32 = 0;
    break;
   } else {
    $27$phi = $$01$i;$$01$i = $26;$275 = $28;$hw$0$in2$i = $30;$27 = $27$phi;
   }
  }
  $33 = ($32<<24>>24)==(0);
  $$$i = $33 ? 0 : $$lcssa$i;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = 0;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$lcssa = $58;$$lcssa132 = $63;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
   $$0$lcssa$i = $$lcssa;$$lcssa$i6 = $$lcssa132;
  }
  $65 = (($$0$lcssa$i) + -2|0);
  $$$i7 = $$lcssa$i6 ? 0 : $65;
  $$0 = $$$i7;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i14 = $66;$$lcssa$i13 = 0;
  } else {
   $$02$i10 = $66;$hw$03$i9 = $92;
   while(1) {
    $94 = $hw$03$i9 << 8;
    $95 = (($$02$i10) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i11 = $99 | $100;
    if ($or$cond$i11) {
     $$lcssa133 = $95;$$lcssa134 = $99;
     break;
    } else {
     $$02$i10 = $95;$hw$03$i9 = $98;
    }
   }
   $$0$lcssa$i14 = $$lcssa133;$$lcssa$i13 = $$lcssa134;
  }
  $101 = (($$0$lcssa$i14) + -3|0);
  $$$i15 = $$lcssa$i13 ? 0 : $101;
  $$0 = $$$i15;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$080$i = 0;
 while(1) {
  $102 = (($3) + ($l$080$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   label = 105;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div4$i = ($106&255) >>> 5;
  $109 = $div4$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$080$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   $$lcssa180 = $113;$l$080$i$lcssa179 = $l$080$i;
   break;
  } else {
   $106 = $117;$l$080$i = $113;
  }
 }
 if ((label|0) == 105) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $119 = ($$lcssa180>>>0)>(1);
 do {
  if ($119) {
   $276 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
   L56: while(1) {
    $277 = $276;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
    while(1) {
     $278 = $277;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
     L60: while(1) {
      $129 = $278;$k$059$i = 1;
      while(1) {
       $125 = (($k$059$i) + ($ip$0$ph76$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($129)|0);
       $130 = HEAP8[$128>>0]|0;
       $131 = ($127<<24>>24)==($130<<24>>24);
       if (!($131)) {
        $$lcssa159 = $129;$$lcssa162 = $127;$$lcssa165 = $130;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
        break L60;
       }
       $132 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
       $123 = (($k$059$i) + 1)|0;
       if ($132) {
        break;
       }
       $122 = (($123) + ($jp$0$ph1365$i))|0;
       $124 = ($122>>>0)<($$lcssa180>>>0);
       if ($124) {
        $129 = $122;$k$059$i = $123;
       } else {
        $ip$0$ph76$i$lcssa177 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa171 = $p$0$ph$ph71$i;
        label = 34;
        break L56;
       }
      }
      $133 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
      $134 = (($133) + 1)|0;
      $135 = ($134>>>0)<($$lcssa180>>>0);
      if ($135) {
       $278 = $134;$jp$0$ph1365$i = $133;
      } else {
       $ip$0$ph76$i$lcssa178 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa172 = $p$0$ph$ph71$i;
       label = 35;
       break L56;
      }
     }
     $136 = ($$lcssa162&255)>($$lcssa165&255);
     $137 = (($$lcssa159) - ($ip$0$ph76$i))|0;
     if (!($136)) {
      $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
      break;
     }
     $120 = (($$lcssa159) + 1)|0;
     $121 = ($120>>>0)<($$lcssa180>>>0);
     if ($121) {
      $277 = $120;$jp$0$ph13$ph70$i = $$lcssa159;$p$0$ph$ph71$i = $137;
     } else {
      $$lcssa175 = $137;$ip$0$ph76$i$lcssa176 = $ip$0$ph76$i;
      label = 36;
      break L56;
     }
    }
    $138 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
    $139 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
    $140 = ($139>>>0)<($$lcssa180>>>0);
    if ($140) {
     $276 = $139;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $138;
    } else {
     $jp$0$ph1365$i$lcssa$lcssa$lcssa = $jp$0$ph1365$i$lcssa$lcssa;
     label = 37;
     break;
    }
   }
   if ((label|0) == 34) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa177;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa171;
   }
   else if ((label|0) == 35) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa178;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa172;
   }
   else if ((label|0) == 36) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa176;$p$0$ph$ph$lcssa32$i = $$lcssa175;
   }
   else if ((label|0) == 37) {
    $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
   }
   $279 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
   L76: while(1) {
    $281 = $279;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
    while(1) {
     $280 = $281;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
     L80: while(1) {
      $148 = $280;$k$139$i = 1;
      while(1) {
       $144 = (($k$139$i) + ($ip$1$ph55$i))|0;
       $145 = (($n) + ($144)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = (($n) + ($148)|0);
       $149 = HEAP8[$147>>0]|0;
       $150 = ($146<<24>>24)==($149<<24>>24);
       if (!($150)) {
        $$lcssa139 = $148;$$lcssa142 = $146;$$lcssa145 = $149;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
        break L80;
       }
       $151 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
       $142 = (($k$139$i) + 1)|0;
       if ($151) {
        break;
       }
       $141 = (($142) + ($jp$1$ph944$i))|0;
       $143 = ($141>>>0)<($$lcssa180>>>0);
       if ($143) {
        $148 = $141;$k$139$i = $142;
       } else {
        $ip$1$ph55$i$lcssa157 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa151 = $p$1$ph$ph50$i;
        label = 54;
        break L76;
       }
      }
      $152 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
      $153 = (($152) + 1)|0;
      $154 = ($153>>>0)<($$lcssa180>>>0);
      if ($154) {
       $280 = $153;$jp$1$ph944$i = $152;
      } else {
       $ip$1$ph55$i$lcssa158 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa152 = $p$1$ph$ph50$i;
       label = 55;
       break L76;
      }
     }
     $155 = ($$lcssa142&255)<($$lcssa145&255);
     $156 = (($$lcssa139) - ($ip$1$ph55$i))|0;
     if (!($155)) {
      $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
      break;
     }
     $160 = (($$lcssa139) + 1)|0;
     $161 = ($160>>>0)<($$lcssa180>>>0);
     if ($161) {
      $281 = $160;$jp$1$ph9$ph49$i = $$lcssa139;$p$1$ph$ph50$i = $156;
     } else {
      $$lcssa155 = $156;$ip$1$ph55$i$lcssa156 = $ip$1$ph55$i;
      label = 56;
      break L76;
     }
    }
    $157 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
    $158 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
    $159 = ($158>>>0)<($$lcssa180>>>0);
    if ($159) {
     $279 = $158;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $157;
    } else {
     $jp$1$ph944$i$lcssa$lcssa$lcssa = $jp$1$ph944$i$lcssa$lcssa;
     label = 57;
     break;
    }
   }
   if ((label|0) == 54) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa157;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa151;
    break;
   }
   else if ((label|0) == 55) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa158;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa152;
    break;
   }
   else if ((label|0) == 56) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa156;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $$lcssa155;
    break;
   }
   else if ((label|0) == 57) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
    break;
   }
  } else {
   $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
  }
 } while(0);
 $162 = (($ip$1$ph$lcssa$i) + 1)|0;
 $163 = (($ip$0$ph$lcssa147$i) + 1)|0;
 $164 = ($162>>>0)>($163>>>0);
 $p$1$p$0$i = $164 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
 $ip$1$ip$0$i = $164 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
 $165 = (($n) + ($p$1$p$0$i)|0);
 $166 = (($ip$1$ip$0$i) + 1)|0;
 $167 = (_memcmp($n,$165,$166)|0);
 $168 = ($167|0)==(0);
 if ($168) {
  $174 = (($$lcssa180) - ($p$1$p$0$i))|0;
  $175 = $$lcssa180 | 63;
  $176 = ($$lcssa180|0)==($p$1$p$0$i|0);
  if ($176) {
   $232 = $175;$p$3155$i = $$lcssa180;
  } else {
   $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L99: while(1) {
    $178 = $z$0$us$i;
    $179 = $$03$us$i;
    $180 = (($178) - ($179))|0;
    $181 = ($180>>>0)<($$lcssa180>>>0);
    do {
     if ($181) {
      $182 = (_memchr($z$0$us$i,0,$175)|0);
      $183 = ($182|0)==(0|0);
      if ($183) {
       $187 = (($z$0$us$i) + ($175)|0);
       $z$1$us$i = $187;
       break;
      } else {
       $184 = $182;
       $185 = (($184) - ($179))|0;
       $186 = ($185>>>0)<($$lcssa180>>>0);
       if ($186) {
        label = 104;
        break L99;
       } else {
        $z$1$us$i = $182;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $188 = (($$03$us$i) + ($l$080$i$lcssa179)|0);
    $189 = HEAP8[$188>>0]|0;
    $div$us$i = ($189&255) >>> 5;
    $190 = $div$us$i&255;
    $191 = (($byteset$i) + ($190<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & 31;
    $194 = $193&255;
    $195 = 1 << $194;
    $196 = $195 & $192;
    $197 = ($196|0)==(0);
    L107: do {
     if ($197) {
      $227 = (($$03$us$i) + ($$lcssa180)|0);
      $$03$us$i$be = $227;$mem$0$us$i$be = 0;
     } else {
      $198 = $189&255;
      $199 = (($shift$i) + ($198<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($$lcssa180) - ($200))|0;
      $202 = ($$lcssa180|0)==($200|0);
      if (!($202)) {
       $203 = ($mem$0$us$i|0)!=(0);
       $204 = ($201>>>0)<($p$1$p$0$i>>>0);
       $or$cond5$us$i = $203 & $204;
       $k$2$us$i = $or$cond5$us$i ? $174 : $201;
       $205 = (($$03$us$i) + ($k$2$us$i)|0);
       $$03$us$i$be = $205;$mem$0$us$i$be = 0;
       break;
      }
      $206 = ($166>>>0)>($mem$0$us$i>>>0);
      $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
      $207 = (($n) + ($$mem$0$us$i)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ($208<<24>>24)==(0);
      do {
       if (!($209)) {
        $$pr$us$i = $208;$k$338$us$i = $$mem$0$us$i;
        while(1) {
         $214 = (($$03$us$i) + ($k$338$us$i)|0);
         $215 = HEAP8[$214>>0]|0;
         $216 = ($$pr$us$i<<24>>24)==($215<<24>>24);
         $211 = (($k$338$us$i) + 1)|0;
         if (!($216)) {
          $k$338$us$i$lcssa = $k$338$us$i;
          label = 77;
          break;
         }
         $210 = (($n) + ($211)|0);
         $212 = HEAP8[$210>>0]|0;
         $213 = ($212<<24>>24)==(0);
         if ($213) {
          label = 73;
          break;
         } else {
          $$pr$us$i = $212;$k$338$us$i = $211;
         }
        }
        if ((label|0) == 73) {
         label = 0;
         break;
        }
        else if ((label|0) == 77) {
         label = 0;
         $217 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
         $218 = (($$03$us$i) + ($217)|0);
         $$03$us$i$be = $218;$mem$0$us$i$be = 0;
         break L107;
        }
       }
      } while(0);
      $k$4$us$i = $166;
      while(1) {
       $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
       if (!($219)) {
        $$03$us$i$lcssa138 = $$03$us$i;
        label = 103;
        break L99;
       }
       $220 = (($k$4$us$i) + -1)|0;
       $221 = (($n) + ($220)|0);
       $222 = HEAP8[$221>>0]|0;
       $223 = (($$03$us$i) + ($220)|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = ($222<<24>>24)==($224<<24>>24);
       if ($225) {
        $k$4$us$i = $220;
       } else {
        break;
       }
      }
      $226 = (($$03$us$i) + ($p$1$p$0$i)|0);
      $$03$us$i$be = $226;$mem$0$us$i$be = $174;
     }
    } while(0);
    $$03$us$i = $$03$us$i$be;$mem$0$us$i = $mem$0$us$i$be;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 103) {
    $$0 = $$03$us$i$lcssa138;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 104) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $169 = (($$lcssa180) - ($ip$1$ip$0$i))|0;
  $170 = (($169) + -1)|0;
  $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
  $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
  $172 = (($ip$1$ip$0$$i) + 1)|0;
  $173 = $$lcssa180 | 63;
  $232 = $173;$p$3155$i = $172;
 }
 $177 = (($n) + ($166)|0);
 $$03$i = $3;$z$0$i = $3;
 L134: while(1) {
  $228 = $z$0$i;
  $229 = $$03$i;
  $230 = (($228) - ($229))|0;
  $231 = ($230>>>0)<($$lcssa180>>>0);
  do {
   if ($231) {
    $233 = (_memchr($z$0$i,0,$232)|0);
    $234 = ($233|0)==(0|0);
    if ($234) {
     $238 = (($z$0$i) + ($232)|0);
     $z$1$i = $238;
     break;
    } else {
     $235 = $233;
     $236 = (($235) - ($229))|0;
     $237 = ($236>>>0)<($$lcssa180>>>0);
     if ($237) {
      label = 102;
      break L134;
     } else {
      $z$1$i = $233;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $239 = (($$03$i) + ($l$080$i$lcssa179)|0);
  $240 = HEAP8[$239>>0]|0;
  $div$i = ($240&255) >>> 5;
  $241 = $div$i&255;
  $242 = (($byteset$i) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $240 & 31;
  $245 = $244&255;
  $246 = 1 << $245;
  $247 = $246 & $243;
  $248 = ($247|0)==(0);
  L142: do {
   if ($248) {
    $255 = (($$03$i) + ($$lcssa180)|0);
    $$03$i$be = $255;
   } else {
    $249 = $240&255;
    $250 = (($shift$i) + ($249<<2)|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($$lcssa180|0)==($251|0);
    if (!($252)) {
     $253 = (($$lcssa180) - ($251))|0;
     $254 = (($$03$i) + ($253)|0);
     $$03$i$be = $254;
     break;
    }
    $256 = HEAP8[$177>>0]|0;
    $257 = ($256<<24>>24)==(0);
    do {
     if (!($257)) {
      $$pr$i = $256;$k$338$i = $166;
      while(1) {
       $262 = (($$03$i) + ($k$338$i)|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = ($$pr$i<<24>>24)==($263<<24>>24);
       $259 = (($k$338$i) + 1)|0;
       if (!($264)) {
        $k$338$i$lcssa = $k$338$i;
        label = 97;
        break;
       }
       $258 = (($n) + ($259)|0);
       $260 = HEAP8[$258>>0]|0;
       $261 = ($260<<24>>24)==(0);
       if ($261) {
        label = 93;
        break;
       } else {
        $$pr$i = $260;$k$338$i = $259;
       }
      }
      if ((label|0) == 93) {
       label = 0;
       break;
      }
      else if ((label|0) == 97) {
       label = 0;
       $265 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
       $266 = (($$03$i) + ($265)|0);
       $$03$i$be = $266;
       break L142;
      }
     }
    } while(0);
    $k$4$i = $166;
    while(1) {
     $267 = ($k$4$i|0)==(0);
     if ($267) {
      $$03$i$lcssa136 = $$03$i;
      label = 101;
      break L134;
     }
     $268 = (($k$4$i) + -1)|0;
     $269 = (($n) + ($268)|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = (($$03$i) + ($268)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = ($270<<24>>24)==($272<<24>>24);
     if ($273) {
      $k$4$i = $268;
     } else {
      break;
     }
    }
    $274 = (($$03$i) + ($p$3155$i)|0);
    $$03$i$be = $274;
   }
  } while(0);
  $$03$i = $$03$i$be;$z$0$i = $z$1$i;
 }
 if ((label|0) == 101) {
  $$0 = $$03$i$lcssa136;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 102) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,15008,15064,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = (($info) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = (($info) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = (($info) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = (($7) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 255]($2,$info,$10,1);
    $11 = (($info) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = (($info) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$1 = 1;
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = (($info) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = (($info) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = (($info) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = (($info) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = (($info) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = (($info) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 255]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$6>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 255]($6,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 255]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = (($info) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = (($info) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = (($info) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = (($info) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = (($info) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = (($info) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = (($info) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = (($info) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = (($info) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = (($info) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = (($info) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = (($this) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 255]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($info) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = (($info) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 255]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = (($info) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = (($info) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = (($info) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = (($info) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($9|0)==($this|0);
   if ($10) {
    $11 = (($info) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = (($info) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = (($info) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = (($info) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = (($info) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = (($info) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = (($info) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = (($info) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = (($info) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 255]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$lcssa137 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0;
 var $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0;
 var $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0;
 var $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0;
 var $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0;
 var $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0, $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0;
 var $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0;
 var $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0;
 var $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$2$i$ph = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$1$i$ph = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$2$i$ph = 0, $v$3$lcssa$i = 0;
 var $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[15216>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((15216 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((15216 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[15216>>2] = $22;
     } else {
      $23 = HEAP32[((15216 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((15216 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((15216 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((15216 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[15216>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((15216 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((15216 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((15216 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((15216 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[15216>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[15216>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((15216 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((15216 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((15216 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((15216 + 8|0))>>2] = $81;
     HEAP32[((15216 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((15216 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((15216 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((15216 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((15216 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((15216 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((15216 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((15216 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((15216 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((15216 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((15216 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((15216 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((15216 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[15216>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[15216>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((15216 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((15216 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((15216 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((15216 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((15216 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((15216 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((15216 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     if ($277) {
      $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
     } else {
      $278 = ($idx$0$i|0)==(31);
      if ($278) {
       $282 = 0;
      } else {
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $282 = $280;
      }
      $281 = $246 << $282;
      $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
      while(1) {
       $283 = (($t$0$i14) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284 & -8;
       $286 = (($285) - ($246))|0;
       $287 = ($286>>>0)<($rsize$0$i15>>>0);
       if ($287) {
        $288 = ($285|0)==($246|0);
        if ($288) {
         $rsize$2$i$ph = $286;$t$1$i$ph = $t$0$i14;$v$2$i$ph = $t$0$i14;
         break;
        } else {
         $rsize$1$i = $286;$v$1$i = $t$0$i14;
        }
       } else {
        $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
       }
       $289 = (($t$0$i14) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $sizebits$0$i >>> 31;
       $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = ($290|0)==(0|0);
       $295 = ($290|0)==($293|0);
       $or$cond19$i = $294 | $295;
       $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
       $296 = ($293|0)==(0|0);
       $297 = $sizebits$0$i << 1;
       if ($296) {
        $rsize$2$i$ph = $rsize$1$i;$t$1$i$ph = $rst$1$i;$v$2$i$ph = $v$1$i;
        break;
       } else {
        $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
       }
      }
      $rsize$2$i = $rsize$2$i$ph;$t$1$i = $t$1$i$ph;$v$2$i = $v$2$i$ph;
     }
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((15216 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((15216 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((15216 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((15216 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((15216 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((15216 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((15216 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((15216 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((15216 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L215: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((15216 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[15216>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[15216>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((15216 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((15216 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((15216 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((15216 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((15216 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((15216 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa137 = $487;
             label = 163;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 163) {
            $T$0$lcssa$i = $$lcssa137;
            break;
           }
           $494 = HEAP32[((15216 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L215;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((15216 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((15216 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((15216 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((15216 + 20|0))>>2] = $514;
   HEAP32[((15216 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((15216 + 8|0))>>2] = 0;
   HEAP32[((15216 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((15216 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((15216 + 12|0))>>2] = $528;
  $529 = HEAP32[((15216 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((15216 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[15688>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((15688 + 8|0))>>2] = $538;
    HEAP32[((15688 + 4|0))>>2] = $538;
    HEAP32[((15688 + 12|0))>>2] = -1;
    HEAP32[((15688 + 16|0))>>2] = -1;
    HEAP32[((15688 + 20|0))>>2] = 0;
    HEAP32[((15216 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[15688>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((15688 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((15216 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((15216 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((15216 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L279: do {
  if ($560) {
   $561 = HEAP32[((15216 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((15216 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 191;
     } else {
      $595 = HEAP32[((15216 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 200;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((15688 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((15216 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((15216 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 200;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((15688 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L303;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 211;
      break L279;
     }
    }
   } while(0);
   $619 = HEAP32[((15216 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((15216 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $632 = HEAP32[((15216 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((15216 + 432|0))>>2] = $633;
  $634 = HEAP32[((15216 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((15216 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((15216 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L323: do {
   if ($637) {
    $638 = HEAP32[((15216 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((15216 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((15216 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((15216 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((15216 + 460|0))>>2] = 0;
    $641 = HEAP32[15688>>2]|0;
    HEAP32[((15216 + 36|0))>>2] = $641;
    HEAP32[((15216 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((15216 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((15216 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((15216 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((15216 + 24|0))>>2] = $654;
    HEAP32[((15216 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((15688 + 16|0))>>2]|0;
    HEAP32[((15216 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((15216 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 224;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      label = 229;
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 224) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((15216 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((15216 + 24|0))>>2] = $684;
       HEAP32[((15216 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((15688 + 16|0))>>2]|0;
       HEAP32[((15216 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $691 = HEAP32[((15216 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((15216 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((15216 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 235;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      label = 319;
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 235) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L363: do {
       if ($729) {
        $730 = HEAP32[((15216 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((15216 + 12|0))>>2] = $731;
        HEAP32[((15216 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((15216 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((15216 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((15216 + 8|0))>>2] = $737;
         HEAP32[((15216 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L371: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((15216 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[15216>>2]|0;
            $764 = $763 & $762;
            HEAP32[15216>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $789;$RP$0$i$i$ph = $788;
              }
             } else {
              $R$0$i$i$ph = $786;$RP$0$i$i$ph = $785;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $794 = (($R$0$i$i) + 16|0);
               $795 = HEAP32[$794>>2]|0;
               $796 = ($795|0)==(0|0);
               if ($796) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $795;$RP$0$i$i$be = $794;
               }
              } else {
               $R$0$i$i$be = $792;$RP$0$i$i$be = $791;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((15216 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((15216 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((15216 + 4|0))>>2] = $807;
             break L371;
            } else {
             $808 = HEAP32[((15216 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L371;
             }
            }
           } while(0);
           $815 = HEAP32[((15216 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((15216 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((15216 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[15216>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[15216>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((15216 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((15216 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((15216 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((15216 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((15216 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((15216 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $$lcssa110 = $904;
            label = 314;
            break;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          if ((label|0) == 314) {
           $T$0$lcssa$i26$i = $$lcssa110;
           break;
          }
          $911 = HEAP32[((15216 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L363;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((15216 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 319) {
    }
    $sp$0$i$i$i = ((15216 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((15216 + 24|0))>>2] = $953;
    HEAP32[((15216 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((15688 + 16|0))>>2]|0;
    HEAP32[((15216 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((15216 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((15216 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((15216 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((15216 + 448|0))+12>>2]|0;
    HEAP32[((15216 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((15216 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((15216 + 460|0))>>2] = 0;
    HEAP32[((15216 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((15216 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[15216>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[15216>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((15216 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((15216 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((15216 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((15216 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((15216 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((15216 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $$lcssa115 = $1043;
         label = 353;
         break;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa115;
        break;
       }
       $1050 = HEAP32[((15216 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L323;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((15216 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((15216 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((15216 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((15216 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((15216 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0;
 var $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0;
 var $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((15216 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((15216 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((15216 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((15216 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[15216>>2]|0;
     $36 = $35 & $34;
     HEAP32[15216>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((15216 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((15216 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((15216 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((15216 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((15216 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((15216 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((15216 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((15216 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((15216 + 12|0))>>2] = $120;
   HEAP32[((15216 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((15216 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((15216 + 20|0))>>2] = 0;
   HEAP32[((15216 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((15216 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((15216 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((15216 + 8|0))>>2] = $128;
   HEAP32[((15216 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((15216 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((15216 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[15216>>2]|0;
     $152 = $151 & $150;
     HEAP32[15216>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((15216 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((15216 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((15216 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((15216 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((15216 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((15216 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((15216 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((15216 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((15216 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((15216 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((15216 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((15216 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[15216>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[15216>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((15216 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((15216 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((15216 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((15216 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((15216 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((15216 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa73 = $296;
       label = 137;
       break;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa73;
      break;
     }
     $303 = HEAP32[((15216 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((15216 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((15216 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((15216 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((15216 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((15216 + 32|0))>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
  $3 = $4&1;
  return ($3|0);
 }
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(6);
 $4 = $2;
 $3 = $4&1;
 return ($3|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0, $$3$lcssa$i = 0;
 var $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0;
 var $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$2$ph44$i$lcssa = 0, $a$2$ph44$i$lcssa130 = 0, $a$2$ph44$i$ph = 0, $a$2$ph44$i131 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0;
 var $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0;
 var $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$5$ph = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry1$1$us99$i$lcssa$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0;
 var $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$0$us89$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$3$ph = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0;
 var $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$2$i$lcssa = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0;
 var $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0;
 var $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0;
 var $rp$2$ph42$i = 0, $rp$2$ph42$i$lcssa = 0, $rp$2$ph42$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$3$ph40$i$ph = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0;
 var $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph43$i = 0, $z$1$ph43$i$lcssa = 0, $z$1$ph43$i$ph = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$1$us90$i$lcssa = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$3$us102$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$ph = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (15712 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   if ($51) {
    $c$372 = $c$1$lcssa;$i$271 = 0;
    while(1) {
     $52 = $c$372 | 32;
     $53 = (16304 + ($i$271)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($52|0)==($55|0);
     if (!($56)) {
      $c$5$ph = $c$372;$i$3$ph = $i$271;
      break;
     }
     $57 = ($i$271>>>0)<(2);
     do {
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = HEAP32[$1>>2]|0;
       $60 = ($58>>>0)<($59>>>0);
       if ($60) {
        $61 = (($58) + 1|0);
        HEAP32[$0>>2] = $61;
        $62 = HEAP8[$58>>0]|0;
        $63 = $62&255;
        $c$4 = $63;
        break;
       } else {
        $64 = (___shgetc($f)|0);
        $c$4 = $64;
        break;
       }
      } else {
       $c$4 = $c$372;
      }
     } while(0);
     $65 = (($i$271) + 1)|0;
     $66 = ($65>>>0)<(3);
     if ($66) {
      $c$372 = $c$4;$i$271 = $65;
     } else {
      $c$5$ph = $c$4;$i$3$ph = $65;
      break;
     }
    }
    $c$5 = $c$5$ph;$i$3 = $i$3$ph;
   } else {
    $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
   }
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if (!($75)) {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $i$4 = 1;
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$in = $i$4$lcssa;
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      break;
     } else {
      $$in = $102;
     }
    }
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i$ph = $128;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i$ph = $129;
      }
      $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 78;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
        label = 88;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i$be = $135;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i$be = $136;
       }
       $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
      }
      if ((label|0) == 78) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $$lcssa114 = $156;$717 = $154;$718 = $155;
          break;
         }
        }
        $715 = $717;$716 = $718;$c$2$i$ph = $$lcssa114;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
       } else {
        $715 = 0;$716 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa116;$gotrad$0$i$ph = 1;
       }
      }
      else if ((label|0) == 88) {
       $715 = 0;$716 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
      }
      $167 = 0;$169 = 0;$719 = $715;$720 = $716;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
      L130: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 95;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L130;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $721 = $169;$722 = $167;$723 = $169;$724 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L130;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 95;
          break;
         }
        }
       } while(0);
       if ((label|0) == 95) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $721 = $719;$722 = $720;$723 = $189;$724 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $c$2$i$be = $196;
       } else {
        $197 = (___shgetc($f)|0);
        $c$2$i$be = $197;
       }
       $167 = $724;$169 = $723;$719 = $721;$720 = $722;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $213 = $210 ? $212 : $211;
      $216 = $210 ? $215 : $214;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $$lcssa113 = $222;
         break;
        }
       }
       $x$3$lcssa$i = $$lcssa113;
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($213|0),($216|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $725 = $288;$726 = $289;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
         break;
        }
       }
       $295 = $725;$296 = $726;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 143;
       } else {
        $$07$i = $297;
        label = 141;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 141;
      }
      if ((label|0) == 141) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 143;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 143) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 155;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
      label = 165;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i$be = $334;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i$be = $335;
     }
     $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
    }
    if ((label|0) == 155) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$1$be$i$lcssa = $$1$be$i;$729 = $346;$730 = $347;
        break;
       }
      }
      $$2$i = $$1$be$i$lcssa;$727 = $729;$728 = $730;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
     } else {
      $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    else if ((label|0) == 165) {
     $$2$i = $$012$i$lcssa;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$731 = $358;$732 = $356;$733 = $727;$734 = $728;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L243: while(1) {
       do {
        if ($731) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $735 = $362;$736 = $363;$737 = $362;$738 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $739 = $733;$740 = $734;$741 = $362;$742 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          label = 170;
          break L243;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $732;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $737;$363 = $738;$731 = $387;$732 = $385;$733 = $735;$734 = $736;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$be$i$lcssa = $$3$be$i;$748 = $737;$749 = $738;$750 = $735;$751 = $736;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
        label = 181;
        break;
       }
      }
      if ((label|0) == 170) {
       $360 = ($gotdig$3123$i$lcssa|0)!=(0);
       $743 = $741;$744 = $742;$745 = $739;$746 = $740;$747 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
       label = 190;
       break;
      }
      else if ((label|0) == 181) {
       $$3$lcssa$i = $$3$be$i$lcssa;$389 = $750;$390 = $748;$392 = $751;$393 = $749;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
       label = 182;
       break;
      }
     } else {
      $$3$lcssa$i = $$2$i;$389 = $727;$390 = 0;$392 = $728;$393 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 182;
     }
    } while(0);
    do {
     if ((label|0) == 182) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $391 = $388 ? $390 : $389;
      $394 = $388 ? $393 : $392;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $743 = $390;$744 = $393;$745 = $391;$746 = $394;$747 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 190;
        break;
       } else {
        $752 = $390;$753 = $393;$754 = $395;$755 = $391;$756 = $394;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 192;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($391|0),($394|0))|0);
      $411 = tempRet0;
      $422 = $410;$424 = $390;$425 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 190) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $752 = $743;$753 = $744;$754 = $747;$755 = $745;$756 = $746;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 192;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($747) {
       $422 = $745;$424 = $743;$425 = $746;$427 = $744;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 193;
      }
     }
    }
    if ((label|0) == 192) {
     if ($754) {
      $422 = $755;$424 = $752;$425 = $756;$427 = $753;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 193;
     }
    }
    if ((label|0) == 193) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $423 = ($422|0)==($424|0);
    $426 = ($425|0)==($427|0);
    $428 = $423 & $426;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($425|0)>($442|0);
    $444 = ($422>>>0)>($440>>>0);
    $445 = ($425|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($425|0)<($454|0);
    $456 = ($422>>>0)<($452>>>0);
    $457 = ($425|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($422|0);
     $473 = ($422|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($422|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($422|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($422))|0;
       $485 = (15736 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($422, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($422) + -10)|0;
       $498 = (15736 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($422|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i$ph = 0;$rp$2$ph42$i$ph = $422;$z$1$ph43$i$ph = $k$3$i;
    } else {
     $504 = ($422|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (15736 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $422;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $422;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i$ph = $a$0$lcssa180$i;$rp$2$ph42$i$ph = $528;$z$1$ph43$i$ph = $z$0$i;
    }
    $a$2$ph44$i = $a$2$ph44$i$ph;$e2$0$ph$i = 0;$rp$2$ph42$i = $rp$2$ph42$i$ph;$z$1$ph43$i = $z$1$ph43$i$ph;
    L338: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa126 = $554;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa126;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if (!($531)) {
       $a$2$ph44$i$lcssa = $a$2$ph44$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph42$i$lcssa = $rp$2$ph42$i;$z$1$ph43$i$lcssa = $z$1$ph43$i;
       label = 240;
       break;
      }
      $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$2$ph44$i$lcssa130 = $a$2$ph44$i;$e2$0$us89$i$lcssa = $e2$0$us89$i;$z$1$us90$i$lcssa = $z$1$us90$i;
        label = 239;
        break L338;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa125 = $580;$carry1$1$us99$i$lcssa$lcssa = $carry1$1$us99$i$lcssa;$z$3$us102$i$lcssa$lcssa = $z$3$us102$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa125;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa$lcssa;
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    if ((label|0) == 239) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa130;$e2$1$ph$i$ph = $e2$0$us89$i$lcssa;$rp$3$ph40$i$ph = 18;$z$5$ph$i$ph = $z$1$us90$i$lcssa;
    }
    else if ((label|0) == 240) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph40$i$ph = $rp$2$ph42$i$lcssa;$z$5$ph$i$ph = $z$1$ph43$i$lcssa;
    }
    $a$3$ph$i = $a$2$ph44$i131;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph40$i = $rp$3$ph40$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
    L377: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $629 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (15728 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $596 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $597 = ($596|0)<(2);
        if ($597) {
         $i$081$i = $596;
        } else {
         $i$1$i = $596;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $629;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L377;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if (!($628)) {
       $630 = ($629|0)==($a$5$i$lcssa|0);
       if (!($630)) {
        $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
        break;
       }
       $637 = HEAP32[$635>>2]|0;
       $638 = $637 | 1;
       HEAP32[$635>>2] = $638;
      }
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $629;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $647 = (($690) - ($emin$0$ph))|0;
    $714 = ($647|0)<($bits$0$ph|0);
    if ($714) {
     $648 = ($647|0)<(0);
     if ($648) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 275;
     } else {
      $$013$i = $647;$denormal$0$i = 1;
      label = 274;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 274;
    }
    if ((label|0) == 274) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 275;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 275) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($647|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa47 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa47;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa46 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa46;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa43 = $104;$$lcssa45 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa45;$113 = $159;$115 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa43;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $153;$120 = $152;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa41 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa41;
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    return (+$$0);
   }
   if (!($3)) {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    break;
   }
   $10 = $x - $x;
   $11 = $10 / 0.0;
   $$0 = $11;
   return (+$$0);
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
    return (+$$0);
   }
   $16 = ($1|0)==(1072693248);
   $17 = ($0|0)==(0);
   $18 = (0)==(0);
   $19 = $17 & $18;
   $or$cond4 = $16 & $19;
   if ($or$cond4) {
    $$0 = 0.0;
    return (+$$0);
   } else {
    $26 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
   }
  }
 } while(0);
 $20 = (($hx$0) + 614242)|0;
 $21 = $20 >>> 20;
 $22 = (($k$0) + ($21))|0;
 $23 = $20 & 1048575;
 $24 = (($23) + 1072079006)|0;
 HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
 $27 = $25 + -1.0;
 $28 = $27 * 0.5;
 $29 = $27 * $28;
 $30 = $27 + 2.0;
 $31 = $27 / $30;
 $32 = $31 * $31;
 $33 = $32 * $32;
 $34 = $33 * 0.15313837699209373;
 $35 = $34 + 0.22222198432149784;
 $36 = $33 * $35;
 $37 = $36 + 0.39999999999409419;
 $38 = $33 * $37;
 $39 = $33 * 0.14798198605116586;
 $40 = $39 + 0.1818357216161805;
 $41 = $33 * $40;
 $42 = $41 + 0.28571428743662391;
 $43 = $33 * $42;
 $44 = $43 + 0.66666666666667351;
 $45 = $32 * $44;
 $46 = $38 + $45;
 $47 = $27 - $29;
 HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
 $49 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
 $51 = $27 - $50;
 $52 = $51 - $29;
 $53 = $29 + $46;
 $54 = $31 * $53;
 $55 = $54 + $52;
 $56 = $50 * 0.43429448187816888;
 $57 = (+($22|0));
 $58 = $57 * 0.30102999566361177;
 $59 = $57 * 3.6942390771589308E-13;
 $60 = $50 + $55;
 $61 = $60 * 2.5082946711645275E-11;
 $62 = $59 + $61;
 $63 = $55 * 0.43429448187816888;
 $64 = $63 + $62;
 $65 = $58 + $56;
 $66 = $58 - $65;
 $67 = $56 + $66;
 $68 = $67 + $64;
 $69 = $65 + $68;
 $$0 = $69;
 return (+$$0);
}
function _log2($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    return (+$$0);
   }
   if (!($3)) {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$67 = $14;$hx$0 = $14;$k$0 = -1077;
    break;
   }
   $10 = $x - $x;
   $11 = $10 / 0.0;
   $$0 = $11;
   return (+$$0);
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
    return (+$$0);
   }
   $16 = ($1|0)==(1072693248);
   $17 = ($0|0)==(0);
   $18 = (0)==(0);
   $19 = $17 & $18;
   $or$cond4 = $16 & $19;
   if ($or$cond4) {
    $$0 = 0.0;
    return (+$$0);
   } else {
    $26 = $0;$67 = $1;$hx$0 = $1;$k$0 = -1023;
   }
  }
 } while(0);
 $20 = (($hx$0) + 614242)|0;
 $21 = $20 >>> 20;
 $22 = (($k$0) + ($21))|0;
 $23 = $20 & 1048575;
 $24 = (($23) + 1072079006)|0;
 HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
 $27 = $25 + -1.0;
 $28 = $27 * 0.5;
 $29 = $27 * $28;
 $30 = $27 + 2.0;
 $31 = $27 / $30;
 $32 = $31 * $31;
 $33 = $32 * $32;
 $34 = $33 * 0.15313837699209373;
 $35 = $34 + 0.22222198432149784;
 $36 = $33 * $35;
 $37 = $36 + 0.39999999999409419;
 $38 = $33 * $37;
 $39 = $33 * 0.14798198605116586;
 $40 = $39 + 0.1818357216161805;
 $41 = $33 * $40;
 $42 = $41 + 0.28571428743662391;
 $43 = $33 * $42;
 $44 = $43 + 0.66666666666667351;
 $45 = $32 * $44;
 $46 = $38 + $45;
 $47 = $27 - $29;
 HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
 $49 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
 $51 = $27 - $50;
 $52 = $51 - $29;
 $53 = $29 + $46;
 $54 = $31 * $53;
 $55 = $54 + $52;
 $56 = $50 * 1.4426950407214463;
 $57 = $50 + $55;
 $58 = $57 * 1.6751713164886512E-10;
 $59 = $55 * 1.4426950407214463;
 $60 = $59 + $58;
 $61 = (+($22|0));
 $62 = $61 + $56;
 $63 = $61 - $62;
 $64 = $56 + $63;
 $65 = $64 + $60;
 $66 = $62 + $65;
 $$0 = $66;
 return (+$$0);
}
function _modf($x,$iptr) {
 $x = +$x;
 $iptr = $iptr|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = (($4) + -1023)|0;
 $6 = ($5|0)>(51);
 if ($6) {
  HEAPF64[$iptr>>3] = $x;
  $7 = ($5|0)!=(1024);
  $8 = $1 & 1048575;
  $9 = ($0|0)==(0);
  $10 = ($8|0)==(0);
  $11 = $9 & $10;
  $or$cond = $7 | $11;
  if (!($or$cond)) {
   $$0 = $x;
   return (+$$0);
  }
  $12 = $1 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 $14 = ($5|0)<(0);
 if ($14) {
  $15 = $1 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  HEAPF64[$iptr>>3] = $16;
  $$0 = $x;
  return (+$$0);
 }
 $17 = (_bitshift64Lshr(-1,1048575,($5|0))|0);
 $18 = tempRet0;
 $19 = $17 & $0;
 $20 = $18 & $1;
 $21 = ($19|0)==(0);
 $22 = ($20|0)==(0);
 $23 = $21 & $22;
 if ($23) {
  HEAPF64[$iptr>>3] = $x;
  $24 = $1 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $25;
  return (+$$0);
 } else {
  $26 = $17 ^ -1;
  $27 = $18 ^ -1;
  $28 = $0 & $26;
  $29 = $1 & $27;
  HEAP32[tempDoublePtr>>2] = $28;HEAP32[tempDoublePtr+4>>2] = $29;$30 = +HEAPF64[tempDoublePtr>>3];
  HEAPF64[$iptr>>3] = $30;
  $31 = $x - $30;
  $$0 = $31;
  return (+$$0);
 }
 return +(0.0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 15768;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 15768;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 15768;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=16344+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$12 = 0, $$lcssa = 0, $$lcssa4 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa4 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa4>>0]|0;
  $$1$ph = $$lcssa4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  return ($22|0);
 }
 $$12 = $$1$ph;$n$03 = 0;
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $n$0$lcssa = $$lcssa;
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 return ($22|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0, $s$15 = 0, $s$2 = 0, $s$2$ph = 0;
 var $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa47 = $8;$$lcssa48 = $9;$$lcssa49 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa48;$$lcssa = $$lcssa49;$s$0$lcssa = $$lcssa47;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 if ($18) {
  $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
  while(1) {
   $19 = HEAP32[$w$011>>2]|0;
   $20 = $19 ^ $17;
   $21 = (($20) + -16843009)|0;
   $22 = $20 & -2139062144;
   $23 = $22 ^ -2139062144;
   $24 = $23 & $21;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$1$lcssa$ph = $$110;$w$0$lcssa$ph = $w$011;
    break;
   }
   $26 = (($w$011) + 4|0);
   $27 = (($$110) + -4)|0;
   $28 = ($27>>>0)>(3);
   if ($28) {
    $$110 = $27;$w$011 = $26;
   } else {
    $$1$lcssa$ph = $27;$w$0$lcssa$ph = $26;
    break;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;$w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
 }
 $29 = ($$1$lcssa|0)==(0);
 if ($29) {
  $$3 = 0;$s$2 = $w$0$lcssa;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa10 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa10&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa2 = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa10 = $7;$$lcssa9 = $6;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
  $$lcssa = $$lcssa9;$$lcssa2 = $$lcssa10;
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $13 = 0;$r$0$lcssa = $_r;
 } else {
  $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
  while(1) {
   $$08 = (($$08$in) + -1)|0;
   $3 = HEAP8[$r$07>>0]|0;
   $4 = ($3<<24>>24)!=(0);
   $5 = ($$08|0)!=(0);
   $or$cond = $4 & $5;
   $7 = ($6<<24>>24)==($3<<24>>24);
   $or$cond4 = $or$cond & $7;
   if (!($or$cond4)) {
    $$ph = $6;$r$0$lcssa$ph = $r$07;
    break;
   }
   $8 = (($l$06) + 1|0);
   $9 = (($r$07) + 1|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph = 0;$r$0$lcssa$ph = $9;
    break;
   } else {
    $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
   }
  }
  $13 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
 }
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((15216 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((15688 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((15216 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((15216 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((15216 + 24|0))>>2] = $36;
  HEAP32[((15216 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((15216 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((15216 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((15216 + 8|0))>>2] = $storemerge21;
  HEAP32[((15216 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((15216 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[15216>>2]|0;
    $88 = $87 & $86;
    HEAP32[15216>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((15216 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((15216 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((15216 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((15216 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((15216 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((15216 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa64 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0;
 var $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((15216 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((15216 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((15216 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((15216 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[15216>>2]|0;
     $32 = $31 & $30;
     HEAP32[15216>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((15216 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((15216 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((15216 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((15216 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((15216 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((15216 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((15216 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((15216 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((15216 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((15216 + 12|0))>>2] = $115;
   HEAP32[((15216 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((15216 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((15216 + 20|0))>>2] = 0;
   HEAP32[((15216 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((15216 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((15216 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((15216 + 8|0))>>2] = $123;
   HEAP32[((15216 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((15216 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[15216>>2]|0;
     $146 = $145 & $144;
     HEAP32[15216>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((15216 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((15216 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((15216 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((15216 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((15216 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((15216 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((15216 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((15216 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((15216 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[15216>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[15216>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((15216 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((15216 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((15216 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((15216 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((15216 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((15216 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa64 = $287;
     label = 134;
     break;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa64;
    break;
   }
   $294 = HEAP32[((15216 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((15216 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph287 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0;
 var $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$100 = 0, $$12$i = 0;
 var $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0;
 var $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be288 = 0, $$fl$4 = 0;
 var $$l10n$0 = 0, $$lcssa = 0, $$lcssa283$i = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa305 = 0, $$lcssa306 = 0, $$lcssa307 = 0, $$lcssa308 = 0, $$lcssa309 = 0, $$lcssa310 = 0;
 var $$lcssa311 = 0, $$lcssa313 = 0, $$lcssa314 = 0, $$lcssa315 = 0, $$lcssa316 = 0, $$lcssa317 = 0, $$lcssa318 = 0, $$lcssa319 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa324 = 0.0, $$lcssa325 = 0, $$lcssa327 = 0, $$lcssa328 = 0, $$lcssa330 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$mask$i = 0;
 var $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre270 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0;
 var $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $124$phi = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0;
 var $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0;
 var $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $579$phi = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $879$phi = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0;
 var $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0;
 var $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0;
 var $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0;
 var $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0;
 var $exitcond$i = 0, $fl$0115 = 0, $fl$0115$ph = 0, $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt88$lcssa = 0, $fmt88$lcssa$ph = 0, $fmt88167 = 0, $fmt89 = 0, $fmt89$lcssa = 0, $fmt89$lcssa290 = 0, $fmt90 = 0, $fmt90$be = 0, $fmt91 = 0, $fmt93 = 0, $fmt93$lcssa294 = 0;
 var $fmt94 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1191 = 0, $i$1230$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2217$i = 0, $i$3164 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0;
 var $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0;
 var $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0;
 var $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond279 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0;
 var $p$2$ = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0;
 var $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0;
 var $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa295 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8113$ph = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0168 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1039 = 0;$1040 = 0;$cnt$0 = 0;$fmt90 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt90>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 426;
   break;
  }
  $1041 = $22;$fmt89 = $fmt90;
  while(1) {
   if ((($1041<<24>>24) == 37)) {
    $fmt89$lcssa = $fmt89;
    label = 9;
    break;
   } else if ((($1041<<24>>24) == 0)) {
    $fmt89$lcssa290 = $fmt89;
    label = 14;
    break;
   }
   $24 = (($fmt89) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1041 = $$pre;$fmt89 = $24;
  }
  if ((label|0) == 9) {
   label = 0;
   $fmt88167 = $fmt89$lcssa;$z$0168 = $fmt89$lcssa;
   while(1) {
    $25 = (($fmt88167) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(37);
    if (!($27)) {
     $fmt88$lcssa$ph = $fmt88167;$z$0$lcssa$ph = $z$0168;
     break;
    }
    $28 = (($z$0168) + 1|0);
    $29 = (($fmt88167) + 2|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==(37);
    if ($31) {
     $fmt88167 = $29;$z$0168 = $28;
    } else {
     $fmt88$lcssa$ph = $29;$z$0$lcssa$ph = $28;
     break;
    }
   }
   $fmt88$lcssa = $fmt88$lcssa$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $fmt88$lcssa = $fmt89$lcssa290;$z$0$lcssa = $fmt89$lcssa290;
  }
  $32 = $z$0$lcssa;
  $33 = $fmt90;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt90,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt90|0);
  L24: do {
   if ($35) {
    $36 = (($fmt88$lcssa) + 1|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $isdigittmp = (($38) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $39 = (($fmt88$lcssa) + 2|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(36);
     $42 = (($fmt88$lcssa) + 3|0);
     $$100 = $41 ? $42 : $36;
     $$l10n$0 = $41 ? 1 : $l10n$0;
     $isdigittmp$ = $41 ? $isdigittmp : -1;
     $$pre269 = HEAP8[$$100>>0]|0;
     $44 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
    } else {
     $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
    }
    $43 = $44 << 24 >> 24;
    $45 = $43 & -32;
    $46 = ($45|0)==(32);
    if ($46) {
     $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
     while(1) {
      $47 = (($48) + -32)|0;
      $49 = 1 << $47;
      $50 = $49 & 75913;
      $51 = ($50|0)==(0);
      if ($51) {
       $$ph = $53;$fl$0115$ph = $fl$0175;$storemerge8113$ph = $storemerge8174;
       break;
      }
      $52 = $53 << 24 >> 24;
      $54 = (($52) + -32)|0;
      $55 = 1 << $54;
      $56 = $55 | $fl$0175;
      $57 = (($storemerge8174) + 1|0);
      $58 = HEAP8[$57>>0]|0;
      $59 = $58 << 24 >> 24;
      $60 = $59 & -32;
      $61 = ($60|0)==(32);
      if ($61) {
       $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
      } else {
       $$ph = $58;$fl$0115$ph = $56;$storemerge8113$ph = $57;
       break;
      }
     }
     $62 = $$ph;$fl$0115 = $fl$0115$ph;$storemerge8113 = $storemerge8113$ph;
    } else {
     $62 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
    }
    $63 = ($62<<24>>24)==(42);
    do {
     if ($63) {
      $64 = (($storemerge8113) + 1|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $isdigittmp11 = (($66) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $67 = (($storemerge8113) + 2|0);
       $68 = HEAP8[$67>>0]|0;
       $69 = ($68<<24>>24)==(36);
       if ($69) {
        $70 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$70>>2] = 10;
        $71 = HEAP8[$64>>0]|0;
        $72 = $71 << 24 >> 24;
        $73 = (($72) + -48)|0;
        $74 = (($nl_arg) + ($73<<3)|0);
        $75 = $74;
        $76 = $75;
        $77 = HEAP32[$76>>2]|0;
        $78 = (($75) + 4)|0;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($storemerge8113) + 3|0);
        $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $82 = ($l10n$1|0)==(0);
       if (!($82)) {
        $$0$ph287 = -1;
        label = 449;
        break L1;
       }
       if (!($1)) {
        $fl$1 = $fl$0115;$fmt91 = $64;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $83 = HEAP32[$arglist_current>>2]|0;
       $arglist_next = (($arglist_current) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $64;$w$0 = $83;
      }
      $84 = ($w$0|0)<(0);
      if ($84) {
       $85 = $fl$0115 | 8192;
       $86 = (0 - ($w$0))|0;
       $fl$1 = $85;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $86;
      } else {
       $fl$1 = $fl$0115;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $87 = $62 << 24 >> 24;
      $isdigittmp1$i = (($87) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $91 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $88 = ($i$03$i*10)|0;
        $89 = (($88) + ($isdigittmp4$i))|0;
        $90 = (($91) + 1|0);
        $92 = HEAP8[$90>>0]|0;
        $93 = $92 << 24 >> 24;
        $isdigittmp$i = (($93) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $91 = $90;$i$03$i = $89;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa = $89;$$lcssa291 = $90;
         break;
        }
       }
       $94 = ($$lcssa|0)<(0);
       if ($94) {
        $$0$ph287 = -1;
        label = 449;
        break L1;
       } else {
        $fl$1 = $fl$0115;$fmt91 = $$lcssa291;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
       }
      } else {
       $fl$1 = $fl$0115;$fmt91 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $95 = HEAP8[$fmt91>>0]|0;
    $96 = ($95<<24>>24)==(46);
    do {
     if ($96) {
      $97 = (($fmt91) + 1|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = ($98<<24>>24)==(42);
      if (!($99)) {
       $120 = $98 << 24 >> 24;
       $isdigittmp1$i28 = (($120) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $fmt94 = $97;$p$0 = 0;
        break;
       }
       $1042 = $97;$124 = $fmt91;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $121 = ($i$03$i31*10)|0;
        $122 = (($121) + ($isdigittmp4$i30))|0;
        $123 = (($124) + 2|0);
        $125 = HEAP8[$123>>0]|0;
        $126 = $125 << 24 >> 24;
        $isdigittmp$i32 = (($126) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $124$phi = $1042;$1042 = $123;$i$03$i31 = $122;$isdigittmp4$i30 = $isdigittmp$i32;$124 = $124$phi;
        } else {
         $$lcssa292 = $122;$$lcssa293 = $123;
         break;
        }
       }
       $fmt94 = $$lcssa293;$p$0 = $$lcssa292;
       break;
      }
      $100 = (($fmt91) + 2|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp9 = (($102) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $103 = (($fmt91) + 3|0);
       $104 = HEAP8[$103>>0]|0;
       $105 = ($104<<24>>24)==(36);
       if ($105) {
        $106 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$106>>2] = 10;
        $107 = HEAP8[$100>>0]|0;
        $108 = $107 << 24 >> 24;
        $109 = (($108) + -48)|0;
        $110 = (($nl_arg) + ($109<<3)|0);
        $111 = $110;
        $112 = $111;
        $113 = HEAP32[$112>>2]|0;
        $114 = (($111) + 4)|0;
        $115 = $114;
        $116 = HEAP32[$115>>2]|0;
        $117 = (($fmt91) + 4|0);
        $fmt94 = $117;$p$0 = $113;
        break;
       }
      }
      $118 = ($l10n$3|0)==(0);
      if (!($118)) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $119 = HEAP32[$arglist_current2>>2]|0;
       $arglist_next3 = (($arglist_current2) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $fmt94 = $100;$p$0 = $119;
      } else {
       $fmt94 = $100;$p$0 = 0;
      }
     } else {
      $fmt94 = $fmt91;$p$0 = -1;
     }
    } while(0);
    $fmt93 = $fmt94;$st$0 = 0;
    while(1) {
     $127 = HEAP8[$fmt93>>0]|0;
     $128 = $127 << 24 >> 24;
     $129 = (($128) + -65)|0;
     $130 = ($129>>>0)>(57);
     if ($130) {
      label = 448;
      break L1;
     }
     $131 = (($fmt93) + 1|0);
     $132 = ((15776 + (($st$0*58)|0)|0) + ($129)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (($134) + -1)|0;
     $136 = ($135>>>0)<(8);
     if ($136) {
      $fmt93 = $131;$st$0 = $134;
     } else {
      $$lcssa297 = $127;$$lcssa298 = $131;$$lcssa299 = $133;$$lcssa300 = $134;$fmt93$lcssa294 = $fmt93;$st$0$lcssa295 = $st$0;
      break;
     }
    }
    $137 = ($$lcssa299<<24>>24)==(0);
    if ($137) {
     $$0$ph287 = -1;
     label = 449;
     break L1;
    }
    $138 = ($$lcssa299<<24>>24)==(19);
    $139 = ($argpos$0|0)>(-1);
    L74: do {
     if ($138) {
      if ($139) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      } else {
       $1043 = $1039;$1044 = $1040;
       label = 71;
      }
     } else {
      if ($139) {
       $140 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$140>>2] = $$lcssa300;
       $141 = (($nl_arg) + ($argpos$0<<3)|0);
       $142 = $141;
       $143 = $142;
       $144 = HEAP32[$143>>2]|0;
       $145 = (($142) + 4)|0;
       $146 = $145;
       $147 = HEAP32[$146>>2]|0;
       $1043 = $144;$1044 = $147;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph287 = 0;
       label = 449;
       break L1;
      }
      $148 = ($$lcssa299&255)>(20);
      if ($148) {
       $182 = $$lcssa297;$190 = $1039;$217 = $1040;
      } else {
       do {
        switch ($$lcssa300|0) {
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $149 = HEAP32[$arglist_current5>>2]|0;
         $arglist_next6 = (($arglist_current5) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $150 = $149;
         $1045 = $1040;$1046 = $150;
         label = 72;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $154 = HEAP32[$arglist_current11>>2]|0;
         $arglist_next12 = (($arglist_current11) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1045 = 0;$1046 = $154;
         label = 72;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $161 = HEAP32[$arglist_current17>>2]|0;
         $arglist_next18 = (($arglist_current17) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $162 = $161&65535;
         $163 = $162 << 16 >> 16;
         $164 = ($163|0)<(0);
         $165 = $164 << 31 >> 31;
         $sext101 = $161 << 16;
         $166 = $sext101 >> 16;
         $1045 = $165;$1046 = $166;
         label = 72;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $167 = HEAP32[$arglist_current20>>2]|0;
         $arglist_next21 = (($arglist_current20) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $167 & 65535;
         $1045 = 0;$1046 = $$mask1$i38;
         label = 72;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $174 = HEAP32[$arglist_current26>>2]|0;
         $arglist_next27 = (($arglist_current26) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $174 & 255;
         $1045 = 0;$1046 = $$mask$i39;
         label = 72;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next30 = (($arglist_current29) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
         $177 = HEAP32[tempDoublePtr+4>>2]|0;
         $1045 = $177;$1046 = $176;
         label = 72;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $151 = HEAP32[$arglist_current8>>2]|0;
         $arglist_next9 = (($arglist_current8) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $152 = ($151|0)<(0);
         $153 = $152 << 31 >> 31;
         $1045 = $153;$1046 = $151;
         label = 72;
         break L74;
         break;
        }
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $155 = $arglist_current14;
         $156 = $155;
         $157 = HEAP32[$156>>2]|0;
         $158 = (($155) + 4)|0;
         $159 = $158;
         $160 = HEAP32[$159>>2]|0;
         $arglist_next15 = (($arglist_current14) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1045 = $160;$1046 = $157;
         label = 72;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $168 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $169 = $168&255;
         $170 = $169 << 24 >> 24;
         $171 = ($170|0)<(0);
         $172 = $171 << 31 >> 31;
         $sext = $168 << 24;
         $173 = $sext >> 24;
         $1045 = $172;$1046 = $173;
         label = 72;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next33 = (($arglist_current32) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
         $180 = HEAP32[tempDoublePtr+4>>2]|0;
         $1043 = $179;$1044 = $180;
         label = 71;
         break L74;
         break;
        }
        default: {
         $1045 = $1040;$1046 = $1039;
         label = 72;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1045 = $1044;$1046 = $1043;
      label = 72;
     } else {
      $$be = $1043;$$be288 = $1044;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
      break;
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $$pre270 = HEAP8[$fmt93$lcssa294>>0]|0;
     $182 = $$pre270;$190 = $1046;$217 = $1045;
    }
    $181 = $182 << 24 >> 24;
    $183 = ($st$0$lcssa295|0)!=(0);
    $184 = $181 & 15;
    $185 = ($184|0)==(3);
    $or$cond15 = $183 & $185;
    $186 = $181 & -33;
    $t$0 = $or$cond15 ? $186 : $181;
    $187 = $fl$1 & 8192;
    $188 = ($187|0)==(0);
    $189 = $fl$1 & -65537;
    $fl$1$ = $188 ? $fl$1 : $189;
    L98: do {
     switch ($t$0|0) {
     case 110:  {
      switch ($st$0$lcssa295|0) {
      case 0:  {
       $191 = $190;
       HEAP32[$191>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $204 = $190;
       HEAP32[$204>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $202 = $cnt$1&255;
       $203 = $190;
       HEAP8[$203>>0] = $202;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $192 = $190;
       HEAP32[$192>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 3:  {
       $200 = $cnt$1&65535;
       $201 = $190;
       HEAP16[$201>>1] = $200;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 7:  {
       $205 = ($cnt$1|0)<(0);
       $206 = $205 << 31 >> 31;
       $207 = $190;
       $208 = $207;
       $209 = $208;
       HEAP32[$209>>2] = $cnt$1;
       $210 = (($208) + 4)|0;
       $211 = $210;
       HEAP32[$211>>2] = $206;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $193 = ($cnt$1|0)<(0);
       $194 = $193 << 31 >> 31;
       $195 = $190;
       $196 = $195;
       $197 = $196;
       HEAP32[$197>>2] = $cnt$1;
       $198 = (($196) + 4)|0;
       $199 = $198;
       HEAP32[$199>>2] = $194;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 83;
      break;
     }
     case 112:  {
      $212 = ($p$0>>>0)>(8);
      $213 = $212 ? $p$0 : 8;
      $214 = $fl$1$ | 8;
      $fl$3 = $214;$p$1 = $213;$t$1 = 120;
      label = 83;
      break;
     }
     case 111:  {
      $238 = ($190|0)==(0);
      $239 = ($217|0)==(0);
      $240 = $238 & $239;
      if ($240) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$242 = $190;$246 = $217;
       while(1) {
        $241 = $242 & 7;
        $243 = $241 | 48;
        $244 = $243&255;
        $245 = (($$03$i49) + -1|0);
        HEAP8[$245>>0] = $244;
        $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
        $248 = tempRet0;
        $249 = ($247|0)==(0);
        $250 = ($248|0)==(0);
        $251 = $249 & $250;
        if ($251) {
         $$lcssa331 = $245;
         break;
        } else {
         $$03$i49 = $245;$242 = $247;$246 = $248;
        }
       }
       $$0$lcssa$i52 = $$lcssa331;
      }
      $252 = $fl$1$ & 8;
      $253 = ($252|0)==(0);
      $or$cond19 = $253 | $240;
      $$25 = $or$cond19 ? 16240 : ((16240 + 5|0));
      $254 = $or$cond19&1;
      $$26 = $254 ^ 1;
      $292 = $190;$294 = $217;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 105;
      break;
     }
     case 117:  {
      $262 = $217;$264 = $190;$pl$0 = 0;$prefix$0 = 16240;
      label = 97;
      break;
     }
     case 99:  {
      $304 = $190&255;
      HEAP8[$4>>0] = $304;
      $1047 = $190;$1048 = $217;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 16240;$z$2 = $2;
      break;
     }
     case 105: case 100:  {
      $255 = ($217|0)<(0);
      if ($255) {
       $256 = (_i64Subtract(0,0,($190|0),($217|0))|0);
       $257 = tempRet0;
       $262 = $257;$264 = $256;$pl$0 = 1;$prefix$0 = 16240;
       label = 97;
       break L98;
      }
      $258 = $fl$1$ & 2048;
      $259 = ($258|0)==(0);
      if ($259) {
       $260 = $fl$1$ & 1;
       $261 = ($260|0)==(0);
       $$ = $261 ? 16240 : ((16240 + 2|0));
       $262 = $217;$264 = $190;$pl$0 = $260;$prefix$0 = $$;
       label = 97;
      } else {
       $262 = $217;$264 = $190;$pl$0 = 1;$prefix$0 = ((16240 + 1|0));
       label = 97;
      }
      break;
     }
     case 115:  {
      $308 = $190;
      $309 = ($190|0)==(0);
      $$21 = $309 ? 16256 : $308;
      $a$1 = $$21;
      label = 110;
      break;
     }
     case 109:  {
      $305 = (___errno_location()|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (_strerror(($306|0))|0);
      $a$1 = $307;
      label = 110;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $190;
      HEAP32[$5>>2] = 0;
      $1051 = $wc;$1052 = $6;$p$4274 = -1;
      label = 115;
      break;
     }
     case 83:  {
      $316 = $190;
      $317 = ($p$0|0)==(0);
      if ($317) {
       $1053 = $190;$1054 = $316;$i$0$lcssa275 = 0;
       label = 120;
      } else {
       $1051 = $316;$1052 = $190;$p$4274 = $p$0;
       label = 115;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $190;HEAP32[tempDoublePtr+4>>2] = $217;$355 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $356 = ($217|0)<(0);
      if ($356) {
       $357 = -$355;
       $$013$i = $357;$pl$0$i = 1;$prefix$0$i = 16264;
      } else {
       $358 = $fl$1$ & 2048;
       $359 = ($358|0)==(0);
       if ($359) {
        $360 = $fl$1$ & 1;
        $361 = ($360|0)==(0);
        $$$i = $361 ? ((16264 + 1|0)) : ((16264 + 6|0));
        $$013$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
       } else {
        $$013$i = $355;$pl$0$i = 1;$prefix$0$i = ((16264 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$362 = HEAP32[tempDoublePtr>>2]|0;
      $363 = HEAP32[tempDoublePtr+4>>2]|0;
      $364 = $363 & 2146435072;
      $365 = ($364>>>0)<(2146435072);
      $366 = (0)<(0);
      $367 = ($364|0)==(2146435072);
      $368 = $367 & $366;
      $369 = $365 | $368;
      if (!($369)) {
       $370 = $t$0 & 32;
       $371 = ($370|0)!=(0);
       $372 = $371 ? 16288 : 16296;
       $373 = ($$013$i != $$013$i) | (0.0 != 0.0);
       if ($373) {
        $374 = $371 ? 16304 : 16312;
        $pl$1$i = 0;$s1$0$i = $374;
       } else {
        $pl$1$i = $pl$0$i;$s1$0$i = $372;
       }
       $375 = (($pl$1$i) + 3)|0;
       $376 = $fl$1$ & 8192;
       $377 = ($376|0)==(0);
       $378 = ($w$1|0)>($375|0);
       $or$cond$i43$i = $377 & $378;
       if ($or$cond$i43$i) {
        $379 = (($w$1) - ($375))|0;
        $380 = ($379>>>0)>(256);
        $381 = $380 ? 256 : $379;
        _memset(($pad$i|0),32,($381|0))|0;
        $382 = ($379>>>0)>(255);
        if ($382) {
         $$01$i45$i = $379;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $383 = (($$01$i45$i) + -256)|0;
          $384 = ($383>>>0)>(255);
          if ($384) {
           $$01$i45$i = $383;
          } else {
           break;
          }
         }
         $385 = $379 & 255;
         $$0$lcssa$i47$i = $385;
        } else {
         $$0$lcssa$i47$i = $379;
        }
        (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
       }
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       (___fwritex($s1$0$i,3,$f)|0);
       $386 = $fl$1$ & 73728;
       $387 = ($386|0)==(8192);
       $or$cond$i50$i = $387 & $378;
       if ($or$cond$i50$i) {
        $388 = (($w$1) - ($375))|0;
        $389 = ($388>>>0)>(256);
        $390 = $389 ? 256 : $388;
        _memset(($pad$i|0),32,($390|0))|0;
        $391 = ($388>>>0)>(255);
        if ($391) {
         $$01$i52$i = $388;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $392 = (($$01$i52$i) + -256)|0;
          $393 = ($392>>>0)>(255);
          if ($393) {
           $$01$i52$i = $392;
          } else {
           break;
          }
         }
         $394 = $388 & 255;
         $$0$lcssa$i54$i = $394;
        } else {
         $$0$lcssa$i54$i = $388;
        }
        (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
       }
       $w$$i = $378 ? $w$1 : $375;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $395 = (+_frexpl($$013$i,$e2$i));
      $396 = $395 * 2.0;
      $397 = $396 != 0.0;
      if ($397) {
       $398 = HEAP32[$e2$i>>2]|0;
       $399 = (($398) + -1)|0;
       HEAP32[$e2$i>>2] = $399;
      }
      $400 = $t$0 | 32;
      $401 = ($400|0)==(97);
      if ($401) {
       $402 = $t$0 & 32;
       $403 = ($402|0)==(0);
       $404 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $403 ? $prefix$0$i : $404;
       $405 = $pl$0$i | 2;
       $406 = ($p$0>>>0)>(11);
       $407 = (12 - ($p$0))|0;
       $re$0$i = $406 ? 0 : $407;
       $408 = ($re$0$i|0)==(0);
       do {
        if ($408) {
         $$1$i = $396;
        } else {
         $re$1187$i = $re$0$i;$round$0186$i = 8.0;
         while(1) {
          $409 = (($re$1187$i) + -1)|0;
          $410 = $round$0186$i * 16.0;
          $411 = ($409|0)==(0);
          if ($411) {
           $$lcssa324 = $410;
           break;
          } else {
           $re$1187$i = $409;$round$0186$i = $410;
          }
         }
         $412 = HEAP8[$prefix$0$$i>>0]|0;
         $413 = ($412<<24>>24)==(45);
         if ($413) {
          $414 = -$396;
          $415 = $414 - $$lcssa324;
          $416 = $$lcssa324 + $415;
          $417 = -$416;
          $$1$i = $417;
          break;
         } else {
          $418 = $396 + $$lcssa324;
          $419 = $418 - $$lcssa324;
          $$1$i = $419;
          break;
         }
        }
       } while(0);
       $420 = HEAP32[$e2$i>>2]|0;
       $421 = ($420|0)<(0);
       $422 = (0 - ($420))|0;
       $423 = $421 ? $422 : $420;
       $424 = ($423|0)<(0);
       if ($424) {
        $425 = ($423|0)<(0);
        $426 = $425 << 31 >> 31;
        $$05$i$i = $7;$427 = $423;$428 = $426;
        while(1) {
         $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
         $430 = tempRet0;
         $431 = $429 | 48;
         $432 = $431&255;
         $433 = (($$05$i$i) + -1|0);
         HEAP8[$433>>0] = $432;
         $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
         $435 = tempRet0;
         $436 = ($428>>>0)>(9);
         $437 = ($427>>>0)>(4294967295);
         $438 = ($428|0)==(9);
         $439 = $438 & $437;
         $440 = $436 | $439;
         if ($440) {
          $$05$i$i = $433;$427 = $434;$428 = $435;
         } else {
          $$lcssa325 = $433;$1055 = $434;$1056 = $435;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa325;$$01$lcssa$off0$i$i = $1055;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $423;
       }
       $441 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($441) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $442 = (($y$03$i$i>>>0) % 10)&-1;
         $443 = $442 | 48;
         $444 = $443&255;
         $445 = (($$12$i$i) + -1|0);
         HEAP8[$445>>0] = $444;
         $446 = (($y$03$i$i>>>0) / 10)&-1;
         $447 = ($y$03$i$i>>>0)<(10);
         if ($447) {
          $$lcssa327 = $445;
          break;
         } else {
          $$12$i$i = $445;$y$03$i$i = $446;
         }
        }
        $$1$lcssa$i$i = $$lcssa327;
       }
       $448 = ($$1$lcssa$i$i|0)==($7|0);
       if ($448) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $449 = HEAP32[$e2$i>>2]|0;
       $450 = $449 >> 31;
       $451 = $450 & 2;
       $452 = (($451) + 43)|0;
       $453 = $452&255;
       $454 = (($estr$0$i) + -1|0);
       HEAP8[$454>>0] = $453;
       $455 = (($t$0) + 15)|0;
       $456 = $455&255;
       $457 = (($estr$0$i) + -2|0);
       HEAP8[$457>>0] = $456;
       $notrhs$i = ($p$0|0)<(1);
       do {
        if ($notrhs$i) {
         $458 = $fl$1$ & 8;
         $459 = ($458|0)==(0);
         if ($459) {
          $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
          while(1) {
           $460 = (~~(($$2$us$us$i)));
           $461 = (16320 + ($460)|0);
           $462 = HEAP8[$461>>0]|0;
           $463 = $462&255;
           $464 = $463 | $402;
           $465 = $464&255;
           $466 = (($s$0$us$us$i) + 1|0);
           HEAP8[$s$0$us$us$i>>0] = $465;
           $467 = (+($460|0));
           $468 = $$2$us$us$i - $467;
           $469 = $468 * 16.0;
           $470 = $466;
           $471 = (($470) - ($0))|0;
           $472 = ($471|0)!=(1);
           $notlhs$us$us$i = $469 == 0.0;
           $or$cond$i80 = $472 | $notlhs$us$us$i;
           if ($or$cond$i80) {
            $s$1$us$us$i = $466;
           } else {
            $473 = (($s$0$us$us$i) + 2|0);
            HEAP8[$466>>0] = 46;
            $s$1$us$us$i = $473;
           }
           $474 = $469 != 0.0;
           if ($474) {
            $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
           } else {
            $s$1$us$us$i$lcssa = $s$1$us$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$us$i$lcssa;
          break;
         } else {
          $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
          while(1) {
           $475 = (~~(($$2$us$i)));
           $476 = (16320 + ($475)|0);
           $477 = HEAP8[$476>>0]|0;
           $478 = $477&255;
           $479 = $478 | $402;
           $480 = $479&255;
           $481 = (($s$0$us$i) + 1|0);
           HEAP8[$s$0$us$i>>0] = $480;
           $482 = (+($475|0));
           $483 = $$2$us$i - $482;
           $484 = $483 * 16.0;
           $485 = $481;
           $486 = (($485) - ($0))|0;
           $487 = ($486|0)==(1);
           if ($487) {
            $488 = (($s$0$us$i) + 2|0);
            HEAP8[$481>>0] = 46;
            $s$1$us$i = $488;
           } else {
            $s$1$us$i = $481;
           }
           $489 = $484 != 0.0;
           if ($489) {
            $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
           } else {
            $s$1$us$i$lcssa = $s$1$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$i$lcssa;
          break;
         }
        } else {
         $$2$i = $$1$i;$s$0$i = $buf$i;
         while(1) {
          $490 = (~~(($$2$i)));
          $491 = (16320 + ($490)|0);
          $492 = HEAP8[$491>>0]|0;
          $493 = $492&255;
          $494 = $493 | $402;
          $495 = $494&255;
          $496 = (($s$0$i) + 1|0);
          HEAP8[$s$0$i>>0] = $495;
          $497 = (+($490|0));
          $498 = $$2$i - $497;
          $499 = $498 * 16.0;
          $500 = $496;
          $501 = (($500) - ($0))|0;
          $502 = ($501|0)==(1);
          if ($502) {
           $503 = (($s$0$i) + 2|0);
           HEAP8[$496>>0] = 46;
           $s$1$i = $503;
          } else {
           $s$1$i = $496;
          }
          $504 = $499 != 0.0;
          if ($504) {
           $$2$i = $499;$s$0$i = $s$1$i;
          } else {
           $s$1$i$lcssa = $s$1$i;
           break;
          }
         }
         $s$1$lcssa$i = $s$1$i$lcssa;
        }
       } while(0);
       $505 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $506 = (($11) + ($$pre308$i))|0;
       $507 = ($506|0)<($p$0|0);
       $or$cond279 = $505 & $507;
       $508 = $457;
       if ($or$cond279) {
        $509 = (($12) + ($p$0))|0;
        $510 = (($509) - ($508))|0;
        $l$0$i = $510;
       } else {
        $511 = (($10) - ($508))|0;
        $512 = (($511) + ($$pre308$i))|0;
        $l$0$i = $512;
       }
       $513 = (($l$0$i) + ($405))|0;
       $514 = $fl$1$ & 73728;
       $515 = ($514|0)==(0);
       $516 = ($w$1|0)>($513|0);
       $or$cond$i60$i = $515 & $516;
       if ($or$cond$i60$i) {
        $517 = (($w$1) - ($513))|0;
        $518 = ($517>>>0)>(256);
        $519 = $518 ? 256 : $517;
        _memset(($pad$i|0),32,($519|0))|0;
        $520 = ($517>>>0)>(255);
        if ($520) {
         $$01$i62$i = $517;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $521 = (($$01$i62$i) + -256)|0;
          $522 = ($521>>>0)>(255);
          if ($522) {
           $$01$i62$i = $521;
          } else {
           break;
          }
         }
         $523 = $517 & 255;
         $$0$lcssa$i64$i = $523;
        } else {
         $$0$lcssa$i64$i = $517;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$405,$f)|0);
       $524 = ($514|0)==(65536);
       $or$cond$i67$i = $524 & $516;
       if ($or$cond$i67$i) {
        $525 = (($w$1) - ($513))|0;
        $526 = ($525>>>0)>(256);
        $527 = $526 ? 256 : $525;
        _memset(($pad$i|0),48,($527|0))|0;
        $528 = ($525>>>0)>(255);
        if ($528) {
         $$01$i69$i = $525;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $529 = (($$01$i69$i) + -256)|0;
          $530 = ($529>>>0)>(255);
          if ($530) {
           $$01$i69$i = $529;
          } else {
           break;
          }
         }
         $531 = $525 & 255;
         $$0$lcssa$i71$i = $531;
        } else {
         $$0$lcssa$i71$i = $525;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $532 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$532,$f)|0);
       $533 = $457;
       $534 = (($9) - ($533))|0;
       $535 = (($l$0$i) - ($534))|0;
       $536 = (($535) - ($532))|0;
       $537 = ($536|0)>(0);
       if ($537) {
        $538 = ($536>>>0)>(256);
        $539 = $538 ? 256 : $536;
        _memset(($pad$i|0),48,($539|0))|0;
        $540 = ($536>>>0)>(255);
        if ($540) {
         $$01$i75$i = $536;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $541 = (($$01$i75$i) + -256)|0;
          $542 = ($541>>>0)>(255);
          if ($542) {
           $$01$i75$i = $541;
          } else {
           break;
          }
         }
         $543 = $536 & 255;
         $$0$lcssa$i77$i = $543;
        } else {
         $$0$lcssa$i77$i = $536;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($457,$534,$f)|0);
       $544 = ($514|0)==(8192);
       $or$cond$i80$i = $544 & $516;
       if ($or$cond$i80$i) {
        $545 = (($w$1) - ($513))|0;
        $546 = ($545>>>0)>(256);
        $547 = $546 ? 256 : $545;
        _memset(($pad$i|0),32,($547|0))|0;
        $548 = ($545>>>0)>(255);
        if ($548) {
         $$01$i82$i = $545;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $549 = (($$01$i82$i) + -256)|0;
          $550 = ($549>>>0)>(255);
          if ($550) {
           $$01$i82$i = $549;
          } else {
           break;
          }
         }
         $551 = $545 & 255;
         $$0$lcssa$i84$i = $551;
        } else {
         $$0$lcssa$i84$i = $545;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $516 ? $w$1 : $513;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$25$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $552 = ($p$0|0)<(0);
      $$p$i = $552 ? 6 : $p$0;
      if ($397) {
       $553 = $396 * 268435456.0;
       $554 = HEAP32[$e2$i>>2]|0;
       $555 = (($554) + -28)|0;
       HEAP32[$e2$i>>2] = $555;
       $$3$i = $553;$556 = $555;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $396;$556 = $$pre$i;
      }
      $557 = ($556|0)<(0);
      $$39$i = $557 ? $big$i : $13;
      $558 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $559 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $559;
       $560 = (($z$0$i) + 4|0);
       $561 = (+($559>>>0));
       $562 = $$4$i - $561;
       $563 = $562 * 1.0E+9;
       $564 = $563 != 0.0;
       if ($564) {
        $$4$i = $563;$z$0$i = $560;
       } else {
        $$lcssa301 = $560;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $565 = ($$pr$i|0)>(0);
      if ($565) {
       $566 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa301;
       while(1) {
        $567 = ($566|0)>(29);
        $568 = $567 ? 29 : $566;
        $d$0253$i = (($z$1260$i) + -4|0);
        $569 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($569) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $579 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $570 = HEAP32[$d$0255$i>>2]|0;
           $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
           $572 = tempRet0;
           $573 = (_i64Add(($571|0),($572|0),($carry$0254$i|0),0)|0);
           $574 = tempRet0;
           $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
           $576 = tempRet0;
           HEAP32[$d$0255$i>>2] = $575;
           $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
           $578 = tempRet0;
           $d$0$i = (($579) + -8|0);
           $580 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($580) {
            $$lcssa302 = $577;
            break;
           } else {
            $579$phi = $d$0255$i;$carry$0254$i = $577;$d$0255$i = $d$0$i;$579 = $579$phi;
           }
          }
          $581 = ($$lcssa302|0)==(0);
          if ($581) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $582 = (($a$1261$i) + -4|0);
          HEAP32[$582>>2] = $$lcssa302;
          $a$2$ph$i = $582;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $583 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($583)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $584 = (($z$2$i) + -4|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = ($585|0)==(0);
         if ($586) {
          $z$2$i = $584;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $587 = HEAP32[$e2$i>>2]|0;
        $588 = (($587) - ($568))|0;
        HEAP32[$e2$i>>2] = $588;
        $589 = ($588|0)>(0);
        if ($589) {
         $566 = $588;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$lcssa303 = $588;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
         break;
        }
       }
       $$pr154$i = $$lcssa303;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa301;
      }
      $590 = ($$pr154$i|0)<(0);
      do {
       if ($590) {
        $591 = (($$p$i) + 25)|0;
        $592 = (($591|0) / 9)&-1;
        $593 = (($592) + 1)|0;
        $594 = ($400|0)==(102);
        if ($594) {
         $595 = (($$39$i) + ($593<<2)|0);
         $596 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $597 = ($596|0)<(-9);
          $598 = (0 - ($596))|0;
          $$26$us$i = $597 ? 9 : $598;
          $599 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($599) {
            $624 = 1 << $$26$us$i;
            $617 = (($624) + -1)|0;
            $621 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $615 = HEAP32[$d$1241$us$i>>2]|0;
             $616 = $615 & $617;
             $618 = $615 >>> $$26$us$i;
             $619 = (($618) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $619;
             $620 = Math_imul($616, $621)|0;
             $622 = (($d$1241$us$i) + 4|0);
             $623 = ($622>>>0)<($z$3247$us$i>>>0);
             if ($623) {
              $carry3$0242$us$i = $620;$d$1241$us$i = $622;
             } else {
              $$lcssa305 = $620;
              break;
             }
            }
            $603 = HEAP32[$a$3248$us$i>>2]|0;
            $604 = ($603|0)==(0);
            $605 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $604 ? $605 : $a$3248$us$i;
            $606 = ($$lcssa305|0)==(0);
            if ($606) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $607 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa305;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $607;
           } else {
            $600 = HEAP32[$a$3248$us$i>>2]|0;
            $601 = ($600|0)==(0);
            $602 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $601 ? $602 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $608 = $z$4$us$i;
          $609 = (($608) - ($558))|0;
          $610 = $609 >> 2;
          $611 = ($610|0)>($593|0);
          $$z$4$us$i = $611 ? $595 : $z$4$us$i;
          $612 = HEAP32[$e2$i>>2]|0;
          $613 = (($612) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $613;
          $614 = ($613|0)<(0);
          if ($614) {
           $596 = $613;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
           break;
          }
         }
         $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
         break;
        }
        $625 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        while(1) {
         $626 = ($625|0)<(-9);
         $627 = (0 - ($625))|0;
         $$26$i = $626 ? 9 : $627;
         $628 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($628) {
           $632 = 1 << $$26$i;
           $633 = (($632) + -1)|0;
           $634 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $635 = HEAP32[$d$1241$i>>2]|0;
            $636 = $635 & $633;
            $637 = $635 >>> $$26$i;
            $638 = (($637) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $638;
            $639 = Math_imul($636, $634)|0;
            $640 = (($d$1241$i) + 4|0);
            $641 = ($640>>>0)<($z$3247$i>>>0);
            if ($641) {
             $carry3$0242$i = $639;$d$1241$i = $640;
            } else {
             $$lcssa304 = $639;
             break;
            }
           }
           $642 = HEAP32[$a$3248$i>>2]|0;
           $643 = ($642|0)==(0);
           $644 = (($a$3248$i) + 4|0);
           $$a$3$i = $643 ? $644 : $a$3248$i;
           $645 = ($$lcssa304|0)==(0);
           if ($645) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $646 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa304;
           $$a$3312$i = $$a$3$i;$z$4$i = $646;
          } else {
           $629 = HEAP32[$a$3248$i>>2]|0;
           $630 = ($629|0)==(0);
           $631 = (($a$3248$i) + 4|0);
           $$a$3311$i = $630 ? $631 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $647 = $z$4$i;
         $648 = $$a$3312$i;
         $649 = (($647) - ($648))|0;
         $650 = $649 >> 2;
         $651 = ($650|0)>($593|0);
         if ($651) {
          $652 = (($$a$3312$i) + ($593<<2)|0);
          $z$5$i = $652;
         } else {
          $z$5$i = $z$4$i;
         }
         $653 = HEAP32[$e2$i>>2]|0;
         $654 = (($653) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $654;
         $655 = ($654|0)<(0);
         if ($655) {
          $625 = $654;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
          break;
         }
        }
        $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $656 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($656) {
        $657 = $a$3$lcssa$i;
        $658 = (($558) - ($657))|0;
        $659 = $658 >> 2;
        $660 = ($659*9)|0;
        $661 = HEAP32[$a$3$lcssa$i>>2]|0;
        $662 = ($661>>>0)<(10);
        if ($662) {
         $e$1$i = $660;
         break;
        }
        $e$0237$i = $660;$i$0236$i = 10;
        while(1) {
         $663 = ($i$0236$i*10)|0;
         $664 = (($e$0237$i) + 1)|0;
         $665 = ($661>>>0)<($663>>>0);
         if ($665) {
          $$lcssa306 = $664;
          break;
         } else {
          $e$0237$i = $664;$i$0236$i = $663;
         }
        }
        $e$1$i = $$lcssa306;
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $666 = ($400|0)!=(102);
      $667 = $666 ? $e$1$i : 0;
      $668 = (($$p$i) - ($667))|0;
      $669 = ($400|0)==(103);
      $670 = ($$p$i|0)!=(0);
      $$27$i = $669 & $670;
      $$neg159$i = $$27$i << 31 >> 31;
      $671 = (($668) + ($$neg159$i))|0;
      $672 = $z$3$lcssa$i;
      $673 = (($672) - ($558))|0;
      $674 = $673 >> 2;
      $675 = ($674*9)|0;
      $676 = (($675) + -9)|0;
      $677 = ($671|0)<($676|0);
      if ($677) {
       $678 = (($671) + 9216)|0;
       $679 = (($678|0) / 9)&-1;
       $$sum$i = (($679) + -1023)|0;
       $680 = (($$39$i) + ($$sum$i<<2)|0);
       $681 = (($678|0) % 9)&-1;
       $j$0229$i = (($681) + 1)|0;
       $682 = ($j$0229$i|0)<(9);
       if ($682) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $683 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $$lcssa307 = $683;
          break;
         } else {
          $i$1230$i = $683;$j$0231$i = $j$0$i;
         }
        }
        $i$1$lcssa$i = $$lcssa307;
       } else {
        $i$1$lcssa$i = 10;
       }
       $684 = HEAP32[$680>>2]|0;
       $685 = (($684>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $686 = ($685|0)==(0);
       if ($686) {
        $$sum21$i = (($679) + -1022)|0;
        $687 = (($$39$i) + ($$sum21$i<<2)|0);
        $688 = ($687|0)==($z$3$lcssa$i|0);
        if ($688) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
        } else {
         label = 275;
        }
       } else {
        label = 275;
       }
       do {
        if ((label|0) == 275) {
         label = 0;
         $689 = (($684>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $690 = $689 & 1;
         $691 = ($690|0)==(0);
         $$28$i = $691 ? 9007199254740992.0 : 9007199254740994.0;
         $692 = (($i$1$lcssa$i|0) / 2)&-1;
         $693 = ($685>>>0)<($692>>>0);
         do {
          if ($693) {
           $small$0$i = 0.5;
          } else {
           $694 = ($685|0)==($692|0);
           if ($694) {
            $$sum22$i = (($679) + -1022)|0;
            $695 = (($$39$i) + ($$sum22$i<<2)|0);
            $696 = ($695|0)==($z$3$lcssa$i|0);
            if ($696) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $697 = ($pl$0$i|0)==(0);
         do {
          if ($697) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $698 = HEAP8[$prefix$0$i>>0]|0;
           $699 = ($698<<24>>24)==(45);
           if (!($699)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $700 = -$$28$i;
           $701 = -$small$0$i;
           $round6$1$i = $700;$small$1$i = $701;
          }
         } while(0);
         $702 = (($684) - ($685))|0;
         HEAP32[$680>>2] = $702;
         $703 = $round6$1$i + $small$1$i;
         $704 = $703 != $round6$1$i;
         if (!($704)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
          break;
         }
         $705 = (($702) + ($i$1$lcssa$i))|0;
         HEAP32[$680>>2] = $705;
         $706 = ($705>>>0)>(999999999);
         if ($706) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $680;
          while(1) {
           $707 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $708 = ($707>>>0)<($a$5223$i>>>0);
           if ($708) {
            $709 = (($a$5223$i) + -4|0);
            HEAP32[$709>>2] = 0;
            $a$6$i = $709;
           } else {
            $a$6$i = $a$5223$i;
           }
           $710 = HEAP32[$707>>2]|0;
           $711 = (($710) + 1)|0;
           HEAP32[$707>>2] = $711;
           $712 = ($711>>>0)>(999999999);
           if ($712) {
            $a$5223$i = $a$6$i;$d$2222$i = $707;
           } else {
            $$lcssa308 = $707;$a$6$i$lcssa = $a$6$i;
            break;
           }
          }
          $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa308;
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $680;
         }
         $713 = $a$5$lcssa$i;
         $714 = (($558) - ($713))|0;
         $715 = $714 >> 2;
         $716 = ($715*9)|0;
         $717 = HEAP32[$a$5$lcssa$i>>2]|0;
         $718 = ($717>>>0)<(10);
         if ($718) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $716;
          break;
         }
         $e$2218$i = $716;$i$2217$i = 10;
         while(1) {
          $719 = ($i$2217$i*10)|0;
          $720 = (($e$2218$i) + 1)|0;
          $721 = ($717>>>0)<($719>>>0);
          if ($721) {
           $$lcssa309 = $720;
           break;
          } else {
           $e$2218$i = $720;$i$2217$i = $719;
          }
         }
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa309;
        }
       } while(0);
       $722 = (($d$3$i) + 4|0);
       $723 = ($z$3$lcssa$i>>>0)>($722>>>0);
       $$z$3$i = $723 ? $722 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $724 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $725 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($725)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $726 = (($z$6$i) + -4|0);
       $727 = HEAP32[$726>>2]|0;
       $728 = ($727|0)==(0);
       if ($728) {
        $z$6$i = $726;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($669) {
        $729 = ($$p$i|0)==(0);
        $730 = $729&1;
        $$$p$i = (($730) + ($$p$i))|0;
        $731 = ($$$p$i|0)>($e$4$ph$i|0);
        $732 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $731 & $732;
        if ($or$cond6$i) {
         $733 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $734 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $733;$$216$i = $734;
        } else {
         $735 = (($t$0) + -2)|0;
         $736 = (($$$p$i) + -1)|0;
         $$019$i = $735;$$216$i = $736;
        }
        $737 = $fl$1$ & 8;
        $738 = ($737|0)==(0);
        if (!($738)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $739 = (($z$6$i$lcssa) + -4|0);
          $740 = HEAP32[$739>>2]|0;
          $741 = ($740|0)==(0);
          if ($741) {
           $j$2$i = 9;
           break;
          }
          $742 = (($740>>>0) % 10)&-1;
          $743 = ($742|0)==(0);
          if (!($743)) {
           $j$2$i = 0;
           break;
          }
          $i$3213$i = 10;$j$1214$i = 0;
          while(1) {
           $744 = ($i$3213$i*10)|0;
           $745 = (($j$1214$i) + 1)|0;
           $746 = (($740>>>0) % ($744>>>0))&-1;
           $747 = ($746|0)==(0);
           if ($747) {
            $i$3213$i = $744;$j$1214$i = $745;
           } else {
            $$lcssa310 = $745;
            break;
           }
          }
          $j$2$i = $$lcssa310;
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $748 = $$019$i | 32;
        $749 = ($748|0)==(102);
        $750 = $z$6$i$lcssa;
        $751 = (($750) - ($558))|0;
        $752 = $751 >> 2;
        $753 = ($752*9)|0;
        $754 = (($753) + -9)|0;
        if ($749) {
         $755 = (($754) - ($j$2$i))|0;
         $756 = ($755|0)<(0);
         $$29$i = $756 ? 0 : $755;
         $757 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $757 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $758 = (($754) + ($e$4$ph$i))|0;
         $759 = (($758) - ($j$2$i))|0;
         $760 = ($759|0)<(0);
         $$31$i = $760 ? 0 : $759;
         $761 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $761 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $762 = ($$317$i|0)!=(0);
      if ($762) {
       $766 = 1;
      } else {
       $763 = $fl$1$ & 8;
       $764 = ($763|0)!=(0);
       $766 = $764;
      }
      $765 = $766&1;
      $767 = $$120$i | 32;
      $768 = ($767|0)==(102);
      if ($768) {
       $769 = ($e$4$ph$i|0)>(0);
       $770 = $769 ? $e$4$ph$i : 0;
       $$pn$i = $770;$estr$2$i = 0;
      } else {
       $771 = ($e$4$ph$i|0)<(0);
       $772 = $771 ? $724 : $e$4$ph$i;
       $773 = ($772|0)<(0);
       if ($773) {
        $774 = ($772|0)<(0);
        $775 = $774 << 31 >> 31;
        $$05$i87$i = $7;$776 = $772;$777 = $775;
        while(1) {
         $778 = (___uremdi3(($776|0),($777|0),10,0)|0);
         $779 = tempRet0;
         $780 = $778 | 48;
         $781 = $780&255;
         $782 = (($$05$i87$i) + -1|0);
         HEAP8[$782>>0] = $781;
         $783 = (___udivdi3(($776|0),($777|0),10,0)|0);
         $784 = tempRet0;
         $785 = ($777>>>0)>(9);
         $786 = ($776>>>0)>(4294967295);
         $787 = ($777|0)==(9);
         $788 = $787 & $786;
         $789 = $785 | $788;
         if ($789) {
          $$05$i87$i = $782;$776 = $783;$777 = $784;
         } else {
          $$lcssa311 = $782;$1057 = $783;$1058 = $784;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa311;$$01$lcssa$off0$i93$i = $1057;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $772;
       }
       $790 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($790) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $791 = (($y$03$i94$i>>>0) % 10)&-1;
         $792 = $791 | 48;
         $793 = $792&255;
         $794 = (($$12$i95$i) + -1|0);
         HEAP8[$794>>0] = $793;
         $795 = (($y$03$i94$i>>>0) / 10)&-1;
         $796 = ($y$03$i94$i>>>0)<(10);
         if ($796) {
          $$lcssa313 = $794;
          break;
         } else {
          $$12$i95$i = $794;$y$03$i94$i = $795;
         }
        }
        $estr$1$ph$i = $$lcssa313;
       }
       $797 = $estr$1$ph$i;
       $798 = (($9) - ($797))|0;
       $799 = ($798|0)<(2);
       if ($799) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $800 = (($estr$1209$i) + -1|0);
         HEAP8[$800>>0] = 48;
         $801 = $800;
         $802 = (($9) - ($801))|0;
         $803 = ($802|0)<(2);
         if ($803) {
          $estr$1209$i = $800;
         } else {
          $$lcssa314 = $800;
          break;
         }
        }
        $estr$1$lcssa$i = $$lcssa314;
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $804 = $e$4$ph$i >> 31;
       $805 = $804 & 2;
       $806 = (($805) + 43)|0;
       $807 = $806&255;
       $808 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$808>>0] = $807;
       $809 = $$120$i&255;
       $810 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$810>>0] = $809;
       $811 = $810;
       $812 = (($9) - ($811))|0;
       $$pn$i = $812;$estr$2$i = $810;
      }
      $813 = (($pl$0$i) + 1)|0;
      $814 = (($813) + ($$317$i))|0;
      $l$1$i = (($814) + ($765))|0;
      $815 = (($l$1$i) + ($$pn$i))|0;
      $816 = $fl$1$ & 73728;
      $817 = ($816|0)==(0);
      $818 = ($w$1|0)>($815|0);
      $or$cond$i101$i = $817 & $818;
      if ($or$cond$i101$i) {
       $819 = (($w$1) - ($815))|0;
       $820 = ($819>>>0)>(256);
       $821 = $820 ? 256 : $819;
       _memset(($pad$i|0),32,($821|0))|0;
       $822 = ($819>>>0)>(255);
       if ($822) {
        $$01$i103$i = $819;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $823 = (($$01$i103$i) + -256)|0;
         $824 = ($823>>>0)>(255);
         if ($824) {
          $$01$i103$i = $823;
         } else {
          break;
         }
        }
        $825 = $819 & 255;
        $$0$lcssa$i105$i = $825;
       } else {
        $$0$lcssa$i105$i = $819;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $826 = ($816|0)==(65536);
      $or$cond$i108$i = $826 & $818;
      if ($or$cond$i108$i) {
       $827 = (($w$1) - ($815))|0;
       $828 = ($827>>>0)>(256);
       $829 = $828 ? 256 : $827;
       _memset(($pad$i|0),48,($829|0))|0;
       $830 = ($827>>>0)>(255);
       if ($830) {
        $$01$i110$i = $827;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $831 = (($$01$i110$i) + -256)|0;
         $832 = ($831>>>0)>(255);
         if ($832) {
          $$01$i110$i = $831;
         } else {
          break;
         }
        }
        $833 = $827 & 255;
        $$0$lcssa$i112$i = $833;
       } else {
        $$0$lcssa$i112$i = $827;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      do {
       if ($768) {
        $834 = ($a$8$ph$i>>>0)>($$39$i>>>0);
        $r$0$a$8$i = $834 ? $$39$i : $a$8$ph$i;
        $835 = $558 ^ -1;
        $836 = $a$8$ph294$i ^ -1;
        $837 = ($835>>>0)>($836>>>0);
        $umax$i = $837 ? $835 : $836;
        $838 = (3 - ($umax$i))|0;
        $uglygep$i = (($$39$i) + 1|0);
        $uglygep296$i = $uglygep$i;
        $839 = ($838>>>0)>($uglygep296$i>>>0);
        $umax297$i = $839 ? $838 : $uglygep296$i;
        $umax297298299$i = $umax297$i;
        $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
        $uglygep300301$i = $uglygep300$i;
        $840 = $umax$i ^ -1;
        $d$4199$i = $r$0$a$8$i;
        while(1) {
         $841 = HEAP32[$d$4199$i>>2]|0;
         $842 = ($841|0)==(0);
         if ($842) {
          $$1$lcssa$i120$i = $14;
         } else {
          $$12$i118$i = $14;$y$03$i117$i = $841;
          while(1) {
           $843 = (($y$03$i117$i>>>0) % 10)&-1;
           $844 = $843 | 48;
           $845 = $844&255;
           $846 = (($$12$i118$i) + -1|0);
           HEAP8[$846>>0] = $845;
           $847 = (($y$03$i117$i>>>0) / 10)&-1;
           $848 = ($y$03$i117$i>>>0)<(10);
           if ($848) {
            $$lcssa318 = $846;
            break;
           } else {
            $$12$i118$i = $846;$y$03$i117$i = $847;
           }
          }
          $$1$lcssa$i120$i = $$lcssa318;
         }
         $849 = ($d$4199$i|0)==($r$0$a$8$i|0);
         do {
          if ($849) {
           $853 = ($$1$lcssa$i120$i|0)==($14|0);
           if (!($853)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $850 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
           if (!($850)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           $s7$0196$i = $$1$lcssa$i120$i;
           while(1) {
            $851 = (($s7$0196$i) + -1|0);
            HEAP8[$851>>0] = 48;
            $852 = ($851>>>0)>($buf$i>>>0);
            if ($852) {
             $s7$0196$i = $851;
            } else {
             $$lcssa319 = $851;
             break;
            }
           }
           $s7$1$i = $$lcssa319;
          }
         } while(0);
         $854 = $s7$1$i;
         $855 = (($15) - ($854))|0;
         (___fwritex($s7$1$i,$855,$f)|0);
         $856 = (($d$4199$i) + 4|0);
         $857 = ($856>>>0)>($$39$i>>>0);
         if ($857) {
          $$lcssa320 = $856;
          break;
         } else {
          $d$4199$i = $856;
         }
        }
        $858 = $uglygep300301$i & -4;
        $859 = (($858) + ($840))|0;
        $860 = $859;
        $$not$i = $762 ^ 1;
        $861 = $fl$1$ & 8;
        $862 = ($861|0)==(0);
        $or$cond35$i = $862 & $$not$i;
        if (!($or$cond35$i)) {
         (___fwritex(16336,1,$f)|0);
        }
        $863 = ($$lcssa320>>>0)<($z$6$i$lcssa>>>0);
        $864 = ($$317$i|0)>(0);
        $or$cond10191$i = $863 & $864;
        if ($or$cond10191$i) {
         $$418193$i = $$317$i;$879 = $860;$d$5192$i = $$lcssa320;
         while(1) {
          $865 = HEAP32[$d$5192$i>>2]|0;
          $866 = ($865|0)==(0);
          if ($866) {
           $s8$0188$i$ph = $14;
           label = 362;
          } else {
           $$12$i127$i = $14;$y$03$i126$i = $865;
           while(1) {
            $867 = (($y$03$i126$i>>>0) % 10)&-1;
            $868 = $867 | 48;
            $869 = $868&255;
            $870 = (($$12$i127$i) + -1|0);
            HEAP8[$870>>0] = $869;
            $871 = (($y$03$i126$i>>>0) / 10)&-1;
            $872 = ($y$03$i126$i>>>0)<(10);
            if ($872) {
             $$lcssa321 = $870;
             break;
            } else {
             $$12$i127$i = $870;$y$03$i126$i = $871;
            }
           }
           $873 = ($$lcssa321>>>0)>($buf$i>>>0);
           if ($873) {
            $s8$0188$i$ph = $$lcssa321;
            label = 362;
           } else {
            $s8$0$lcssa$i = $$lcssa321;
           }
          }
          if ((label|0) == 362) {
           label = 0;
           $s8$0188$i = $s8$0188$i$ph;
           while(1) {
            $874 = (($s8$0188$i) + -1|0);
            HEAP8[$874>>0] = 48;
            $875 = ($874>>>0)>($buf$i>>>0);
            if ($875) {
             $s8$0188$i = $874;
            } else {
             $$lcssa322 = $874;
             break;
            }
           }
           $s8$0$lcssa$i = $$lcssa322;
          }
          $876 = ($$418193$i|0)>(9);
          $877 = $876 ? 9 : $$418193$i;
          (___fwritex($s8$0$lcssa$i,$877,$f)|0);
          $878 = (($879) + 8|0);
          $880 = (($$418193$i) + -9)|0;
          $881 = ($878>>>0)<($z$6$i$lcssa>>>0);
          $882 = ($880|0)>(0);
          $or$cond10$i = $881 & $882;
          if ($or$cond10$i) {
           $879$phi = $d$5192$i;$$418193$i = $880;$d$5192$i = $878;$879 = $879$phi;
          } else {
           $$lcssa323 = $880;
           break;
          }
         }
         $$418$lcssa$i = $$lcssa323;
        } else {
         $$418$lcssa$i = $$317$i;
        }
        $883 = ($$418$lcssa$i|0)>(0);
        if (!($883)) {
         break;
        }
        $884 = ($$418$lcssa$i>>>0)>(256);
        $885 = $884 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($885|0))|0;
        $886 = ($$418$lcssa$i>>>0)>(255);
        if ($886) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $887 = (($$01$i134$i) + -256)|0;
          $888 = ($887>>>0)>(255);
          if ($888) {
           $$01$i134$i = $887;
          } else {
           break;
          }
         }
         $889 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $889;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       } else {
        $890 = (($a$8$ph$i) + 4|0);
        $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $890;
        $891 = ($$317$i|0)>(-1);
        do {
         if ($891) {
          $892 = $fl$1$ & 8;
          $893 = ($892|0)==(0);
          $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
          while(1) {
           $894 = HEAP32[$d$6204$i>>2]|0;
           $895 = ($894|0)==(0);
           if ($895) {
            label = 379;
           } else {
            $$12$i142$i = $14;$y$03$i141$i = $894;
            while(1) {
             $896 = (($y$03$i141$i>>>0) % 10)&-1;
             $897 = $896 | 48;
             $898 = $897&255;
             $899 = (($$12$i142$i) + -1|0);
             HEAP8[$899>>0] = $898;
             $900 = (($y$03$i141$i>>>0) / 10)&-1;
             $901 = ($y$03$i141$i>>>0)<(10);
             if ($901) {
              $$12$i142$i$lcssa = $$12$i142$i;$$lcssa315 = $899;
              break;
             } else {
              $$12$i142$i = $899;$y$03$i141$i = $900;
             }
            }
            $902 = ($$lcssa315|0)==($14|0);
            if ($902) {
             label = 379;
            } else {
             $1059 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa315;
            }
           }
           if ((label|0) == 379) {
            label = 0;
            HEAP8[$16>>0] = 48;
            $1059 = $14;$s9$0$i = $16;
           }
           $903 = ($d$6204$i|0)==($a$8$ph$i|0);
           do {
            if ($903) {
             (___fwritex($s9$0$i,1,$f)|0);
             $907 = ($$5205$i|0)<(1);
             $or$cond37$i = $907 & $893;
             if ($or$cond37$i) {
              $s9$2$i = $1059;
              break;
             }
             (___fwritex(16336,1,$f)|0);
             $s9$2$i = $1059;
            } else {
             $904 = ($s9$0$i>>>0)>($buf$i>>>0);
             if (!($904)) {
              $s9$2$i = $s9$0$i;
              break;
             }
             $s9$1200$i = $s9$0$i;
             while(1) {
              $905 = (($s9$1200$i) + -1|0);
              HEAP8[$905>>0] = 48;
              $906 = ($905>>>0)>($buf$i>>>0);
              if ($906) {
               $s9$1200$i = $905;
              } else {
               $$lcssa316 = $905;
               break;
              }
             }
             $s9$2$i = $$lcssa316;
            }
           } while(0);
           $908 = $s9$2$i;
           $909 = (($15) - ($908))|0;
           $910 = ($$5205$i|0)>($909|0);
           $$$5$i = $910 ? $909 : $$5205$i;
           (___fwritex($s9$2$i,$$$5$i,$f)|0);
           $911 = (($$5205$i) - ($909))|0;
           $912 = (($d$6204$i) + 4|0);
           $913 = ($912>>>0)<($z$6$$i>>>0);
           $914 = ($911|0)>(-1);
           $or$cond12$i = $913 & $914;
           if ($or$cond12$i) {
            $$5205$i = $911;$d$6204$i = $912;
           } else {
            $$lcssa317 = $911;
            break;
           }
          }
          $915 = ($$lcssa317|0)>(0);
          if (!($915)) {
           break;
          }
          $916 = ($$lcssa317>>>0)>(256);
          $917 = $916 ? 256 : $$lcssa317;
          _memset(($pad$i|0),48,($917|0))|0;
          $918 = ($$lcssa317>>>0)>(255);
          if ($918) {
           $$01$i149$i = $$lcssa317;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $919 = (($$01$i149$i) + -256)|0;
            $920 = ($919>>>0)>(255);
            if ($920) {
             $$01$i149$i = $919;
            } else {
             break;
            }
           }
           $921 = $$lcssa317 & 255;
           $$0$lcssa$i151$i = $921;
          } else {
           $$0$lcssa$i151$i = $$lcssa317;
          }
          (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
         }
        } while(0);
        $922 = $estr$2$i;
        $923 = (($9) - ($922))|0;
        (___fwritex($estr$2$i,$923,$f)|0);
       }
      } while(0);
      $924 = ($816|0)==(8192);
      $or$cond$i$i = $924 & $818;
      if ($or$cond$i$i) {
       $925 = (($w$1) - ($815))|0;
       $926 = ($925>>>0)>(256);
       $927 = $926 ? 256 : $925;
       _memset(($pad$i|0),32,($927|0))|0;
       $928 = ($925>>>0)>(255);
       if ($928) {
        $$01$i$i = $925;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $929 = (($$01$i$i) + -256)|0;
         $930 = ($929>>>0)>(255);
         if ($930) {
          $$01$i$i = $929;
         } else {
          break;
         }
        }
        $931 = $925 & 255;
        $$0$lcssa$i$i = $931;
       } else {
        $$0$lcssa$i$i = $925;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $818 ? $w$1 : $815;
      $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$38$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     default: {
      $1047 = $190;$1048 = $217;$a$2 = $fmt90;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 16240;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 83) {
      label = 0;
      $215 = $t$1 & 32;
      $216 = ($190|0)==(0);
      $218 = ($217|0)==(0);
      $219 = $216 & $218;
      if ($219) {
       $292 = $190;$294 = $217;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 16240;
       label = 105;
      } else {
       $$012$i = $2;$221 = $190;$228 = $217;
       while(1) {
        $220 = $221 & 15;
        $222 = (16320 + ($220)|0);
        $223 = HEAP8[$222>>0]|0;
        $224 = $223&255;
        $225 = $224 | $215;
        $226 = $225&255;
        $227 = (($$012$i) + -1|0);
        HEAP8[$227>>0] = $226;
        $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
        $230 = tempRet0;
        $231 = ($229|0)==(0);
        $232 = ($230|0)==(0);
        $233 = $231 & $232;
        if ($233) {
         $$lcssa332 = $227;
         break;
        } else {
         $$012$i = $227;$221 = $229;$228 = $230;
        }
       }
       $234 = $fl$3 & 8;
       $235 = ($234|0)==(0);
       if ($235) {
        $292 = $190;$294 = $217;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 16240;
        label = 105;
       } else {
        $236 = $t$1 >> 4;
        $237 = (16240 + ($236)|0);
        $292 = $190;$294 = $217;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
        label = 105;
       }
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $263 = ($262>>>0)>(0);
      $265 = ($264>>>0)>(4294967295);
      $266 = ($262|0)==(0);
      $267 = $266 & $265;
      $268 = $263 | $267;
      if ($268) {
       $$05$i = $2;$269 = $264;$270 = $262;
       while(1) {
        $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
        $272 = tempRet0;
        $273 = $271 | 48;
        $274 = $273&255;
        $275 = (($$05$i) + -1|0);
        HEAP8[$275>>0] = $274;
        $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
        $277 = tempRet0;
        $278 = ($270>>>0)>(9);
        $279 = ($269>>>0)>(4294967295);
        $280 = ($270|0)==(9);
        $281 = $280 & $279;
        $282 = $278 | $281;
        if ($282) {
         $$05$i = $275;$269 = $276;$270 = $277;
        } else {
         $$lcssa328 = $275;$1049 = $276;$1050 = $277;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa328;$$01$lcssa$off0$i = $1049;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $264;
      }
      $283 = ($$01$lcssa$off0$i|0)==(0);
      if ($283) {
       $292 = $264;$294 = $262;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $284 = (($y$03$i>>>0) % 10)&-1;
        $285 = $284 | 48;
        $286 = $285&255;
        $287 = (($$12$i) + -1|0);
        HEAP8[$287>>0] = $286;
        $288 = (($y$03$i>>>0) / 10)&-1;
        $289 = ($y$03$i>>>0)<(10);
        if ($289) {
         $$lcssa330 = $287;
         break;
        } else {
         $$12$i = $287;$y$03$i = $288;
        }
       }
       $292 = $264;$294 = $262;$a$0 = $$lcssa330;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $310 = (_memchr($a$1,0,$p$0)|0);
      $311 = ($310|0)==(0|0);
      if ($311) {
       $312 = (($a$1) + ($p$0)|0);
       $1047 = $190;$1048 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 16240;$z$2 = $312;
       break;
      } else {
       $313 = $310;
       $314 = $a$1;
       $315 = (($313) - ($314))|0;
       $1047 = $190;$1048 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 16240;$z$2 = $310;
       break;
      }
     }
     else if ((label|0) == 115) {
      label = 0;
      $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1051;
      while(1) {
       $318 = HEAP32[$ws$0181>>2]|0;
       $319 = ($318|0)==(0);
       if ($319) {
        $i$0$lcssa = $i$0180;$l$2 = $l$1179;
        break;
       }
       $320 = (_wctomb($mb,$318)|0);
       $321 = ($320|0)<(0);
       $322 = (($p$4274) - ($i$0180))|0;
       $323 = ($320>>>0)>($322>>>0);
       $or$cond23 = $321 | $323;
       if ($or$cond23) {
        $i$0$lcssa = $i$0180;$l$2 = $320;
        break;
       }
       $324 = (($ws$0181) + 4|0);
       $325 = (($320) + ($i$0180))|0;
       $326 = ($p$4274>>>0)>($325>>>0);
       if ($326) {
        $i$0180 = $325;$l$1179 = $320;$ws$0181 = $324;
       } else {
        $i$0$lcssa = $325;$l$2 = $320;
        break;
       }
      }
      $327 = ($l$2|0)<(0);
      if ($327) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      } else {
       $1053 = $1052;$1054 = $1051;$i$0$lcssa275 = $i$0$lcssa;
       label = 120;
      }
     }
    } while(0);
    if ((label|0) == 105) {
     label = 0;
     $290 = ($p$2|0)>(-1);
     $291 = $fl$4 & -65537;
     $$fl$4 = $290 ? $291 : $fl$4;
     $293 = ($292|0)!=(0);
     $295 = ($294|0)!=(0);
     $296 = $293 | $295;
     $297 = ($p$2|0)!=(0);
     $or$cond = $296 | $297;
     if ($or$cond) {
      $298 = $a$0;
      $299 = (($3) - ($298))|0;
      $300 = $296&1;
      $301 = $300 ^ 1;
      $302 = (($301) + ($299))|0;
      $303 = ($p$2|0)>($302|0);
      $p$2$ = $303 ? $p$2 : $302;
      $1047 = $292;$1048 = $294;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1047 = $292;$1048 = $294;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 120) {
     label = 0;
     $328 = $fl$1$ & 73728;
     $329 = ($328|0)==(0);
     $330 = ($w$1|0)>($i$0$lcssa275|0);
     $or$cond$i65 = $329 & $330;
     if ($or$cond$i65) {
      $331 = (($w$1) - ($i$0$lcssa275))|0;
      $332 = ($331>>>0)>(256);
      $333 = $332 ? 256 : $331;
      _memset(($pad$i|0),32,($333|0))|0;
      $334 = ($331>>>0)>(255);
      if ($334) {
       $$01$i67 = $331;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $335 = (($$01$i67) + -256)|0;
        $336 = ($335>>>0)>(255);
        if ($336) {
         $$01$i67 = $335;
        } else {
         break;
        }
       }
       $337 = $331 & 255;
       $$0$lcssa$i69 = $337;
      } else {
       $$0$lcssa$i69 = $331;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $338 = ($i$0$lcssa275|0)==(0);
     if (!($338)) {
      $i$1191 = 0;$ws$1192 = $1054;
      while(1) {
       $339 = HEAP32[$ws$1192>>2]|0;
       $340 = ($339|0)==(0);
       if ($340) {
        break;
       }
       $341 = (_wctomb($mb,$339)|0);
       $342 = (($341) + ($i$1191))|0;
       $343 = ($342|0)>($i$0$lcssa275|0);
       if ($343) {
        break;
       }
       $344 = (($ws$1192) + 4|0);
       (___fwritex($mb,$341,$f)|0);
       $345 = ($342>>>0)<($i$0$lcssa275>>>0);
       if ($345) {
        $i$1191 = $342;$ws$1192 = $344;
       } else {
        break;
       }
      }
     }
     $346 = ($328|0)==(8192);
     $or$cond$i72 = $346 & $330;
     if ($or$cond$i72) {
      $347 = (($w$1) - ($i$0$lcssa275))|0;
      $348 = ($347>>>0)>(256);
      $349 = $348 ? 256 : $347;
      _memset(($pad$i|0),32,($349|0))|0;
      $350 = ($347>>>0)>(255);
      if ($350) {
       $$01$i74 = $347;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $351 = (($$01$i74) + -256)|0;
        $352 = ($351>>>0)>(255);
        if ($352) {
         $$01$i74 = $351;
        } else {
         break;
        }
       }
       $353 = $347 & 255;
       $$0$lcssa$i76 = $353;
      } else {
       $$0$lcssa$i76 = $347;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $354 = $330 ? $w$1 : $i$0$lcssa275;
     $$be = $1053;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $354;$l10n$0$be = $l10n$3;
     break;
    }
    $932 = $z$2;
    $933 = $a$2;
    $934 = (($932) - ($933))|0;
    $935 = ($p$5|0)<($934|0);
    $$p$5 = $935 ? $934 : $p$5;
    $936 = (($pl$2) + ($$p$5))|0;
    $937 = ($w$1|0)<($936|0);
    $w$2 = $937 ? $936 : $w$1;
    $938 = $fl$6 & 73728;
    $939 = ($938|0)==(0);
    $940 = ($w$2|0)>($936|0);
    $or$cond$i82 = $939 & $940;
    if ($or$cond$i82) {
     $941 = (($w$2) - ($936))|0;
     $942 = ($941>>>0)>(256);
     $943 = $942 ? 256 : $941;
     _memset(($pad$i|0),32,($943|0))|0;
     $944 = ($941>>>0)>(255);
     if ($944) {
      $$01$i84 = $941;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $945 = (($$01$i84) + -256)|0;
       $946 = ($945>>>0)>(255);
       if ($946) {
        $$01$i84 = $945;
       } else {
        break;
       }
      }
      $947 = $941 & 255;
      $$0$lcssa$i86 = $947;
     } else {
      $$0$lcssa$i86 = $941;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $948 = ($938|0)==(65536);
    $or$cond$i58 = $948 & $940;
    if ($or$cond$i58) {
     $949 = (($w$2) - ($936))|0;
     $950 = ($949>>>0)>(256);
     $951 = $950 ? 256 : $949;
     _memset(($pad$i|0),48,($951|0))|0;
     $952 = ($949>>>0)>(255);
     if ($952) {
      $$01$i60 = $949;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $953 = (($$01$i60) + -256)|0;
       $954 = ($953>>>0)>(255);
       if ($954) {
        $$01$i60 = $953;
       } else {
        break;
       }
      }
      $955 = $949 & 255;
      $$0$lcssa$i62 = $955;
     } else {
      $$0$lcssa$i62 = $949;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $956 = ($$p$5|0)>($934|0);
    if ($956) {
     $957 = (($$p$5) - ($934))|0;
     $958 = ($957>>>0)>(256);
     $959 = $958 ? 256 : $957;
     _memset(($pad$i|0),48,($959|0))|0;
     $960 = ($957>>>0)>(255);
     if ($960) {
      $$01$i45 = $957;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $961 = (($$01$i45) + -256)|0;
       $962 = ($961>>>0)>(255);
       if ($962) {
        $$01$i45 = $961;
       } else {
        break;
       }
      }
      $963 = $957 & 255;
      $$0$lcssa$i47 = $963;
     } else {
      $$0$lcssa$i47 = $957;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$934,$f)|0);
    $964 = ($938|0)==(8192);
    $or$cond$i = $964 & $940;
    if ($or$cond$i) {
     $965 = (($w$2) - ($936))|0;
     $966 = ($965>>>0)>(256);
     $967 = $966 ? 256 : $965;
     _memset(($pad$i|0),32,($967|0))|0;
     $968 = ($965>>>0)>(255);
     if ($968) {
      $$01$i = $965;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $969 = (($$01$i) + -256)|0;
       $970 = ($969>>>0)>(255);
       if ($970) {
        $$01$i = $969;
       } else {
        break;
       }
      }
      $971 = $965 & 255;
      $$0$lcssa$i = $971;
     } else {
      $$0$lcssa$i = $965;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
     $$be = $1047;$$be288 = $1048;$fmt90$be = $$lcssa298;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    } else {
     $$be = $1047;$$be288 = $1048;$fmt90$be = $$lcssa298;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    }
   } else {
    $$be = $1039;$$be288 = $1040;$fmt90$be = $fmt88$lcssa;$l$0$be = $34;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1039 = $$be;$1040 = $$be288;$cnt$0 = $cnt$1;$fmt90 = $fmt90$be;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 426) {
  $972 = ($f|0)==(0|0);
  if (!($972)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $973 = ($l10n$0$lcssa|0)==(0);
  if ($973) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2166 = 1;
  while(1) {
   $974 = (($nl_type) + ($i$2166<<2)|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = ($975|0)==(0);
   if ($976) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $977 = (($nl_arg) + ($i$2166<<3)|0);
   $978 = ($975>>>0)>(20);
   L610: do {
    if (!($978)) {
     do {
      switch ($975|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $979 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$977>>2] = $979;
       break L610;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $980 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $981 = ($980|0)<(0);
       $982 = $981 << 31 >> 31;
       $983 = $977;
       $984 = $983;
       HEAP32[$984>>2] = $980;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = $982;
       break L610;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $987 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $988 = $977;
       $989 = $988;
       HEAP32[$989>>2] = $987;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = 0;
       break L610;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1017 = $1016&255;
       $1018 = $1017 << 24 >> 24;
       $1019 = ($1018|0)<(0);
       $1020 = $1019 << 31 >> 31;
       $1021 = $977;
       $1022 = $1021;
       HEAP32[$1022>>2] = $1018;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = $1020;
       break L610;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1030 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$977>>3] = $1030;
       break L610;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $992 = $arglist_current44;
       $993 = $992;
       $994 = HEAP32[$993>>2]|0;
       $995 = (($992) + 4)|0;
       $996 = $995;
       $997 = HEAP32[$996>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $998 = $977;
       $999 = $998;
       HEAP32[$999>>2] = $994;
       $1000 = (($998) + 4)|0;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       break L610;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1031 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$977>>3] = $1031;
       break L610;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1002 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1003 = $1002&65535;
       $1004 = $1003 << 16 >> 16;
       $1005 = ($1004|0)<(0);
       $1006 = $1005 << 31 >> 31;
       $1007 = $977;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1004;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L610;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1011 & 65535;
       $1012 = $977;
       $1013 = $1012;
       HEAP32[$1013>>2] = $$mask1$i;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = 0;
       break L610;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1025 & 255;
       $1026 = $977;
       $1027 = $1026;
       HEAP32[$1027>>2] = $$mask$i;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = 0;
       break L610;
       break;
      }
      default: {
       break L610;
      }
      }
     } while(0);
    }
   } while(0);
   $1032 = (($i$2166) + 1)|0;
   $1033 = ($1032|0)<(10);
   if ($1033) {
    $i$2166 = $1032;
   } else {
    label = 447;
    break;
   }
  }
  if ((label|0) == 447) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3164 = $i$2166$lcssa;
  while(1) {
   $1036 = (($nl_type) + ($i$3164<<2)|0);
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = ($1037|0)==(0);
   $1034 = (($i$3164) + 1)|0;
   if (!($1038)) {
    $$0$ph = -1;
    break;
   }
   $1035 = ($1034|0)<(10);
   if ($1035) {
    $i$3164 = $1034;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 448) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 449) {
  $$0 = $$0$ph287;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
function b4(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(4);return 0; }
function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function b6() { ; nullFunc_v(6); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0; }
function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8); }
function b9(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0; }
function b10(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0; }
function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZNK6toybox15TbFileMapperStd8IsEnableEy,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN6toybox9TbFileStd4SeekEl12TbIOSeekType,b0,b0,b0,__ZN6toybox9TbFileStd13WriteSyncImplEPKvm,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,b0,b0,b0,_getF,_getS,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_dofilecont,b0,b0,_generic_reader,_finishpcall,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,__ZN6toybox17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEED2Ev,__ZN6toybox17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEED0Ev,__ZN6toybox14TbSingletonRefINS_17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEEEED2Ev,__ZN6toybox14TbSingletonRefINS_17TbHolderSingletonINS_15TbHeapAllocatorENS_25TbAllocatorHolderIdGlobalEEEED0Ev,b2,b2,__ZN6toybox14TbSingletonRefINS_12TbStackTraceEED2Ev,__ZN6toybox14TbSingletonRefINS_12TbStackTraceEED0Ev,__ZN6toybox14TbSingletonRefINS_17TbResourceManagerEED2Ev,__ZN6toybox14TbSingletonRefINS_17TbResourceManagerEED0Ev,__ZN6toybox12TbStackTraceD0Ev,__ZN6toybox18TbScriptLuaManagerD2Ev,__ZN6toybox18TbScriptLuaManagerD0Ev,__ZN6toybox14TbSingletonRefINS_18TbScriptLuaManagerEED2Ev,__ZN6toybox14TbSingletonRefINS_18TbScriptLuaManagerEED0Ev,__ZN6toybox10TbFileImplD2Ev,__ZN6toybox10TbFileImplD0Ev,b2,b2,b2,__ZN6toybox13TbFileManagerD2Ev,__ZN6toybox13TbFileManagerD0Ev,__ZN6toybox14TbSingletonRefINS_13TbFileManagerEED2Ev,__ZN6toybox14TbSingletonRefINS_13TbFileManagerEED0Ev,__ZN6toybox17TbResourceManagerD2Ev,__ZN6toybox17TbResourceManagerD0Ev,__ZN6toybox13TbTaskManagerD2Ev,__ZN6toybox13TbTaskManagerD0Ev
,__ZN6toybox14TbSingletonRefINS_13TbTaskManagerEED2Ev,__ZN6toybox14TbSingletonRefINS_13TbTaskManagerEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN6toybox9TbFileStdD2Ev,__ZN6toybox9TbFileStdD0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,__ZN6toybox15TbHeapAllocator10DeallocateEPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_growstack,_f_call,b3,b3,b3,b3,_resume,_unroll,_f_parser,_dothecall,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_f_luaopen,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,_hookf,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN6toybox10TbFileImpl13ReadAsyncImplEPvmlPmRKNS_18TbStaticFunction32IFvvEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZN6toybox15TbFileMapperStd14CreateFileImplEPKcNS_17TbFileOperateModeENS_14TbFileSyncModeEy,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN6toybox9TbFileStd4OpenEv,__ZNK6toybox9TbFileStd11GetFileSizeEv,b5,__ZNK6toybox9TbFileStd7GetSeekEv,__ZN6toybox9TbFileStd5CloseEv,b5,b5,_io_close,_io_flush,_io_input,_io_lines,_io_open,_io_output,_io_popen,_io_read,_io_tmpfile
,_io_type,_io_write,_f_flush,_f_lines,_f_read,_f_seek,_f_setvbuf,_f_write,_f_gc,_f_tostring,_math_abs,_math_acos,_math_asin,_math_atan,_math_ceil,_math_cos,_math_deg,_math_exp,_math_toint,_math_floor,_math_fmod,_math_ult,_math_log,_math_max,_math_min,_math_modf,_math_rad,_math_random,_math_randomseed,_math_sin
,_math_sqrt,_math_tan,_math_type,_ll_loadlib,_ll_searchpath,_ll_require,_os_clock,_os_date,_os_difftime,_os_execute,_os_exit,_os_getenv,_os_remove,_os_rename,_os_setlocale,_os_time,_os_tmpname,_str_byte,_str_char,_str_dump,_str_find,_str_format,_gmatch,_str_gsub,_str_len,_str_lower,_str_match,_str_rep,_str_reverse,_str_sub
,_str_upper,_str_pack,_str_packsize,_str_unpack,_tconcat,_tinsert,_pack,_unpack,_tremove,_tmove,_sort,_byteoffset,_codepoint,_utfchar,_utflen,_iter_codes,_luaB_assert,_luaB_collectgarbage,_luaB_dofile,_luaB_error,_luaB_getmetatable,_luaB_ipairs,_luaB_loadfile,_luaB_load,_luaB_next,_luaB_pairs,_luaB_pcall,_luaB_print,_luaB_rawequal,_luaB_rawlen
,_luaB_rawget,_luaB_rawset,_luaB_select,_luaB_setmetatable,_luaB_tonumber,_luaB_tostring,_luaB_xpcall,_luaB_cocreate,_luaB_coresume,_luaB_corunning,_luaB_costatus,_luaB_cowrap,_luaB_yield,_luaB_yieldable,_db_debug,_db_getuservalue,_db_gethook,_db_getinfo,_db_getlocal,_db_getregistry,_db_getmetatable,_db_getupvalue,_db_upvaluejoin,_db_upvalueid,_db_setuservalue,_db_sethook,_db_setlocal,_db_setmetatable,_db_setupvalue,_db_traceback
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_panic,b5,b5,b5,b5,_luaopen_base,_luaopen_package,_luaopen_coroutine,_luaopen_table,_luaopen_io
,_luaopen_os,_luaopen_string,_luaopen_math,_luaopen_utf8,_luaopen_debug,_io_noclose,_io_fclose,_io_readline,_io_pclose,_gctm,_searcher_preload,_searcher_Lua,_searcher_C,_searcher_Croot,b5,b5,b5,_gmatch_aux,b5,b5,b5,b5,_iter_aux,_luaB_type,b5,_ipairsaux_raw,_ipairsaux,b5,b5,_luaB_auxwrap
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,___cxa_pure_virtual__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN12_GLOBAL__N_18mainLoopEv,__Z8mainLoopv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN6toybox10TbFileImpl14WriteAsyncImplEPKvmRKNS_18TbStaticFunction32IFvvEEE,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZN6toybox15TbFileMapperStd11GetFileSizeEPKcy,__ZN6toybox15TbFileMapperStd10ExistsFileEPKcy,__ZN6toybox15TbFileMapperStd15ExistsDirectoryEPKcy,b7,__ZN6toybox15TbFileMapperStd15CreateDirectoryEPKcy,__ZN6toybox15TbFileMapperStd15DeleteDirectoryEPKcy,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_l_alloc,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_writer,b7,_lua_geti,_lua_rawgeti,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN6toybox15TbFileMapperStd8GetFilesERNS_7TbArrayINS_7TbPathTINS_18TbStaticStringBaseIcLm512EEEEENS_22TbTemplateAllocatorStdIS5_EEEEPKcmy,__ZN6toybox15TbFileMapperStd14GetDirectoriesERNS_7TbArrayINS_7TbPathTINS_18TbStaticStringBaseIcLm512EEEEENS_22TbTemplateAllocatorStdIS5_EEEEPKcmy,__ZN6toybox15TbFileMapperStd20GetFileSystemEntriesERNS_7TbArrayINS_7TbPathTINS_18TbStaticStringBaseIcLm512EEEEENS_22TbTemplateAllocatorStdIS5_EEEEPKcmy,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,__ZN6toybox15TbHeapAllocator8AllocateEm,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_lua_newstate,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN6toybox9TbFileStd12ReadSyncImplEPvmlPm,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_lua_seti,_lua_rawseti,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];

  return { _testSetjmp: _testSetjmp, _i64Subtract: _i64Subtract, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_tb_framework_cui_cpp: __GLOBAL__sub_I_tb_framework_cui_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__sub_I_tb_framework_cui_cpp = asm["__GLOBAL__sub_I_tb_framework_cui_cpp"]; asm["__GLOBAL__sub_I_tb_framework_cui_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_tb_framework_cui_cpp.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_tb_framework_cui_cpp = Module["__GLOBAL__sub_I_tb_framework_cui_cpp"] = asm["__GLOBAL__sub_I_tb_framework_cui_cpp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



